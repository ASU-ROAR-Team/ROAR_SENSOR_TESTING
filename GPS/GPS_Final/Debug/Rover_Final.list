
Rover_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007348  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007408  08007408  00008408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c0  080076c0  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080076c0  080076c0  0000907c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080076c0  080076c0  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076c0  080076c0  000086c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076c4  080076c4  000086c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080076c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000080  08007744  00009080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08007744  00009750  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118a1  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc9  00000000  00000000  0001a945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0001d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b25  00000000  00000000  0001e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040a2  00000000  00000000  0001efbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001351d  00000000  00000000  0002305f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099126  00000000  00000000  0003657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf6a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003acc  00000000  00000000  000cf6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d31b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080073f0 	.word	0x080073f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080073f0 	.word	0x080073f0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_ddiv>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46de      	mov	lr, fp
 8000238:	4645      	mov	r5, r8
 800023a:	4657      	mov	r7, sl
 800023c:	464e      	mov	r6, r9
 800023e:	b5e0      	push	{r5, r6, r7, lr}
 8000240:	b087      	sub	sp, #28
 8000242:	9200      	str	r2, [sp, #0]
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	030b      	lsls	r3, r1, #12
 8000248:	0b1b      	lsrs	r3, r3, #12
 800024a:	469b      	mov	fp, r3
 800024c:	0fca      	lsrs	r2, r1, #31
 800024e:	004b      	lsls	r3, r1, #1
 8000250:	0004      	movs	r4, r0
 8000252:	4680      	mov	r8, r0
 8000254:	0d5b      	lsrs	r3, r3, #21
 8000256:	9202      	str	r2, [sp, #8]
 8000258:	d100      	bne.n	800025c <__aeabi_ddiv+0x28>
 800025a:	e098      	b.n	800038e <__aeabi_ddiv+0x15a>
 800025c:	4a7c      	ldr	r2, [pc, #496]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d037      	beq.n	80002d2 <__aeabi_ddiv+0x9e>
 8000262:	4659      	mov	r1, fp
 8000264:	0f42      	lsrs	r2, r0, #29
 8000266:	00c9      	lsls	r1, r1, #3
 8000268:	430a      	orrs	r2, r1
 800026a:	2180      	movs	r1, #128	@ 0x80
 800026c:	0409      	lsls	r1, r1, #16
 800026e:	4311      	orrs	r1, r2
 8000270:	00c2      	lsls	r2, r0, #3
 8000272:	4690      	mov	r8, r2
 8000274:	4a77      	ldr	r2, [pc, #476]	@ (8000454 <__aeabi_ddiv+0x220>)
 8000276:	4689      	mov	r9, r1
 8000278:	4692      	mov	sl, r2
 800027a:	449a      	add	sl, r3
 800027c:	2300      	movs	r3, #0
 800027e:	2400      	movs	r4, #0
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	9e00      	ldr	r6, [sp, #0]
 8000284:	9f01      	ldr	r7, [sp, #4]
 8000286:	033b      	lsls	r3, r7, #12
 8000288:	0b1b      	lsrs	r3, r3, #12
 800028a:	469b      	mov	fp, r3
 800028c:	007b      	lsls	r3, r7, #1
 800028e:	0030      	movs	r0, r6
 8000290:	0d5b      	lsrs	r3, r3, #21
 8000292:	0ffd      	lsrs	r5, r7, #31
 8000294:	2b00      	cmp	r3, #0
 8000296:	d059      	beq.n	800034c <__aeabi_ddiv+0x118>
 8000298:	4a6d      	ldr	r2, [pc, #436]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d048      	beq.n	8000330 <__aeabi_ddiv+0xfc>
 800029e:	4659      	mov	r1, fp
 80002a0:	0f72      	lsrs	r2, r6, #29
 80002a2:	00c9      	lsls	r1, r1, #3
 80002a4:	430a      	orrs	r2, r1
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0409      	lsls	r1, r1, #16
 80002aa:	4311      	orrs	r1, r2
 80002ac:	468b      	mov	fp, r1
 80002ae:	4969      	ldr	r1, [pc, #420]	@ (8000454 <__aeabi_ddiv+0x220>)
 80002b0:	00f2      	lsls	r2, r6, #3
 80002b2:	468c      	mov	ip, r1
 80002b4:	4651      	mov	r1, sl
 80002b6:	4463      	add	r3, ip
 80002b8:	1acb      	subs	r3, r1, r3
 80002ba:	469a      	mov	sl, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	9e02      	ldr	r6, [sp, #8]
 80002c0:	406e      	eors	r6, r5
 80002c2:	b2f6      	uxtb	r6, r6
 80002c4:	2c0f      	cmp	r4, #15
 80002c6:	d900      	bls.n	80002ca <__aeabi_ddiv+0x96>
 80002c8:	e0ce      	b.n	8000468 <__aeabi_ddiv+0x234>
 80002ca:	4b63      	ldr	r3, [pc, #396]	@ (8000458 <__aeabi_ddiv+0x224>)
 80002cc:	00a4      	lsls	r4, r4, #2
 80002ce:	591b      	ldr	r3, [r3, r4]
 80002d0:	469f      	mov	pc, r3
 80002d2:	465a      	mov	r2, fp
 80002d4:	4302      	orrs	r2, r0
 80002d6:	4691      	mov	r9, r2
 80002d8:	d000      	beq.n	80002dc <__aeabi_ddiv+0xa8>
 80002da:	e090      	b.n	80003fe <__aeabi_ddiv+0x1ca>
 80002dc:	469a      	mov	sl, r3
 80002de:	2302      	movs	r3, #2
 80002e0:	4690      	mov	r8, r2
 80002e2:	2408      	movs	r4, #8
 80002e4:	9303      	str	r3, [sp, #12]
 80002e6:	e7cc      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80002e8:	46cb      	mov	fp, r9
 80002ea:	4642      	mov	r2, r8
 80002ec:	9d02      	ldr	r5, [sp, #8]
 80002ee:	9903      	ldr	r1, [sp, #12]
 80002f0:	2902      	cmp	r1, #2
 80002f2:	d100      	bne.n	80002f6 <__aeabi_ddiv+0xc2>
 80002f4:	e1de      	b.n	80006b4 <__aeabi_ddiv+0x480>
 80002f6:	2903      	cmp	r1, #3
 80002f8:	d100      	bne.n	80002fc <__aeabi_ddiv+0xc8>
 80002fa:	e08d      	b.n	8000418 <__aeabi_ddiv+0x1e4>
 80002fc:	2901      	cmp	r1, #1
 80002fe:	d000      	beq.n	8000302 <__aeabi_ddiv+0xce>
 8000300:	e179      	b.n	80005f6 <__aeabi_ddiv+0x3c2>
 8000302:	002e      	movs	r6, r5
 8000304:	2200      	movs	r2, #0
 8000306:	2300      	movs	r3, #0
 8000308:	2400      	movs	r4, #0
 800030a:	4690      	mov	r8, r2
 800030c:	051b      	lsls	r3, r3, #20
 800030e:	4323      	orrs	r3, r4
 8000310:	07f6      	lsls	r6, r6, #31
 8000312:	4333      	orrs	r3, r6
 8000314:	4640      	mov	r0, r8
 8000316:	0019      	movs	r1, r3
 8000318:	b007      	add	sp, #28
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2200      	movs	r2, #0
 8000328:	2400      	movs	r4, #0
 800032a:	4690      	mov	r8, r2
 800032c:	4b48      	ldr	r3, [pc, #288]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800032e:	e7ed      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000330:	465a      	mov	r2, fp
 8000332:	9b00      	ldr	r3, [sp, #0]
 8000334:	431a      	orrs	r2, r3
 8000336:	4b49      	ldr	r3, [pc, #292]	@ (800045c <__aeabi_ddiv+0x228>)
 8000338:	469c      	mov	ip, r3
 800033a:	44e2      	add	sl, ip
 800033c:	2a00      	cmp	r2, #0
 800033e:	d159      	bne.n	80003f4 <__aeabi_ddiv+0x1c0>
 8000340:	2302      	movs	r3, #2
 8000342:	431c      	orrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	2102      	movs	r1, #2
 8000348:	469b      	mov	fp, r3
 800034a:	e7b8      	b.n	80002be <__aeabi_ddiv+0x8a>
 800034c:	465a      	mov	r2, fp
 800034e:	9b00      	ldr	r3, [sp, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	d049      	beq.n	80003e8 <__aeabi_ddiv+0x1b4>
 8000354:	465b      	mov	r3, fp
 8000356:	2b00      	cmp	r3, #0
 8000358:	d100      	bne.n	800035c <__aeabi_ddiv+0x128>
 800035a:	e19c      	b.n	8000696 <__aeabi_ddiv+0x462>
 800035c:	4658      	mov	r0, fp
 800035e:	f000 fad3 	bl	8000908 <__clzsi2>
 8000362:	0002      	movs	r2, r0
 8000364:	0003      	movs	r3, r0
 8000366:	3a0b      	subs	r2, #11
 8000368:	271d      	movs	r7, #29
 800036a:	9e00      	ldr	r6, [sp, #0]
 800036c:	1aba      	subs	r2, r7, r2
 800036e:	0019      	movs	r1, r3
 8000370:	4658      	mov	r0, fp
 8000372:	40d6      	lsrs	r6, r2
 8000374:	3908      	subs	r1, #8
 8000376:	4088      	lsls	r0, r1
 8000378:	0032      	movs	r2, r6
 800037a:	4302      	orrs	r2, r0
 800037c:	4693      	mov	fp, r2
 800037e:	9a00      	ldr	r2, [sp, #0]
 8000380:	408a      	lsls	r2, r1
 8000382:	4937      	ldr	r1, [pc, #220]	@ (8000460 <__aeabi_ddiv+0x22c>)
 8000384:	4453      	add	r3, sl
 8000386:	468a      	mov	sl, r1
 8000388:	2100      	movs	r1, #0
 800038a:	449a      	add	sl, r3
 800038c:	e797      	b.n	80002be <__aeabi_ddiv+0x8a>
 800038e:	465b      	mov	r3, fp
 8000390:	4303      	orrs	r3, r0
 8000392:	4699      	mov	r9, r3
 8000394:	d021      	beq.n	80003da <__aeabi_ddiv+0x1a6>
 8000396:	465b      	mov	r3, fp
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_ddiv+0x16a>
 800039c:	e169      	b.n	8000672 <__aeabi_ddiv+0x43e>
 800039e:	4658      	mov	r0, fp
 80003a0:	f000 fab2 	bl	8000908 <__clzsi2>
 80003a4:	230b      	movs	r3, #11
 80003a6:	425b      	negs	r3, r3
 80003a8:	469c      	mov	ip, r3
 80003aa:	0002      	movs	r2, r0
 80003ac:	4484      	add	ip, r0
 80003ae:	4666      	mov	r6, ip
 80003b0:	231d      	movs	r3, #29
 80003b2:	1b9b      	subs	r3, r3, r6
 80003b4:	0026      	movs	r6, r4
 80003b6:	0011      	movs	r1, r2
 80003b8:	4658      	mov	r0, fp
 80003ba:	40de      	lsrs	r6, r3
 80003bc:	3908      	subs	r1, #8
 80003be:	4088      	lsls	r0, r1
 80003c0:	0033      	movs	r3, r6
 80003c2:	4303      	orrs	r3, r0
 80003c4:	4699      	mov	r9, r3
 80003c6:	0023      	movs	r3, r4
 80003c8:	408b      	lsls	r3, r1
 80003ca:	4698      	mov	r8, r3
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <__aeabi_ddiv+0x230>)
 80003ce:	2400      	movs	r4, #0
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	469a      	mov	sl, r3
 80003d4:	2300      	movs	r3, #0
 80003d6:	9303      	str	r3, [sp, #12]
 80003d8:	e753      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80003da:	2300      	movs	r3, #0
 80003dc:	4698      	mov	r8, r3
 80003de:	469a      	mov	sl, r3
 80003e0:	3301      	adds	r3, #1
 80003e2:	2404      	movs	r4, #4
 80003e4:	9303      	str	r3, [sp, #12]
 80003e6:	e74c      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80003e8:	2301      	movs	r3, #1
 80003ea:	431c      	orrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	469b      	mov	fp, r3
 80003f2:	e764      	b.n	80002be <__aeabi_ddiv+0x8a>
 80003f4:	2303      	movs	r3, #3
 80003f6:	0032      	movs	r2, r6
 80003f8:	2103      	movs	r1, #3
 80003fa:	431c      	orrs	r4, r3
 80003fc:	e75f      	b.n	80002be <__aeabi_ddiv+0x8a>
 80003fe:	469a      	mov	sl, r3
 8000400:	2303      	movs	r3, #3
 8000402:	46d9      	mov	r9, fp
 8000404:	240c      	movs	r4, #12
 8000406:	9303      	str	r3, [sp, #12]
 8000408:	e73b      	b.n	8000282 <__aeabi_ddiv+0x4e>
 800040a:	2300      	movs	r3, #0
 800040c:	2480      	movs	r4, #128	@ 0x80
 800040e:	4698      	mov	r8, r3
 8000410:	2600      	movs	r6, #0
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <__aeabi_ddiv+0x21c>)
 8000414:	0324      	lsls	r4, r4, #12
 8000416:	e779      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000418:	2480      	movs	r4, #128	@ 0x80
 800041a:	465b      	mov	r3, fp
 800041c:	0324      	lsls	r4, r4, #12
 800041e:	431c      	orrs	r4, r3
 8000420:	0324      	lsls	r4, r4, #12
 8000422:	002e      	movs	r6, r5
 8000424:	4690      	mov	r8, r2
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <__aeabi_ddiv+0x21c>)
 8000428:	0b24      	lsrs	r4, r4, #12
 800042a:	e76f      	b.n	800030c <__aeabi_ddiv+0xd8>
 800042c:	2480      	movs	r4, #128	@ 0x80
 800042e:	464b      	mov	r3, r9
 8000430:	0324      	lsls	r4, r4, #12
 8000432:	4223      	tst	r3, r4
 8000434:	d002      	beq.n	800043c <__aeabi_ddiv+0x208>
 8000436:	465b      	mov	r3, fp
 8000438:	4223      	tst	r3, r4
 800043a:	d0f0      	beq.n	800041e <__aeabi_ddiv+0x1ea>
 800043c:	2480      	movs	r4, #128	@ 0x80
 800043e:	464b      	mov	r3, r9
 8000440:	0324      	lsls	r4, r4, #12
 8000442:	431c      	orrs	r4, r3
 8000444:	0324      	lsls	r4, r4, #12
 8000446:	9e02      	ldr	r6, [sp, #8]
 8000448:	4b01      	ldr	r3, [pc, #4]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800044a:	0b24      	lsrs	r4, r4, #12
 800044c:	e75e      	b.n	800030c <__aeabi_ddiv+0xd8>
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	000007ff 	.word	0x000007ff
 8000454:	fffffc01 	.word	0xfffffc01
 8000458:	08007614 	.word	0x08007614
 800045c:	fffff801 	.word	0xfffff801
 8000460:	000003f3 	.word	0x000003f3
 8000464:	fffffc0d 	.word	0xfffffc0d
 8000468:	45cb      	cmp	fp, r9
 800046a:	d200      	bcs.n	800046e <__aeabi_ddiv+0x23a>
 800046c:	e0f8      	b.n	8000660 <__aeabi_ddiv+0x42c>
 800046e:	d100      	bne.n	8000472 <__aeabi_ddiv+0x23e>
 8000470:	e0f3      	b.n	800065a <__aeabi_ddiv+0x426>
 8000472:	2301      	movs	r3, #1
 8000474:	425b      	negs	r3, r3
 8000476:	469c      	mov	ip, r3
 8000478:	4644      	mov	r4, r8
 800047a:	4648      	mov	r0, r9
 800047c:	2500      	movs	r5, #0
 800047e:	44e2      	add	sl, ip
 8000480:	465b      	mov	r3, fp
 8000482:	0e17      	lsrs	r7, r2, #24
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	431f      	orrs	r7, r3
 8000488:	0c19      	lsrs	r1, r3, #16
 800048a:	043b      	lsls	r3, r7, #16
 800048c:	0212      	lsls	r2, r2, #8
 800048e:	9700      	str	r7, [sp, #0]
 8000490:	0c1f      	lsrs	r7, r3, #16
 8000492:	4691      	mov	r9, r2
 8000494:	9102      	str	r1, [sp, #8]
 8000496:	9703      	str	r7, [sp, #12]
 8000498:	f7ff fec6 	bl	8000228 <__aeabi_uidivmod>
 800049c:	0002      	movs	r2, r0
 800049e:	437a      	muls	r2, r7
 80004a0:	040b      	lsls	r3, r1, #16
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	4680      	mov	r8, r0
 80004a6:	4319      	orrs	r1, r3
 80004a8:	428a      	cmp	r2, r1
 80004aa:	d909      	bls.n	80004c0 <__aeabi_ddiv+0x28c>
 80004ac:	9f00      	ldr	r7, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	46bc      	mov	ip, r7
 80004b2:	425b      	negs	r3, r3
 80004b4:	4461      	add	r1, ip
 80004b6:	469c      	mov	ip, r3
 80004b8:	44e0      	add	r8, ip
 80004ba:	428f      	cmp	r7, r1
 80004bc:	d800      	bhi.n	80004c0 <__aeabi_ddiv+0x28c>
 80004be:	e15c      	b.n	800077a <__aeabi_ddiv+0x546>
 80004c0:	1a88      	subs	r0, r1, r2
 80004c2:	9902      	ldr	r1, [sp, #8]
 80004c4:	f7ff feb0 	bl	8000228 <__aeabi_uidivmod>
 80004c8:	9a03      	ldr	r2, [sp, #12]
 80004ca:	0424      	lsls	r4, r4, #16
 80004cc:	4342      	muls	r2, r0
 80004ce:	0409      	lsls	r1, r1, #16
 80004d0:	0c24      	lsrs	r4, r4, #16
 80004d2:	0003      	movs	r3, r0
 80004d4:	430c      	orrs	r4, r1
 80004d6:	42a2      	cmp	r2, r4
 80004d8:	d906      	bls.n	80004e8 <__aeabi_ddiv+0x2b4>
 80004da:	9900      	ldr	r1, [sp, #0]
 80004dc:	3b01      	subs	r3, #1
 80004de:	468c      	mov	ip, r1
 80004e0:	4464      	add	r4, ip
 80004e2:	42a1      	cmp	r1, r4
 80004e4:	d800      	bhi.n	80004e8 <__aeabi_ddiv+0x2b4>
 80004e6:	e142      	b.n	800076e <__aeabi_ddiv+0x53a>
 80004e8:	1aa0      	subs	r0, r4, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	0412      	lsls	r2, r2, #16
 80004ee:	431a      	orrs	r2, r3
 80004f0:	4693      	mov	fp, r2
 80004f2:	464b      	mov	r3, r9
 80004f4:	4659      	mov	r1, fp
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001f      	movs	r7, r3
 80004fa:	9304      	str	r3, [sp, #16]
 80004fc:	040b      	lsls	r3, r1, #16
 80004fe:	4649      	mov	r1, r9
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	0c09      	lsrs	r1, r1, #16
 8000504:	000c      	movs	r4, r1
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	435c      	muls	r4, r3
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	437b      	muls	r3, r7
 800050e:	4688      	mov	r8, r1
 8000510:	4351      	muls	r1, r2
 8000512:	437a      	muls	r2, r7
 8000514:	0c27      	lsrs	r7, r4, #16
 8000516:	46bc      	mov	ip, r7
 8000518:	185b      	adds	r3, r3, r1
 800051a:	4463      	add	r3, ip
 800051c:	4299      	cmp	r1, r3
 800051e:	d903      	bls.n	8000528 <__aeabi_ddiv+0x2f4>
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	0249      	lsls	r1, r1, #9
 8000524:	468c      	mov	ip, r1
 8000526:	4462      	add	r2, ip
 8000528:	0c19      	lsrs	r1, r3, #16
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	041b      	lsls	r3, r3, #16
 800052e:	0c24      	lsrs	r4, r4, #16
 8000530:	188a      	adds	r2, r1, r2
 8000532:	191c      	adds	r4, r3, r4
 8000534:	4290      	cmp	r0, r2
 8000536:	d302      	bcc.n	800053e <__aeabi_ddiv+0x30a>
 8000538:	d116      	bne.n	8000568 <__aeabi_ddiv+0x334>
 800053a:	42a5      	cmp	r5, r4
 800053c:	d214      	bcs.n	8000568 <__aeabi_ddiv+0x334>
 800053e:	465b      	mov	r3, fp
 8000540:	9f00      	ldr	r7, [sp, #0]
 8000542:	3b01      	subs	r3, #1
 8000544:	444d      	add	r5, r9
 8000546:	9305      	str	r3, [sp, #20]
 8000548:	454d      	cmp	r5, r9
 800054a:	419b      	sbcs	r3, r3
 800054c:	46bc      	mov	ip, r7
 800054e:	425b      	negs	r3, r3
 8000550:	4463      	add	r3, ip
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	4287      	cmp	r7, r0
 8000556:	d300      	bcc.n	800055a <__aeabi_ddiv+0x326>
 8000558:	e102      	b.n	8000760 <__aeabi_ddiv+0x52c>
 800055a:	4282      	cmp	r2, r0
 800055c:	d900      	bls.n	8000560 <__aeabi_ddiv+0x32c>
 800055e:	e129      	b.n	80007b4 <__aeabi_ddiv+0x580>
 8000560:	d100      	bne.n	8000564 <__aeabi_ddiv+0x330>
 8000562:	e124      	b.n	80007ae <__aeabi_ddiv+0x57a>
 8000564:	9b05      	ldr	r3, [sp, #20]
 8000566:	469b      	mov	fp, r3
 8000568:	1b2c      	subs	r4, r5, r4
 800056a:	42a5      	cmp	r5, r4
 800056c:	41ad      	sbcs	r5, r5
 800056e:	9b00      	ldr	r3, [sp, #0]
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	426d      	negs	r5, r5
 8000574:	1b40      	subs	r0, r0, r5
 8000576:	4283      	cmp	r3, r0
 8000578:	d100      	bne.n	800057c <__aeabi_ddiv+0x348>
 800057a:	e10f      	b.n	800079c <__aeabi_ddiv+0x568>
 800057c:	9902      	ldr	r1, [sp, #8]
 800057e:	f7ff fe53 	bl	8000228 <__aeabi_uidivmod>
 8000582:	9a03      	ldr	r2, [sp, #12]
 8000584:	040b      	lsls	r3, r1, #16
 8000586:	4342      	muls	r2, r0
 8000588:	0c21      	lsrs	r1, r4, #16
 800058a:	0005      	movs	r5, r0
 800058c:	4319      	orrs	r1, r3
 800058e:	428a      	cmp	r2, r1
 8000590:	d900      	bls.n	8000594 <__aeabi_ddiv+0x360>
 8000592:	e0cb      	b.n	800072c <__aeabi_ddiv+0x4f8>
 8000594:	1a88      	subs	r0, r1, r2
 8000596:	9902      	ldr	r1, [sp, #8]
 8000598:	f7ff fe46 	bl	8000228 <__aeabi_uidivmod>
 800059c:	9a03      	ldr	r2, [sp, #12]
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	4342      	muls	r2, r0
 80005a2:	0409      	lsls	r1, r1, #16
 80005a4:	0c24      	lsrs	r4, r4, #16
 80005a6:	0003      	movs	r3, r0
 80005a8:	430c      	orrs	r4, r1
 80005aa:	42a2      	cmp	r2, r4
 80005ac:	d900      	bls.n	80005b0 <__aeabi_ddiv+0x37c>
 80005ae:	e0ca      	b.n	8000746 <__aeabi_ddiv+0x512>
 80005b0:	4641      	mov	r1, r8
 80005b2:	1aa4      	subs	r4, r4, r2
 80005b4:	042a      	lsls	r2, r5, #16
 80005b6:	431a      	orrs	r2, r3
 80005b8:	9f04      	ldr	r7, [sp, #16]
 80005ba:	0413      	lsls	r3, r2, #16
 80005bc:	0c1b      	lsrs	r3, r3, #16
 80005be:	4359      	muls	r1, r3
 80005c0:	4640      	mov	r0, r8
 80005c2:	437b      	muls	r3, r7
 80005c4:	469c      	mov	ip, r3
 80005c6:	0c15      	lsrs	r5, r2, #16
 80005c8:	4368      	muls	r0, r5
 80005ca:	0c0b      	lsrs	r3, r1, #16
 80005cc:	4484      	add	ip, r0
 80005ce:	4463      	add	r3, ip
 80005d0:	437d      	muls	r5, r7
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d903      	bls.n	80005de <__aeabi_ddiv+0x3aa>
 80005d6:	2080      	movs	r0, #128	@ 0x80
 80005d8:	0240      	lsls	r0, r0, #9
 80005da:	4684      	mov	ip, r0
 80005dc:	4465      	add	r5, ip
 80005de:	0c18      	lsrs	r0, r3, #16
 80005e0:	0409      	lsls	r1, r1, #16
 80005e2:	041b      	lsls	r3, r3, #16
 80005e4:	0c09      	lsrs	r1, r1, #16
 80005e6:	1940      	adds	r0, r0, r5
 80005e8:	185b      	adds	r3, r3, r1
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d327      	bcc.n	800063e <__aeabi_ddiv+0x40a>
 80005ee:	d023      	beq.n	8000638 <__aeabi_ddiv+0x404>
 80005f0:	2301      	movs	r3, #1
 80005f2:	0035      	movs	r5, r6
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4b94      	ldr	r3, [pc, #592]	@ (8000848 <__aeabi_ddiv+0x614>)
 80005f8:	4453      	add	r3, sl
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	dd60      	ble.n	80006c0 <__aeabi_ddiv+0x48c>
 80005fe:	0751      	lsls	r1, r2, #29
 8000600:	d000      	beq.n	8000604 <__aeabi_ddiv+0x3d0>
 8000602:	e086      	b.n	8000712 <__aeabi_ddiv+0x4de>
 8000604:	002e      	movs	r6, r5
 8000606:	08d1      	lsrs	r1, r2, #3
 8000608:	465a      	mov	r2, fp
 800060a:	01d2      	lsls	r2, r2, #7
 800060c:	d506      	bpl.n	800061c <__aeabi_ddiv+0x3e8>
 800060e:	465a      	mov	r2, fp
 8000610:	4b8e      	ldr	r3, [pc, #568]	@ (800084c <__aeabi_ddiv+0x618>)
 8000612:	401a      	ands	r2, r3
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	4693      	mov	fp, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4453      	add	r3, sl
 800061c:	4a8c      	ldr	r2, [pc, #560]	@ (8000850 <__aeabi_ddiv+0x61c>)
 800061e:	4293      	cmp	r3, r2
 8000620:	dd00      	ble.n	8000624 <__aeabi_ddiv+0x3f0>
 8000622:	e680      	b.n	8000326 <__aeabi_ddiv+0xf2>
 8000624:	465a      	mov	r2, fp
 8000626:	0752      	lsls	r2, r2, #29
 8000628:	430a      	orrs	r2, r1
 800062a:	4690      	mov	r8, r2
 800062c:	465a      	mov	r2, fp
 800062e:	055b      	lsls	r3, r3, #21
 8000630:	0254      	lsls	r4, r2, #9
 8000632:	0b24      	lsrs	r4, r4, #12
 8000634:	0d5b      	lsrs	r3, r3, #21
 8000636:	e669      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000638:	0035      	movs	r5, r6
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_ddiv+0x3c2>
 800063e:	9d00      	ldr	r5, [sp, #0]
 8000640:	1e51      	subs	r1, r2, #1
 8000642:	46ac      	mov	ip, r5
 8000644:	4464      	add	r4, ip
 8000646:	42ac      	cmp	r4, r5
 8000648:	d200      	bcs.n	800064c <__aeabi_ddiv+0x418>
 800064a:	e09e      	b.n	800078a <__aeabi_ddiv+0x556>
 800064c:	4284      	cmp	r4, r0
 800064e:	d200      	bcs.n	8000652 <__aeabi_ddiv+0x41e>
 8000650:	e0e1      	b.n	8000816 <__aeabi_ddiv+0x5e2>
 8000652:	d100      	bne.n	8000656 <__aeabi_ddiv+0x422>
 8000654:	e0ee      	b.n	8000834 <__aeabi_ddiv+0x600>
 8000656:	000a      	movs	r2, r1
 8000658:	e7ca      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 800065a:	4542      	cmp	r2, r8
 800065c:	d900      	bls.n	8000660 <__aeabi_ddiv+0x42c>
 800065e:	e708      	b.n	8000472 <__aeabi_ddiv+0x23e>
 8000660:	464b      	mov	r3, r9
 8000662:	07dc      	lsls	r4, r3, #31
 8000664:	0858      	lsrs	r0, r3, #1
 8000666:	4643      	mov	r3, r8
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	431c      	orrs	r4, r3
 800066c:	4643      	mov	r3, r8
 800066e:	07dd      	lsls	r5, r3, #31
 8000670:	e706      	b.n	8000480 <__aeabi_ddiv+0x24c>
 8000672:	f000 f949 	bl	8000908 <__clzsi2>
 8000676:	2315      	movs	r3, #21
 8000678:	469c      	mov	ip, r3
 800067a:	4484      	add	ip, r0
 800067c:	0002      	movs	r2, r0
 800067e:	4663      	mov	r3, ip
 8000680:	3220      	adds	r2, #32
 8000682:	2b1c      	cmp	r3, #28
 8000684:	dc00      	bgt.n	8000688 <__aeabi_ddiv+0x454>
 8000686:	e692      	b.n	80003ae <__aeabi_ddiv+0x17a>
 8000688:	0023      	movs	r3, r4
 800068a:	3808      	subs	r0, #8
 800068c:	4083      	lsls	r3, r0
 800068e:	4699      	mov	r9, r3
 8000690:	2300      	movs	r3, #0
 8000692:	4698      	mov	r8, r3
 8000694:	e69a      	b.n	80003cc <__aeabi_ddiv+0x198>
 8000696:	f000 f937 	bl	8000908 <__clzsi2>
 800069a:	0002      	movs	r2, r0
 800069c:	0003      	movs	r3, r0
 800069e:	3215      	adds	r2, #21
 80006a0:	3320      	adds	r3, #32
 80006a2:	2a1c      	cmp	r2, #28
 80006a4:	dc00      	bgt.n	80006a8 <__aeabi_ddiv+0x474>
 80006a6:	e65f      	b.n	8000368 <__aeabi_ddiv+0x134>
 80006a8:	9900      	ldr	r1, [sp, #0]
 80006aa:	3808      	subs	r0, #8
 80006ac:	4081      	lsls	r1, r0
 80006ae:	2200      	movs	r2, #0
 80006b0:	468b      	mov	fp, r1
 80006b2:	e666      	b.n	8000382 <__aeabi_ddiv+0x14e>
 80006b4:	2200      	movs	r2, #0
 80006b6:	002e      	movs	r6, r5
 80006b8:	2400      	movs	r4, #0
 80006ba:	4690      	mov	r8, r2
 80006bc:	4b65      	ldr	r3, [pc, #404]	@ (8000854 <__aeabi_ddiv+0x620>)
 80006be:	e625      	b.n	800030c <__aeabi_ddiv+0xd8>
 80006c0:	002e      	movs	r6, r5
 80006c2:	2101      	movs	r1, #1
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	2938      	cmp	r1, #56	@ 0x38
 80006c8:	dd00      	ble.n	80006cc <__aeabi_ddiv+0x498>
 80006ca:	e61b      	b.n	8000304 <__aeabi_ddiv+0xd0>
 80006cc:	291f      	cmp	r1, #31
 80006ce:	dc7e      	bgt.n	80007ce <__aeabi_ddiv+0x59a>
 80006d0:	4861      	ldr	r0, [pc, #388]	@ (8000858 <__aeabi_ddiv+0x624>)
 80006d2:	0014      	movs	r4, r2
 80006d4:	4450      	add	r0, sl
 80006d6:	465b      	mov	r3, fp
 80006d8:	4082      	lsls	r2, r0
 80006da:	4083      	lsls	r3, r0
 80006dc:	40cc      	lsrs	r4, r1
 80006de:	1e50      	subs	r0, r2, #1
 80006e0:	4182      	sbcs	r2, r0
 80006e2:	4323      	orrs	r3, r4
 80006e4:	431a      	orrs	r2, r3
 80006e6:	465b      	mov	r3, fp
 80006e8:	40cb      	lsrs	r3, r1
 80006ea:	0751      	lsls	r1, r2, #29
 80006ec:	d009      	beq.n	8000702 <__aeabi_ddiv+0x4ce>
 80006ee:	210f      	movs	r1, #15
 80006f0:	4011      	ands	r1, r2
 80006f2:	2904      	cmp	r1, #4
 80006f4:	d005      	beq.n	8000702 <__aeabi_ddiv+0x4ce>
 80006f6:	1d11      	adds	r1, r2, #4
 80006f8:	4291      	cmp	r1, r2
 80006fa:	4192      	sbcs	r2, r2
 80006fc:	4252      	negs	r2, r2
 80006fe:	189b      	adds	r3, r3, r2
 8000700:	000a      	movs	r2, r1
 8000702:	0219      	lsls	r1, r3, #8
 8000704:	d400      	bmi.n	8000708 <__aeabi_ddiv+0x4d4>
 8000706:	e09b      	b.n	8000840 <__aeabi_ddiv+0x60c>
 8000708:	2200      	movs	r2, #0
 800070a:	2301      	movs	r3, #1
 800070c:	2400      	movs	r4, #0
 800070e:	4690      	mov	r8, r2
 8000710:	e5fc      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000712:	210f      	movs	r1, #15
 8000714:	4011      	ands	r1, r2
 8000716:	2904      	cmp	r1, #4
 8000718:	d100      	bne.n	800071c <__aeabi_ddiv+0x4e8>
 800071a:	e773      	b.n	8000604 <__aeabi_ddiv+0x3d0>
 800071c:	1d11      	adds	r1, r2, #4
 800071e:	4291      	cmp	r1, r2
 8000720:	4192      	sbcs	r2, r2
 8000722:	4252      	negs	r2, r2
 8000724:	002e      	movs	r6, r5
 8000726:	08c9      	lsrs	r1, r1, #3
 8000728:	4493      	add	fp, r2
 800072a:	e76d      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 800072c:	9b00      	ldr	r3, [sp, #0]
 800072e:	3d01      	subs	r5, #1
 8000730:	469c      	mov	ip, r3
 8000732:	4461      	add	r1, ip
 8000734:	428b      	cmp	r3, r1
 8000736:	d900      	bls.n	800073a <__aeabi_ddiv+0x506>
 8000738:	e72c      	b.n	8000594 <__aeabi_ddiv+0x360>
 800073a:	428a      	cmp	r2, r1
 800073c:	d800      	bhi.n	8000740 <__aeabi_ddiv+0x50c>
 800073e:	e729      	b.n	8000594 <__aeabi_ddiv+0x360>
 8000740:	1e85      	subs	r5, r0, #2
 8000742:	4461      	add	r1, ip
 8000744:	e726      	b.n	8000594 <__aeabi_ddiv+0x360>
 8000746:	9900      	ldr	r1, [sp, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	468c      	mov	ip, r1
 800074c:	4464      	add	r4, ip
 800074e:	42a1      	cmp	r1, r4
 8000750:	d900      	bls.n	8000754 <__aeabi_ddiv+0x520>
 8000752:	e72d      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 8000754:	42a2      	cmp	r2, r4
 8000756:	d800      	bhi.n	800075a <__aeabi_ddiv+0x526>
 8000758:	e72a      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 800075a:	1e83      	subs	r3, r0, #2
 800075c:	4464      	add	r4, ip
 800075e:	e727      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 8000760:	4287      	cmp	r7, r0
 8000762:	d000      	beq.n	8000766 <__aeabi_ddiv+0x532>
 8000764:	e6fe      	b.n	8000564 <__aeabi_ddiv+0x330>
 8000766:	45a9      	cmp	r9, r5
 8000768:	d900      	bls.n	800076c <__aeabi_ddiv+0x538>
 800076a:	e6fb      	b.n	8000564 <__aeabi_ddiv+0x330>
 800076c:	e6f5      	b.n	800055a <__aeabi_ddiv+0x326>
 800076e:	42a2      	cmp	r2, r4
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x540>
 8000772:	e6b9      	b.n	80004e8 <__aeabi_ddiv+0x2b4>
 8000774:	1e83      	subs	r3, r0, #2
 8000776:	4464      	add	r4, ip
 8000778:	e6b6      	b.n	80004e8 <__aeabi_ddiv+0x2b4>
 800077a:	428a      	cmp	r2, r1
 800077c:	d800      	bhi.n	8000780 <__aeabi_ddiv+0x54c>
 800077e:	e69f      	b.n	80004c0 <__aeabi_ddiv+0x28c>
 8000780:	46bc      	mov	ip, r7
 8000782:	1e83      	subs	r3, r0, #2
 8000784:	4698      	mov	r8, r3
 8000786:	4461      	add	r1, ip
 8000788:	e69a      	b.n	80004c0 <__aeabi_ddiv+0x28c>
 800078a:	000a      	movs	r2, r1
 800078c:	4284      	cmp	r4, r0
 800078e:	d000      	beq.n	8000792 <__aeabi_ddiv+0x55e>
 8000790:	e72e      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 8000792:	454b      	cmp	r3, r9
 8000794:	d000      	beq.n	8000798 <__aeabi_ddiv+0x564>
 8000796:	e72b      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 8000798:	0035      	movs	r5, r6
 800079a:	e72c      	b.n	80005f6 <__aeabi_ddiv+0x3c2>
 800079c:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <__aeabi_ddiv+0x614>)
 800079e:	4a2f      	ldr	r2, [pc, #188]	@ (800085c <__aeabi_ddiv+0x628>)
 80007a0:	4453      	add	r3, sl
 80007a2:	4592      	cmp	sl, r2
 80007a4:	db43      	blt.n	800082e <__aeabi_ddiv+0x5fa>
 80007a6:	2201      	movs	r2, #1
 80007a8:	2100      	movs	r1, #0
 80007aa:	4493      	add	fp, r2
 80007ac:	e72c      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 80007ae:	42ac      	cmp	r4, r5
 80007b0:	d800      	bhi.n	80007b4 <__aeabi_ddiv+0x580>
 80007b2:	e6d7      	b.n	8000564 <__aeabi_ddiv+0x330>
 80007b4:	2302      	movs	r3, #2
 80007b6:	425b      	negs	r3, r3
 80007b8:	469c      	mov	ip, r3
 80007ba:	9900      	ldr	r1, [sp, #0]
 80007bc:	444d      	add	r5, r9
 80007be:	454d      	cmp	r5, r9
 80007c0:	419b      	sbcs	r3, r3
 80007c2:	44e3      	add	fp, ip
 80007c4:	468c      	mov	ip, r1
 80007c6:	425b      	negs	r3, r3
 80007c8:	4463      	add	r3, ip
 80007ca:	18c0      	adds	r0, r0, r3
 80007cc:	e6cc      	b.n	8000568 <__aeabi_ddiv+0x334>
 80007ce:	201f      	movs	r0, #31
 80007d0:	4240      	negs	r0, r0
 80007d2:	1ac3      	subs	r3, r0, r3
 80007d4:	4658      	mov	r0, fp
 80007d6:	40d8      	lsrs	r0, r3
 80007d8:	2920      	cmp	r1, #32
 80007da:	d004      	beq.n	80007e6 <__aeabi_ddiv+0x5b2>
 80007dc:	4659      	mov	r1, fp
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <__aeabi_ddiv+0x62c>)
 80007e0:	4453      	add	r3, sl
 80007e2:	4099      	lsls	r1, r3
 80007e4:	430a      	orrs	r2, r1
 80007e6:	1e53      	subs	r3, r2, #1
 80007e8:	419a      	sbcs	r2, r3
 80007ea:	2307      	movs	r3, #7
 80007ec:	0019      	movs	r1, r3
 80007ee:	4302      	orrs	r2, r0
 80007f0:	2400      	movs	r4, #0
 80007f2:	4011      	ands	r1, r2
 80007f4:	4213      	tst	r3, r2
 80007f6:	d009      	beq.n	800080c <__aeabi_ddiv+0x5d8>
 80007f8:	3308      	adds	r3, #8
 80007fa:	4013      	ands	r3, r2
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d01d      	beq.n	800083c <__aeabi_ddiv+0x608>
 8000800:	1d13      	adds	r3, r2, #4
 8000802:	4293      	cmp	r3, r2
 8000804:	4189      	sbcs	r1, r1
 8000806:	001a      	movs	r2, r3
 8000808:	4249      	negs	r1, r1
 800080a:	0749      	lsls	r1, r1, #29
 800080c:	08d2      	lsrs	r2, r2, #3
 800080e:	430a      	orrs	r2, r1
 8000810:	4690      	mov	r8, r2
 8000812:	2300      	movs	r3, #0
 8000814:	e57a      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000816:	4649      	mov	r1, r9
 8000818:	9f00      	ldr	r7, [sp, #0]
 800081a:	004d      	lsls	r5, r1, #1
 800081c:	454d      	cmp	r5, r9
 800081e:	4189      	sbcs	r1, r1
 8000820:	46bc      	mov	ip, r7
 8000822:	4249      	negs	r1, r1
 8000824:	4461      	add	r1, ip
 8000826:	46a9      	mov	r9, r5
 8000828:	3a02      	subs	r2, #2
 800082a:	1864      	adds	r4, r4, r1
 800082c:	e7ae      	b.n	800078c <__aeabi_ddiv+0x558>
 800082e:	2201      	movs	r2, #1
 8000830:	4252      	negs	r2, r2
 8000832:	e746      	b.n	80006c2 <__aeabi_ddiv+0x48e>
 8000834:	4599      	cmp	r9, r3
 8000836:	d3ee      	bcc.n	8000816 <__aeabi_ddiv+0x5e2>
 8000838:	000a      	movs	r2, r1
 800083a:	e7aa      	b.n	8000792 <__aeabi_ddiv+0x55e>
 800083c:	2100      	movs	r1, #0
 800083e:	e7e5      	b.n	800080c <__aeabi_ddiv+0x5d8>
 8000840:	0759      	lsls	r1, r3, #29
 8000842:	025b      	lsls	r3, r3, #9
 8000844:	0b1c      	lsrs	r4, r3, #12
 8000846:	e7e1      	b.n	800080c <__aeabi_ddiv+0x5d8>
 8000848:	000003ff 	.word	0x000003ff
 800084c:	feffffff 	.word	0xfeffffff
 8000850:	000007fe 	.word	0x000007fe
 8000854:	000007ff 	.word	0x000007ff
 8000858:	0000041e 	.word	0x0000041e
 800085c:	fffffc02 	.word	0xfffffc02
 8000860:	0000043e 	.word	0x0000043e

08000864 <__aeabi_i2d>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	2800      	cmp	r0, #0
 8000868:	d016      	beq.n	8000898 <__aeabi_i2d+0x34>
 800086a:	17c3      	asrs	r3, r0, #31
 800086c:	18c5      	adds	r5, r0, r3
 800086e:	405d      	eors	r5, r3
 8000870:	0fc4      	lsrs	r4, r0, #31
 8000872:	0028      	movs	r0, r5
 8000874:	f000 f848 	bl	8000908 <__clzsi2>
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <__aeabi_i2d+0x58>)
 800087a:	1a1b      	subs	r3, r3, r0
 800087c:	055b      	lsls	r3, r3, #21
 800087e:	0d5b      	lsrs	r3, r3, #21
 8000880:	280a      	cmp	r0, #10
 8000882:	dc14      	bgt.n	80008ae <__aeabi_i2d+0x4a>
 8000884:	0002      	movs	r2, r0
 8000886:	002e      	movs	r6, r5
 8000888:	3215      	adds	r2, #21
 800088a:	4096      	lsls	r6, r2
 800088c:	220b      	movs	r2, #11
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	40d5      	lsrs	r5, r2
 8000892:	032d      	lsls	r5, r5, #12
 8000894:	0b2d      	lsrs	r5, r5, #12
 8000896:	e003      	b.n	80008a0 <__aeabi_i2d+0x3c>
 8000898:	2400      	movs	r4, #0
 800089a:	2300      	movs	r3, #0
 800089c:	2500      	movs	r5, #0
 800089e:	2600      	movs	r6, #0
 80008a0:	051b      	lsls	r3, r3, #20
 80008a2:	432b      	orrs	r3, r5
 80008a4:	07e4      	lsls	r4, r4, #31
 80008a6:	4323      	orrs	r3, r4
 80008a8:	0030      	movs	r0, r6
 80008aa:	0019      	movs	r1, r3
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	380b      	subs	r0, #11
 80008b0:	4085      	lsls	r5, r0
 80008b2:	032d      	lsls	r5, r5, #12
 80008b4:	2600      	movs	r6, #0
 80008b6:	0b2d      	lsrs	r5, r5, #12
 80008b8:	e7f2      	b.n	80008a0 <__aeabi_i2d+0x3c>
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	0000041e 	.word	0x0000041e

080008c0 <__aeabi_ui2d>:
 80008c0:	b510      	push	{r4, lr}
 80008c2:	1e04      	subs	r4, r0, #0
 80008c4:	d010      	beq.n	80008e8 <__aeabi_ui2d+0x28>
 80008c6:	f000 f81f 	bl	8000908 <__clzsi2>
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <__aeabi_ui2d+0x44>)
 80008cc:	1a1b      	subs	r3, r3, r0
 80008ce:	055b      	lsls	r3, r3, #21
 80008d0:	0d5b      	lsrs	r3, r3, #21
 80008d2:	280a      	cmp	r0, #10
 80008d4:	dc0f      	bgt.n	80008f6 <__aeabi_ui2d+0x36>
 80008d6:	220b      	movs	r2, #11
 80008d8:	0021      	movs	r1, r4
 80008da:	1a12      	subs	r2, r2, r0
 80008dc:	40d1      	lsrs	r1, r2
 80008de:	3015      	adds	r0, #21
 80008e0:	030a      	lsls	r2, r1, #12
 80008e2:	4084      	lsls	r4, r0
 80008e4:	0b12      	lsrs	r2, r2, #12
 80008e6:	e001      	b.n	80008ec <__aeabi_ui2d+0x2c>
 80008e8:	2300      	movs	r3, #0
 80008ea:	2200      	movs	r2, #0
 80008ec:	051b      	lsls	r3, r3, #20
 80008ee:	4313      	orrs	r3, r2
 80008f0:	0020      	movs	r0, r4
 80008f2:	0019      	movs	r1, r3
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	0022      	movs	r2, r4
 80008f8:	380b      	subs	r0, #11
 80008fa:	4082      	lsls	r2, r0
 80008fc:	0312      	lsls	r2, r2, #12
 80008fe:	2400      	movs	r4, #0
 8000900:	0b12      	lsrs	r2, r2, #12
 8000902:	e7f3      	b.n	80008ec <__aeabi_ui2d+0x2c>
 8000904:	0000041e 	.word	0x0000041e

08000908 <__clzsi2>:
 8000908:	211c      	movs	r1, #28
 800090a:	2301      	movs	r3, #1
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	4298      	cmp	r0, r3
 8000910:	d301      	bcc.n	8000916 <__clzsi2+0xe>
 8000912:	0c00      	lsrs	r0, r0, #16
 8000914:	3910      	subs	r1, #16
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	4298      	cmp	r0, r3
 800091a:	d301      	bcc.n	8000920 <__clzsi2+0x18>
 800091c:	0a00      	lsrs	r0, r0, #8
 800091e:	3908      	subs	r1, #8
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	4298      	cmp	r0, r3
 8000924:	d301      	bcc.n	800092a <__clzsi2+0x22>
 8000926:	0900      	lsrs	r0, r0, #4
 8000928:	3904      	subs	r1, #4
 800092a:	a202      	add	r2, pc, #8	@ (adr r2, 8000934 <__clzsi2+0x2c>)
 800092c:	5c10      	ldrb	r0, [r2, r0]
 800092e:	1840      	adds	r0, r0, r1
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	02020304 	.word	0x02020304
 8000938:	01010101 	.word	0x01010101
	...

08000944 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <bno055_assignI2C+0x18>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	2000009c 	.word	0x2000009c

08000960 <bno055_delay>:

void bno055_delay(int time) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fb42 	bl	8001ff4 <HAL_Delay>
#endif
}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af02      	add	r7, sp, #8
 800097e:	0002      	movs	r2, r0
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	1c0a      	adds	r2, r1, #0
 8000988:	701a      	strb	r2, [r3, #0]
  uint8_t txdata[2] = {reg, data};
 800098a:	210c      	movs	r1, #12
 800098c:	187b      	adds	r3, r7, r1
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	187b      	adds	r3, r7, r1
 8000996:	1dba      	adds	r2, r7, #6
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	705a      	strb	r2, [r3, #1]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800099c:	4b6c      	ldr	r3, [pc, #432]	@ (8000b50 <bno055_writeData+0x1d8>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	2517      	movs	r5, #23
 80009a2:	197c      	adds	r4, r7, r5
 80009a4:	187a      	adds	r2, r7, r1
 80009a6:	230a      	movs	r3, #10
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2302      	movs	r3, #2
 80009ac:	2150      	movs	r1, #80	@ 0x50
 80009ae:	f002 fdf7 	bl	80035a0 <HAL_I2C_Master_Transmit>
 80009b2:	0003      	movs	r3, r0
 80009b4:	7023      	strb	r3, [r4, #0]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80009b6:	197b      	adds	r3, r7, r5
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d100      	bne.n	80009c0 <bno055_writeData+0x48>
 80009be:	e0c0      	b.n	8000b42 <bno055_writeData+0x1ca>
    return;
  }

  if (status == HAL_ERROR) {
 80009c0:	197b      	adds	r3, r7, r5
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d104      	bne.n	80009d2 <bno055_writeData+0x5a>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80009c8:	4b62      	ldr	r3, [pc, #392]	@ (8000b54 <bno055_writeData+0x1dc>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f005 fe72 	bl	80066b4 <puts>
 80009d0:	e01b      	b.n	8000a0a <bno055_writeData+0x92>
  } else if (status == HAL_TIMEOUT) {
 80009d2:	2317      	movs	r3, #23
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d104      	bne.n	80009e6 <bno055_writeData+0x6e>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80009dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000b58 <bno055_writeData+0x1e0>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f005 fe68 	bl	80066b4 <puts>
 80009e4:	e011      	b.n	8000a0a <bno055_writeData+0x92>
  } else if (status == HAL_BUSY) {
 80009e6:	2317      	movs	r3, #23
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d104      	bne.n	80009fa <bno055_writeData+0x82>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80009f0:	4b5a      	ldr	r3, [pc, #360]	@ (8000b5c <bno055_writeData+0x1e4>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f005 fe5e 	bl	80066b4 <puts>
 80009f8:	e007      	b.n	8000a0a <bno055_writeData+0x92>
  } else {
    printf("Unknown status data %d", status);
 80009fa:	2317      	movs	r3, #23
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b57      	ldr	r3, [pc, #348]	@ (8000b60 <bno055_writeData+0x1e8>)
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f005 fdef 	bl	80065e8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000a0a:	4b51      	ldr	r3, [pc, #324]	@ (8000b50 <bno055_writeData+0x1d8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f003 f804 	bl	8003a1c <HAL_I2C_GetError>
 8000a14:	0003      	movs	r3, r0
 8000a16:	613b      	str	r3, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <bno055_writeData+0xa8>
 8000a1e:	e092      	b.n	8000b46 <bno055_writeData+0x1ce>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d104      	bne.n	8000a30 <bno055_writeData+0xb8>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000a26:	4b4f      	ldr	r3, [pc, #316]	@ (8000b64 <bno055_writeData+0x1ec>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f005 fe43 	bl	80066b4 <puts>
 8000a2e:	e026      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d104      	bne.n	8000a40 <bno055_writeData+0xc8>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000a36:	4b4c      	ldr	r3, [pc, #304]	@ (8000b68 <bno055_writeData+0x1f0>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f005 fe3b 	bl	80066b4 <puts>
 8000a3e:	e01e      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d104      	bne.n	8000a50 <bno055_writeData+0xd8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000a46:	4b49      	ldr	r3, [pc, #292]	@ (8000b6c <bno055_writeData+0x1f4>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f005 fe33 	bl	80066b4 <puts>
 8000a4e:	e016      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	2b08      	cmp	r3, #8
 8000a54:	d104      	bne.n	8000a60 <bno055_writeData+0xe8>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000a56:	4b46      	ldr	r3, [pc, #280]	@ (8000b70 <bno055_writeData+0x1f8>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f005 fe2b 	bl	80066b4 <puts>
 8000a5e:	e00e      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	2b10      	cmp	r3, #16
 8000a64:	d104      	bne.n	8000a70 <bno055_writeData+0xf8>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000a66:	4b43      	ldr	r3, [pc, #268]	@ (8000b74 <bno055_writeData+0x1fc>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f005 fe23 	bl	80066b4 <puts>
 8000a6e:	e006      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	2b20      	cmp	r3, #32
 8000a74:	d103      	bne.n	8000a7e <bno055_writeData+0x106>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000a76:	4b40      	ldr	r3, [pc, #256]	@ (8000b78 <bno055_writeData+0x200>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f005 fe1b 	bl	80066b4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000a7e:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <bno055_writeData+0x1d8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	250f      	movs	r5, #15
 8000a84:	197c      	adds	r4, r7, r5
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 ffbc 	bl	8003a04 <HAL_I2C_GetState>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	7023      	strb	r3, [r4, #0]
  if (state == HAL_I2C_STATE_RESET) {
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d104      	bne.n	8000aa2 <bno055_writeData+0x12a>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000a98:	4b38      	ldr	r3, [pc, #224]	@ (8000b7c <bno055_writeData+0x204>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f005 fe0a 	bl	80066b4 <puts>
 8000aa0:	e052      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_READY) {
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b20      	cmp	r3, #32
 8000aaa:	d104      	bne.n	8000ab6 <bno055_writeData+0x13e>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000aac:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <bno055_writeData+0x204>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f005 fe00 	bl	80066b4 <puts>
 8000ab4:	e048      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b24      	cmp	r3, #36	@ 0x24
 8000abe:	d104      	bne.n	8000aca <bno055_writeData+0x152>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b80 <bno055_writeData+0x208>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f005 fdf6 	bl	80066b4 <puts>
 8000ac8:	e03e      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000aca:	230f      	movs	r3, #15
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b21      	cmp	r3, #33	@ 0x21
 8000ad2:	d104      	bne.n	8000ade <bno055_writeData+0x166>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <bno055_writeData+0x20c>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f005 fdec 	bl	80066b4 <puts>
 8000adc:	e034      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000ade:	230f      	movs	r3, #15
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b22      	cmp	r3, #34	@ 0x22
 8000ae6:	d104      	bne.n	8000af2 <bno055_writeData+0x17a>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <bno055_writeData+0x210>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f005 fde2 	bl	80066b4 <puts>
 8000af0:	e02a      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000af2:	230f      	movs	r3, #15
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b28      	cmp	r3, #40	@ 0x28
 8000afa:	d104      	bne.n	8000b06 <bno055_writeData+0x18e>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000afc:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <bno055_writeData+0x214>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f005 fdd8 	bl	80066b4 <puts>
 8000b04:	e020      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b29      	cmp	r3, #41	@ 0x29
 8000b0e:	d104      	bne.n	8000b1a <bno055_writeData+0x1a2>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <bno055_writeData+0x218>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f005 fdce 	bl	80066b4 <puts>
 8000b18:	e016      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b22:	d104      	bne.n	8000b2e <bno055_writeData+0x1b6>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000b24:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <bno055_writeData+0x21c>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f005 fdc4 	bl	80066b4 <puts>
 8000b2c:	e00c      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000b2e:	230f      	movs	r3, #15
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b60      	cmp	r3, #96	@ 0x60
 8000b36:	d107      	bne.n	8000b48 <bno055_writeData+0x1d0>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <bno055_writeData+0x220>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f005 fdba 	bl	80066b4 <puts>
 8000b40:	e002      	b.n	8000b48 <bno055_writeData+0x1d0>
    return;
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	e000      	b.n	8000b48 <bno055_writeData+0x1d0>
    return;
 8000b46:	46c0      	nop			@ (mov r8, r8)
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b006      	add	sp, #24
 8000b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	2000009c 	.word	0x2000009c
 8000b54:	08007408 	.word	0x08007408
 8000b58:	0800742c 	.word	0x0800742c
 8000b5c:	08007454 	.word	0x08007454
 8000b60:	08007478 	.word	0x08007478
 8000b64:	08007490 	.word	0x08007490
 8000b68:	080074a4 	.word	0x080074a4
 8000b6c:	080074b8 	.word	0x080074b8
 8000b70:	080074cc 	.word	0x080074cc
 8000b74:	080074e0 	.word	0x080074e0
 8000b78:	080074f4 	.word	0x080074f4
 8000b7c:	0800750c 	.word	0x0800750c
 8000b80:	08007524 	.word	0x08007524
 8000b84:	08007538 	.word	0x08007538
 8000b88:	08007550 	.word	0x08007550
 8000b8c:	08007568 	.word	0x08007568
 8000b90:	08007580 	.word	0x08007580
 8000b94:	080075a0 	.word	0x080075a0
 8000b98:	080075c0 	.word	0x080075c0

08000b9c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	6039      	str	r1, [r7, #0]
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	1c02      	adds	r2, r0, #0
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	1dbb      	adds	r3, r7, #6
 8000bae:	1c0a      	adds	r2, r1, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <bno055_readData+0x48>)
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2150      	movs	r1, #80	@ 0x50
 8000bc0:	f002 fcee 	bl	80035a0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <bno055_readData+0x48>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	1dbb      	adds	r3, r7, #6
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	2164      	movs	r1, #100	@ 0x64
 8000bd2:	9100      	str	r1, [sp, #0]
 8000bd4:	2150      	movs	r1, #80	@ 0x50
 8000bd6:	f002 fe0d 	bl	80037f4 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	2000009c 	.word	0x2000009c

08000be8 <IMU_Setup>:
#include "bno055.h"
#include "bno055_stm32.h"
//----------------------------------------------------------------------------

// ------------------------------- Functions ---------------------------
void IMU_Setup (I2C_HandleTypeDef* hi2c1){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	  // Assign the I2C handle to the bno055 driver
	  bno055_assignI2C(hi2c1);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fea6 	bl	8000944 <bno055_assignI2C>
	  // Setup the BNO055 sensor using your provided bno055.c functions
	  bno055_setup();
 8000bf8:	f000 f92a 	bl	8000e50 <bno055_setup>
	  // Set the BNO055 operation mode to NDOF (9-degrees-of-freedom).
	  bno055_setOperationModeNDOF();
 8000bfc:	f000 f8ff 	bl	8000dfe <bno055_setOperationModeNDOF>

}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <IMU_Operation>:

void IMU_Operation(IMU_INFO* imu){
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b0bb      	sub	sp, #236	@ 0xec
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

#if IMU_ReadEuler == YES
	// Read Euler angles (Yaw, Pitch, Roll)
    bno055_vector_t euler_vector = bno055_getVectorEuler();
 8000c10:	24c8      	movs	r4, #200	@ 0xc8
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 faa2 	bl	800115e <bno055_getVectorEuler>

    imu->Yaw = euler_vector.x;
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	183b      	adds	r3, r7, r0
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	600a      	str	r2, [r1, #0]
 8000c26:	604b      	str	r3, [r1, #4]
    imu->Pitch = euler_vector.y;
 8000c28:	183b      	adds	r3, r7, r0
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	608a      	str	r2, [r1, #8]
 8000c32:	60cb      	str	r3, [r1, #12]
    imu->Roll = euler_vector.z;
 8000c34:	183b      	adds	r3, r7, r0
 8000c36:	699a      	ldr	r2, [r3, #24]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	610a      	str	r2, [r1, #16]
 8000c3e:	614b      	str	r3, [r1, #20]
#endif

#if IMU_ReadAcceleration == YES
    // Read Accelerometer data (m/s^2)
    bno055_vector_t accel_vector = bno055_getVectorAccelerometer();
 8000c40:	24a8      	movs	r4, #168	@ 0xa8
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fa63 	bl	8001110 <bno055_getVectorAccelerometer>

    imu->AccX = accel_vector.x;
 8000c4a:	0020      	movs	r0, r4
 8000c4c:	183b      	adds	r3, r7, r0
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	618a      	str	r2, [r1, #24]
 8000c56:	61cb      	str	r3, [r1, #28]
    imu->AccY = accel_vector.y;
 8000c58:	183b      	adds	r3, r7, r0
 8000c5a:	691a      	ldr	r2, [r3, #16]
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	620a      	str	r2, [r1, #32]
 8000c62:	624b      	str	r3, [r1, #36]	@ 0x24
    imu->AccZ = accel_vector.z;
 8000c64:	183b      	adds	r3, r7, r0
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	628a      	str	r2, [r1, #40]	@ 0x28
 8000c6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif

#if IMU_ReadLinearAcceleration == YES
    // Read Linear Acceleration data (m/s^2, with gravity removed)
    bno055_vector_t lin_acc_vector = bno055_getVectorLinearAccel();
 8000c70:	2488      	movs	r4, #136	@ 0x88
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 fa7f 	bl	8001178 <bno055_getVectorLinearAccel>

    imu->linAccX = lin_acc_vector.x;
 8000c7a:	0020      	movs	r0, r4
 8000c7c:	183b      	adds	r3, r7, r0
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	630a      	str	r2, [r1, #48]	@ 0x30
 8000c86:	634b      	str	r3, [r1, #52]	@ 0x34
    imu->linAccY = lin_acc_vector.y;
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	638a      	str	r2, [r1, #56]	@ 0x38
 8000c92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    imu->linAccZ = lin_acc_vector.z;
 8000c94:	183b      	adds	r3, r7, r0
 8000c96:	699a      	ldr	r2, [r3, #24]
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	640a      	str	r2, [r1, #64]	@ 0x40
 8000c9e:	644b      	str	r3, [r1, #68]	@ 0x44
#endif

#if IMU_ReadMagnetometer == YES
    // Read Magnetometer data (microTesla)
    bno055_vector_t mag_vector = bno055_getVectorMagnetometer();
 8000ca0:	2468      	movs	r4, #104	@ 0x68
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fa40 	bl	800112a <bno055_getVectorMagnetometer>

    imu->MagX = mag_vector.x;
 8000caa:	0020      	movs	r0, r4
 8000cac:	183b      	adds	r3, r7, r0
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	648a      	str	r2, [r1, #72]	@ 0x48
 8000cb6:	64cb      	str	r3, [r1, #76]	@ 0x4c
    imu->MagY = mag_vector.y;
 8000cb8:	183b      	adds	r3, r7, r0
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	650a      	str	r2, [r1, #80]	@ 0x50
 8000cc2:	654b      	str	r3, [r1, #84]	@ 0x54
    imu->MagZ = mag_vector.z;
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	658a      	str	r2, [r1, #88]	@ 0x58
 8000cce:	65cb      	str	r3, [r1, #92]	@ 0x5c
#endif

#if IMU_ReadGyroscope == YES
    // Read Gyroscope data (degrees/second)
    bno055_vector_t gyro_vector = bno055_getVectorGyroscope();
 8000cd0:	2448      	movs	r4, #72	@ 0x48
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fa35 	bl	8001144 <bno055_getVectorGyroscope>

    imu->GyroX = gyro_vector.x;
 8000cda:	0020      	movs	r0, r4
 8000cdc:	183b      	adds	r3, r7, r0
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	660a      	str	r2, [r1, #96]	@ 0x60
 8000ce6:	664b      	str	r3, [r1, #100]	@ 0x64
    imu->GyroY = gyro_vector.y;
 8000ce8:	183b      	adds	r3, r7, r0
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	668a      	str	r2, [r1, #104]	@ 0x68
 8000cf2:	66cb      	str	r3, [r1, #108]	@ 0x6c
    imu->GyroZ = gyro_vector.z;
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	670a      	str	r2, [r1, #112]	@ 0x70
 8000cfe:	674b      	str	r3, [r1, #116]	@ 0x74
#endif

#if IMU_ReadGravityVector == YES
    // Read Gravity vector (m/s^2)
    bno055_vector_t gravity_vector = bno055_getVectorGravity();
 8000d00:	2428      	movs	r4, #40	@ 0x28
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 fa44 	bl	8001192 <bno055_getVectorGravity>

    imu->GravityX = gravity_vector.x;
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	183b      	adds	r3, r7, r0
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	678a      	str	r2, [r1, #120]	@ 0x78
 8000d16:	67cb      	str	r3, [r1, #124]	@ 0x7c
    imu->GravityY = gravity_vector.y;
 8000d18:	183b      	adds	r3, r7, r0
 8000d1a:	691a      	ldr	r2, [r3, #16]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	3180      	adds	r1, #128	@ 0x80
 8000d22:	600a      	str	r2, [r1, #0]
 8000d24:	604b      	str	r3, [r1, #4]
    imu->GravityZ = gravity_vector.z;
 8000d26:	183b      	adds	r3, r7, r0
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	3188      	adds	r1, #136	@ 0x88
 8000d30:	600a      	str	r2, [r1, #0]
 8000d32:	604b      	str	r3, [r1, #4]
#endif

#if IMU_ReadQuanterion == YES
    // Read Quaternion data
    bno055_vector_t quat = bno055_getVectorQuaternion();
 8000d34:	2408      	movs	r4, #8
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fa37 	bl	80011ac <bno055_getVectorQuaternion>

    imu->QuatW = quat.w;
 8000d3e:	0020      	movs	r0, r4
 8000d40:	183b      	adds	r3, r7, r0
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	3190      	adds	r1, #144	@ 0x90
 8000d4a:	600a      	str	r2, [r1, #0]
 8000d4c:	604b      	str	r3, [r1, #4]
    imu->QuatX = quat.x;
 8000d4e:	183b      	adds	r3, r7, r0
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	3198      	adds	r1, #152	@ 0x98
 8000d58:	600a      	str	r2, [r1, #0]
 8000d5a:	604b      	str	r3, [r1, #4]
    imu->QuatY = quat.y;
 8000d5c:	183b      	adds	r3, r7, r0
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	31a0      	adds	r1, #160	@ 0xa0
 8000d66:	600a      	str	r2, [r1, #0]
 8000d68:	604b      	str	r3, [r1, #4]
    imu->QuatZ = quat.z;
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	699a      	ldr	r2, [r3, #24]
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	31a8      	adds	r1, #168	@ 0xa8
 8000d74:	600a      	str	r2, [r1, #0]
 8000d76:	604b      	str	r3, [r1, #4]
#endif

#if IMU_ReadTemperature == YES
    // Read Temperature (Celsius)
    imu->temperature = bno055_getTemp();
 8000d78:	f000 f857 	bl	8000e2a <bno055_getTemp>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fd70 	bl	8000864 <__aeabi_i2d>
 8000d84:	0002      	movs	r2, r0
 8000d86:	000b      	movs	r3, r1
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	31b0      	adds	r1, #176	@ 0xb0
 8000d8c:	600a      	str	r2, [r1, #0]
 8000d8e:	604b      	str	r3, [r1, #4]
#endif
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b03b      	add	sp, #236	@ 0xec
 8000d96:	bd90      	pop	{r4, r7, pc}

08000d98 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	0002      	movs	r2, r0
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0019      	movs	r1, r3
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff fde4 	bl	8000978 <bno055_writeData>
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	701a      	strb	r2, [r3, #0]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	0019      	movs	r1, r3
 8000dca:	203d      	movs	r0, #61	@ 0x3d
 8000dcc:	f7ff fdd4 	bl	8000978 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <bno055_setOperationMode+0x28>
    bno055_delay(19);
 8000dd8:	2013      	movs	r0, #19
 8000dda:	f7ff fdc1 	bl	8000960 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000dde:	e002      	b.n	8000de6 <bno055_setOperationMode+0x2e>
    bno055_delay(7);
 8000de0:	2007      	movs	r0, #7
 8000de2:	f7ff fdbd 	bl	8000960 <bno055_delay>
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}

08000dee <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff ffe0 	bl	8000db8 <bno055_setOperationMode>
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000e02:	200c      	movs	r0, #12
 8000e04:	f7ff ffd8 	bl	8000db8 <bno055_setOperationMode>
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000e12:	2120      	movs	r1, #32
 8000e14:	203f      	movs	r0, #63	@ 0x3f
 8000e16:	f7ff fdaf 	bl	8000978 <bno055_writeData>
  bno055_delay(700);
 8000e1a:	23af      	movs	r3, #175	@ 0xaf
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff fd9e 	bl	8000960 <bno055_delay>
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <bno055_getTemp>:

int8_t bno055_getTemp() {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff ffb1 	bl	8000d98 <bno055_setPage>
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	2201      	movs	r2, #1
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	2034      	movs	r0, #52	@ 0x34
 8000e3e:	f7ff fead 	bl	8000b9c <bno055_readData>
  return t;
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25b      	sxtb	r3, r3
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <bno055_setup>:

void bno055_setup() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  bno055_reset();
 8000e56:	f7ff ffda 	bl	8000e0e <bno055_reset>

  uint8_t id = 0;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	2201      	movs	r2, #1
 8000e64:	0019      	movs	r1, r3
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fe98 	bl	8000b9c <bno055_readData>
  if (id != BNO055_ID) {
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2ba0      	cmp	r3, #160	@ 0xa0
 8000e72:	d007      	beq.n	8000e84 <bno055_setup+0x34>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <bno055_setup+0x54>)
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f005 fbb2 	bl	80065e8 <iprintf>
  }
  bno055_setPage(0);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff87 	bl	8000d98 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	203f      	movs	r0, #63	@ 0x3f
 8000e8e:	f7ff fd73 	bl	8000978 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000e92:	f7ff ffac 	bl	8000dee <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000e96:	200a      	movs	r0, #10
 8000e98:	f7ff fd62 	bl	8000960 <bno055_delay>
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	080075d8 	.word	0x080075d8

08000ea8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b08e      	sub	sp, #56	@ 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	1cfb      	adds	r3, r7, #3
 8000eb4:	701a      	strb	r2, [r3, #0]
  bno055_setPage(0);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff6e 	bl	8000d98 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000ebc:	1cfb      	adds	r3, r7, #3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b20      	cmp	r3, #32
 8000ec2:	d108      	bne.n	8000ed6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000ec4:	2328      	movs	r3, #40	@ 0x28
 8000ec6:	18f9      	adds	r1, r7, r3
 8000ec8:	1cfb      	adds	r3, r7, #3
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f7ff fe64 	bl	8000b9c <bno055_readData>
 8000ed4:	e007      	b.n	8000ee6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000ed6:	2328      	movs	r3, #40	@ 0x28
 8000ed8:	18f9      	adds	r1, r7, r3
 8000eda:	1cfb      	adds	r3, r7, #3
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2206      	movs	r2, #6
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fe5b 	bl	8000b9c <bno055_readData>

  double scale = 1;
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4b83      	ldr	r3, [pc, #524]	@ (80010f8 <bno055_getVector+0x250>)
 8000eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000eee:	1cfb      	adds	r3, r7, #3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b0e      	cmp	r3, #14
 8000ef4:	d109      	bne.n	8000f0a <bno055_getVector+0x62>
    scale = magScale;
 8000ef6:	4b81      	ldr	r3, [pc, #516]	@ (80010fc <bno055_getVector+0x254>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff fce0 	bl	80008c0 <__aeabi_ui2d>
 8000f00:	0002      	movs	r2, r0
 8000f02:	000b      	movs	r3, r1
 8000f04:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f08:	e03e      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000f0a:	1cfb      	adds	r3, r7, #3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d007      	beq.n	8000f22 <bno055_getVector+0x7a>
 8000f12:	1cfb      	adds	r3, r7, #3
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b28      	cmp	r3, #40	@ 0x28
 8000f18:	d003      	beq.n	8000f22 <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000f1a:	1cfb      	adds	r3, r7, #3
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f20:	d109      	bne.n	8000f36 <bno055_getVector+0x8e>
    scale = accelScale;
 8000f22:	4b77      	ldr	r3, [pc, #476]	@ (8001100 <bno055_getVector+0x258>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff fcca 	bl	80008c0 <__aeabi_ui2d>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	000b      	movs	r3, r1
 8000f30:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f34:	e028      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000f36:	1cfb      	adds	r3, r7, #3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b14      	cmp	r3, #20
 8000f3c:	d109      	bne.n	8000f52 <bno055_getVector+0xaa>
    scale = angularRateScale;
 8000f3e:	4b71      	ldr	r3, [pc, #452]	@ (8001104 <bno055_getVector+0x25c>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff fcbc 	bl	80008c0 <__aeabi_ui2d>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	000b      	movs	r3, r1
 8000f4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f50:	e01a      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000f52:	1cfb      	adds	r3, r7, #3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b1a      	cmp	r3, #26
 8000f58:	d109      	bne.n	8000f6e <bno055_getVector+0xc6>
    scale = eulerScale;
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001108 <bno055_getVector+0x260>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fcae 	bl	80008c0 <__aeabi_ui2d>
 8000f64:	0002      	movs	r2, r0
 8000f66:	000b      	movs	r3, r1
 8000f68:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f6c:	e00c      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b20      	cmp	r3, #32
 8000f74:	d108      	bne.n	8000f88 <bno055_getVector+0xe0>
    scale = quaScale;
 8000f76:	4b65      	ldr	r3, [pc, #404]	@ (800110c <bno055_getVector+0x264>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff fca0 	bl	80008c0 <__aeabi_ui2d>
 8000f80:	0002      	movs	r2, r0
 8000f82:	000b      	movs	r3, r1
 8000f84:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000f88:	2508      	movs	r5, #8
 8000f8a:	197b      	adds	r3, r7, r5
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2320      	movs	r3, #32
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f005 fc84 	bl	80068a0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000f98:	1cfb      	adds	r3, r7, #3
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	d159      	bne.n	8001054 <bno055_getVector+0x1ac>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000fa0:	2428      	movs	r4, #40	@ 0x28
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff fc54 	bl	8000864 <__aeabi_i2d>
 8000fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc0:	f7ff f938 	bl	8000234 <__aeabi_ddiv>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	000b      	movs	r3, r1
 8000fc8:	1979      	adds	r1, r7, r5
 8000fca:	600a      	str	r2, [r1, #0]
 8000fcc:	604b      	str	r3, [r1, #4]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fc3e 	bl	8000864 <__aeabi_i2d>
 8000fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fec:	f7ff f922 	bl	8000234 <__aeabi_ddiv>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	000b      	movs	r3, r1
 8000ff4:	1979      	adds	r1, r7, r5
 8000ff6:	608a      	str	r2, [r1, #8]
 8000ff8:	60cb      	str	r3, [r1, #12]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	795b      	ldrb	r3, [r3, #5]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	193b      	adds	r3, r7, r4
 8001006:	791b      	ldrb	r3, [r3, #4]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21b      	sxth	r3, r3
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff fc28 	bl	8000864 <__aeabi_i2d>
 8001014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001018:	f7ff f90c 	bl	8000234 <__aeabi_ddiv>
 800101c:	0002      	movs	r2, r0
 800101e:	000b      	movs	r3, r1
 8001020:	1979      	adds	r1, r7, r5
 8001022:	610a      	str	r2, [r1, #16]
 8001024:	614b      	str	r3, [r1, #20]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	79db      	ldrb	r3, [r3, #7]
 800102a:	b21b      	sxth	r3, r3
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	193b      	adds	r3, r7, r4
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff fc12 	bl	8000864 <__aeabi_i2d>
 8001040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001044:	f7ff f8f6 	bl	8000234 <__aeabi_ddiv>
 8001048:	0002      	movs	r2, r0
 800104a:	000b      	movs	r3, r1
 800104c:	1979      	adds	r1, r7, r5
 800104e:	618a      	str	r2, [r1, #24]
 8001050:	61cb      	str	r3, [r1, #28]
 8001052:	e043      	b.n	80010dc <bno055_getVector+0x234>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001054:	2428      	movs	r4, #40	@ 0x28
 8001056:	193b      	adds	r3, r7, r4
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	b21b      	sxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	193b      	adds	r3, r7, r4
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fbfa 	bl	8000864 <__aeabi_i2d>
 8001070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001074:	f7ff f8de 	bl	8000234 <__aeabi_ddiv>
 8001078:	0002      	movs	r2, r0
 800107a:	000b      	movs	r3, r1
 800107c:	2508      	movs	r5, #8
 800107e:	1979      	adds	r1, r7, r5
 8001080:	608a      	str	r2, [r1, #8]
 8001082:	60cb      	str	r3, [r1, #12]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	b21b      	sxth	r3, r3
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	193b      	adds	r3, r7, r4
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff fbe3 	bl	8000864 <__aeabi_i2d>
 800109e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a2:	f7ff f8c7 	bl	8000234 <__aeabi_ddiv>
 80010a6:	0002      	movs	r2, r0
 80010a8:	000b      	movs	r3, r1
 80010aa:	1979      	adds	r1, r7, r5
 80010ac:	610a      	str	r2, [r1, #16]
 80010ae:	614b      	str	r3, [r1, #20]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	795b      	ldrb	r3, [r3, #5]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fbcd 	bl	8000864 <__aeabi_i2d>
 80010ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ce:	f7ff f8b1 	bl	8000234 <__aeabi_ddiv>
 80010d2:	0002      	movs	r2, r0
 80010d4:	000b      	movs	r3, r1
 80010d6:	1979      	adds	r1, r7, r5
 80010d8:	618a      	str	r2, [r1, #24]
 80010da:	61cb      	str	r3, [r1, #28]
  }

  return xyz;
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	2308      	movs	r3, #8
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	0010      	movs	r0, r2
 80010e4:	0019      	movs	r1, r3
 80010e6:	2320      	movs	r3, #32
 80010e8:	001a      	movs	r2, r3
 80010ea:	f005 fc5c 	bl	80069a6 <memcpy>
}
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b00e      	add	sp, #56	@ 0x38
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	3ff00000 	.word	0x3ff00000
 80010fc:	20000006 	.word	0x20000006
 8001100:	20000000 	.word	0x20000000
 8001104:	20000002 	.word	0x20000002
 8001108:	20000004 	.word	0x20000004
 800110c:	20000008 	.word	0x20000008

08001110 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2108      	movs	r1, #8
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fec3 	bl	8000ea8 <bno055_getVector>
}
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}

0800112a <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	210e      	movs	r1, #14
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff feb6 	bl	8000ea8 <bno055_getVector>
}
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2114      	movs	r1, #20
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fea9 	bl	8000ea8 <bno055_getVector>
}
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}

0800115e <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	211a      	movs	r1, #26
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fe9c 	bl	8000ea8 <bno055_getVector>
}
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2128      	movs	r1, #40	@ 0x28
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fe8f 	bl	8000ea8 <bno055_getVector>
}
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}

08001192 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorGravity() {
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	212e      	movs	r1, #46	@ 0x2e
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff fe82 	bl	8000ea8 <bno055_getVector>
}
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorQuaternion() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2120      	movs	r1, #32
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff fe75 	bl	8000ea8 <bno055_getVector>
}
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//---------------------------  CAN Functions  --------------------------
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	2101      	movs	r1, #1
 80011d8:	f001 f966 	bl	80024a8 <HAL_CAN_GetRxMessage>
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	200005b8 	.word	0x200005b8

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f000 fe9c 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f860 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 fa18 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 80011fc:	f000 f9f0 	bl	80015e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001200:	f000 f8ee 	bl	80013e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001204:	f000 f92c 	bl	8001460 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001208:	f000 f95a 	bl	80014c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800120c:	f000 f988 	bl	8001520 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8001210:	f000 f9b6 	bl	8001580 <MX_USART4_UART_Init>
  MX_CAN_Init();
 8001214:	f000 f8ae 	bl	8001374 <MX_CAN_Init>
  	   *
  	   * */
  //-----------------------------------------------------------

  // ---------------------Initialize IMU-----------------------
  IMU_Setup(&hi2c1);
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <main+0xac>)
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff fce4 	bl	8000be8 <IMU_Setup>
  //-----------------------------------------------------------


  //---------------------------------- Initialize CAN  -------------------------------------

  	HAL_CAN_Start(&hcan);
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <main+0xb0>)
 8001222:	0018      	movs	r0, r3
 8001224:	f001 f8fa 	bl	800241c <HAL_CAN_Start>
      TxHeader.DLC = 8;  // data length
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <main+0xb4>)
 800122a:	2208      	movs	r2, #8
 800122c:	611a      	str	r2, [r3, #16]
      TxHeader.IDE = CAN_ID_STD;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <main+0xb4>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
      TxHeader.RTR = CAN_RTR_DATA;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <main+0xb4>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
      TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <main+0xb4>)
 800123c:	4a19      	ldr	r2, [pc, #100]	@ (80012a4 <main+0xb8>)
 800123e:	601a      	str	r2, [r3, #0]


      HAL_CAN_Start(&hcan);
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <main+0xb0>)
 8001242:	0018      	movs	r0, r3
 8001244:	f001 f8ea 	bl	800241c <HAL_CAN_Start>
  	// Configure the filter
  	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <main+0xbc>)
 800124a:	2201      	movs	r2, #1
 800124c:	621a      	str	r2, [r3, #32]
  	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <main+0xbc>)
 8001250:	2201      	movs	r2, #1
 8001252:	611a      	str	r2, [r3, #16]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <main+0xbc>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  	sFilterConfig.FilterIdHigh = 0x6A5<<5;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <main+0xbc>)
 800125c:	4a13      	ldr	r2, [pc, #76]	@ (80012ac <main+0xc0>)
 800125e:	601a      	str	r2, [r3, #0]
  	sFilterConfig.FilterIdLow = 0;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <main+0xbc>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  	sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <main+0xbc>)
 8001268:	4a11      	ldr	r2, [pc, #68]	@ (80012b0 <main+0xc4>)
 800126a:	609a      	str	r2, [r3, #8]
  	sFilterConfig.FilterMaskIdLow = 0;
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <main+0xbc>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <main+0xbc>)
 8001274:	2201      	movs	r2, #1
 8001276:	61da      	str	r2, [r3, #28]
  	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <main+0xbc>)
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <main+0xb0>)
 800127c:	0011      	movs	r1, r2
 800127e:	0018      	movs	r0, r3
 8001280:	f000 ffda 	bl	8002238 <HAL_CAN_ConfigFilter>
  	// Activate the notification
  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <main+0xb0>)
 8001286:	2110      	movs	r1, #16
 8001288:	0018      	movs	r0, r3
 800128a:	f001 fa38 	bl	80026fe <HAL_CAN_ActivateNotification>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //------------------------  IMU Testing ------------------------------

	  IMU_Operation(&imu);
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <main+0xc8>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fcb9 	bl	8000c08 <IMU_Operation>
 8001296:	e7fa      	b.n	800128e <main+0xa2>
 8001298:	200000c8 	.word	0x200000c8
 800129c:	200000a0 	.word	0x200000a0
 80012a0:	200005d4 	.word	0x200005d4
 80012a4:	000006a5 	.word	0x000006a5
 80012a8:	20000590 	.word	0x20000590
 80012ac:	0000d4a0 	.word	0x0000d4a0
 80012b0:	0000ffe0 	.word	0x0000ffe0
 80012b4:	200004d8 	.word	0x200004d8

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b099      	sub	sp, #100	@ 0x64
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	242c      	movs	r4, #44	@ 0x2c
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	0018      	movs	r0, r3
 80012c4:	2334      	movs	r3, #52	@ 0x34
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f005 fae9 	bl	80068a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ce:	231c      	movs	r3, #28
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	0018      	movs	r0, r3
 80012d4:	2310      	movs	r3, #16
 80012d6:	001a      	movs	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	f005 fae1 	bl	80068a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012de:	003b      	movs	r3, r7
 80012e0:	0018      	movs	r0, r3
 80012e2:	231c      	movs	r3, #28
 80012e4:	001a      	movs	r2, r3
 80012e6:	2100      	movs	r1, #0
 80012e8:	f005 fada 	bl	80068a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ec:	0021      	movs	r1, r4
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2201      	movs	r2, #1
 80012f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2210      	movs	r2, #16
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	187b      	adds	r3, r7, r1
 8001308:	0018      	movs	r0, r3
 800130a:	f002 fefd 	bl	8004108 <HAL_RCC_OscConfig>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001312:	f000 f9bf 	bl	8001694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	211c      	movs	r1, #28
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2207      	movs	r2, #7
 800131c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2100      	movs	r1, #0
 8001334:	0018      	movs	r0, r3
 8001336:	f003 fa6d 	bl	8004814 <HAL_RCC_ClockConfig>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800133e:	f000 f9a9 	bl	8001694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001342:	003b      	movs	r3, r7
 8001344:	2223      	movs	r2, #35	@ 0x23
 8001346:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001348:	003b      	movs	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800134e:	003b      	movs	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001354:	003b      	movs	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135a:	003b      	movs	r3, r7
 800135c:	0018      	movs	r0, r3
 800135e:	f003 fbc5 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001366:	f000 f995 	bl	8001694 <Error_Handler>
  }
}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b019      	add	sp, #100	@ 0x64
 8001370:	bd90      	pop	{r4, r7, pc}
	...

08001374 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_CAN_Init+0x64>)
 800137a:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <MX_CAN_Init+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_CAN_Init+0x64>)
 8001380:	2204      	movs	r2, #4
 8001382:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_CAN_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <MX_CAN_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_CAN_Init+0x64>)
 8001392:	2280      	movs	r2, #128	@ 0x80
 8001394:	0252      	lsls	r2, r2, #9
 8001396:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_CAN_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_CAN_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_CAN_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <MX_CAN_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_CAN_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <MX_CAN_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_CAN_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <MX_CAN_Init+0x64>)
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 fe39 	bl	800203c <HAL_CAN_Init>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d001      	beq.n	80013d2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80013ce:	f000 f961 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200000a0 	.word	0x200000a0
 80013dc:	40006400 	.word	0x40006400

080013e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <MX_I2C1_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <MX_I2C1_Init+0x7c>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_I2C1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_I2C1_Init+0x74>)
 800141c:	0018      	movs	r0, r3
 800141e:	f002 f819 	bl	8003454 <HAL_I2C_Init>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001426:	f000 f935 	bl	8001694 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <MX_I2C1_Init+0x74>)
 800142c:	2100      	movs	r1, #0
 800142e:	0018      	movs	r0, r3
 8001430:	f002 fdd2 	bl	8003fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001438:	f000 f92c 	bl	8001694 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <MX_I2C1_Init+0x74>)
 800143e:	2100      	movs	r1, #0
 8001440:	0018      	movs	r0, r3
 8001442:	f002 fe15 	bl	8004070 <HAL_I2CEx_ConfigDigitalFilter>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d001      	beq.n	800144e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 f923 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000c8 	.word	0x200000c8
 8001458:	40005400 	.word	0x40005400
 800145c:	00201d2b 	.word	0x00201d2b

08001460 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001466:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <MX_USART1_UART_Init+0x5c>)
 8001468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800146c:	2296      	movs	r2, #150	@ 0x96
 800146e:	0192      	lsls	r2, r2, #6
 8001470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <MX_USART1_UART_Init+0x58>)
 80014a4:	0018      	movs	r0, r3
 80014a6:	f003 fc1f 	bl	8004ce8 <HAL_UART_Init>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014ae:	f000 f8f1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000011c 	.word	0x2000011c
 80014bc:	40013800 	.word	0x40013800

080014c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c4:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014c6:	4a15      	ldr	r2, [pc, #84]	@ (800151c <MX_USART2_UART_Init+0x5c>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014cc:	22e1      	movs	r2, #225	@ 0xe1
 80014ce:	0252      	lsls	r2, r2, #9
 80014d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001502:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <MX_USART2_UART_Init+0x58>)
 8001504:	0018      	movs	r0, r3
 8001506:	f003 fbef 	bl	8004ce8 <HAL_UART_Init>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f8c1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200001a4 	.word	0x200001a4
 800151c:	40004400 	.word	0x40004400

08001520 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 8001526:	4a15      	ldr	r2, [pc, #84]	@ (800157c <MX_USART3_UART_Init+0x5c>)
 8001528:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 800152c:	22e1      	movs	r2, #225	@ 0xe1
 800152e:	0252      	lsls	r2, r2, #9
 8001530:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <MX_USART3_UART_Init+0x58>)
 8001564:	0018      	movs	r0, r3
 8001566:	f003 fbbf 	bl	8004ce8 <HAL_UART_Init>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d001      	beq.n	8001572 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800156e:	f000 f891 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000022c 	.word	0x2000022c
 800157c:	40004800 	.word	0x40004800

08001580 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 8001586:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <MX_USART4_UART_Init+0x5c>)
 8001588:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 800158c:	22e1      	movs	r2, #225	@ 0xe1
 800158e:	0252      	lsls	r2, r2, #9
 8001590:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015c2:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <MX_USART4_UART_Init+0x58>)
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 fb8f 	bl	8004ce8 <HAL_UART_Init>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 f861 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200002b4 	.word	0x200002b4
 80015dc:	40004c00 	.word	0x40004c00

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_DMA_Init+0x48>)
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_DMA_Init+0x48>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <MX_DMA_Init+0x48>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200a      	movs	r0, #10
 8001604:	f001 fb66 	bl	8002cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001608:	200a      	movs	r0, #10
 800160a:	f001 fb78 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	200b      	movs	r0, #11
 8001614:	f001 fb5e 	bl	8002cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001618:	200b      	movs	r0, #11
 800161a:	f001 fb70 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	40021000 	.word	0x40021000

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <MX_GPIO_Init+0x64>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <MX_GPIO_Init+0x64>)
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	03c9      	lsls	r1, r1, #15
 800163c:	430a      	orrs	r2, r1
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <MX_GPIO_Init+0x64>)
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	03db      	lsls	r3, r3, #15
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <MX_GPIO_Init+0x64>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MX_GPIO_Init+0x64>)
 8001654:	2180      	movs	r1, #128	@ 0x80
 8001656:	0289      	lsls	r1, r1, #10
 8001658:	430a      	orrs	r2, r1
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_GPIO_Init+0x64>)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	029b      	lsls	r3, r3, #10
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_GPIO_Init+0x64>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <MX_GPIO_Init+0x64>)
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	02c9      	lsls	r1, r1, #11
 8001674:	430a      	orrs	r2, r1
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <MX_GPIO_Init+0x64>)
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	02db      	lsls	r3, r3, #11
 8001680:	4013      	ands	r3, r2
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	40021000 	.word	0x40021000

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	e7fd      	b.n	800169c <Error_Handler+0x8>

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_MspInit+0x44>)
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_MspInit+0x44>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	430a      	orrs	r2, r1
 80016b0:	619a      	str	r2, [r3, #24]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_MspInit+0x44>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4013      	ands	r3, r2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_MspInit+0x44>)
 80016c0:	69da      	ldr	r2, [r3, #28]
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_MspInit+0x44>)
 80016c4:	2180      	movs	r1, #128	@ 0x80
 80016c6:	0549      	lsls	r1, r1, #21
 80016c8:	430a      	orrs	r2, r1
 80016ca:	61da      	str	r2, [r3, #28]
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_MspInit+0x44>)
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	055b      	lsls	r3, r3, #21
 80016d4:	4013      	ands	r3, r2
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	2414      	movs	r4, #20
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	0018      	movs	r0, r3
 80016f6:	2314      	movs	r3, #20
 80016f8:	001a      	movs	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	f005 f8d0 	bl	80068a0 <memset>
  if(hcan->Instance==CAN)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_CAN_MspInit+0xa4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d13b      	bne.n	8001782 <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_CAN_MspInit+0xa8>)
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_CAN_MspInit+0xa8>)
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	0489      	lsls	r1, r1, #18
 8001714:	430a      	orrs	r2, r1
 8001716:	61da      	str	r2, [r3, #28]
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_CAN_MspInit+0xa8>)
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	049b      	lsls	r3, r3, #18
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_CAN_MspInit+0xa8>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_CAN_MspInit+0xa8>)
 800172c:	2180      	movs	r1, #128	@ 0x80
 800172e:	0289      	lsls	r1, r1, #10
 8001730:	430a      	orrs	r2, r1
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_CAN_MspInit+0xa8>)
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001742:	193b      	adds	r3, r7, r4
 8001744:	22c0      	movs	r2, #192	@ 0xc0
 8001746:	0152      	lsls	r2, r2, #5
 8001748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	0021      	movs	r1, r4
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2202      	movs	r2, #2
 8001750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2203      	movs	r2, #3
 800175c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2204      	movs	r2, #4
 8001762:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	187a      	adds	r2, r7, r1
 8001766:	2390      	movs	r3, #144	@ 0x90
 8001768:	05db      	lsls	r3, r3, #23
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f001 fcf9 	bl	8003164 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	201e      	movs	r0, #30
 8001778:	f001 faac 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800177c:	201e      	movs	r0, #30
 800177e:	f001 fabe 	bl	8002cfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b00b      	add	sp, #44	@ 0x2c
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	40006400 	.word	0x40006400
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b08b      	sub	sp, #44	@ 0x2c
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	2414      	movs	r4, #20
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	0018      	movs	r0, r3
 80017a2:	2314      	movs	r3, #20
 80017a4:	001a      	movs	r2, r3
 80017a6:	2100      	movs	r1, #0
 80017a8:	f005 f87a 	bl	80068a0 <memset>
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <HAL_I2C_MspInit+0x90>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d131      	bne.n	800181a <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_I2C_MspInit+0x94>)
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_I2C_MspInit+0x94>)
 80017bc:	2180      	movs	r1, #128	@ 0x80
 80017be:	02c9      	lsls	r1, r1, #11
 80017c0:	430a      	orrs	r2, r1
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <HAL_I2C_MspInit+0x94>)
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	02db      	lsls	r3, r3, #11
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	0021      	movs	r1, r4
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	22c0      	movs	r2, #192	@ 0xc0
 80017d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	2212      	movs	r2, #18
 80017de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	2201      	movs	r2, #1
 80017e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	2203      	movs	r2, #3
 80017ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2201      	movs	r2, #1
 80017f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <HAL_I2C_MspInit+0x98>)
 80017f6:	0019      	movs	r1, r3
 80017f8:	0010      	movs	r0, r2
 80017fa:	f001 fcb3 	bl	8003164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_I2C_MspInit+0x94>)
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_I2C_MspInit+0x94>)
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0389      	lsls	r1, r1, #14
 8001808:	430a      	orrs	r2, r1
 800180a:	61da      	str	r2, [r3, #28]
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_I2C_MspInit+0x94>)
 800180e:	69da      	ldr	r2, [r3, #28]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	039b      	lsls	r3, r3, #14
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b00b      	add	sp, #44	@ 0x2c
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	40005400 	.word	0x40005400
 8001828:	40021000 	.word	0x40021000
 800182c:	48000400 	.word	0x48000400

08001830 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b091      	sub	sp, #68	@ 0x44
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	242c      	movs	r4, #44	@ 0x2c
 800183a:	193b      	adds	r3, r7, r4
 800183c:	0018      	movs	r0, r3
 800183e:	2314      	movs	r3, #20
 8001840:	001a      	movs	r2, r3
 8001842:	2100      	movs	r1, #0
 8001844:	f005 f82c 	bl	80068a0 <memset>
  if(huart->Instance==USART1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4ab4      	ldr	r2, [pc, #720]	@ (8001b20 <HAL_UART_MspInit+0x2f0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d13c      	bne.n	80018cc <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001852:	4bb4      	ldr	r3, [pc, #720]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	4bb3      	ldr	r3, [pc, #716]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	01c9      	lsls	r1, r1, #7
 800185c:	430a      	orrs	r2, r1
 800185e:	619a      	str	r2, [r3, #24]
 8001860:	4bb0      	ldr	r3, [pc, #704]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	4013      	ands	r3, r2
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800186c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4bad      	ldr	r3, [pc, #692]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	4bac      	ldr	r3, [pc, #688]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	0289      	lsls	r1, r1, #10
 8001878:	430a      	orrs	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	4ba9      	ldr	r3, [pc, #676]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	22c0      	movs	r2, #192	@ 0xc0
 800188e:	00d2      	lsls	r2, r2, #3
 8001890:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	0021      	movs	r1, r4
 8001894:	187b      	adds	r3, r7, r1
 8001896:	2202      	movs	r2, #2
 8001898:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	187b      	adds	r3, r7, r1
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2203      	movs	r2, #3
 80018a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2201      	movs	r2, #1
 80018aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	187a      	adds	r2, r7, r1
 80018ae:	2390      	movs	r3, #144	@ 0x90
 80018b0:	05db      	lsls	r3, r3, #23
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f001 fc55 	bl	8003164 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	201b      	movs	r0, #27
 80018c0:	f001 fa08 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018c4:	201b      	movs	r0, #27
 80018c6:	f001 fa1a 	bl	8002cfe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 80018ca:	e1d2      	b.n	8001c72 <HAL_UART_MspInit+0x442>
  else if(huart->Instance==USART2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a95      	ldr	r2, [pc, #596]	@ (8001b28 <HAL_UART_MspInit+0x2f8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d000      	beq.n	80018d8 <HAL_UART_MspInit+0xa8>
 80018d6:	e087      	b.n	80019e8 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d8:	4b92      	ldr	r3, [pc, #584]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	4b91      	ldr	r3, [pc, #580]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 80018de:	2180      	movs	r1, #128	@ 0x80
 80018e0:	0289      	lsls	r1, r1, #10
 80018e2:	430a      	orrs	r2, r1
 80018e4:	61da      	str	r2, [r3, #28]
 80018e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	029b      	lsls	r3, r3, #10
 80018ee:	4013      	ands	r3, r2
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b8b      	ldr	r3, [pc, #556]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 80018f6:	695a      	ldr	r2, [r3, #20]
 80018f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	0289      	lsls	r1, r1, #10
 80018fe:	430a      	orrs	r2, r1
 8001900:	615a      	str	r2, [r3, #20]
 8001902:	4b88      	ldr	r3, [pc, #544]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001910:	212c      	movs	r1, #44	@ 0x2c
 8001912:	187b      	adds	r3, r7, r1
 8001914:	220c      	movs	r2, #12
 8001916:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2202      	movs	r2, #2
 800191c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2203      	movs	r2, #3
 8001928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2201      	movs	r2, #1
 800192e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	187a      	adds	r2, r7, r1
 8001932:	2390      	movs	r3, #144	@ 0x90
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f001 fc13 	bl	8003164 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800193e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001940:	4a7b      	ldr	r2, [pc, #492]	@ (8001b30 <HAL_UART_MspInit+0x300>)
 8001942:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001944:	4b79      	ldr	r3, [pc, #484]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800194a:	4b78      	ldr	r3, [pc, #480]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001950:	4b76      	ldr	r3, [pc, #472]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001956:	4b75      	ldr	r3, [pc, #468]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800195c:	4b73      	ldr	r3, [pc, #460]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001962:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001968:	4b70      	ldr	r3, [pc, #448]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800196e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001970:	0018      	movs	r0, r3
 8001972:	f001 f9e1 	bl	8002d38 <HAL_DMA_Init>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d001      	beq.n	800197e <HAL_UART_MspInit+0x14e>
      Error_Handler();
 800197a:	f7ff fe8b 	bl	8001694 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a6a      	ldr	r2, [pc, #424]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001982:	675a      	str	r2, [r3, #116]	@ 0x74
 8001984:	4b69      	ldr	r3, [pc, #420]	@ (8001b2c <HAL_UART_MspInit+0x2fc>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800198a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 800198c:	4a6a      	ldr	r2, [pc, #424]	@ (8001b38 <HAL_UART_MspInit+0x308>)
 800198e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001990:	4b68      	ldr	r3, [pc, #416]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 8001992:	2210      	movs	r2, #16
 8001994:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001996:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800199c:	4b65      	ldr	r3, [pc, #404]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 800199e:	2280      	movs	r2, #128	@ 0x80
 80019a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a2:	4b64      	ldr	r3, [pc, #400]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a8:	4b62      	ldr	r3, [pc, #392]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019ae:	4b61      	ldr	r3, [pc, #388]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 f9bb 	bl	8002d38 <HAL_DMA_Init>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80019c6:	f7ff fe65 	bl	8001694 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a59      	ldr	r2, [pc, #356]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 80019ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80019d0:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <HAL_UART_MspInit+0x304>)
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	201c      	movs	r0, #28
 80019dc:	f001 f97a 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019e0:	201c      	movs	r0, #28
 80019e2:	f001 f98c 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 80019e6:	e144      	b.n	8001c72 <HAL_UART_MspInit+0x442>
  else if(huart->Instance==USART3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a53      	ldr	r2, [pc, #332]	@ (8001b3c <HAL_UART_MspInit+0x30c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d000      	beq.n	80019f4 <HAL_UART_MspInit+0x1c4>
 80019f2:	e0b1      	b.n	8001b58 <HAL_UART_MspInit+0x328>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 80019fa:	2180      	movs	r1, #128	@ 0x80
 80019fc:	02c9      	lsls	r1, r1, #11
 80019fe:	430a      	orrs	r2, r1
 8001a00:	61da      	str	r2, [r3, #28]
 8001a02:	4b48      	ldr	r3, [pc, #288]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	02db      	lsls	r3, r3, #11
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	4b44      	ldr	r3, [pc, #272]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001a16:	2180      	movs	r1, #128	@ 0x80
 8001a18:	02c9      	lsls	r1, r1, #11
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_UART_MspInit+0x2f4>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	02db      	lsls	r3, r3, #11
 8001a26:	4013      	ands	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a2c:	212c      	movs	r1, #44	@ 0x2c
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	22c0      	movs	r2, #192	@ 0xc0
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2202      	movs	r2, #2
 8001a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2203      	movs	r2, #3
 8001a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	4a3b      	ldr	r2, [pc, #236]	@ (8001b40 <HAL_UART_MspInit+0x310>)
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f001 fb85 	bl	8003164 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001b48 <HAL_UART_MspInit+0x318>)
 8001a5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a60:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a66:	4b37      	ldr	r3, [pc, #220]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a6c:	4b35      	ldr	r3, [pc, #212]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a72:	4b34      	ldr	r3, [pc, #208]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a78:	4b32      	ldr	r3, [pc, #200]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001a7e:	4b31      	ldr	r3, [pc, #196]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a84:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 f953 	bl	8002d38 <HAL_DMA_Init>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8001a96:	f7ff fdfd 	bl	8001694 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <HAL_UART_MspInit+0x31c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_UART_MspInit+0x31c>)
 8001aa0:	2180      	movs	r1, #128	@ 0x80
 8001aa2:	04c9      	lsls	r1, r1, #19
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001aac:	675a      	str	r2, [r3, #116]	@ 0x74
 8001aae:	4b25      	ldr	r3, [pc, #148]	@ (8001b44 <HAL_UART_MspInit+0x314>)
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001ab4:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ab6:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <HAL_UART_MspInit+0x324>)
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aba:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001abc:	2210      	movs	r2, #16
 8001abe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac6:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f001 f926 	bl	8002d38 <HAL_DMA_Init>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8001af0:	f7ff fdd0 	bl	8001694 <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_UART_MspInit+0x31c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <HAL_UART_MspInit+0x31c>)
 8001afa:	2180      	movs	r1, #128	@ 0x80
 8001afc:	04c9      	lsls	r1, r1, #19
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001b06:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <HAL_UART_MspInit+0x320>)
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	201d      	movs	r0, #29
 8001b14:	f001 f8de 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001b18:	201d      	movs	r0, #29
 8001b1a:	f001 f8f0 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001b1e:	e0a8      	b.n	8001c72 <HAL_UART_MspInit+0x442>
 8001b20:	40013800 	.word	0x40013800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	2000033c 	.word	0x2000033c
 8001b30:	40020058 	.word	0x40020058
 8001b34:	20000380 	.word	0x20000380
 8001b38:	40020044 	.word	0x40020044
 8001b3c:	40004800 	.word	0x40004800
 8001b40:	48000400 	.word	0x48000400
 8001b44:	200003c4 	.word	0x200003c4
 8001b48:	40020030 	.word	0x40020030
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	20000408 	.word	0x20000408
 8001b54:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART4)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a47      	ldr	r2, [pc, #284]	@ (8001c7c <HAL_UART_MspInit+0x44c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d000      	beq.n	8001b64 <HAL_UART_MspInit+0x334>
 8001b62:	e086      	b.n	8001c72 <HAL_UART_MspInit+0x442>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001b64:	4b46      	ldr	r3, [pc, #280]	@ (8001c80 <HAL_UART_MspInit+0x450>)
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	4b45      	ldr	r3, [pc, #276]	@ (8001c80 <HAL_UART_MspInit+0x450>)
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	0309      	lsls	r1, r1, #12
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	61da      	str	r2, [r3, #28]
 8001b72:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <HAL_UART_MspInit+0x450>)
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	031b      	lsls	r3, r3, #12
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <HAL_UART_MspInit+0x450>)
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	4b3e      	ldr	r3, [pc, #248]	@ (8001c80 <HAL_UART_MspInit+0x450>)
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	0289      	lsls	r1, r1, #10
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	615a      	str	r2, [r3, #20]
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c80 <HAL_UART_MspInit+0x450>)
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b9c:	212c      	movs	r1, #44	@ 0x2c
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2204      	movs	r2, #4
 8001bba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	187a      	adds	r2, r7, r1
 8001bbe:	2390      	movs	r3, #144	@ 0x90
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f001 facd 	bl	8003164 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8001bca:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c88 <HAL_UART_MspInit+0x458>)
 8001bce:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bdc:	4b29      	ldr	r3, [pc, #164]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be2:	4b28      	ldr	r3, [pc, #160]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be8:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8001bfa:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f001 f89b 	bl	8002d38 <HAL_DMA_Init>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_MspInit+0x3da>
      Error_Handler();
 8001c06:	f7ff fd45 	bl	8001694 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001c0e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c10:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <HAL_UART_MspInit+0x454>)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c18:	4a1d      	ldr	r2, [pc, #116]	@ (8001c90 <HAL_UART_MspInit+0x460>)
 8001c1a:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c1e:	2210      	movs	r2, #16
 8001c20:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f001 f875 	bl	8002d38 <HAL_DMA_Init>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_UART_MspInit+0x426>
      Error_Handler();
 8001c52:	f7ff fd1f 	bl	8001694 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c5a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_UART_MspInit+0x45c>)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201d      	movs	r0, #29
 8001c68:	f001 f834 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001c6c:	201d      	movs	r0, #29
 8001c6e:	f001 f846 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b011      	add	sp, #68	@ 0x44
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	40004c00 	.word	0x40004c00
 8001c80:	40021000 	.word	0x40021000
 8001c84:	2000044c 	.word	0x2000044c
 8001c88:	4002006c 	.word	0x4002006c
 8001c8c:	20000490 	.word	0x20000490
 8001c90:	40020080 	.word	0x40020080

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	46c0      	nop			@ (mov r8, r8)
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f97e 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f001 f95d 	bl	8002f8e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 f959 	bl	8002f8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001cdc:	46c0      	nop			@ (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	20000408 	.word	0x20000408
 8001ce8:	200003c4 	.word	0x200003c4

08001cec <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f001 f94b 	bl	8002f8e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <DMA1_Channel4_5_6_7_IRQHandler+0x30>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f001 f947 	bl	8002f8e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8001d00:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <DMA1_Channel4_5_6_7_IRQHandler+0x34>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f001 f943 	bl	8002f8e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <DMA1_Channel4_5_6_7_IRQHandler+0x38>)
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f001 f93f 	bl	8002f8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	20000380 	.word	0x20000380
 8001d1c:	2000033c 	.word	0x2000033c
 8001d20:	2000044c 	.word	0x2000044c
 8001d24:	20000490 	.word	0x20000490

08001d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <USART1_IRQHandler+0x14>)
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f003 f916 	bl	8004f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d34:	46c0      	nop			@ (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	2000011c 	.word	0x2000011c

08001d40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <USART2_IRQHandler+0x14>)
 8001d46:	0018      	movs	r0, r3
 8001d48:	f003 f90a 	bl	8004f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	200001a4 	.word	0x200001a4

08001d58 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <USART3_4_IRQHandler+0x1c>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f003 f8fe 	bl	8004f60 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <USART3_4_IRQHandler+0x20>)
 8001d66:	0018      	movs	r0, r3
 8001d68:	f003 f8fa 	bl	8004f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	2000022c 	.word	0x2000022c
 8001d78:	200002b4 	.word	0x200002b4

08001d7c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <CEC_CAN_IRQHandler+0x14>)
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 fce5 	bl	8002752 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001d88:	46c0      	nop			@ (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	200000a0 	.word	0x200000a0

08001d94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e00a      	b.n	8001dbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da6:	e000      	b.n	8001daa <_read+0x16>
 8001da8:	bf00      	nop
 8001daa:	0001      	movs	r1, r0
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf0      	blt.n	8001da6 <_read+0x12>
  }

  return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e009      	b.n	8001df4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	60ba      	str	r2, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	0018      	movs	r0, r3
 8001dea:	e000      	b.n	8001dee <_write+0x20>
 8001dec:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbf1      	blt.n	8001de0 <_write+0x12>
  }
  return len;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b006      	add	sp, #24
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_close>:

int _close(int file)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	425b      	negs	r3, r3
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2280      	movs	r2, #128	@ 0x80
 8001e28:	0192      	lsls	r2, r2, #6
 8001e2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_isatty>:

int _isatty(int file)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	18d3      	adds	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f004 fd5c 	bl	800694c <__errno>
 8001e94:	0003      	movs	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	425b      	negs	r3, r3
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	18d2      	adds	r2, r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <_sbrk+0x64>)
 8001eb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b006      	add	sp, #24
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20004000 	.word	0x20004000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	200005ec 	.word	0x200005ec
 8001ec8:	20000750 	.word	0x20000750

08001ecc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ed8:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eda:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001edc:	f7ff fff6 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee0:	480c      	ldr	r0, [pc, #48]	@ (8001f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee2:	490d      	ldr	r1, [pc, #52]	@ (8001f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <LoopForever+0xe>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f24 <LoopForever+0x16>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f06:	f004 fd27 	bl	8006958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f0a:	f7ff f96f 	bl	80011ec <main>

08001f0e <LoopForever>:

LoopForever:
    b LoopForever
 8001f0e:	e7fe      	b.n	8001f0e <LoopForever>
  ldr   r0, =_estack
 8001f10:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001f1c:	080076c8 	.word	0x080076c8
  ldr r2, =_sbss
 8001f20:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f24:	20000750 	.word	0x20000750

08001f28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC1_COMP_IRQHandler>
	...

08001f2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <HAL_Init+0x24>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_Init+0x24>)
 8001f36:	2110      	movs	r1, #16
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f809 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f42:	f7ff fbad 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_InitTick+0x5c>)
 8001f5e:	681c      	ldr	r4, [r3, #0]
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_InitTick+0x60>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	0019      	movs	r1, r3
 8001f66:	23fa      	movs	r3, #250	@ 0xfa
 8001f68:	0098      	lsls	r0, r3, #2
 8001f6a:	f7fe f8d7 	bl	800011c <__udivsi3>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	0019      	movs	r1, r3
 8001f72:	0020      	movs	r0, r4
 8001f74:	f7fe f8d2 	bl	800011c <__udivsi3>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 fecf 	bl	8002d1e <HAL_SYSTICK_Config>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e00f      	b.n	8001fa8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d80b      	bhi.n	8001fa6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	2301      	movs	r3, #1
 8001f92:	425b      	negs	r3, r3
 8001f94:	2200      	movs	r2, #0
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fe9c 	bl	8002cd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_InitTick+0x64>)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b003      	add	sp, #12
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	20000014 	.word	0x20000014
 8001fb4:	2000001c 	.word	0x2000001c
 8001fb8:	20000018 	.word	0x20000018

08001fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_IncTick+0x1c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_IncTick+0x20>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	18d2      	adds	r2, r2, r3
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <HAL_IncTick+0x20>)
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	46c0      	nop			@ (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	2000001c 	.word	0x2000001c
 8001fdc:	200005f0 	.word	0x200005f0

08001fe0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	@ (8001ff0 <HAL_GetTick+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	200005f0 	.word	0x200005f0

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3301      	adds	r3, #1
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	001a      	movs	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	189b      	adds	r3, r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	f7ff ffe0 	bl	8001fe0 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	2000001c 	.word	0x2000001c

0800203c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0f0      	b.n	8002230 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff fb43 	bl	80016e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002072:	f7ff ffb5 	bl	8001fe0 <HAL_GetTick>
 8002076:	0003      	movs	r3, r0
 8002078:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800207a:	e013      	b.n	80020a4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800207c:	f7ff ffb0 	bl	8001fe0 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b0a      	cmp	r3, #10
 8002088:	d90c      	bls.n	80020a4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	2280      	movs	r2, #128	@ 0x80
 8002090:	0292      	lsls	r2, r2, #10
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	2105      	movs	r1, #5
 800209e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0c5      	b.n	8002230 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d0e5      	beq.n	800207c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2102      	movs	r1, #2
 80020bc:	438a      	bics	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c0:	f7ff ff8e 	bl	8001fe0 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020c8:	e013      	b.n	80020f2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ca:	f7ff ff89 	bl	8001fe0 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b0a      	cmp	r3, #10
 80020d6:	d90c      	bls.n	80020f2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	0292      	lsls	r2, r2, #10
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	2105      	movs	r1, #5
 80020ec:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e09e      	b.n	8002230 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1e5      	bne.n	80020ca <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7e1b      	ldrb	r3, [r3, #24]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2180      	movs	r1, #128	@ 0x80
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e007      	b.n	8002128 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2180      	movs	r1, #128	@ 0x80
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7e5b      	ldrb	r3, [r3, #25]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d108      	bne.n	8002142 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2140      	movs	r1, #64	@ 0x40
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e007      	b.n	8002152 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2140      	movs	r1, #64	@ 0x40
 800214e:	438a      	bics	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7e9b      	ldrb	r3, [r3, #26]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d108      	bne.n	800216c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2120      	movs	r1, #32
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e007      	b.n	800217c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2120      	movs	r1, #32
 8002178:	438a      	bics	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7edb      	ldrb	r3, [r3, #27]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d108      	bne.n	8002196 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2110      	movs	r1, #16
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e007      	b.n	80021a6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2110      	movs	r1, #16
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7f1b      	ldrb	r3, [r3, #28]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2108      	movs	r1, #8
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e007      	b.n	80021d0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2108      	movs	r1, #8
 80021cc:	438a      	bics	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7f5b      	ldrb	r3, [r3, #29]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d108      	bne.n	80021ea <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2104      	movs	r1, #4
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e007      	b.n	80021fa <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2104      	movs	r1, #4
 80021f6:	438a      	bics	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	431a      	orrs	r2, r3
 8002210:	0011      	movs	r1, r2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002248:	2013      	movs	r0, #19
 800224a:	183b      	adds	r3, r7, r0
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	2120      	movs	r1, #32
 8002250:	5c52      	ldrb	r2, [r2, r1]
 8002252:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002254:	0002      	movs	r2, r0
 8002256:	18bb      	adds	r3, r7, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d004      	beq.n	8002268 <HAL_CAN_ConfigFilter+0x30>
 800225e:	18bb      	adds	r3, r7, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d000      	beq.n	8002268 <HAL_CAN_ConfigFilter+0x30>
 8002266:	e0cd      	b.n	8002404 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	58d3      	ldr	r3, [r2, r3]
 8002270:	2201      	movs	r2, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	0011      	movs	r1, r2
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	221f      	movs	r2, #31
 8002284:	4013      	ands	r3, r2
 8002286:	2201      	movs	r2, #1
 8002288:	409a      	lsls	r2, r3
 800228a:	0013      	movs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	2387      	movs	r3, #135	@ 0x87
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	58d3      	ldr	r3, [r2, r3]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	43d2      	mvns	r2, r2
 800229a:	401a      	ands	r2, r3
 800229c:	0011      	movs	r1, r2
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	2387      	movs	r3, #135	@ 0x87
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d129      	bne.n	8002302 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	2383      	movs	r3, #131	@ 0x83
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	58d3      	ldr	r3, [r2, r3]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	43d2      	mvns	r2, r2
 80022ba:	401a      	ands	r2, r3
 80022bc:	0011      	movs	r1, r2
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	2383      	movs	r3, #131	@ 0x83
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022d8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3248      	adds	r2, #72	@ 0x48
 80022de:	00d2      	lsls	r2, r2, #3
 80022e0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	3348      	adds	r3, #72	@ 0x48
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	18cb      	adds	r3, r1, r3
 80022fe:	3304      	adds	r3, #4
 8002300:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d128      	bne.n	800235c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	2383      	movs	r3, #131	@ 0x83
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	58d2      	ldr	r2, [r2, r3]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	431a      	orrs	r2, r3
 8002316:	0011      	movs	r1, r2
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	2383      	movs	r3, #131	@ 0x83
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002332:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3248      	adds	r2, #72	@ 0x48
 8002338:	00d2      	lsls	r2, r2, #3
 800233a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002350:	6979      	ldr	r1, [r7, #20]
 8002352:	3348      	adds	r3, #72	@ 0x48
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	18cb      	adds	r3, r1, r3
 8002358:	3304      	adds	r3, #4
 800235a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10c      	bne.n	800237e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	2381      	movs	r3, #129	@ 0x81
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	58d3      	ldr	r3, [r2, r3]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	43d2      	mvns	r2, r2
 8002370:	401a      	ands	r2, r3
 8002372:	0011      	movs	r1, r2
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	2381      	movs	r3, #129	@ 0x81
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	50d1      	str	r1, [r2, r3]
 800237c:	e00a      	b.n	8002394 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	2381      	movs	r3, #129	@ 0x81
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	58d2      	ldr	r2, [r2, r3]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	431a      	orrs	r2, r3
 800238a:	0011      	movs	r1, r2
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	2381      	movs	r3, #129	@ 0x81
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10c      	bne.n	80023b6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	2385      	movs	r3, #133	@ 0x85
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	58d3      	ldr	r3, [r2, r3]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	43d2      	mvns	r2, r2
 80023a8:	401a      	ands	r2, r3
 80023aa:	0011      	movs	r1, r2
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	2385      	movs	r3, #133	@ 0x85
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	50d1      	str	r1, [r2, r3]
 80023b4:	e00a      	b.n	80023cc <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	2385      	movs	r3, #133	@ 0x85
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	58d2      	ldr	r2, [r2, r3]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	0011      	movs	r1, r2
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	2385      	movs	r3, #133	@ 0x85
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10a      	bne.n	80023ea <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	2387      	movs	r3, #135	@ 0x87
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	58d2      	ldr	r2, [r2, r3]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	431a      	orrs	r2, r3
 80023e0:	0011      	movs	r1, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	2387      	movs	r3, #135	@ 0x87
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	58d3      	ldr	r3, [r2, r3]
 80023f2:	2201      	movs	r2, #1
 80023f4:	4393      	bics	r3, r2
 80023f6:	0019      	movs	r1, r3
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e007      	b.n	8002414 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	2280      	movs	r2, #128	@ 0x80
 800240a:	02d2      	lsls	r2, r2, #11
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
  }
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b006      	add	sp, #24
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d12f      	bne.n	8002490 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	2102      	movs	r1, #2
 8002436:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff fdca 	bl	8001fe0 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002450:	e013      	b.n	800247a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002452:	f7ff fdc5 	bl	8001fe0 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b0a      	cmp	r3, #10
 800245e:	d90c      	bls.n	800247a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	2280      	movs	r2, #128	@ 0x80
 8002466:	0292      	lsls	r2, r2, #10
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	2105      	movs	r1, #5
 8002474:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e012      	b.n	80024a0 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	4013      	ands	r3, r2
 8002484:	d1e5      	bne.n	8002452 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e007      	b.n	80024a0 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	2280      	movs	r2, #128	@ 0x80
 8002496:	0312      	lsls	r2, r2, #12
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
  }
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b004      	add	sp, #16
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b6:	2017      	movs	r0, #23
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	2120      	movs	r1, #32
 80024be:	5c52      	ldrb	r2, [r2, r1]
 80024c0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c2:	0002      	movs	r2, r0
 80024c4:	18bb      	adds	r3, r7, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d004      	beq.n	80024d6 <HAL_CAN_GetRxMessage+0x2e>
 80024cc:	18bb      	adds	r3, r7, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d000      	beq.n	80024d6 <HAL_CAN_GetRxMessage+0x2e>
 80024d4:	e107      	b.n	80026e6 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10e      	bne.n	80024fa <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2203      	movs	r2, #3
 80024e4:	4013      	ands	r3, r2
 80024e6:	d117      	bne.n	8002518 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	2280      	movs	r2, #128	@ 0x80
 80024ee:	0392      	lsls	r2, r2, #14
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0fd      	b.n	80026f6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2203      	movs	r2, #3
 8002502:	4013      	ands	r3, r2
 8002504:	d108      	bne.n	8002518 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	0392      	lsls	r2, r2, #14
 800250e:	431a      	orrs	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0ee      	b.n	80026f6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	321b      	adds	r2, #27
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	58d3      	ldr	r3, [r2, r3]
 8002524:	2204      	movs	r2, #4
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	321b      	adds	r2, #27
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	58d3      	ldr	r3, [r2, r3]
 8002540:	0d5b      	lsrs	r3, r3, #21
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	0d5a      	lsrs	r2, r3, #21
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e00a      	b.n	8002562 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	321b      	adds	r2, #27
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	58d3      	ldr	r3, [r2, r3]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	321b      	adds	r2, #27
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	58d3      	ldr	r3, [r2, r3]
 800256e:	2202      	movs	r2, #2
 8002570:	401a      	ands	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	331b      	adds	r3, #27
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	18d3      	adds	r3, r2, r3
 8002582:	3304      	adds	r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2208      	movs	r2, #8
 8002588:	4013      	ands	r3, r2
 800258a:	d003      	beq.n	8002594 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2208      	movs	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	e00b      	b.n	80025ac <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	331b      	adds	r3, #27
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	18d3      	adds	r3, r2, r3
 80025a0:	3304      	adds	r3, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	220f      	movs	r2, #15
 80025a6:	401a      	ands	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	331b      	adds	r3, #27
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	3304      	adds	r3, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	22ff      	movs	r2, #255	@ 0xff
 80025c0:	401a      	ands	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	331b      	adds	r3, #27
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	18d3      	adds	r3, r2, r3
 80025d2:	3304      	adds	r3, #4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0c1b      	lsrs	r3, r3, #16
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	0c1a      	lsrs	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	23dc      	movs	r3, #220	@ 0xdc
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	188a      	adds	r2, r1, r2
 80025ee:	18d3      	adds	r3, r2, r3
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	23dc      	movs	r3, #220	@ 0xdc
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	188a      	adds	r2, r1, r2
 8002606:	18d3      	adds	r3, r2, r3
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0a1a      	lsrs	r2, r3, #8
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	23dc      	movs	r3, #220	@ 0xdc
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	188a      	adds	r2, r1, r2
 8002622:	18d3      	adds	r3, r2, r3
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0c1a      	lsrs	r2, r3, #16
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	3302      	adds	r3, #2
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	23dc      	movs	r3, #220	@ 0xdc
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	188a      	adds	r2, r1, r2
 800263e:	18d3      	adds	r3, r2, r3
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e1a      	lsrs	r2, r3, #24
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3303      	adds	r3, #3
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	23de      	movs	r3, #222	@ 0xde
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	188a      	adds	r2, r1, r2
 800265a:	18d3      	adds	r3, r2, r3
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	3304      	adds	r3, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	23de      	movs	r3, #222	@ 0xde
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	188a      	adds	r2, r1, r2
 8002674:	18d3      	adds	r3, r2, r3
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0a1a      	lsrs	r2, r3, #8
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3305      	adds	r3, #5
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	23de      	movs	r3, #222	@ 0xde
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	188a      	adds	r2, r1, r2
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0c1a      	lsrs	r2, r3, #16
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	3306      	adds	r3, #6
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	23de      	movs	r3, #222	@ 0xde
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	188a      	adds	r2, r1, r2
 80026ac:	18d3      	adds	r3, r2, r3
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e1a      	lsrs	r2, r3, #24
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	3307      	adds	r3, #7
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d108      	bne.n	80026d2 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2120      	movs	r1, #32
 80026cc:	430a      	orrs	r2, r1
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	e007      	b.n	80026e2 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2120      	movs	r1, #32
 80026de:	430a      	orrs	r2, r1
 80026e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e007      	b.n	80026f6 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	2280      	movs	r2, #128	@ 0x80
 80026ec:	02d2      	lsls	r2, r2, #11
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
  }
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b006      	add	sp, #24
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002708:	200f      	movs	r0, #15
 800270a:	183b      	adds	r3, r7, r0
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	2120      	movs	r1, #32
 8002710:	5c52      	ldrb	r2, [r2, r1]
 8002712:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002714:	0002      	movs	r2, r0
 8002716:	18bb      	adds	r3, r7, r2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d003      	beq.n	8002726 <HAL_CAN_ActivateNotification+0x28>
 800271e:	18bb      	adds	r3, r7, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d109      	bne.n	800273a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6959      	ldr	r1, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e007      	b.n	800274a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	2280      	movs	r2, #128	@ 0x80
 8002740:	02d2      	lsls	r2, r2, #11
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
  }
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b08a      	sub	sp, #40	@ 0x28
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d100      	bne.n	8002798 <HAL_CAN_IRQHandler+0x46>
 8002796:	e084      	b.n	80028a2 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d024      	beq.n	80027ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f981 	bl	8002aba <HAL_CAN_TxMailbox0CompleteCallback>
 80027b8:	e017      	b.n	80027ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2204      	movs	r2, #4
 80027be:	4013      	ands	r3, r2
 80027c0:	d005      	beq.n	80027ce <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	2280      	movs	r2, #128	@ 0x80
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	4313      	orrs	r3, r2
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80027cc:	e00d      	b.n	80027ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2208      	movs	r2, #8
 80027d2:	4013      	ands	r3, r2
 80027d4:	d005      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	2280      	movs	r2, #128	@ 0x80
 80027da:	0152      	lsls	r2, r2, #5
 80027dc:	4313      	orrs	r3, r2
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e0:	e003      	b.n	80027ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f980 	bl	8002aea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	d028      	beq.n	8002846 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2280      	movs	r2, #128	@ 0x80
 80027fa:	0052      	lsls	r2, r2, #1
 80027fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0018      	movs	r0, r3
 800280c:	f000 f95d 	bl	8002aca <HAL_CAN_TxMailbox1CompleteCallback>
 8002810:	e019      	b.n	8002846 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4013      	ands	r3, r2
 800281a:	d005      	beq.n	8002828 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	0192      	lsls	r2, r2, #6
 8002822:	4313      	orrs	r3, r2
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
 8002826:	e00e      	b.n	8002846 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4013      	ands	r3, r2
 8002830:	d005      	beq.n	800283e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	2280      	movs	r2, #128	@ 0x80
 8002836:	01d2      	lsls	r2, r2, #7
 8002838:	4313      	orrs	r3, r2
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
 800283c:	e003      	b.n	8002846 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f95a 	bl	8002afa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	4013      	ands	r3, r2
 800284e:	d028      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2280      	movs	r2, #128	@ 0x80
 8002856:	0252      	lsls	r2, r2, #9
 8002858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	029b      	lsls	r3, r3, #10
 8002860:	4013      	ands	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f937 	bl	8002ada <HAL_CAN_TxMailbox2CompleteCallback>
 800286c:	e019      	b.n	80028a2 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	02db      	lsls	r3, r3, #11
 8002874:	4013      	ands	r3, r2
 8002876:	d005      	beq.n	8002884 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0212      	lsls	r2, r2, #8
 800287e:	4313      	orrs	r3, r2
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
 8002882:	e00e      	b.n	80028a2 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	031b      	lsls	r3, r3, #12
 800288a:	4013      	ands	r3, r2
 800288c:	d005      	beq.n	800289a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	2280      	movs	r2, #128	@ 0x80
 8002892:	0252      	lsls	r2, r2, #9
 8002894:	4313      	orrs	r3, r2
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	e003      	b.n	80028a2 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f000 f934 	bl	8002b0a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	2208      	movs	r2, #8
 80028a6:	4013      	ands	r3, r2
 80028a8:	d00c      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2210      	movs	r2, #16
 80028ae:	4013      	ands	r3, r2
 80028b0:	d008      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	2280      	movs	r2, #128	@ 0x80
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	4313      	orrs	r3, r2
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2210      	movs	r2, #16
 80028c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2204      	movs	r2, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	d00b      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2208      	movs	r2, #8
 80028d0:	4013      	ands	r3, r2
 80028d2:	d007      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 f923 	bl	8002b2a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d009      	beq.n	8002900 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2203      	movs	r2, #3
 80028f4:	4013      	ands	r3, r2
 80028f6:	d003      	beq.n	8002900 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f90d 	bl	8002b1a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2240      	movs	r2, #64	@ 0x40
 8002904:	4013      	ands	r3, r2
 8002906:	d00c      	beq.n	8002922 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2210      	movs	r2, #16
 800290c:	4013      	ands	r3, r2
 800290e:	d008      	beq.n	8002922 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	2280      	movs	r2, #128	@ 0x80
 8002914:	00d2      	lsls	r2, r2, #3
 8002916:	4313      	orrs	r3, r2
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2210      	movs	r2, #16
 8002920:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2220      	movs	r2, #32
 8002926:	4013      	ands	r3, r2
 8002928:	d00b      	beq.n	8002942 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2208      	movs	r2, #8
 800292e:	4013      	ands	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2208      	movs	r2, #8
 8002938:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f8fc 	bl	8002b3a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2210      	movs	r2, #16
 8002946:	4013      	ands	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2203      	movs	r2, #3
 8002952:	4013      	ands	r3, r2
 8002954:	d003      	beq.n	800295e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f7fe fc35 	bl	80011c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800295e:	6a3a      	ldr	r2, [r7, #32]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	029b      	lsls	r3, r3, #10
 8002964:	4013      	ands	r3, r2
 8002966:	d00b      	beq.n	8002980 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2210      	movs	r2, #16
 800296c:	4013      	ands	r3, r2
 800296e:	d007      	beq.n	8002980 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f8e5 	bl	8002b4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	025b      	lsls	r3, r3, #9
 8002986:	4013      	ands	r3, r2
 8002988:	d00b      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2208      	movs	r2, #8
 800298e:	4013      	ands	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2208      	movs	r2, #8
 8002998:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f000 f8dc 	bl	8002b5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029a2:	6a3a      	ldr	r2, [r7, #32]
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4013      	ands	r3, r2
 80029aa:	d100      	bne.n	80029ae <HAL_CAN_IRQHandler+0x25c>
 80029ac:	e074      	b.n	8002a98 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2204      	movs	r2, #4
 80029b2:	4013      	ands	r3, r2
 80029b4:	d100      	bne.n	80029b8 <HAL_CAN_IRQHandler+0x266>
 80029b6:	e06b      	b.n	8002a90 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	d007      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029c8:	d003      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	2201      	movs	r2, #1
 80029ce:	4313      	orrs	r3, r2
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029d2:	6a3a      	ldr	r2, [r7, #32]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	d007      	beq.n	80029ec <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029e2:	d003      	beq.n	80029ec <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	2202      	movs	r2, #2
 80029e8:	4313      	orrs	r3, r2
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029ec:	6a3a      	ldr	r2, [r7, #32]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4013      	ands	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2204      	movs	r2, #4
 80029fa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029fc:	d003      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	2204      	movs	r2, #4
 8002a02:	4313      	orrs	r3, r2
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a06:	6a3a      	ldr	r2, [r7, #32]
 8002a08:	2380      	movs	r3, #128	@ 0x80
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d03f      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2270      	movs	r2, #112	@ 0x70
 8002a14:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a16:	d03b      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2270      	movs	r2, #112	@ 0x70
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b60      	cmp	r3, #96	@ 0x60
 8002a20:	d027      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x320>
 8002a22:	d82c      	bhi.n	8002a7e <HAL_CAN_IRQHandler+0x32c>
 8002a24:	2b50      	cmp	r3, #80	@ 0x50
 8002a26:	d01f      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x316>
 8002a28:	d829      	bhi.n	8002a7e <HAL_CAN_IRQHandler+0x32c>
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d017      	beq.n	8002a5e <HAL_CAN_IRQHandler+0x30c>
 8002a2e:	d826      	bhi.n	8002a7e <HAL_CAN_IRQHandler+0x32c>
 8002a30:	2b30      	cmp	r3, #48	@ 0x30
 8002a32:	d00f      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x302>
 8002a34:	d823      	bhi.n	8002a7e <HAL_CAN_IRQHandler+0x32c>
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d002      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x2ee>
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d005      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a3e:	e01e      	b.n	8002a7e <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	2208      	movs	r2, #8
 8002a44:	4313      	orrs	r3, r2
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a48:	e01a      	b.n	8002a80 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a52:	e015      	b.n	8002a80 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	2220      	movs	r2, #32
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a5c:	e010      	b.n	8002a80 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	4313      	orrs	r3, r2
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a66:	e00b      	b.n	8002a80 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	2280      	movs	r2, #128	@ 0x80
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a70:	e006      	b.n	8002a80 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	0052      	lsls	r2, r2, #1
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a7c:	e000      	b.n	8002a80 <HAL_CAN_IRQHandler+0x32e>
            break;
 8002a7e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2170      	movs	r1, #112	@ 0x70
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2204      	movs	r2, #4
 8002a96:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f85c 	bl	8002b6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b00a      	add	sp, #40	@ 0x28
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b002      	add	sp, #8
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b002      	add	sp, #8
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b002      	add	sp, #8
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b002      	add	sp, #8
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b002      	add	sp, #8
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	0002      	movs	r2, r0
 8002b84:	1dfb      	adds	r3, r7, #7
 8002b86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	1dfb      	adds	r3, r7, #7
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b8e:	d809      	bhi.n	8002ba4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	001a      	movs	r2, r3
 8002b96:	231f      	movs	r3, #31
 8002b98:	401a      	ands	r2, r3
 8002b9a:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <__NVIC_EnableIRQ+0x30>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4091      	lsls	r1, r2
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
  }
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bc4:	d828      	bhi.n	8002c18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c84 <__NVIC_SetPriority+0xd4>)
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	33c0      	adds	r3, #192	@ 0xc0
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	589b      	ldr	r3, [r3, r2]
 8002bd6:	1dfa      	adds	r2, r7, #7
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	0011      	movs	r1, r2
 8002bdc:	2203      	movs	r2, #3
 8002bde:	400a      	ands	r2, r1
 8002be0:	00d2      	lsls	r2, r2, #3
 8002be2:	21ff      	movs	r1, #255	@ 0xff
 8002be4:	4091      	lsls	r1, r2
 8002be6:	000a      	movs	r2, r1
 8002be8:	43d2      	mvns	r2, r2
 8002bea:	401a      	ands	r2, r3
 8002bec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	22ff      	movs	r2, #255	@ 0xff
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	4003      	ands	r3, r0
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c04:	481f      	ldr	r0, [pc, #124]	@ (8002c84 <__NVIC_SetPriority+0xd4>)
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b25b      	sxtb	r3, r3
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	33c0      	adds	r3, #192	@ 0xc0
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c16:	e031      	b.n	8002c7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c18:	4a1b      	ldr	r2, [pc, #108]	@ (8002c88 <__NVIC_SetPriority+0xd8>)
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	0019      	movs	r1, r3
 8002c20:	230f      	movs	r3, #15
 8002c22:	400b      	ands	r3, r1
 8002c24:	3b08      	subs	r3, #8
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3306      	adds	r3, #6
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	18d3      	adds	r3, r2, r3
 8002c2e:	3304      	adds	r3, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1dfa      	adds	r2, r7, #7
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	0011      	movs	r1, r2
 8002c38:	2203      	movs	r2, #3
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	00d2      	lsls	r2, r2, #3
 8002c3e:	21ff      	movs	r1, #255	@ 0xff
 8002c40:	4091      	lsls	r1, r2
 8002c42:	000a      	movs	r2, r1
 8002c44:	43d2      	mvns	r2, r2
 8002c46:	401a      	ands	r2, r3
 8002c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	22ff      	movs	r2, #255	@ 0xff
 8002c50:	401a      	ands	r2, r3
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	0018      	movs	r0, r3
 8002c58:	2303      	movs	r3, #3
 8002c5a:	4003      	ands	r3, r0
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c60:	4809      	ldr	r0, [pc, #36]	@ (8002c88 <__NVIC_SetPriority+0xd8>)
 8002c62:	1dfb      	adds	r3, r7, #7
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	001c      	movs	r4, r3
 8002c68:	230f      	movs	r3, #15
 8002c6a:	4023      	ands	r3, r4
 8002c6c:	3b08      	subs	r3, #8
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	430a      	orrs	r2, r1
 8002c72:	3306      	adds	r3, #6
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	18c3      	adds	r3, r0, r3
 8002c78:	3304      	adds	r3, #4
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b003      	add	sp, #12
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	e000e100 	.word	0xe000e100
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	045b      	lsls	r3, r3, #17
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d301      	bcc.n	8002ca4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e010      	b.n	8002cc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <SysTick_Config+0x44>)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cac:	2301      	movs	r3, #1
 8002cae:	425b      	negs	r3, r3
 8002cb0:	2103      	movs	r1, #3
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff ff7c 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <SysTick_Config+0x44>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cbe:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <SysTick_Config+0x44>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	210f      	movs	r1, #15
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	1c02      	adds	r2, r0, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	0011      	movs	r1, r2
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	0002      	movs	r2, r0
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b25b      	sxtb	r3, r3
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff ff33 	bl	8002b7c <__NVIC_EnableIRQ>
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7ff ffaf 	bl	8002c8c <SysTick_Config>
 8002d2e:	0003      	movs	r3, r0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e036      	b.n	8002dbc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2221      	movs	r2, #33	@ 0x21
 8002d52:	2102      	movs	r1, #2
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <HAL_DMA_Init+0x8c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f9c4 	bl	800312c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2221      	movs	r2, #33	@ 0x21
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	2100      	movs	r1, #0
 8002db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b004      	add	sp, #16
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	ffffc00f 	.word	0xffffc00f

08002dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2317      	movs	r3, #23
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	5c9b      	ldrb	r3, [r3, r2]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_DMA_Start_IT+0x24>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e04f      	b.n	8002e8c <HAL_DMA_Start_IT+0xc4>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	2101      	movs	r1, #1
 8002df2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2221      	movs	r2, #33	@ 0x21
 8002df8:	5c9b      	ldrb	r3, [r3, r2]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d13a      	bne.n	8002e76 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2221      	movs	r2, #33	@ 0x21
 8002e04:	2102      	movs	r1, #2
 8002e06:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	438a      	bics	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f954 	bl	80030d2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	210e      	movs	r1, #14
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e00f      	b.n	8002e64 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	210a      	movs	r1, #10
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2104      	movs	r1, #4
 8002e60:	438a      	bics	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e007      	b.n	8002e86 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e7e:	2317      	movs	r3, #23
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	2202      	movs	r2, #2
 8002e84:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002e86:	2317      	movs	r3, #23
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b006      	add	sp, #24
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2221      	movs	r2, #33	@ 0x21
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d008      	beq.n	8002eba <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e020      	b.n	8002efc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	210e      	movs	r1, #14
 8002ec6:	438a      	bics	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4091      	lsls	r1, r2
 8002ee6:	000a      	movs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2221      	movs	r2, #33	@ 0x21
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	187b      	adds	r3, r7, r1
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2221      	movs	r2, #33	@ 0x21
 8002f18:	5c9b      	ldrb	r3, [r3, r2]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d006      	beq.n	8002f2e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2204      	movs	r2, #4
 8002f24:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e028      	b.n	8002f80 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	210e      	movs	r1, #14
 8002f3a:	438a      	bics	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	438a      	bics	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f56:	2101      	movs	r1, #1
 8002f58:	4091      	lsls	r1, r2
 8002f5a:	000a      	movs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2221      	movs	r2, #33	@ 0x21
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	4798      	blx	r3
    }
  }
  return status;
 8002f80:	230f      	movs	r3, #15
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	781b      	ldrb	r3, [r3, #0]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	2204      	movs	r2, #4
 8002fac:	409a      	lsls	r2, r3
 8002fae:	0013      	movs	r3, r2
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d024      	beq.n	8003000 <HAL_DMA_IRQHandler+0x72>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d020      	beq.n	8003000 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d107      	bne.n	8002fda <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	438a      	bics	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4091      	lsls	r1, r2
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d100      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x66>
 8002ff2:	e06a      	b.n	80030ca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ffe:	e064      	b.n	80030ca <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	2202      	movs	r2, #2
 8003006:	409a      	lsls	r2, r3
 8003008:	0013      	movs	r3, r2
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4013      	ands	r3, r2
 800300e:	d02b      	beq.n	8003068 <HAL_DMA_IRQHandler+0xda>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	d027      	beq.n	8003068 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2220      	movs	r2, #32
 8003020:	4013      	ands	r3, r2
 8003022:	d10b      	bne.n	800303c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	210a      	movs	r1, #10
 8003030:	438a      	bics	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2221      	movs	r2, #33	@ 0x21
 8003038:	2101      	movs	r1, #1
 800303a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	2102      	movs	r1, #2
 8003046:	4091      	lsls	r1, r2
 8003048:	000a      	movs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d036      	beq.n	80030ca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	0010      	movs	r0, r2
 8003064:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003066:	e030      	b.n	80030ca <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2208      	movs	r2, #8
 800306e:	409a      	lsls	r2, r3
 8003070:	0013      	movs	r3, r2
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	d028      	beq.n	80030ca <HAL_DMA_IRQHandler+0x13c>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2208      	movs	r2, #8
 800307c:	4013      	ands	r3, r2
 800307e:	d024      	beq.n	80030ca <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	210e      	movs	r1, #14
 800308c:	438a      	bics	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	2101      	movs	r1, #1
 800309a:	4091      	lsls	r1, r2
 800309c:	000a      	movs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2221      	movs	r2, #33	@ 0x21
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	0010      	movs	r0, r2
 80030c6:	4798      	blx	r3
    }
  }
}
 80030c8:	e7ff      	b.n	80030ca <HAL_DMA_IRQHandler+0x13c>
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e8:	2101      	movs	r1, #1
 80030ea:	4091      	lsls	r1, r2
 80030ec:	000a      	movs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d108      	bne.n	8003112 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003110:	e007      	b.n	8003122 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	60da      	str	r2, [r3, #12]
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a08      	ldr	r2, [pc, #32]	@ (800315c <DMA_CalcBaseAndBitshift+0x30>)
 800313a:	4694      	mov	ip, r2
 800313c:	4463      	add	r3, ip
 800313e:	2114      	movs	r1, #20
 8003140:	0018      	movs	r0, r3
 8003142:	f7fc ffeb 	bl	800011c <__udivsi3>
 8003146:	0003      	movs	r3, r0
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a03      	ldr	r2, [pc, #12]	@ (8003160 <DMA_CalcBaseAndBitshift+0x34>)
 8003152:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003154:	46c0      	nop			@ (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}
 800315c:	bffdfff8 	.word	0xbffdfff8
 8003160:	40020000 	.word	0x40020000

08003164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003172:	e155      	b.n	8003420 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4091      	lsls	r1, r2
 800317e:	000a      	movs	r2, r1
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d100      	bne.n	800318c <HAL_GPIO_Init+0x28>
 800318a:	e146      	b.n	800341a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2203      	movs	r2, #3
 8003192:	4013      	ands	r3, r2
 8003194:	2b01      	cmp	r3, #1
 8003196:	d005      	beq.n	80031a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2203      	movs	r2, #3
 800319e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d130      	bne.n	8003206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	409a      	lsls	r2, r3
 80031b2:	0013      	movs	r3, r2
 80031b4:	43da      	mvns	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	409a      	lsls	r2, r3
 80031c6:	0013      	movs	r3, r2
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031da:	2201      	movs	r2, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	409a      	lsls	r2, r3
 80031e0:	0013      	movs	r3, r2
 80031e2:	43da      	mvns	r2, r3
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	2201      	movs	r2, #1
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
 80031f8:	0013      	movs	r3, r2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2203      	movs	r2, #3
 800320c:	4013      	ands	r3, r2
 800320e:	2b03      	cmp	r3, #3
 8003210:	d017      	beq.n	8003242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	43da      	mvns	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	409a      	lsls	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	4013      	ands	r3, r2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d123      	bne.n	8003296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	58d3      	ldr	r3, [r2, r3]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2207      	movs	r2, #7
 8003260:	4013      	ands	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	409a      	lsls	r2, r3
 8003268:	0013      	movs	r3, r2
 800326a:	43da      	mvns	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2107      	movs	r1, #7
 800327a:	400b      	ands	r3, r1
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	409a      	lsls	r2, r3
 8003280:	0013      	movs	r3, r2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	6939      	ldr	r1, [r7, #16]
 8003294:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	409a      	lsls	r2, r3
 80032a4:	0013      	movs	r3, r2
 80032a6:	43da      	mvns	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2203      	movs	r2, #3
 80032b4:	401a      	ands	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	0013      	movs	r3, r2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	23c0      	movs	r3, #192	@ 0xc0
 80032d0:	029b      	lsls	r3, r3, #10
 80032d2:	4013      	ands	r3, r2
 80032d4:	d100      	bne.n	80032d8 <HAL_GPIO_Init+0x174>
 80032d6:	e0a0      	b.n	800341a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d8:	4b57      	ldr	r3, [pc, #348]	@ (8003438 <HAL_GPIO_Init+0x2d4>)
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	4b56      	ldr	r3, [pc, #344]	@ (8003438 <HAL_GPIO_Init+0x2d4>)
 80032de:	2101      	movs	r1, #1
 80032e0:	430a      	orrs	r2, r1
 80032e2:	619a      	str	r2, [r3, #24]
 80032e4:	4b54      	ldr	r3, [pc, #336]	@ (8003438 <HAL_GPIO_Init+0x2d4>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032f0:	4a52      	ldr	r2, [pc, #328]	@ (800343c <HAL_GPIO_Init+0x2d8>)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	3302      	adds	r3, #2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	589b      	ldr	r3, [r3, r2]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2203      	movs	r2, #3
 8003302:	4013      	ands	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	220f      	movs	r2, #15
 8003308:	409a      	lsls	r2, r3
 800330a:	0013      	movs	r3, r2
 800330c:	43da      	mvns	r2, r3
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	2390      	movs	r3, #144	@ 0x90
 8003318:	05db      	lsls	r3, r3, #23
 800331a:	429a      	cmp	r2, r3
 800331c:	d019      	beq.n	8003352 <HAL_GPIO_Init+0x1ee>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a47      	ldr	r2, [pc, #284]	@ (8003440 <HAL_GPIO_Init+0x2dc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x1ea>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a46      	ldr	r2, [pc, #280]	@ (8003444 <HAL_GPIO_Init+0x2e0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x1e6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a45      	ldr	r2, [pc, #276]	@ (8003448 <HAL_GPIO_Init+0x2e4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x1e2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a44      	ldr	r2, [pc, #272]	@ (800344c <HAL_GPIO_Init+0x2e8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x1de>
 800333e:	2304      	movs	r3, #4
 8003340:	e008      	b.n	8003354 <HAL_GPIO_Init+0x1f0>
 8003342:	2305      	movs	r3, #5
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x1f0>
 8003346:	2303      	movs	r3, #3
 8003348:	e004      	b.n	8003354 <HAL_GPIO_Init+0x1f0>
 800334a:	2302      	movs	r3, #2
 800334c:	e002      	b.n	8003354 <HAL_GPIO_Init+0x1f0>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_GPIO_Init+0x1f0>
 8003352:	2300      	movs	r3, #0
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	2103      	movs	r1, #3
 8003358:	400a      	ands	r2, r1
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	4093      	lsls	r3, r2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003364:	4935      	ldr	r1, [pc, #212]	@ (800343c <HAL_GPIO_Init+0x2d8>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	3302      	adds	r3, #2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003372:	4b37      	ldr	r3, [pc, #220]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43da      	mvns	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	035b      	lsls	r3, r3, #13
 800338a:	4013      	ands	r3, r2
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003396:	4b2e      	ldr	r3, [pc, #184]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800339c:	4b2c      	ldr	r3, [pc, #176]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43da      	mvns	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	039b      	lsls	r3, r3, #14
 80033b4:	4013      	ands	r3, r2
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033c0:	4b23      	ldr	r3, [pc, #140]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80033c6:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	2380      	movs	r3, #128	@ 0x80
 80033dc:	029b      	lsls	r3, r3, #10
 80033de:	4013      	ands	r3, r2
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033ea:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80033f0:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43da      	mvns	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	025b      	lsls	r3, r3, #9
 8003408:	4013      	ands	r3, r2
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	3301      	adds	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	40da      	lsrs	r2, r3
 8003428:	1e13      	subs	r3, r2, #0
 800342a:	d000      	beq.n	800342e <HAL_GPIO_Init+0x2ca>
 800342c:	e6a2      	b.n	8003174 <HAL_GPIO_Init+0x10>
  } 
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	46c0      	nop			@ (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b006      	add	sp, #24
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	40010000 	.word	0x40010000
 8003440:	48000400 	.word	0x48000400
 8003444:	48000800 	.word	0x48000800
 8003448:	48000c00 	.word	0x48000c00
 800344c:	48001000 	.word	0x48001000
 8003450:	40010400 	.word	0x40010400

08003454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e08f      	b.n	8003586 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2241      	movs	r2, #65	@ 0x41
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2240      	movs	r2, #64	@ 0x40
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f7fe f989 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2241      	movs	r2, #65	@ 0x41
 8003486:	2124      	movs	r1, #36	@ 0x24
 8003488:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	438a      	bics	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	493b      	ldr	r1, [pc, #236]	@ (8003590 <HAL_I2C_Init+0x13c>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4938      	ldr	r1, [pc, #224]	@ (8003594 <HAL_I2C_Init+0x140>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d108      	bne.n	80034d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2180      	movs	r1, #128	@ 0x80
 80034ca:	0209      	lsls	r1, r1, #8
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	e007      	b.n	80034e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2184      	movs	r1, #132	@ 0x84
 80034dc:	0209      	lsls	r1, r1, #8
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d109      	bne.n	80034fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2180      	movs	r1, #128	@ 0x80
 80034f6:	0109      	lsls	r1, r1, #4
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	e007      	b.n	800350e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4923      	ldr	r1, [pc, #140]	@ (8003598 <HAL_I2C_Init+0x144>)
 800350a:	400a      	ands	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4920      	ldr	r1, [pc, #128]	@ (800359c <HAL_I2C_Init+0x148>)
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	491a      	ldr	r1, [pc, #104]	@ (8003594 <HAL_I2C_Init+0x140>)
 800352a:	400a      	ands	r2, r1
 800352c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	431a      	orrs	r2, r3
 8003538:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2101      	movs	r1, #1
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2241      	movs	r2, #65	@ 0x41
 8003572:	2120      	movs	r1, #32
 8003574:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2242      	movs	r2, #66	@ 0x42
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	f0ffffff 	.word	0xf0ffffff
 8003594:	ffff7fff 	.word	0xffff7fff
 8003598:	fffff7ff 	.word	0xfffff7ff
 800359c:	02008000 	.word	0x02008000

080035a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	0008      	movs	r0, r1
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	0019      	movs	r1, r3
 80035ae:	230a      	movs	r3, #10
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	1c02      	adds	r2, r0, #0
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	2308      	movs	r3, #8
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	1c0a      	adds	r2, r1, #0
 80035bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2241      	movs	r2, #65	@ 0x41
 80035c2:	5c9b      	ldrb	r3, [r3, r2]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d000      	beq.n	80035cc <HAL_I2C_Master_Transmit+0x2c>
 80035ca:	e10a      	b.n	80037e2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2240      	movs	r2, #64	@ 0x40
 80035d0:	5c9b      	ldrb	r3, [r3, r2]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_I2C_Master_Transmit+0x3a>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e104      	b.n	80037e4 <HAL_I2C_Master_Transmit+0x244>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2240      	movs	r2, #64	@ 0x40
 80035de:	2101      	movs	r1, #1
 80035e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035e2:	f7fe fcfd 	bl	8001fe0 <HAL_GetTick>
 80035e6:	0003      	movs	r3, r0
 80035e8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	0219      	lsls	r1, r3, #8
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2319      	movs	r3, #25
 80035f6:	2201      	movs	r2, #1
 80035f8:	f000 fa3c 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0ef      	b.n	80037e4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2241      	movs	r2, #65	@ 0x41
 8003608:	2121      	movs	r1, #33	@ 0x21
 800360a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2242      	movs	r2, #66	@ 0x42
 8003610:	2110      	movs	r1, #16
 8003612:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2208      	movs	r2, #8
 8003624:	18ba      	adds	r2, r7, r2
 8003626:	8812      	ldrh	r2, [r2, #0]
 8003628:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2bff      	cmp	r3, #255	@ 0xff
 8003638:	d906      	bls.n	8003648 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	22ff      	movs	r2, #255	@ 0xff
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003640:	2380      	movs	r3, #128	@ 0x80
 8003642:	045b      	lsls	r3, r3, #17
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e007      	b.n	8003658 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	049b      	lsls	r3, r3, #18
 8003656:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d027      	beq.n	80036b0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3301      	adds	r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	697c      	ldr	r4, [r7, #20]
 800369c:	230a      	movs	r3, #10
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	8819      	ldrh	r1, [r3, #0]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	4b51      	ldr	r3, [pc, #324]	@ (80037ec <HAL_I2C_Master_Transmit+0x24c>)
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	0023      	movs	r3, r4
 80036aa:	f000 fc5b 	bl	8003f64 <I2C_TransferConfig>
 80036ae:	e06f      	b.n	8003790 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	697c      	ldr	r4, [r7, #20]
 80036b8:	230a      	movs	r3, #10
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	8819      	ldrh	r1, [r3, #0]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	4b4a      	ldr	r3, [pc, #296]	@ (80037ec <HAL_I2C_Master_Transmit+0x24c>)
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	0023      	movs	r3, r4
 80036c6:	f000 fc4d 	bl	8003f64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036ca:	e061      	b.n	8003790 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 fa26 	bl	8003b24 <I2C_WaitOnTXISFlagUntilTimeout>
 80036d8:	1e03      	subs	r3, r0, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e081      	b.n	80037e4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d03a      	beq.n	8003790 <HAL_I2C_Master_Transmit+0x1f0>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d136      	bne.n	8003790 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	0013      	movs	r3, r2
 800372c:	2200      	movs	r2, #0
 800372e:	2180      	movs	r1, #128	@ 0x80
 8003730:	f000 f9a0 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e053      	b.n	80037e4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2bff      	cmp	r3, #255	@ 0xff
 8003744:	d911      	bls.n	800376a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	22ff      	movs	r2, #255	@ 0xff
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003750:	b2da      	uxtb	r2, r3
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	045c      	lsls	r4, r3, #17
 8003756:	230a      	movs	r3, #10
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	8819      	ldrh	r1, [r3, #0]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	0023      	movs	r3, r4
 8003764:	f000 fbfe 	bl	8003f64 <I2C_TransferConfig>
 8003768:	e012      	b.n	8003790 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	b2da      	uxtb	r2, r3
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	049c      	lsls	r4, r3, #18
 800377e:	230a      	movs	r3, #10
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	8819      	ldrh	r1, [r3, #0]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	2300      	movs	r3, #0
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	0023      	movs	r3, r4
 800378c:	f000 fbea 	bl	8003f64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d198      	bne.n	80036cc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fa05 	bl	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037a6:	1e03      	subs	r3, r0, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e01a      	b.n	80037e4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2220      	movs	r2, #32
 80037b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	490b      	ldr	r1, [pc, #44]	@ (80037f0 <HAL_I2C_Master_Transmit+0x250>)
 80037c2:	400a      	ands	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2241      	movs	r2, #65	@ 0x41
 80037ca:	2120      	movs	r1, #32
 80037cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2242      	movs	r2, #66	@ 0x42
 80037d2:	2100      	movs	r1, #0
 80037d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2240      	movs	r2, #64	@ 0x40
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b007      	add	sp, #28
 80037ea:	bd90      	pop	{r4, r7, pc}
 80037ec:	80002000 	.word	0x80002000
 80037f0:	fe00e800 	.word	0xfe00e800

080037f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b089      	sub	sp, #36	@ 0x24
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	0008      	movs	r0, r1
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	0019      	movs	r1, r3
 8003802:	230a      	movs	r3, #10
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	1c02      	adds	r2, r0, #0
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	2308      	movs	r3, #8
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	1c0a      	adds	r2, r1, #0
 8003810:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2241      	movs	r2, #65	@ 0x41
 8003816:	5c9b      	ldrb	r3, [r3, r2]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b20      	cmp	r3, #32
 800381c:	d000      	beq.n	8003820 <HAL_I2C_Master_Receive+0x2c>
 800381e:	e0e8      	b.n	80039f2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	@ 0x40
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_I2C_Master_Receive+0x3a>
 800382a:	2302      	movs	r3, #2
 800382c:	e0e2      	b.n	80039f4 <HAL_I2C_Master_Receive+0x200>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2240      	movs	r2, #64	@ 0x40
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003836:	f7fe fbd3 	bl	8001fe0 <HAL_GetTick>
 800383a:	0003      	movs	r3, r0
 800383c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	0219      	lsls	r1, r3, #8
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2319      	movs	r3, #25
 800384a:	2201      	movs	r2, #1
 800384c:	f000 f912 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0cd      	b.n	80039f4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2241      	movs	r2, #65	@ 0x41
 800385c:	2122      	movs	r1, #34	@ 0x22
 800385e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2242      	movs	r2, #66	@ 0x42
 8003864:	2110      	movs	r1, #16
 8003866:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2208      	movs	r2, #8
 8003878:	18ba      	adds	r2, r7, r2
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2bff      	cmp	r3, #255	@ 0xff
 800388c:	d911      	bls.n	80038b2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003898:	b2da      	uxtb	r2, r3
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	045c      	lsls	r4, r3, #17
 800389e:	230a      	movs	r3, #10
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	8819      	ldrh	r1, [r3, #0]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	4b55      	ldr	r3, [pc, #340]	@ (80039fc <HAL_I2C_Master_Receive+0x208>)
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	0023      	movs	r3, r4
 80038ac:	f000 fb5a 	bl	8003f64 <I2C_TransferConfig>
 80038b0:	e076      	b.n	80039a0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	049c      	lsls	r4, r3, #18
 80038c6:	230a      	movs	r3, #10
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	8819      	ldrh	r1, [r3, #0]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_I2C_Master_Receive+0x208>)
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	0023      	movs	r3, r4
 80038d4:	f000 fb46 	bl	8003f64 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038d8:	e062      	b.n	80039a0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f9a9 	bl	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e082      	b.n	80039f4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03a      	beq.n	80039a0 <HAL_I2C_Master_Receive+0x1ac>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d136      	bne.n	80039a0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	0013      	movs	r3, r2
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	@ 0x80
 8003940:	f000 f898 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e053      	b.n	80039f4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2bff      	cmp	r3, #255	@ 0xff
 8003954:	d911      	bls.n	800397a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	22ff      	movs	r2, #255	@ 0xff
 800395a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003960:	b2da      	uxtb	r2, r3
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	045c      	lsls	r4, r3, #17
 8003966:	230a      	movs	r3, #10
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	8819      	ldrh	r1, [r3, #0]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	2300      	movs	r3, #0
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	0023      	movs	r3, r4
 8003974:	f000 faf6 	bl	8003f64 <I2C_TransferConfig>
 8003978:	e012      	b.n	80039a0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003988:	b2da      	uxtb	r2, r3
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	049c      	lsls	r4, r3, #18
 800398e:	230a      	movs	r3, #10
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	8819      	ldrh	r1, [r3, #0]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	0023      	movs	r3, r4
 800399c:	f000 fae2 	bl	8003f64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d197      	bne.n	80038da <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 f8fd 	bl	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039b6:	1e03      	subs	r3, r0, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e01a      	b.n	80039f4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2220      	movs	r2, #32
 80039c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	490b      	ldr	r1, [pc, #44]	@ (8003a00 <HAL_I2C_Master_Receive+0x20c>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2241      	movs	r2, #65	@ 0x41
 80039da:	2120      	movs	r1, #32
 80039dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2242      	movs	r2, #66	@ 0x42
 80039e2:	2100      	movs	r1, #0
 80039e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2240      	movs	r2, #64	@ 0x40
 80039ea:	2100      	movs	r1, #0
 80039ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	0018      	movs	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b007      	add	sp, #28
 80039fa:	bd90      	pop	{r4, r7, pc}
 80039fc:	80002400 	.word	0x80002400
 8003a00:	fe00e800 	.word	0xfe00e800

08003a04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2241      	movs	r2, #65	@ 0x41
 8003a10:	5c9b      	ldrb	r3, [r3, r2]
 8003a12:	b2db      	uxtb	r3, r3
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d103      	bne.n	8003a4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d007      	beq.n	8003a6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2101      	movs	r1, #1
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	619a      	str	r2, [r3, #24]
  }
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a84:	e03a      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 f971 	bl	8003d74 <I2C_IsErrorOccurred>
 8003a92:	1e03      	subs	r3, r0, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e040      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	d02d      	beq.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa0:	f7fe fa9e 	bl	8001fe0 <HAL_GetTick>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d122      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	425a      	negs	r2, r3
 8003ac6:	4153      	adcs	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d113      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad8:	2220      	movs	r2, #32
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2241      	movs	r2, #65	@ 0x41
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2242      	movs	r2, #66	@ 0x42
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2240      	movs	r2, #64	@ 0x40
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e00f      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4013      	ands	r3, r2
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	425a      	negs	r2, r3
 8003b0c:	4153      	adcs	r3, r2
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	001a      	movs	r2, r3
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d0b5      	beq.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b30:	e032      	b.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f91b 	bl	8003d74 <I2C_IsErrorOccurred>
 8003b3e:	1e03      	subs	r3, r0, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e030      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	d025      	beq.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4c:	f7fe fa48 	bl	8001fe0 <HAL_GetTick>
 8003b50:	0002      	movs	r2, r0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d11a      	bne.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d013      	beq.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b74:	2220      	movs	r2, #32
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2241      	movs	r2, #65	@ 0x41
 8003b80:	2120      	movs	r1, #32
 8003b82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2242      	movs	r2, #66	@ 0x42
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2240      	movs	r2, #64	@ 0x40
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d1c5      	bne.n	8003b32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b004      	add	sp, #16
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bbc:	e02f      	b.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 f8d5 	bl	8003d74 <I2C_IsErrorOccurred>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02d      	b.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fa05 	bl	8001fe0 <HAL_GetTick>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11a      	bne.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d013      	beq.n	8003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2241      	movs	r2, #65	@ 0x41
 8003c06:	2120      	movs	r1, #32
 8003c08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2242      	movs	r2, #66	@ 0x42
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2240      	movs	r2, #64	@ 0x40
 8003c16:	2100      	movs	r1, #0
 8003c18:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2220      	movs	r2, #32
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d1c8      	bne.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2317      	movs	r3, #23
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c4c:	e07b      	b.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f88d 	bl	8003d74 <I2C_IsErrorOccurred>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d003      	beq.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003c5e:	2317      	movs	r3, #23
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d140      	bne.n	8003cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003c74:	2117      	movs	r1, #23
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d13b      	bne.n	8003cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2204      	movs	r2, #4
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d106      	bne.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d123      	bne.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2210      	movs	r2, #16
 8003cae:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4929      	ldr	r1, [pc, #164]	@ (8003d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2241      	movs	r2, #65	@ 0x41
 8003cd2:	2120      	movs	r1, #32
 8003cd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2242      	movs	r2, #66	@ 0x42
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2240      	movs	r2, #64	@ 0x40
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003ce6:	2317      	movs	r3, #23
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e002      	b.n	8003cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003cf6:	f7fe f973 	bl	8001fe0 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11c      	bne.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003d0c:	2017      	movs	r0, #23
 8003d0e:	183b      	adds	r3, r7, r0
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d117      	bne.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d010      	beq.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	2220      	movs	r2, #32
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2241      	movs	r2, #65	@ 0x41
 8003d34:	2120      	movs	r1, #32
 8003d36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2240      	movs	r2, #64	@ 0x40
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003d40:	183b      	adds	r3, r7, r0
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d005      	beq.n	8003d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003d54:	2317      	movs	r3, #23
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d100      	bne.n	8003d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003d5e:	e776      	b.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003d60:	2317      	movs	r3, #23
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b006      	add	sp, #24
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	fe00e800 	.word	0xfe00e800

08003d74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2327      	movs	r3, #39	@ 0x27
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2210      	movs	r2, #16
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <I2C_IsErrorOccurred+0x2e>
 8003da0:	e079      	b.n	8003e96 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2210      	movs	r2, #16
 8003da8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003daa:	e057      	b.n	8003e5c <I2C_IsErrorOccurred+0xe8>
 8003dac:	2227      	movs	r2, #39	@ 0x27
 8003dae:	18bb      	adds	r3, r7, r2
 8003db0:	18ba      	adds	r2, r7, r2
 8003db2:	7812      	ldrb	r2, [r2, #0]
 8003db4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3301      	adds	r3, #1
 8003dba:	d04f      	beq.n	8003e5c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dbc:	f7fe f910 	bl	8001fe0 <HAL_GetTick>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <I2C_IsErrorOccurred+0x5e>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d144      	bne.n	8003e5c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	01db      	lsls	r3, r3, #7
 8003ddc:	4013      	ands	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003de0:	2013      	movs	r0, #19
 8003de2:	183b      	adds	r3, r7, r0
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	2142      	movs	r1, #66	@ 0x42
 8003de8:	5c52      	ldrb	r2, [r2, r1]
 8003dea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	401a      	ands	r2, r3
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d126      	bne.n	8003e4e <I2C_IsErrorOccurred+0xda>
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	2380      	movs	r3, #128	@ 0x80
 8003e04:	01db      	lsls	r3, r3, #7
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d021      	beq.n	8003e4e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d01d      	beq.n	8003e4e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2180      	movs	r1, #128	@ 0x80
 8003e1e:	01c9      	lsls	r1, r1, #7
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e24:	f7fe f8dc 	bl	8001fe0 <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2c:	e00f      	b.n	8003e4e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e2e:	f7fe f8d7 	bl	8001fe0 <HAL_GetTick>
 8003e32:	0002      	movs	r2, r0
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b19      	cmp	r3, #25
 8003e3a:	d908      	bls.n	8003e4e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	4313      	orrs	r3, r2
 8003e42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e44:	2327      	movs	r3, #39	@ 0x27
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]

              break;
 8003e4c:	e006      	b.n	8003e5c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2220      	movs	r2, #32
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d1e8      	bne.n	8003e2e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2220      	movs	r2, #32
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d004      	beq.n	8003e74 <I2C_IsErrorOccurred+0x100>
 8003e6a:	2327      	movs	r3, #39	@ 0x27
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d09b      	beq.n	8003dac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e74:	2327      	movs	r3, #39	@ 0x27
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2220      	movs	r2, #32
 8003e84:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e8e:	2327      	movs	r3, #39	@ 0x27
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d00c      	beq.n	8003ec2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2280      	movs	r2, #128	@ 0x80
 8003eb6:	0052      	lsls	r2, r2, #1
 8003eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eba:	2327      	movs	r3, #39	@ 0x27
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d00c      	beq.n	8003ee6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2208      	movs	r2, #8
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2280      	movs	r2, #128	@ 0x80
 8003eda:	00d2      	lsls	r2, r2, #3
 8003edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ede:	2327      	movs	r3, #39	@ 0x27
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d00c      	beq.n	8003f0a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2280      	movs	r2, #128	@ 0x80
 8003efe:	0092      	lsls	r2, r2, #2
 8003f00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f02:	2327      	movs	r3, #39	@ 0x27
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003f0a:	2327      	movs	r3, #39	@ 0x27
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01d      	beq.n	8003f50 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	0018      	movs	r0, r3
 8003f18:	f7ff fd8a 	bl	8003a30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	490e      	ldr	r1, [pc, #56]	@ (8003f60 <I2C_IsErrorOccurred+0x1ec>)
 8003f28:	400a      	ands	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2241      	movs	r2, #65	@ 0x41
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2242      	movs	r2, #66	@ 0x42
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2240      	movs	r2, #64	@ 0x40
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003f50:	2327      	movs	r3, #39	@ 0x27
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	781b      	ldrb	r3, [r3, #0]
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b00a      	add	sp, #40	@ 0x28
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	fe00e800 	.word	0xfe00e800

08003f64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	0008      	movs	r0, r1
 8003f6e:	0011      	movs	r1, r2
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	240a      	movs	r4, #10
 8003f74:	193b      	adds	r3, r7, r4
 8003f76:	1c02      	adds	r2, r0, #0
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	2009      	movs	r0, #9
 8003f7c:	183b      	adds	r3, r7, r0
 8003f7e:	1c0a      	adds	r2, r1, #0
 8003f80:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f82:	193b      	adds	r3, r7, r4
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	059b      	lsls	r3, r3, #22
 8003f88:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f8a:	183b      	adds	r3, r7, r0
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	0419      	lsls	r1, r3, #16
 8003f90:	23ff      	movs	r3, #255	@ 0xff
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f96:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fae:	0d51      	lsrs	r1, r2, #21
 8003fb0:	2280      	movs	r2, #128	@ 0x80
 8003fb2:	00d2      	lsls	r2, r2, #3
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	4907      	ldr	r1, [pc, #28]	@ (8003fd4 <I2C_TransferConfig+0x70>)
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	43d2      	mvns	r2, r2
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b007      	add	sp, #28
 8003fd0:	bd90      	pop	{r4, r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	03ff63ff 	.word	0x03ff63ff

08003fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2241      	movs	r2, #65	@ 0x41
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d138      	bne.n	8004060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2240      	movs	r2, #64	@ 0x40
 8003ff2:	5c9b      	ldrb	r3, [r3, r2]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e032      	b.n	8004062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2240      	movs	r2, #64	@ 0x40
 8004000:	2101      	movs	r1, #1
 8004002:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2241      	movs	r2, #65	@ 0x41
 8004008:	2124      	movs	r1, #36	@ 0x24
 800400a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2101      	movs	r1, #1
 8004018:	438a      	bics	r2, r1
 800401a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4911      	ldr	r1, [pc, #68]	@ (800406c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004028:	400a      	ands	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2241      	movs	r2, #65	@ 0x41
 8004050:	2120      	movs	r1, #32
 8004052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2240      	movs	r2, #64	@ 0x40
 8004058:	2100      	movs	r1, #0
 800405a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b002      	add	sp, #8
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	ffffefff 	.word	0xffffefff

08004070 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2241      	movs	r2, #65	@ 0x41
 800407e:	5c9b      	ldrb	r3, [r3, r2]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b20      	cmp	r3, #32
 8004084:	d139      	bne.n	80040fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2240      	movs	r2, #64	@ 0x40
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004090:	2302      	movs	r3, #2
 8004092:	e033      	b.n	80040fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2240      	movs	r2, #64	@ 0x40
 8004098:	2101      	movs	r1, #1
 800409a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2241      	movs	r2, #65	@ 0x41
 80040a0:	2124      	movs	r1, #36	@ 0x24
 80040a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	438a      	bics	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a11      	ldr	r2, [pc, #68]	@ (8004104 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2241      	movs	r2, #65	@ 0x41
 80040ea:	2120      	movs	r1, #32
 80040ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2240      	movs	r2, #64	@ 0x40
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b004      	add	sp, #16
 8004102:	bd80      	pop	{r7, pc}
 8004104:	fffff0ff 	.word	0xfffff0ff

08004108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f000 fb76 	bl	8004808 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	d100      	bne.n	8004128 <HAL_RCC_OscConfig+0x20>
 8004126:	e08e      	b.n	8004246 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004128:	4bc5      	ldr	r3, [pc, #788]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	220c      	movs	r2, #12
 800412e:	4013      	ands	r3, r2
 8004130:	2b04      	cmp	r3, #4
 8004132:	d00e      	beq.n	8004152 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004134:	4bc2      	ldr	r3, [pc, #776]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	220c      	movs	r2, #12
 800413a:	4013      	ands	r3, r2
 800413c:	2b08      	cmp	r3, #8
 800413e:	d117      	bne.n	8004170 <HAL_RCC_OscConfig+0x68>
 8004140:	4bbf      	ldr	r3, [pc, #764]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	23c0      	movs	r3, #192	@ 0xc0
 8004146:	025b      	lsls	r3, r3, #9
 8004148:	401a      	ands	r2, r3
 800414a:	2380      	movs	r3, #128	@ 0x80
 800414c:	025b      	lsls	r3, r3, #9
 800414e:	429a      	cmp	r2, r3
 8004150:	d10e      	bne.n	8004170 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004152:	4bbb      	ldr	r3, [pc, #748]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	029b      	lsls	r3, r3, #10
 800415a:	4013      	ands	r3, r2
 800415c:	d100      	bne.n	8004160 <HAL_RCC_OscConfig+0x58>
 800415e:	e071      	b.n	8004244 <HAL_RCC_OscConfig+0x13c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d000      	beq.n	800416a <HAL_RCC_OscConfig+0x62>
 8004168:	e06c      	b.n	8004244 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f000 fb4c 	bl	8004808 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <HAL_RCC_OscConfig+0x80>
 8004178:	4bb1      	ldr	r3, [pc, #708]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4bb0      	ldr	r3, [pc, #704]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800417e:	2180      	movs	r1, #128	@ 0x80
 8004180:	0249      	lsls	r1, r1, #9
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e02f      	b.n	80041e8 <HAL_RCC_OscConfig+0xe0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10c      	bne.n	80041aa <HAL_RCC_OscConfig+0xa2>
 8004190:	4bab      	ldr	r3, [pc, #684]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4baa      	ldr	r3, [pc, #680]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004196:	49ab      	ldr	r1, [pc, #684]	@ (8004444 <HAL_RCC_OscConfig+0x33c>)
 8004198:	400a      	ands	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	4ba8      	ldr	r3, [pc, #672]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4ba7      	ldr	r3, [pc, #668]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041a2:	49a9      	ldr	r1, [pc, #676]	@ (8004448 <HAL_RCC_OscConfig+0x340>)
 80041a4:	400a      	ands	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e01e      	b.n	80041e8 <HAL_RCC_OscConfig+0xe0>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d10e      	bne.n	80041d0 <HAL_RCC_OscConfig+0xc8>
 80041b2:	4ba3      	ldr	r3, [pc, #652]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4ba2      	ldr	r3, [pc, #648]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041b8:	2180      	movs	r1, #128	@ 0x80
 80041ba:	02c9      	lsls	r1, r1, #11
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	4b9f      	ldr	r3, [pc, #636]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b9e      	ldr	r3, [pc, #632]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041c6:	2180      	movs	r1, #128	@ 0x80
 80041c8:	0249      	lsls	r1, r1, #9
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e00b      	b.n	80041e8 <HAL_RCC_OscConfig+0xe0>
 80041d0:	4b9b      	ldr	r3, [pc, #620]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b9a      	ldr	r3, [pc, #616]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041d6:	499b      	ldr	r1, [pc, #620]	@ (8004444 <HAL_RCC_OscConfig+0x33c>)
 80041d8:	400a      	ands	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	4b98      	ldr	r3, [pc, #608]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b97      	ldr	r3, [pc, #604]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80041e2:	4999      	ldr	r1, [pc, #612]	@ (8004448 <HAL_RCC_OscConfig+0x340>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d014      	beq.n	800421a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd fef6 	bl	8001fe0 <HAL_GetTick>
 80041f4:	0003      	movs	r3, r0
 80041f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fa:	f7fd fef1 	bl	8001fe0 <HAL_GetTick>
 80041fe:	0002      	movs	r2, r0
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b64      	cmp	r3, #100	@ 0x64
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e2fd      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420c:	4b8c      	ldr	r3, [pc, #560]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	2380      	movs	r3, #128	@ 0x80
 8004212:	029b      	lsls	r3, r3, #10
 8004214:	4013      	ands	r3, r2
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0xf2>
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fd fee1 	bl	8001fe0 <HAL_GetTick>
 800421e:	0003      	movs	r3, r0
 8004220:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004224:	f7fd fedc 	bl	8001fe0 <HAL_GetTick>
 8004228:	0002      	movs	r2, r0
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e2e8      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	4b82      	ldr	r3, [pc, #520]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	4013      	ands	r3, r2
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x11c>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2202      	movs	r2, #2
 800424c:	4013      	ands	r3, r2
 800424e:	d100      	bne.n	8004252 <HAL_RCC_OscConfig+0x14a>
 8004250:	e06c      	b.n	800432c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004252:	4b7b      	ldr	r3, [pc, #492]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	220c      	movs	r2, #12
 8004258:	4013      	ands	r3, r2
 800425a:	d00e      	beq.n	800427a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800425c:	4b78      	ldr	r3, [pc, #480]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	220c      	movs	r2, #12
 8004262:	4013      	ands	r3, r2
 8004264:	2b08      	cmp	r3, #8
 8004266:	d11f      	bne.n	80042a8 <HAL_RCC_OscConfig+0x1a0>
 8004268:	4b75      	ldr	r3, [pc, #468]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	23c0      	movs	r3, #192	@ 0xc0
 800426e:	025b      	lsls	r3, r3, #9
 8004270:	401a      	ands	r2, r3
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	429a      	cmp	r2, r3
 8004278:	d116      	bne.n	80042a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	4b71      	ldr	r3, [pc, #452]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2202      	movs	r2, #2
 8004280:	4013      	ands	r3, r2
 8004282:	d005      	beq.n	8004290 <HAL_RCC_OscConfig+0x188>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d001      	beq.n	8004290 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e2bb      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004290:	4b6b      	ldr	r3, [pc, #428]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	22f8      	movs	r2, #248	@ 0xf8
 8004296:	4393      	bics	r3, r2
 8004298:	0019      	movs	r1, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00da      	lsls	r2, r3, #3
 80042a0:	4b67      	ldr	r3, [pc, #412]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	e041      	b.n	800432c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d024      	beq.n	80042fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b0:	4b63      	ldr	r3, [pc, #396]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b62      	ldr	r3, [pc, #392]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80042b6:	2101      	movs	r1, #1
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fd fe90 	bl	8001fe0 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c6:	f7fd fe8b 	bl	8001fe0 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e297      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	4b59      	ldr	r3, [pc, #356]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2202      	movs	r2, #2
 80042de:	4013      	ands	r3, r2
 80042e0:	d0f1      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e2:	4b57      	ldr	r3, [pc, #348]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	22f8      	movs	r2, #248	@ 0xf8
 80042e8:	4393      	bics	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	00da      	lsls	r2, r3, #3
 80042f2:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e018      	b.n	800432c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fa:	4b51      	ldr	r3, [pc, #324]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b50      	ldr	r3, [pc, #320]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004300:	2101      	movs	r1, #1
 8004302:	438a      	bics	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004306:	f7fd fe6b 	bl	8001fe0 <HAL_GetTick>
 800430a:	0003      	movs	r3, r0
 800430c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004310:	f7fd fe66 	bl	8001fe0 <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e272      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2202      	movs	r2, #2
 8004328:	4013      	ands	r3, r2
 800432a:	d1f1      	bne.n	8004310 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2208      	movs	r2, #8
 8004332:	4013      	ands	r3, r2
 8004334:	d036      	beq.n	80043a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d019      	beq.n	8004372 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433e:	4b40      	ldr	r3, [pc, #256]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004342:	4b3f      	ldr	r3, [pc, #252]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004344:	2101      	movs	r1, #1
 8004346:	430a      	orrs	r2, r1
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434a:	f7fd fe49 	bl	8001fe0 <HAL_GetTick>
 800434e:	0003      	movs	r3, r0
 8004350:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004354:	f7fd fe44 	bl	8001fe0 <HAL_GetTick>
 8004358:	0002      	movs	r2, r0
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e250      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	4b36      	ldr	r3, [pc, #216]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	2202      	movs	r2, #2
 800436c:	4013      	ands	r3, r2
 800436e:	d0f1      	beq.n	8004354 <HAL_RCC_OscConfig+0x24c>
 8004370:	e018      	b.n	80043a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004372:	4b33      	ldr	r3, [pc, #204]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004376:	4b32      	ldr	r3, [pc, #200]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004378:	2101      	movs	r1, #1
 800437a:	438a      	bics	r2, r1
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437e:	f7fd fe2f 	bl	8001fe0 <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004388:	f7fd fe2a 	bl	8001fe0 <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e236      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439a:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	d1f1      	bne.n	8004388 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2204      	movs	r2, #4
 80043aa:	4013      	ands	r3, r2
 80043ac:	d100      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2a8>
 80043ae:	e0b5      	b.n	800451c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b0:	201f      	movs	r0, #31
 80043b2:	183b      	adds	r3, r7, r0
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b8:	4b21      	ldr	r3, [pc, #132]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	055b      	lsls	r3, r3, #21
 80043c0:	4013      	ands	r3, r2
 80043c2:	d110      	bne.n	80043e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	0549      	lsls	r1, r1, #21
 80043ce:	430a      	orrs	r2, r1
 80043d0:	61da      	str	r2, [r3, #28]
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	2380      	movs	r3, #128	@ 0x80
 80043d8:	055b      	lsls	r3, r3, #21
 80043da:	4013      	ands	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	4b19      	ldr	r3, [pc, #100]	@ (800444c <HAL_RCC_OscConfig+0x344>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f2:	4b16      	ldr	r3, [pc, #88]	@ (800444c <HAL_RCC_OscConfig+0x344>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b15      	ldr	r3, [pc, #84]	@ (800444c <HAL_RCC_OscConfig+0x344>)
 80043f8:	2180      	movs	r1, #128	@ 0x80
 80043fa:	0049      	lsls	r1, r1, #1
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004400:	f7fd fdee 	bl	8001fe0 <HAL_GetTick>
 8004404:	0003      	movs	r3, r0
 8004406:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7fd fde9 	bl	8001fe0 <HAL_GetTick>
 800440e:	0002      	movs	r2, r0
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b64      	cmp	r3, #100	@ 0x64
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1f5      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_OscConfig+0x344>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	@ 0x80
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10f      	bne.n	8004450 <HAL_RCC_OscConfig+0x348>
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004432:	6a1a      	ldr	r2, [r3, #32]
 8004434:	4b02      	ldr	r3, [pc, #8]	@ (8004440 <HAL_RCC_OscConfig+0x338>)
 8004436:	2101      	movs	r1, #1
 8004438:	430a      	orrs	r2, r1
 800443a:	621a      	str	r2, [r3, #32]
 800443c:	e036      	b.n	80044ac <HAL_RCC_OscConfig+0x3a4>
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	40021000 	.word	0x40021000
 8004444:	fffeffff 	.word	0xfffeffff
 8004448:	fffbffff 	.word	0xfffbffff
 800444c:	40007000 	.word	0x40007000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10c      	bne.n	8004472 <HAL_RCC_OscConfig+0x36a>
 8004458:	4bca      	ldr	r3, [pc, #808]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	4bc9      	ldr	r3, [pc, #804]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800445e:	2101      	movs	r1, #1
 8004460:	438a      	bics	r2, r1
 8004462:	621a      	str	r2, [r3, #32]
 8004464:	4bc7      	ldr	r3, [pc, #796]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	4bc6      	ldr	r3, [pc, #792]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800446a:	2104      	movs	r1, #4
 800446c:	438a      	bics	r2, r1
 800446e:	621a      	str	r2, [r3, #32]
 8004470:	e01c      	b.n	80044ac <HAL_RCC_OscConfig+0x3a4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b05      	cmp	r3, #5
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x38c>
 800447a:	4bc2      	ldr	r3, [pc, #776]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	4bc1      	ldr	r3, [pc, #772]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004480:	2104      	movs	r1, #4
 8004482:	430a      	orrs	r2, r1
 8004484:	621a      	str	r2, [r3, #32]
 8004486:	4bbf      	ldr	r3, [pc, #764]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004488:	6a1a      	ldr	r2, [r3, #32]
 800448a:	4bbe      	ldr	r3, [pc, #760]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800448c:	2101      	movs	r1, #1
 800448e:	430a      	orrs	r2, r1
 8004490:	621a      	str	r2, [r3, #32]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0x3a4>
 8004494:	4bbb      	ldr	r3, [pc, #748]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	4bba      	ldr	r3, [pc, #744]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800449a:	2101      	movs	r1, #1
 800449c:	438a      	bics	r2, r1
 800449e:	621a      	str	r2, [r3, #32]
 80044a0:	4bb8      	ldr	r3, [pc, #736]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	4bb7      	ldr	r3, [pc, #732]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80044a6:	2104      	movs	r1, #4
 80044a8:	438a      	bics	r2, r1
 80044aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d014      	beq.n	80044de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fd fd94 	bl	8001fe0 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e009      	b.n	80044d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fd fd8f 	bl	8001fe0 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	4aaf      	ldr	r2, [pc, #700]	@ (8004788 <HAL_RCC_OscConfig+0x680>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e19a      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	4bac      	ldr	r3, [pc, #688]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	2202      	movs	r2, #2
 80044d8:	4013      	ands	r3, r2
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x3b6>
 80044dc:	e013      	b.n	8004506 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044de:	f7fd fd7f 	bl	8001fe0 <HAL_GetTick>
 80044e2:	0003      	movs	r3, r0
 80044e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e6:	e009      	b.n	80044fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fd fd7a 	bl	8001fe0 <HAL_GetTick>
 80044ec:	0002      	movs	r2, r0
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	4aa5      	ldr	r2, [pc, #660]	@ (8004788 <HAL_RCC_OscConfig+0x680>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e185      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fc:	4ba1      	ldr	r3, [pc, #644]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	2202      	movs	r2, #2
 8004502:	4013      	ands	r3, r2
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004506:	231f      	movs	r3, #31
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004510:	4b9c      	ldr	r3, [pc, #624]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	4b9b      	ldr	r3, [pc, #620]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004516:	499d      	ldr	r1, [pc, #628]	@ (800478c <HAL_RCC_OscConfig+0x684>)
 8004518:	400a      	ands	r2, r1
 800451a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2210      	movs	r2, #16
 8004522:	4013      	ands	r3, r2
 8004524:	d063      	beq.n	80045ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d12a      	bne.n	8004584 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800452e:	4b95      	ldr	r3, [pc, #596]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004532:	4b94      	ldr	r3, [pc, #592]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004534:	2104      	movs	r1, #4
 8004536:	430a      	orrs	r2, r1
 8004538:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800453a:	4b92      	ldr	r3, [pc, #584]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800453c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800453e:	4b91      	ldr	r3, [pc, #580]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004540:	2101      	movs	r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004546:	f7fd fd4b 	bl	8001fe0 <HAL_GetTick>
 800454a:	0003      	movs	r3, r0
 800454c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004550:	f7fd fd46 	bl	8001fe0 <HAL_GetTick>
 8004554:	0002      	movs	r2, r0
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e152      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	2202      	movs	r2, #2
 8004568:	4013      	ands	r3, r2
 800456a:	d0f1      	beq.n	8004550 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800456c:	4b85      	ldr	r3, [pc, #532]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800456e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004570:	22f8      	movs	r2, #248	@ 0xf8
 8004572:	4393      	bics	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	00da      	lsls	r2, r3, #3
 800457c:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800457e:	430a      	orrs	r2, r1
 8004580:	635a      	str	r2, [r3, #52]	@ 0x34
 8004582:	e034      	b.n	80045ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	3305      	adds	r3, #5
 800458a:	d111      	bne.n	80045b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800458c:	4b7d      	ldr	r3, [pc, #500]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800458e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004590:	4b7c      	ldr	r3, [pc, #496]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004592:	2104      	movs	r1, #4
 8004594:	438a      	bics	r2, r1
 8004596:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004598:	4b7a      	ldr	r3, [pc, #488]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800459a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459c:	22f8      	movs	r2, #248	@ 0xf8
 800459e:	4393      	bics	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	00da      	lsls	r2, r3, #3
 80045a8:	4b76      	ldr	r3, [pc, #472]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80045ae:	e01e      	b.n	80045ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80045b0:	4b74      	ldr	r3, [pc, #464]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80045b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045b4:	4b73      	ldr	r3, [pc, #460]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80045b6:	2104      	movs	r1, #4
 80045b8:	430a      	orrs	r2, r1
 80045ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80045bc:	4b71      	ldr	r3, [pc, #452]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80045be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c0:	4b70      	ldr	r3, [pc, #448]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80045c2:	2101      	movs	r1, #1
 80045c4:	438a      	bics	r2, r1
 80045c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c8:	f7fd fd0a 	bl	8001fe0 <HAL_GetTick>
 80045cc:	0003      	movs	r3, r0
 80045ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045d2:	f7fd fd05 	bl	8001fe0 <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e111      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045e4:	4b67      	ldr	r3, [pc, #412]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80045e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e8:	2202      	movs	r2, #2
 80045ea:	4013      	ands	r3, r2
 80045ec:	d1f1      	bne.n	80045d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2220      	movs	r2, #32
 80045f4:	4013      	ands	r3, r2
 80045f6:	d05c      	beq.n	80046b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045f8:	4b62      	ldr	r3, [pc, #392]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	220c      	movs	r2, #12
 80045fe:	4013      	ands	r3, r2
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d00e      	beq.n	8004622 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004604:	4b5f      	ldr	r3, [pc, #380]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	220c      	movs	r2, #12
 800460a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800460c:	2b08      	cmp	r3, #8
 800460e:	d114      	bne.n	800463a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004610:	4b5c      	ldr	r3, [pc, #368]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	23c0      	movs	r3, #192	@ 0xc0
 8004616:	025b      	lsls	r3, r3, #9
 8004618:	401a      	ands	r2, r3
 800461a:	23c0      	movs	r3, #192	@ 0xc0
 800461c:	025b      	lsls	r3, r3, #9
 800461e:	429a      	cmp	r2, r3
 8004620:	d10b      	bne.n	800463a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004622:	4b58      	ldr	r3, [pc, #352]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004626:	2380      	movs	r3, #128	@ 0x80
 8004628:	029b      	lsls	r3, r3, #10
 800462a:	4013      	ands	r3, r2
 800462c:	d040      	beq.n	80046b0 <HAL_RCC_OscConfig+0x5a8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d03c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0e6      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01b      	beq.n	800467a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004642:	4b50      	ldr	r3, [pc, #320]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004646:	4b4f      	ldr	r3, [pc, #316]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004648:	2180      	movs	r1, #128	@ 0x80
 800464a:	0249      	lsls	r1, r1, #9
 800464c:	430a      	orrs	r2, r1
 800464e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fd fcc6 	bl	8001fe0 <HAL_GetTick>
 8004654:	0003      	movs	r3, r0
 8004656:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800465a:	f7fd fcc1 	bl	8001fe0 <HAL_GetTick>
 800465e:	0002      	movs	r2, r0
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0cd      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800466c:	4b45      	ldr	r3, [pc, #276]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800466e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004670:	2380      	movs	r3, #128	@ 0x80
 8004672:	029b      	lsls	r3, r3, #10
 8004674:	4013      	ands	r3, r2
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x552>
 8004678:	e01b      	b.n	80046b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800467a:	4b42      	ldr	r3, [pc, #264]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800467c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800467e:	4b41      	ldr	r3, [pc, #260]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004680:	4943      	ldr	r1, [pc, #268]	@ (8004790 <HAL_RCC_OscConfig+0x688>)
 8004682:	400a      	ands	r2, r1
 8004684:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fd fcab 	bl	8001fe0 <HAL_GetTick>
 800468a:	0003      	movs	r3, r0
 800468c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004690:	f7fd fca6 	bl	8001fe0 <HAL_GetTick>
 8004694:	0002      	movs	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0b2      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80046a2:	4b38      	ldr	r3, [pc, #224]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80046a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046a6:	2380      	movs	r3, #128	@ 0x80
 80046a8:	029b      	lsls	r3, r3, #10
 80046aa:	4013      	ands	r3, r2
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x588>
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80046b0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d100      	bne.n	80046bc <HAL_RCC_OscConfig+0x5b4>
 80046ba:	e0a4      	b.n	8004806 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046bc:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	220c      	movs	r2, #12
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d100      	bne.n	80046ca <HAL_RCC_OscConfig+0x5c2>
 80046c8:	e078      	b.n	80047bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d14c      	bne.n	800476c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80046d8:	492e      	ldr	r1, [pc, #184]	@ (8004794 <HAL_RCC_OscConfig+0x68c>)
 80046da:	400a      	ands	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046de:	f7fd fc7f 	bl	8001fe0 <HAL_GetTick>
 80046e2:	0003      	movs	r3, r0
 80046e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fd fc7a 	bl	8001fe0 <HAL_GetTick>
 80046ec:	0002      	movs	r2, r0
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e086      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fa:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	049b      	lsls	r3, r3, #18
 8004702:	4013      	ands	r3, r2
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004706:	4b1f      	ldr	r3, [pc, #124]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	220f      	movs	r2, #15
 800470c:	4393      	bics	r3, r2
 800470e:	0019      	movs	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004714:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004716:	430a      	orrs	r2, r1
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c
 800471a:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <HAL_RCC_OscConfig+0x690>)
 8004720:	4013      	ands	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	431a      	orrs	r2, r3
 800472e:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004734:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800473a:	2180      	movs	r1, #128	@ 0x80
 800473c:	0449      	lsls	r1, r1, #17
 800473e:	430a      	orrs	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7fd fc4d 	bl	8001fe0 <HAL_GetTick>
 8004746:	0003      	movs	r3, r0
 8004748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474c:	f7fd fc48 	bl	8001fe0 <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e054      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800475e:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	@ 0x80
 8004764:	049b      	lsls	r3, r3, #18
 8004766:	4013      	ands	r3, r2
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x644>
 800476a:	e04c      	b.n	8004806 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <HAL_RCC_OscConfig+0x67c>)
 8004772:	4908      	ldr	r1, [pc, #32]	@ (8004794 <HAL_RCC_OscConfig+0x68c>)
 8004774:	400a      	ands	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fd fc32 	bl	8001fe0 <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004780:	e015      	b.n	80047ae <HAL_RCC_OscConfig+0x6a6>
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	40021000 	.word	0x40021000
 8004788:	00001388 	.word	0x00001388
 800478c:	efffffff 	.word	0xefffffff
 8004790:	fffeffff 	.word	0xfffeffff
 8004794:	feffffff 	.word	0xfeffffff
 8004798:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fc20 	bl	8001fe0 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e02c      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ae:	4b18      	ldr	r3, [pc, #96]	@ (8004810 <HAL_RCC_OscConfig+0x708>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	049b      	lsls	r3, r3, #18
 80047b6:	4013      	ands	r3, r2
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x694>
 80047ba:	e024      	b.n	8004806 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e01f      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80047c8:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <HAL_RCC_OscConfig+0x708>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <HAL_RCC_OscConfig+0x708>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	23c0      	movs	r3, #192	@ 0xc0
 80047d8:	025b      	lsls	r3, r3, #9
 80047da:	401a      	ands	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d10e      	bne.n	8004802 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	220f      	movs	r2, #15
 80047e8:	401a      	ands	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	23f0      	movs	r3, #240	@ 0xf0
 80047f6:	039b      	lsls	r3, r3, #14
 80047f8:	401a      	ands	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b008      	add	sp, #32
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0bf      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b61      	ldr	r3, [pc, #388]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	4013      	ands	r3, r2
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d911      	bls.n	800485a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b5e      	ldr	r3, [pc, #376]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2201      	movs	r2, #1
 800483c:	4393      	bics	r3, r2
 800483e:	0019      	movs	r1, r3
 8004840:	4b5b      	ldr	r3, [pc, #364]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004848:	4b59      	ldr	r3, [pc, #356]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	4013      	ands	r3, r2
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d001      	beq.n	800485a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0a6      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2202      	movs	r2, #2
 8004860:	4013      	ands	r3, r2
 8004862:	d015      	beq.n	8004890 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2204      	movs	r2, #4
 800486a:	4013      	ands	r3, r2
 800486c:	d006      	beq.n	800487c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800486e:	4b51      	ldr	r3, [pc, #324]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4b50      	ldr	r3, [pc, #320]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004874:	21e0      	movs	r1, #224	@ 0xe0
 8004876:	00c9      	lsls	r1, r1, #3
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b4d      	ldr	r3, [pc, #308]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	22f0      	movs	r2, #240	@ 0xf0
 8004882:	4393      	bics	r3, r2
 8004884:	0019      	movs	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	4b4a      	ldr	r3, [pc, #296]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	4013      	ands	r3, r2
 8004898:	d04c      	beq.n	8004934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b44      	ldr	r3, [pc, #272]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	029b      	lsls	r3, r3, #10
 80048aa:	4013      	ands	r3, r2
 80048ac:	d120      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07a      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	4b3e      	ldr	r3, [pc, #248]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	049b      	lsls	r3, r3, #18
 80048c2:	4013      	ands	r3, r2
 80048c4:	d114      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06e      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048d2:	4b38      	ldr	r3, [pc, #224]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 80048d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	4013      	ands	r3, r2
 80048dc:	d108      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e062      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b34      	ldr	r3, [pc, #208]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2202      	movs	r2, #2
 80048e8:	4013      	ands	r3, r2
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e05b      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f0:	4b30      	ldr	r3, [pc, #192]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2203      	movs	r2, #3
 80048f6:	4393      	bics	r3, r2
 80048f8:	0019      	movs	r1, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4b2d      	ldr	r3, [pc, #180]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004904:	f7fd fb6c 	bl	8001fe0 <HAL_GetTick>
 8004908:	0003      	movs	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490c:	e009      	b.n	8004922 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490e:	f7fd fb67 	bl	8001fe0 <HAL_GetTick>
 8004912:	0002      	movs	r2, r0
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	4a27      	ldr	r2, [pc, #156]	@ (80049b8 <HAL_RCC_ClockConfig+0x1a4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e042      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	220c      	movs	r2, #12
 8004928:	401a      	ands	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	429a      	cmp	r2, r3
 8004932:	d1ec      	bne.n	800490e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004934:	4b1e      	ldr	r3, [pc, #120]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d211      	bcs.n	8004966 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	4393      	bics	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	4b18      	ldr	r3, [pc, #96]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004954:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <HAL_RCC_ClockConfig+0x19c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2201      	movs	r2, #1
 800495a:	4013      	ands	r3, r2
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d001      	beq.n	8004966 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e020      	b.n	80049a8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2204      	movs	r2, #4
 800496c:	4013      	ands	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a11      	ldr	r2, [pc, #68]	@ (80049bc <HAL_RCC_ClockConfig+0x1a8>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004984:	f000 f820 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004988:	0001      	movs	r1, r0
 800498a:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <HAL_RCC_ClockConfig+0x1a0>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	220f      	movs	r2, #15
 8004992:	4013      	ands	r3, r2
 8004994:	4a0a      	ldr	r2, [pc, #40]	@ (80049c0 <HAL_RCC_ClockConfig+0x1ac>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	000a      	movs	r2, r1
 800499a:	40da      	lsrs	r2, r3
 800499c:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b0>)
 800499e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80049a0:	2003      	movs	r0, #3
 80049a2:	f7fd fad7 	bl	8001f54 <HAL_InitTick>
  
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40022000 	.word	0x40022000
 80049b4:	40021000 	.word	0x40021000
 80049b8:	00001388 	.word	0x00001388
 80049bc:	fffff8ff 	.word	0xfffff8ff
 80049c0:	08007654 	.word	0x08007654
 80049c4:	20000014 	.word	0x20000014

080049c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80049e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	220c      	movs	r2, #12
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d046      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0xb8>
 80049f2:	d848      	bhi.n	8004a86 <HAL_RCC_GetSysClockFreq+0xbe>
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d002      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x36>
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d003      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x3c>
 80049fc:	e043      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049fe:	4b27      	ldr	r3, [pc, #156]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a00:	613b      	str	r3, [r7, #16]
      break;
 8004a02:	e043      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	0c9b      	lsrs	r3, r3, #18
 8004a08:	220f      	movs	r2, #15
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	4a24      	ldr	r2, [pc, #144]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004a0e:	5cd3      	ldrb	r3, [r2, r3]
 8004a10:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a12:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	220f      	movs	r2, #15
 8004a18:	4013      	ands	r3, r2
 8004a1a:	4a22      	ldr	r2, [pc, #136]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004a1c:	5cd3      	ldrb	r3, [r2, r3]
 8004a1e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	23c0      	movs	r3, #192	@ 0xc0
 8004a24:	025b      	lsls	r3, r3, #9
 8004a26:	401a      	ands	r2, r3
 8004a28:	2380      	movs	r3, #128	@ 0x80
 8004a2a:	025b      	lsls	r3, r3, #9
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	481a      	ldr	r0, [pc, #104]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a34:	f7fb fb72 	bl	800011c <__udivsi3>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4353      	muls	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e01a      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	23c0      	movs	r3, #192	@ 0xc0
 8004a48:	025b      	lsls	r3, r3, #9
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	23c0      	movs	r3, #192	@ 0xc0
 8004a4e:	025b      	lsls	r3, r3, #9
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d109      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	4814      	ldr	r0, [pc, #80]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004a58:	f7fb fb60 	bl	800011c <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	001a      	movs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4353      	muls	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	480c      	ldr	r0, [pc, #48]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a6c:	f7fb fb56 	bl	800011c <__udivsi3>
 8004a70:	0003      	movs	r3, r0
 8004a72:	001a      	movs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4353      	muls	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
      break;
 8004a7e:	e005      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004a80:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004a82:	613b      	str	r3, [r7, #16]
      break;
 8004a84:	e002      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a86:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a88:	613b      	str	r3, [r7, #16]
      break;
 8004a8a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a8c:	693b      	ldr	r3, [r7, #16]
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b006      	add	sp, #24
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	007a1200 	.word	0x007a1200
 8004aa0:	0800766c 	.word	0x0800766c
 8004aa4:	0800767c 	.word	0x0800767c
 8004aa8:	02dc6c00 	.word	0x02dc6c00

08004aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b02      	ldr	r3, [pc, #8]	@ (8004abc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	20000014 	.word	0x20000014

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004ac4:	f7ff fff2 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004ac8:	0001      	movs	r1, r0
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	40d9      	lsrs	r1, r3
 8004ada:	000b      	movs	r3, r1
}    
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	08007664 	.word	0x08007664

08004aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	025b      	lsls	r3, r3, #9
 8004b04:	4013      	ands	r3, r2
 8004b06:	d100      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b08:	e08e      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004b0a:	2017      	movs	r0, #23
 8004b0c:	183b      	adds	r3, r7, r0
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b6e      	ldr	r3, [pc, #440]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	2380      	movs	r3, #128	@ 0x80
 8004b18:	055b      	lsls	r3, r3, #21
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d110      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	4b6a      	ldr	r3, [pc, #424]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b24:	2180      	movs	r1, #128	@ 0x80
 8004b26:	0549      	lsls	r1, r1, #21
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	61da      	str	r2, [r3, #28]
 8004b2c:	4b67      	ldr	r3, [pc, #412]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	055b      	lsls	r3, r3, #21
 8004b34:	4013      	ands	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	183b      	adds	r3, r7, r0
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	4b63      	ldr	r3, [pc, #396]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d11a      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4c:	4b60      	ldr	r3, [pc, #384]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b52:	2180      	movs	r1, #128	@ 0x80
 8004b54:	0049      	lsls	r1, r1, #1
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fa41 	bl	8001fe0 <HAL_GetTick>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b64:	f7fd fa3c 	bl	8001fe0 <HAL_GetTick>
 8004b68:	0002      	movs	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0a6      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	4b56      	ldr	r3, [pc, #344]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b82:	4b52      	ldr	r3, [pc, #328]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	23c0      	movs	r3, #192	@ 0xc0
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d034      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	23c0      	movs	r3, #192	@ 0xc0
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d02c      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba4:	4b49      	ldr	r3, [pc, #292]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bae:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	4b46      	ldr	r3, [pc, #280]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bb4:	2180      	movs	r1, #128	@ 0x80
 8004bb6:	0249      	lsls	r1, r1, #9
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bbc:	4b43      	ldr	r3, [pc, #268]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	4b42      	ldr	r3, [pc, #264]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bc2:	4945      	ldr	r1, [pc, #276]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bc8:	4b40      	ldr	r3, [pc, #256]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fa03 	bl	8001fe0 <HAL_GetTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bde:	e009      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fd f9fe 	bl	8001fe0 <HAL_GetTick>
 8004be4:	0002      	movs	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	4a3c      	ldr	r2, [pc, #240]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e067      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf4:	4b35      	ldr	r3, [pc, #212]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bfe:	4b33      	ldr	r3, [pc, #204]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	4a34      	ldr	r2, [pc, #208]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c12:	2317      	movs	r3, #23
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	4b2a      	ldr	r3, [pc, #168]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c22:	492f      	ldr	r1, [pc, #188]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004c24:	400a      	ands	r2, r1
 8004c26:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c32:	4b26      	ldr	r3, [pc, #152]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	2203      	movs	r2, #3
 8004c38:	4393      	bics	r3, r2
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b22      	ldr	r3, [pc, #136]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c42:	430a      	orrs	r2, r1
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c50:	4b1e      	ldr	r3, [pc, #120]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c54:	4a23      	ldr	r2, [pc, #140]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c6e:	4b17      	ldr	r3, [pc, #92]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c72:	2210      	movs	r2, #16
 8004c74:	4393      	bics	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	4b13      	ldr	r3, [pc, #76]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	029b      	lsls	r3, r3, #10
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	2280      	movs	r2, #128	@ 0x80
 8004c94:	4393      	bics	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4013      	ands	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cae:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	2240      	movs	r2, #64	@ 0x40
 8004cb4:	4393      	bics	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	4b03      	ldr	r3, [pc, #12]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b006      	add	sp, #24
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	fffffcff 	.word	0xfffffcff
 8004cd8:	fffeffff 	.word	0xfffeffff
 8004cdc:	00001388 	.word	0x00001388
 8004ce0:	efffffff 	.word	0xefffffff
 8004ce4:	fffcffff 	.word	0xfffcffff

08004ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e044      	b.n	8004d84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d107      	bne.n	8004d12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2278      	movs	r2, #120	@ 0x78
 8004d06:	2100      	movs	r1, #0
 8004d08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7fc fd8f 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2224      	movs	r2, #36	@ 0x24
 8004d16:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2101      	movs	r1, #1
 8004d24:	438a      	bics	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 fd98 	bl	8005868 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f000 fc0c 	bl	8005558 <UART_SetConfig>
 8004d40:	0003      	movs	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e01c      	b.n	8004d84 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	490d      	ldr	r1, [pc, #52]	@ (8004d8c <HAL_UART_Init+0xa4>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	212a      	movs	r1, #42	@ 0x2a
 8004d66:	438a      	bics	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2101      	movs	r1, #1
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f000 fe27 	bl	80059d0 <UART_CheckIdleState>
 8004d82:	0003      	movs	r3, r0
}
 8004d84:	0018      	movs	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	ffffb7ff 	.word	0xffffb7ff

08004d90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	1dbb      	adds	r3, r7, #6
 8004d9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d000      	beq.n	8004da8 <HAL_UART_Transmit_DMA+0x18>
 8004da6:	e077      	b.n	8004e98 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_UART_Transmit_DMA+0x26>
 8004dae:	1dbb      	adds	r3, r7, #6
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e06f      	b.n	8004e9a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	015b      	lsls	r3, r3, #5
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d109      	bne.n	8004dda <HAL_UART_Transmit_DMA+0x4a>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d105      	bne.n	8004dda <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d001      	beq.n	8004dda <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e05f      	b.n	8004e9a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1dba      	adds	r2, r7, #6
 8004de4:	2150      	movs	r1, #80	@ 0x50
 8004de6:	8812      	ldrh	r2, [r2, #0]
 8004de8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1dba      	adds	r2, r7, #6
 8004dee:	2152      	movs	r1, #82	@ 0x52
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2284      	movs	r2, #132	@ 0x84
 8004df8:	2100      	movs	r1, #0
 8004dfa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2221      	movs	r2, #33	@ 0x21
 8004e00:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d027      	beq.n	8004e5a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <HAL_UART_Transmit_DMA+0x114>)
 8004e10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	4a24      	ldr	r2, [pc, #144]	@ (8004ea8 <HAL_UART_Transmit_DMA+0x118>)
 8004e18:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1e:	4a23      	ldr	r2, [pc, #140]	@ (8004eac <HAL_UART_Transmit_DMA+0x11c>)
 8004e20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e26:	2200      	movs	r2, #0
 8004e28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e32:	0019      	movs	r1, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3328      	adds	r3, #40	@ 0x28
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	1dbb      	adds	r3, r7, #6
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	f7fd ffc2 	bl	8002dc8 <HAL_DMA_Start_IT>
 8004e44:	1e03      	subs	r3, r0, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2284      	movs	r2, #132	@ 0x84
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e01f      	b.n	8004e9a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2240      	movs	r2, #64	@ 0x40
 8004e60:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e62:	f3ef 8310 	mrs	r3, PRIMASK
 8004e66:	613b      	str	r3, [r7, #16]
  return(result);
 8004e68:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f383 8810 	msr	PRIMASK, r3
}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2180      	movs	r1, #128	@ 0x80
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b008      	add	sp, #32
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	08005e51 	.word	0x08005e51
 8004ea8:	08005ee5 	.word	0x08005ee5
 8004eac:	08006073 	.word	0x08006073

08004eb0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	1dbb      	adds	r3, r7, #6
 8004ebc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2280      	movs	r2, #128	@ 0x80
 8004ec2:	589b      	ldr	r3, [r3, r2]
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d145      	bne.n	8004f54 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_UART_Receive_DMA+0x26>
 8004ece:	1dbb      	adds	r3, r7, #6
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e03d      	b.n	8004f56 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	2380      	movs	r3, #128	@ 0x80
 8004ee0:	015b      	lsls	r3, r3, #5
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d109      	bne.n	8004efa <HAL_UART_Receive_DMA+0x4a>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d001      	beq.n	8004efa <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e02d      	b.n	8004f56 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	2380      	movs	r3, #128	@ 0x80
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d019      	beq.n	8004f42 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f12:	613b      	str	r3, [r7, #16]
  return(result);
 8004f14:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f383 8810 	msr	PRIMASK, r3
}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2180      	movs	r1, #128	@ 0x80
 8004f30:	04c9      	lsls	r1, r1, #19
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	f383 8810 	msr	PRIMASK, r3
}
 8004f40:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f42:	1dbb      	adds	r3, r7, #6
 8004f44:	881a      	ldrh	r2, [r3, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f000 fe58 	bl	8005c00 <UART_Start_Receive_DMA>
 8004f50:	0003      	movs	r3, r0
 8004f52:	e000      	b.n	8004f56 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
  }
}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b008      	add	sp, #32
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b0ab      	sub	sp, #172	@ 0xac
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	22a4      	movs	r2, #164	@ 0xa4
 8004f70:	18b9      	adds	r1, r7, r2
 8004f72:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	20a0      	movs	r0, #160	@ 0xa0
 8004f7c:	1839      	adds	r1, r7, r0
 8004f7e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	219c      	movs	r1, #156	@ 0x9c
 8004f88:	1879      	adds	r1, r7, r1
 8004f8a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f8c:	0011      	movs	r1, r2
 8004f8e:	18bb      	adds	r3, r7, r2
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a99      	ldr	r2, [pc, #612]	@ (80051f8 <HAL_UART_IRQHandler+0x298>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	2298      	movs	r2, #152	@ 0x98
 8004f98:	18bc      	adds	r4, r7, r2
 8004f9a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004f9c:	18bb      	adds	r3, r7, r2
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d114      	bne.n	8004fce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fa4:	187b      	adds	r3, r7, r1
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	4013      	ands	r3, r2
 8004fac:	d00f      	beq.n	8004fce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fae:	183b      	adds	r3, r7, r0
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d00a      	beq.n	8004fce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d100      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x62>
 8004fc0:	e29e      	b.n	8005500 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	0010      	movs	r0, r2
 8004fca:	4798      	blx	r3
      }
      return;
 8004fcc:	e298      	b.n	8005500 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fce:	2398      	movs	r3, #152	@ 0x98
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d100      	bne.n	8004fda <HAL_UART_IRQHandler+0x7a>
 8004fd8:	e114      	b.n	8005204 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fda:	239c      	movs	r3, #156	@ 0x9c
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d106      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fe6:	23a0      	movs	r3, #160	@ 0xa0
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a83      	ldr	r2, [pc, #524]	@ (80051fc <HAL_UART_IRQHandler+0x29c>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d100      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x94>
 8004ff2:	e107      	b.n	8005204 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff4:	23a4      	movs	r3, #164	@ 0xa4
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d012      	beq.n	8005026 <HAL_UART_IRQHandler+0xc6>
 8005000:	23a0      	movs	r3, #160	@ 0xa0
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	2380      	movs	r3, #128	@ 0x80
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	4013      	ands	r3, r2
 800500c:	d00b      	beq.n	8005026 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2284      	movs	r2, #132	@ 0x84
 800501a:	589b      	ldr	r3, [r3, r2]
 800501c:	2201      	movs	r2, #1
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2184      	movs	r1, #132	@ 0x84
 8005024:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005026:	23a4      	movs	r3, #164	@ 0xa4
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2202      	movs	r2, #2
 800502e:	4013      	ands	r3, r2
 8005030:	d011      	beq.n	8005056 <HAL_UART_IRQHandler+0xf6>
 8005032:	239c      	movs	r3, #156	@ 0x9c
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	4013      	ands	r3, r2
 800503c:	d00b      	beq.n	8005056 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2202      	movs	r2, #2
 8005044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2284      	movs	r2, #132	@ 0x84
 800504a:	589b      	ldr	r3, [r3, r2]
 800504c:	2204      	movs	r2, #4
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2184      	movs	r1, #132	@ 0x84
 8005054:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005056:	23a4      	movs	r3, #164	@ 0xa4
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2204      	movs	r2, #4
 800505e:	4013      	ands	r3, r2
 8005060:	d011      	beq.n	8005086 <HAL_UART_IRQHandler+0x126>
 8005062:	239c      	movs	r3, #156	@ 0x9c
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	4013      	ands	r3, r2
 800506c:	d00b      	beq.n	8005086 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2204      	movs	r2, #4
 8005074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2284      	movs	r2, #132	@ 0x84
 800507a:	589b      	ldr	r3, [r3, r2]
 800507c:	2202      	movs	r2, #2
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2184      	movs	r1, #132	@ 0x84
 8005084:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005086:	23a4      	movs	r3, #164	@ 0xa4
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2208      	movs	r2, #8
 800508e:	4013      	ands	r3, r2
 8005090:	d017      	beq.n	80050c2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005092:	23a0      	movs	r3, #160	@ 0xa0
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2220      	movs	r2, #32
 800509a:	4013      	ands	r3, r2
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800509e:	239c      	movs	r3, #156	@ 0x9c
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050a8:	d00b      	beq.n	80050c2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2208      	movs	r2, #8
 80050b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2284      	movs	r2, #132	@ 0x84
 80050b6:	589b      	ldr	r3, [r3, r2]
 80050b8:	2208      	movs	r2, #8
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2184      	movs	r1, #132	@ 0x84
 80050c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050c2:	23a4      	movs	r3, #164	@ 0xa4
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	4013      	ands	r3, r2
 80050ce:	d013      	beq.n	80050f8 <HAL_UART_IRQHandler+0x198>
 80050d0:	23a0      	movs	r3, #160	@ 0xa0
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	2380      	movs	r3, #128	@ 0x80
 80050d8:	04db      	lsls	r3, r3, #19
 80050da:	4013      	ands	r3, r2
 80050dc:	d00c      	beq.n	80050f8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2280      	movs	r2, #128	@ 0x80
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2284      	movs	r2, #132	@ 0x84
 80050ec:	589b      	ldr	r3, [r3, r2]
 80050ee:	2220      	movs	r2, #32
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2184      	movs	r1, #132	@ 0x84
 80050f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2284      	movs	r2, #132	@ 0x84
 80050fc:	589b      	ldr	r3, [r3, r2]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d100      	bne.n	8005104 <HAL_UART_IRQHandler+0x1a4>
 8005102:	e1ff      	b.n	8005504 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005104:	23a4      	movs	r3, #164	@ 0xa4
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2220      	movs	r2, #32
 800510c:	4013      	ands	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005110:	23a0      	movs	r3, #160	@ 0xa0
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2220      	movs	r2, #32
 8005118:	4013      	ands	r3, r2
 800511a:	d008      	beq.n	800512e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	0010      	movs	r0, r2
 800512c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2284      	movs	r2, #132	@ 0x84
 8005132:	589b      	ldr	r3, [r3, r2]
 8005134:	2194      	movs	r1, #148	@ 0x94
 8005136:	187a      	adds	r2, r7, r1
 8005138:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2240      	movs	r2, #64	@ 0x40
 8005142:	4013      	ands	r3, r2
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d004      	beq.n	8005152 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005148:	187b      	adds	r3, r7, r1
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2228      	movs	r2, #40	@ 0x28
 800514e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005150:	d047      	beq.n	80051e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f000 fe17 	bl	8005d88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2240      	movs	r2, #64	@ 0x40
 8005162:	4013      	ands	r3, r2
 8005164:	2b40      	cmp	r3, #64	@ 0x40
 8005166:	d137      	bne.n	80051d8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005168:	f3ef 8310 	mrs	r3, PRIMASK
 800516c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800516e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005170:	2090      	movs	r0, #144	@ 0x90
 8005172:	183a      	adds	r2, r7, r0
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	2301      	movs	r3, #1
 8005178:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2140      	movs	r1, #64	@ 0x40
 800518e:	438a      	bics	r2, r1
 8005190:	609a      	str	r2, [r3, #8]
 8005192:	183b      	adds	r3, r7, r0
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800519a:	f383 8810 	msr	PRIMASK, r3
}
 800519e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d012      	beq.n	80051ce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ac:	4a14      	ldr	r2, [pc, #80]	@ (8005200 <HAL_UART_IRQHandler+0x2a0>)
 80051ae:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7fd fea5 	bl	8002f04 <HAL_DMA_Abort_IT>
 80051ba:	1e03      	subs	r3, r0, #0
 80051bc:	d01a      	beq.n	80051f4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c8:	0018      	movs	r0, r3
 80051ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	e012      	b.n	80051f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f001 f821 	bl	8006218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	e00d      	b.n	80051f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0018      	movs	r0, r3
 80051dc:	f001 f81c 	bl	8006218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e008      	b.n	80051f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f001 f817 	bl	8006218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2284      	movs	r2, #132	@ 0x84
 80051ee:	2100      	movs	r1, #0
 80051f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80051f2:	e187      	b.n	8005504 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	46c0      	nop			@ (mov r8, r8)
    return;
 80051f6:	e185      	b.n	8005504 <HAL_UART_IRQHandler+0x5a4>
 80051f8:	0000080f 	.word	0x0000080f
 80051fc:	04000120 	.word	0x04000120
 8005200:	080060f7 	.word	0x080060f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005208:	2b01      	cmp	r3, #1
 800520a:	d000      	beq.n	800520e <HAL_UART_IRQHandler+0x2ae>
 800520c:	e139      	b.n	8005482 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800520e:	23a4      	movs	r3, #164	@ 0xa4
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2210      	movs	r2, #16
 8005216:	4013      	ands	r3, r2
 8005218:	d100      	bne.n	800521c <HAL_UART_IRQHandler+0x2bc>
 800521a:	e132      	b.n	8005482 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800521c:	23a0      	movs	r3, #160	@ 0xa0
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2210      	movs	r2, #16
 8005224:	4013      	ands	r3, r2
 8005226:	d100      	bne.n	800522a <HAL_UART_IRQHandler+0x2ca>
 8005228:	e12b      	b.n	8005482 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2210      	movs	r2, #16
 8005230:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2240      	movs	r2, #64	@ 0x40
 800523a:	4013      	ands	r3, r2
 800523c:	2b40      	cmp	r3, #64	@ 0x40
 800523e:	d000      	beq.n	8005242 <HAL_UART_IRQHandler+0x2e2>
 8005240:	e09f      	b.n	8005382 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	217e      	movs	r1, #126	@ 0x7e
 800524c:	187b      	adds	r3, r7, r1
 800524e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005250:	187b      	adds	r3, r7, r1
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d100      	bne.n	800525a <HAL_UART_IRQHandler+0x2fa>
 8005258:	e156      	b.n	8005508 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2258      	movs	r2, #88	@ 0x58
 800525e:	5a9b      	ldrh	r3, [r3, r2]
 8005260:	187a      	adds	r2, r7, r1
 8005262:	8812      	ldrh	r2, [r2, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d300      	bcc.n	800526a <HAL_UART_IRQHandler+0x30a>
 8005268:	e14e      	b.n	8005508 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	187a      	adds	r2, r7, r1
 800526e:	215a      	movs	r1, #90	@ 0x5a
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b20      	cmp	r3, #32
 800527c:	d06f      	beq.n	800535e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527e:	f3ef 8310 	mrs	r3, PRIMASK
 8005282:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005286:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005288:	2301      	movs	r3, #1
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800528e:	f383 8810 	msr	PRIMASK, r3
}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	499e      	ldr	r1, [pc, #632]	@ (8005518 <HAL_UART_IRQHandler+0x5b8>)
 80052a0:	400a      	ands	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	f383 8810 	msr	PRIMASK, r3
}
 80052ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b0:	f3ef 8310 	mrs	r3, PRIMASK
 80052b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80052b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80052ba:	2301      	movs	r3, #1
 80052bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c0:	f383 8810 	msr	PRIMASK, r3
}
 80052c4:	46c0      	nop			@ (mov r8, r8)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2101      	movs	r1, #1
 80052d2:	438a      	bics	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052dc:	f383 8810 	msr	PRIMASK, r3
}
 80052e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e2:	f3ef 8310 	mrs	r3, PRIMASK
 80052e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80052e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ec:	2301      	movs	r3, #1
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2140      	movs	r1, #64	@ 0x40
 8005304:	438a      	bics	r2, r1
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800530a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800530e:	f383 8810 	msr	PRIMASK, r3
}
 8005312:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2280      	movs	r2, #128	@ 0x80
 8005318:	2120      	movs	r1, #32
 800531a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005322:	f3ef 8310 	mrs	r3, PRIMASK
 8005326:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800532c:	2301      	movs	r3, #1
 800532e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005332:	f383 8810 	msr	PRIMASK, r3
}
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2110      	movs	r1, #16
 8005344:	438a      	bics	r2, r1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800534a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534e:	f383 8810 	msr	PRIMASK, r3
}
 8005352:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005358:	0018      	movs	r0, r3
 800535a:	f7fd fd9b 	bl	8002e94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2258      	movs	r2, #88	@ 0x58
 8005368:	5a9a      	ldrh	r2, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	215a      	movs	r1, #90	@ 0x5a
 800536e:	5a5b      	ldrh	r3, [r3, r1]
 8005370:	b29b      	uxth	r3, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	0011      	movs	r1, r2
 800537a:	0018      	movs	r0, r3
 800537c:	f000 f8e0 	bl	8005540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005380:	e0c2      	b.n	8005508 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2258      	movs	r2, #88	@ 0x58
 8005386:	5a99      	ldrh	r1, [r3, r2]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	225a      	movs	r2, #90	@ 0x5a
 800538c:	5a9b      	ldrh	r3, [r3, r2]
 800538e:	b29a      	uxth	r2, r3
 8005390:	208e      	movs	r0, #142	@ 0x8e
 8005392:	183b      	adds	r3, r7, r0
 8005394:	1a8a      	subs	r2, r1, r2
 8005396:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	225a      	movs	r2, #90	@ 0x5a
 800539c:	5a9b      	ldrh	r3, [r3, r2]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d100      	bne.n	80053a6 <HAL_UART_IRQHandler+0x446>
 80053a4:	e0b2      	b.n	800550c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80053a6:	183b      	adds	r3, r7, r0
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d100      	bne.n	80053b0 <HAL_UART_IRQHandler+0x450>
 80053ae:	e0ad      	b.n	800550c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b0:	f3ef 8310 	mrs	r3, PRIMASK
 80053b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80053b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b8:	2488      	movs	r4, #136	@ 0x88
 80053ba:	193a      	adds	r2, r7, r4
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	2301      	movs	r3, #1
 80053c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f383 8810 	msr	PRIMASK, r3
}
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4951      	ldr	r1, [pc, #324]	@ (800551c <HAL_UART_IRQHandler+0x5bc>)
 80053d6:	400a      	ands	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	193b      	adds	r3, r7, r4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f383 8810 	msr	PRIMASK, r3
}
 80053e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e8:	f3ef 8310 	mrs	r3, PRIMASK
 80053ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80053ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	2484      	movs	r4, #132	@ 0x84
 80053f2:	193a      	adds	r2, r7, r4
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	2301      	movs	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2101      	movs	r1, #1
 800540e:	438a      	bics	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	193b      	adds	r3, r7, r4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2280      	movs	r2, #128	@ 0x80
 8005424:	2120      	movs	r1, #32
 8005426:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005434:	f3ef 8310 	mrs	r3, PRIMASK
 8005438:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543c:	2480      	movs	r4, #128	@ 0x80
 800543e:	193a      	adds	r2, r7, r4
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	2301      	movs	r3, #1
 8005444:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2110      	movs	r1, #16
 800545a:	438a      	bics	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	193b      	adds	r3, r7, r4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005472:	183b      	adds	r3, r7, r0
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f000 f860 	bl	8005540 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005480:	e044      	b.n	800550c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005482:	23a4      	movs	r3, #164	@ 0xa4
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	2380      	movs	r3, #128	@ 0x80
 800548a:	035b      	lsls	r3, r3, #13
 800548c:	4013      	ands	r3, r2
 800548e:	d010      	beq.n	80054b2 <HAL_UART_IRQHandler+0x552>
 8005490:	239c      	movs	r3, #156	@ 0x9c
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	@ 0x80
 8005498:	03db      	lsls	r3, r3, #15
 800549a:	4013      	ands	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2280      	movs	r2, #128	@ 0x80
 80054a4:	0352      	lsls	r2, r2, #13
 80054a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 fe65 	bl	800617a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054b0:	e02f      	b.n	8005512 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054b2:	23a4      	movs	r3, #164	@ 0xa4
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2280      	movs	r2, #128	@ 0x80
 80054ba:	4013      	ands	r3, r2
 80054bc:	d00f      	beq.n	80054de <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054be:	23a0      	movs	r3, #160	@ 0xa0
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2280      	movs	r2, #128	@ 0x80
 80054c6:	4013      	ands	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01e      	beq.n	8005510 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	0010      	movs	r0, r2
 80054da:	4798      	blx	r3
    }
    return;
 80054dc:	e018      	b.n	8005510 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054de:	23a4      	movs	r3, #164	@ 0xa4
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2240      	movs	r2, #64	@ 0x40
 80054e6:	4013      	ands	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_UART_IRQHandler+0x5b2>
 80054ea:	23a0      	movs	r3, #160	@ 0xa0
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2240      	movs	r2, #64	@ 0x40
 80054f2:	4013      	ands	r3, r2
 80054f4:	d00d      	beq.n	8005512 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f000 fe13 	bl	8006124 <UART_EndTransmit_IT>
    return;
 80054fe:	e008      	b.n	8005512 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005500:	46c0      	nop			@ (mov r8, r8)
 8005502:	e006      	b.n	8005512 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	e004      	b.n	8005512 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005508:	46c0      	nop			@ (mov r8, r8)
 800550a:	e002      	b.n	8005512 <HAL_UART_IRQHandler+0x5b2>
      return;
 800550c:	46c0      	nop			@ (mov r8, r8)
 800550e:	e000      	b.n	8005512 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005510:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005512:	46bd      	mov	sp, r7
 8005514:	b02b      	add	sp, #172	@ 0xac
 8005516:	bd90      	pop	{r4, r7, pc}
 8005518:	fffffeff 	.word	0xfffffeff
 800551c:	fffffedf 	.word	0xfffffedf

08005520 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005528:	46c0      	nop			@ (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005538:	46c0      	nop			@ (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	000a      	movs	r2, r1
 800554a:	1cbb      	adds	r3, r7, #2
 800554c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b002      	add	sp, #8
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005560:	231e      	movs	r3, #30
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4aaf      	ldr	r2, [pc, #700]	@ (8005844 <UART_SetConfig+0x2ec>)
 8005588:	4013      	ands	r3, r2
 800558a:	0019      	movs	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	430a      	orrs	r2, r1
 8005594:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4aaa      	ldr	r2, [pc, #680]	@ (8005848 <UART_SetConfig+0x2f0>)
 800559e:	4013      	ands	r3, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4aa1      	ldr	r2, [pc, #644]	@ (800584c <UART_SetConfig+0x2f4>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	0019      	movs	r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a9d      	ldr	r2, [pc, #628]	@ (8005850 <UART_SetConfig+0x2f8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d127      	bne.n	800562e <UART_SetConfig+0xd6>
 80055de:	4b9d      	ldr	r3, [pc, #628]	@ (8005854 <UART_SetConfig+0x2fc>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	2203      	movs	r2, #3
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d00d      	beq.n	8005606 <UART_SetConfig+0xae>
 80055ea:	d81b      	bhi.n	8005624 <UART_SetConfig+0xcc>
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d014      	beq.n	800561a <UART_SetConfig+0xc2>
 80055f0:	d818      	bhi.n	8005624 <UART_SetConfig+0xcc>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <UART_SetConfig+0xa4>
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d00a      	beq.n	8005610 <UART_SetConfig+0xb8>
 80055fa:	e013      	b.n	8005624 <UART_SetConfig+0xcc>
 80055fc:	231f      	movs	r3, #31
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e065      	b.n	80056d2 <UART_SetConfig+0x17a>
 8005606:	231f      	movs	r3, #31
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2202      	movs	r2, #2
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e060      	b.n	80056d2 <UART_SetConfig+0x17a>
 8005610:	231f      	movs	r3, #31
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	2204      	movs	r2, #4
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e05b      	b.n	80056d2 <UART_SetConfig+0x17a>
 800561a:	231f      	movs	r3, #31
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	2208      	movs	r2, #8
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	e056      	b.n	80056d2 <UART_SetConfig+0x17a>
 8005624:	231f      	movs	r3, #31
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	2210      	movs	r2, #16
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	e051      	b.n	80056d2 <UART_SetConfig+0x17a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a89      	ldr	r2, [pc, #548]	@ (8005858 <UART_SetConfig+0x300>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d134      	bne.n	80056a2 <UART_SetConfig+0x14a>
 8005638:	4b86      	ldr	r3, [pc, #536]	@ (8005854 <UART_SetConfig+0x2fc>)
 800563a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800563c:	23c0      	movs	r3, #192	@ 0xc0
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	4013      	ands	r3, r2
 8005642:	22c0      	movs	r2, #192	@ 0xc0
 8005644:	0292      	lsls	r2, r2, #10
 8005646:	4293      	cmp	r3, r2
 8005648:	d017      	beq.n	800567a <UART_SetConfig+0x122>
 800564a:	22c0      	movs	r2, #192	@ 0xc0
 800564c:	0292      	lsls	r2, r2, #10
 800564e:	4293      	cmp	r3, r2
 8005650:	d822      	bhi.n	8005698 <UART_SetConfig+0x140>
 8005652:	2280      	movs	r2, #128	@ 0x80
 8005654:	0292      	lsls	r2, r2, #10
 8005656:	4293      	cmp	r3, r2
 8005658:	d019      	beq.n	800568e <UART_SetConfig+0x136>
 800565a:	2280      	movs	r2, #128	@ 0x80
 800565c:	0292      	lsls	r2, r2, #10
 800565e:	4293      	cmp	r3, r2
 8005660:	d81a      	bhi.n	8005698 <UART_SetConfig+0x140>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <UART_SetConfig+0x118>
 8005666:	2280      	movs	r2, #128	@ 0x80
 8005668:	0252      	lsls	r2, r2, #9
 800566a:	4293      	cmp	r3, r2
 800566c:	d00a      	beq.n	8005684 <UART_SetConfig+0x12c>
 800566e:	e013      	b.n	8005698 <UART_SetConfig+0x140>
 8005670:	231f      	movs	r3, #31
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e02b      	b.n	80056d2 <UART_SetConfig+0x17a>
 800567a:	231f      	movs	r3, #31
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	2202      	movs	r2, #2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e026      	b.n	80056d2 <UART_SetConfig+0x17a>
 8005684:	231f      	movs	r3, #31
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2204      	movs	r2, #4
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e021      	b.n	80056d2 <UART_SetConfig+0x17a>
 800568e:	231f      	movs	r3, #31
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	2208      	movs	r2, #8
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e01c      	b.n	80056d2 <UART_SetConfig+0x17a>
 8005698:	231f      	movs	r3, #31
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	2210      	movs	r2, #16
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e017      	b.n	80056d2 <UART_SetConfig+0x17a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a6d      	ldr	r2, [pc, #436]	@ (800585c <UART_SetConfig+0x304>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d104      	bne.n	80056b6 <UART_SetConfig+0x15e>
 80056ac:	231f      	movs	r3, #31
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0x17a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a69      	ldr	r2, [pc, #420]	@ (8005860 <UART_SetConfig+0x308>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d104      	bne.n	80056ca <UART_SetConfig+0x172>
 80056c0:	231f      	movs	r3, #31
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e003      	b.n	80056d2 <UART_SetConfig+0x17a>
 80056ca:	231f      	movs	r3, #31
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2210      	movs	r2, #16
 80056d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	429a      	cmp	r2, r3
 80056dc:	d15c      	bne.n	8005798 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80056de:	231f      	movs	r3, #31
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d015      	beq.n	8005714 <UART_SetConfig+0x1bc>
 80056e8:	dc18      	bgt.n	800571c <UART_SetConfig+0x1c4>
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d00d      	beq.n	800570a <UART_SetConfig+0x1b2>
 80056ee:	dc15      	bgt.n	800571c <UART_SetConfig+0x1c4>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <UART_SetConfig+0x1a2>
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d005      	beq.n	8005704 <UART_SetConfig+0x1ac>
 80056f8:	e010      	b.n	800571c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fa:	f7ff f9e1 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80056fe:	0003      	movs	r3, r0
 8005700:	61bb      	str	r3, [r7, #24]
        break;
 8005702:	e012      	b.n	800572a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005704:	4b57      	ldr	r3, [pc, #348]	@ (8005864 <UART_SetConfig+0x30c>)
 8005706:	61bb      	str	r3, [r7, #24]
        break;
 8005708:	e00f      	b.n	800572a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570a:	f7ff f95d 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 800570e:	0003      	movs	r3, r0
 8005710:	61bb      	str	r3, [r7, #24]
        break;
 8005712:	e00a      	b.n	800572a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	61bb      	str	r3, [r7, #24]
        break;
 800571a:	e006      	b.n	800572a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005720:	231e      	movs	r3, #30
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
        break;
 8005728:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d100      	bne.n	8005732 <UART_SetConfig+0x1da>
 8005730:	e07a      	b.n	8005828 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	005a      	lsls	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	18d2      	adds	r2, r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	0019      	movs	r1, r3
 8005744:	0010      	movs	r0, r2
 8005746:	f7fa fce9 	bl	800011c <__udivsi3>
 800574a:	0003      	movs	r3, r0
 800574c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d91c      	bls.n	800578e <UART_SetConfig+0x236>
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	2380      	movs	r3, #128	@ 0x80
 8005758:	025b      	lsls	r3, r3, #9
 800575a:	429a      	cmp	r2, r3
 800575c:	d217      	bcs.n	800578e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	b29a      	uxth	r2, r3
 8005762:	200e      	movs	r0, #14
 8005764:	183b      	adds	r3, r7, r0
 8005766:	210f      	movs	r1, #15
 8005768:	438a      	bics	r2, r1
 800576a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	b29b      	uxth	r3, r3
 8005772:	2207      	movs	r2, #7
 8005774:	4013      	ands	r3, r2
 8005776:	b299      	uxth	r1, r3
 8005778:	183b      	adds	r3, r7, r0
 800577a:	183a      	adds	r2, r7, r0
 800577c:	8812      	ldrh	r2, [r2, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	183a      	adds	r2, r7, r0
 8005788:	8812      	ldrh	r2, [r2, #0]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e04c      	b.n	8005828 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800578e:	231e      	movs	r3, #30
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e047      	b.n	8005828 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005798:	231f      	movs	r3, #31
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d015      	beq.n	80057ce <UART_SetConfig+0x276>
 80057a2:	dc18      	bgt.n	80057d6 <UART_SetConfig+0x27e>
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d00d      	beq.n	80057c4 <UART_SetConfig+0x26c>
 80057a8:	dc15      	bgt.n	80057d6 <UART_SetConfig+0x27e>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <UART_SetConfig+0x25c>
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d005      	beq.n	80057be <UART_SetConfig+0x266>
 80057b2:	e010      	b.n	80057d6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b4:	f7ff f984 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80057b8:	0003      	movs	r3, r0
 80057ba:	61bb      	str	r3, [r7, #24]
        break;
 80057bc:	e012      	b.n	80057e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057be:	4b29      	ldr	r3, [pc, #164]	@ (8005864 <UART_SetConfig+0x30c>)
 80057c0:	61bb      	str	r3, [r7, #24]
        break;
 80057c2:	e00f      	b.n	80057e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c4:	f7ff f900 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 80057c8:	0003      	movs	r3, r0
 80057ca:	61bb      	str	r3, [r7, #24]
        break;
 80057cc:	e00a      	b.n	80057e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ce:	2380      	movs	r3, #128	@ 0x80
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	61bb      	str	r3, [r7, #24]
        break;
 80057d4:	e006      	b.n	80057e4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057da:	231e      	movs	r3, #30
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
        break;
 80057e2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01e      	beq.n	8005828 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	085a      	lsrs	r2, r3, #1
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	18d2      	adds	r2, r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	0019      	movs	r1, r3
 80057fa:	0010      	movs	r0, r2
 80057fc:	f7fa fc8e 	bl	800011c <__udivsi3>
 8005800:	0003      	movs	r3, r0
 8005802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b0f      	cmp	r3, #15
 8005808:	d90a      	bls.n	8005820 <UART_SetConfig+0x2c8>
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	025b      	lsls	r3, r3, #9
 8005810:	429a      	cmp	r2, r3
 8005812:	d205      	bcs.n	8005820 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	e003      	b.n	8005828 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005820:	231e      	movs	r3, #30
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005834:	231e      	movs	r3, #30
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	781b      	ldrb	r3, [r3, #0]
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b008      	add	sp, #32
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	efff69f3 	.word	0xefff69f3
 8005848:	ffffcfff 	.word	0xffffcfff
 800584c:	fffff4ff 	.word	0xfffff4ff
 8005850:	40013800 	.word	0x40013800
 8005854:	40021000 	.word	0x40021000
 8005858:	40004400 	.word	0x40004400
 800585c:	40004800 	.word	0x40004800
 8005860:	40004c00 	.word	0x40004c00
 8005864:	007a1200 	.word	0x007a1200

08005868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	2208      	movs	r2, #8
 8005876:	4013      	ands	r3, r2
 8005878:	d00b      	beq.n	8005892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a4a      	ldr	r2, [pc, #296]	@ (80059ac <UART_AdvFeatureConfig+0x144>)
 8005882:	4013      	ands	r3, r2
 8005884:	0019      	movs	r1, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	2201      	movs	r2, #1
 8005898:	4013      	ands	r3, r2
 800589a:	d00b      	beq.n	80058b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	4a43      	ldr	r2, [pc, #268]	@ (80059b0 <UART_AdvFeatureConfig+0x148>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	2202      	movs	r2, #2
 80058ba:	4013      	ands	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a3b      	ldr	r2, [pc, #236]	@ (80059b4 <UART_AdvFeatureConfig+0x14c>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	0019      	movs	r1, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	2204      	movs	r2, #4
 80058dc:	4013      	ands	r3, r2
 80058de:	d00b      	beq.n	80058f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4a34      	ldr	r2, [pc, #208]	@ (80059b8 <UART_AdvFeatureConfig+0x150>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	2210      	movs	r2, #16
 80058fe:	4013      	ands	r3, r2
 8005900:	d00b      	beq.n	800591a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a2c      	ldr	r2, [pc, #176]	@ (80059bc <UART_AdvFeatureConfig+0x154>)
 800590a:	4013      	ands	r3, r2
 800590c:	0019      	movs	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	2220      	movs	r2, #32
 8005920:	4013      	ands	r3, r2
 8005922:	d00b      	beq.n	800593c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	4a25      	ldr	r2, [pc, #148]	@ (80059c0 <UART_AdvFeatureConfig+0x158>)
 800592c:	4013      	ands	r3, r2
 800592e:	0019      	movs	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	2240      	movs	r2, #64	@ 0x40
 8005942:	4013      	ands	r3, r2
 8005944:	d01d      	beq.n	8005982 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a1d      	ldr	r2, [pc, #116]	@ (80059c4 <UART_AdvFeatureConfig+0x15c>)
 800594e:	4013      	ands	r3, r2
 8005950:	0019      	movs	r1, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005962:	2380      	movs	r3, #128	@ 0x80
 8005964:	035b      	lsls	r3, r3, #13
 8005966:	429a      	cmp	r2, r3
 8005968:	d10b      	bne.n	8005982 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <UART_AdvFeatureConfig+0x160>)
 8005972:	4013      	ands	r3, r2
 8005974:	0019      	movs	r1, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	2280      	movs	r2, #128	@ 0x80
 8005988:	4013      	ands	r3, r2
 800598a:	d00b      	beq.n	80059a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4a0e      	ldr	r2, [pc, #56]	@ (80059cc <UART_AdvFeatureConfig+0x164>)
 8005994:	4013      	ands	r3, r2
 8005996:	0019      	movs	r1, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }
}
 80059a4:	46c0      	nop			@ (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	ffff7fff 	.word	0xffff7fff
 80059b0:	fffdffff 	.word	0xfffdffff
 80059b4:	fffeffff 	.word	0xfffeffff
 80059b8:	fffbffff 	.word	0xfffbffff
 80059bc:	ffffefff 	.word	0xffffefff
 80059c0:	ffffdfff 	.word	0xffffdfff
 80059c4:	ffefffff 	.word	0xffefffff
 80059c8:	ff9fffff 	.word	0xff9fffff
 80059cc:	fff7ffff 	.word	0xfff7ffff

080059d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b092      	sub	sp, #72	@ 0x48
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2284      	movs	r2, #132	@ 0x84
 80059dc:	2100      	movs	r1, #0
 80059de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059e0:	f7fc fafe 	bl	8001fe0 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2208      	movs	r2, #8
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d12c      	bne.n	8005a50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f8:	2280      	movs	r2, #128	@ 0x80
 80059fa:	0391      	lsls	r1, r2, #14
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4a46      	ldr	r2, [pc, #280]	@ (8005b18 <UART_CheckIdleState+0x148>)
 8005a00:	9200      	str	r2, [sp, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f000 f88c 	bl	8005b20 <UART_WaitOnFlagUntilTimeout>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d021      	beq.n	8005a50 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a16:	2301      	movs	r3, #1
 8005a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	f383 8810 	msr	PRIMASK, r3
}
 8005a20:	46c0      	nop			@ (mov r8, r8)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2180      	movs	r1, #128	@ 0x80
 8005a2e:	438a      	bics	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	f383 8810 	msr	PRIMASK, r3
}
 8005a3c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2278      	movs	r2, #120	@ 0x78
 8005a48:	2100      	movs	r1, #0
 8005a4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e05f      	b.n	8005b10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2204      	movs	r2, #4
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d146      	bne.n	8005aec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a60:	2280      	movs	r2, #128	@ 0x80
 8005a62:	03d1      	lsls	r1, r2, #15
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <UART_CheckIdleState+0x148>)
 8005a68:	9200      	str	r2, [sp, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f000 f858 	bl	8005b20 <UART_WaitOnFlagUntilTimeout>
 8005a70:	1e03      	subs	r3, r0, #0
 8005a72:	d03b      	beq.n	8005aec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a74:	f3ef 8310 	mrs	r3, PRIMASK
 8005a78:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a7e:	2301      	movs	r3, #1
 8005a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			@ (mov r8, r8)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4921      	ldr	r1, [pc, #132]	@ (8005b1c <UART_CheckIdleState+0x14c>)
 8005a96:	400a      	ands	r2, r1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f383 8810 	msr	PRIMASK, r3
}
 8005aa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8005aac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			@ (mov r8, r8)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	438a      	bics	r2, r1
 8005aca:	609a      	str	r2, [r3, #8]
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f383 8810 	msr	PRIMASK, r3
}
 8005ad6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2280      	movs	r2, #128	@ 0x80
 8005adc:	2120      	movs	r1, #32
 8005ade:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2278      	movs	r2, #120	@ 0x78
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e011      	b.n	8005b10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2280      	movs	r2, #128	@ 0x80
 8005af6:	2120      	movs	r1, #32
 8005af8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2278      	movs	r2, #120	@ 0x78
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	0018      	movs	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b010      	add	sp, #64	@ 0x40
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	01ffffff 	.word	0x01ffffff
 8005b1c:	fffffedf 	.word	0xfffffedf

08005b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	1dfb      	adds	r3, r7, #7
 8005b2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b30:	e051      	b.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3301      	adds	r3, #1
 8005b36:	d04e      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b38:	f7fc fa52 	bl	8001fe0 <HAL_GetTick>
 8005b3c:	0002      	movs	r2, r0
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e051      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d03b      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b80      	cmp	r3, #128	@ 0x80
 8005b62:	d038      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b40      	cmp	r3, #64	@ 0x40
 8005b68:	d035      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	2208      	movs	r2, #8
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d111      	bne.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	0018      	movs	r0, r3
 8005b84:	f000 f900 	bl	8005d88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2284      	movs	r2, #132	@ 0x84
 8005b8c:	2108      	movs	r1, #8
 8005b8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2278      	movs	r2, #120	@ 0x78
 8005b94:	2100      	movs	r1, #0
 8005b96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e02c      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69da      	ldr	r2, [r3, #28]
 8005ba2:	2380      	movs	r3, #128	@ 0x80
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	2380      	movs	r3, #128	@ 0x80
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d112      	bne.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2280      	movs	r2, #128	@ 0x80
 8005bb6:	0112      	lsls	r2, r2, #4
 8005bb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 f8e3 	bl	8005d88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2284      	movs	r2, #132	@ 0x84
 8005bc6:	2120      	movs	r1, #32
 8005bc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2278      	movs	r2, #120	@ 0x78
 8005bce:	2100      	movs	r1, #0
 8005bd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e00f      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	4013      	ands	r3, r2
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	425a      	negs	r2, r3
 8005be6:	4153      	adcs	r3, r2
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	001a      	movs	r2, r3
 8005bec:	1dfb      	adds	r3, r7, #7
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d09e      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b004      	add	sp, #16
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b090      	sub	sp, #64	@ 0x40
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	1dbb      	adds	r3, r7, #6
 8005c0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1dba      	adds	r2, r7, #6
 8005c18:	2158      	movs	r1, #88	@ 0x58
 8005c1a:	8812      	ldrh	r2, [r2, #0]
 8005c1c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2284      	movs	r2, #132	@ 0x84
 8005c22:	2100      	movs	r1, #0
 8005c24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2280      	movs	r2, #128	@ 0x80
 8005c2a:	2122      	movs	r1, #34	@ 0x22
 8005c2c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d028      	beq.n	8005c88 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d34 <UART_Start_Receive_DMA+0x134>)
 8005c3c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c42:	4a3d      	ldr	r2, [pc, #244]	@ (8005d38 <UART_Start_Receive_DMA+0x138>)
 8005c44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8005d3c <UART_Start_Receive_DMA+0x13c>)
 8005c4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c52:	2200      	movs	r2, #0
 8005c54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3324      	adds	r3, #36	@ 0x24
 8005c60:	0019      	movs	r1, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	001a      	movs	r2, r3
 8005c68:	1dbb      	adds	r3, r7, #6
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	f7fd f8ac 	bl	8002dc8 <HAL_DMA_Start_IT>
 8005c70:	1e03      	subs	r3, r0, #0
 8005c72:	d009      	beq.n	8005c88 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2284      	movs	r2, #132	@ 0x84
 8005c78:	2110      	movs	r1, #16
 8005c7a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2280      	movs	r2, #128	@ 0x80
 8005c80:	2120      	movs	r1, #32
 8005c82:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e050      	b.n	8005d2a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d019      	beq.n	8005cc4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c90:	f3ef 8310 	mrs	r3, PRIMASK
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	f383 8810 	msr	PRIMASK, r3
}
 8005ca4:	46c0      	nop			@ (mov r8, r8)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2180      	movs	r1, #128	@ 0x80
 8005cb2:	0049      	lsls	r1, r1, #1
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	613b      	str	r3, [r7, #16]
  return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cce:	2301      	movs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			@ (mov r8, r8)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f383 8810 	msr	PRIMASK, r3
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfa:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cfc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d00:	2301      	movs	r3, #1
 8005d02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f383 8810 	msr	PRIMASK, r3
}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2140      	movs	r1, #64	@ 0x40
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	f383 8810 	msr	PRIMASK, r3
}
 8005d26:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b010      	add	sp, #64	@ 0x40
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	46c0      	nop			@ (mov r8, r8)
 8005d34:	08005f05 	.word	0x08005f05
 8005d38:	08006031 	.word	0x08006031
 8005d3c:	08006073 	.word	0x08006073

08005d40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d48:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	2301      	movs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f383 8810 	msr	PRIMASK, r3
}
 8005d5c:	46c0      	nop			@ (mov r8, r8)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	21c0      	movs	r1, #192	@ 0xc0
 8005d6a:	438a      	bics	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f383 8810 	msr	PRIMASK, r3
}
 8005d78:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b006      	add	sp, #24
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08e      	sub	sp, #56	@ 0x38
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d90:	f3ef 8310 	mrs	r3, PRIMASK
 8005d94:	617b      	str	r3, [r7, #20]
  return(result);
 8005d96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	46c0      	nop			@ (mov r8, r8)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4926      	ldr	r1, [pc, #152]	@ (8005e4c <UART_EndRxTransfer+0xc4>)
 8005db2:	400a      	ands	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f383 8810 	msr	PRIMASK, r3
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc6:	623b      	str	r3, [r7, #32]
  return(result);
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dcc:	2301      	movs	r3, #1
 8005dce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	f383 8810 	msr	PRIMASK, r3
}
 8005dd6:	46c0      	nop			@ (mov r8, r8)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2101      	movs	r1, #1
 8005de4:	438a      	bics	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	f383 8810 	msr	PRIMASK, r3
}
 8005df2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d118      	bne.n	8005e2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005e00:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e06:	2301      	movs	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			@ (mov r8, r8)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2110      	movs	r1, #16
 8005e1e:	438a      	bics	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f383 8810 	msr	PRIMASK, r3
}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2280      	movs	r2, #128	@ 0x80
 8005e32:	2120      	movs	r1, #32
 8005e34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b00e      	add	sp, #56	@ 0x38
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	fffffedf 	.word	0xfffffedf

08005e50 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08c      	sub	sp, #48	@ 0x30
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d035      	beq.n	8005ed2 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8005e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e68:	2252      	movs	r2, #82	@ 0x52
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e72:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e74:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e78:	2301      	movs	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f383 8810 	msr	PRIMASK, r3
}
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2180      	movs	r1, #128	@ 0x80
 8005e90:	438a      	bics	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f383 8810 	msr	PRIMASK, r3
}
 8005e9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ea6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eaa:	2301      	movs	r3, #1
 8005eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f383 8810 	msr	PRIMASK, r3
}
 8005eb4:	46c0      	nop			@ (mov r8, r8)
 8005eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2140      	movs	r1, #64	@ 0x40
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	f383 8810 	msr	PRIMASK, r3
}
 8005ed0:	e004      	b.n	8005edc <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 f958 	bl	800618a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	46c0      	nop			@ (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b00c      	add	sp, #48	@ 0x30
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f7ff fb13 	bl	8005520 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b004      	add	sp, #16
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b094      	sub	sp, #80	@ 0x50
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d06f      	beq.n	8005ffa <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f1c:	225a      	movs	r2, #90	@ 0x5a
 8005f1e:	2100      	movs	r1, #0
 8005f20:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f22:	f3ef 8310 	mrs	r3, PRIMASK
 8005f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f28:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f383 8810 	msr	PRIMASK, r3
}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	493a      	ldr	r1, [pc, #232]	@ (800602c <UART_DMAReceiveCplt+0x128>)
 8005f44:	400a      	ands	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	f383 8810 	msr	PRIMASK, r3
}
 8005f52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f54:	f3ef 8310 	mrs	r3, PRIMASK
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f5e:	2301      	movs	r3, #1
 8005f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f64:	f383 8810 	msr	PRIMASK, r3
}
 8005f68:	46c0      	nop			@ (mov r8, r8)
 8005f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2101      	movs	r1, #1
 8005f76:	438a      	bics	r2, r1
 8005f78:	609a      	str	r2, [r3, #8]
 8005f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	f383 8810 	msr	PRIMASK, r3
}
 8005f84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f86:	f3ef 8310 	mrs	r3, PRIMASK
 8005f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f90:	2301      	movs	r3, #1
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f96:	f383 8810 	msr	PRIMASK, r3
}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2140      	movs	r1, #64	@ 0x40
 8005fa8:	438a      	bics	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	f383 8810 	msr	PRIMASK, r3
}
 8005fb6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fba:	2280      	movs	r2, #128	@ 0x80
 8005fbc:	2120      	movs	r1, #32
 8005fbe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d118      	bne.n	8005ffa <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fce:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f383 8810 	msr	PRIMASK, r3
}
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2110      	movs	r1, #16
 8005fea:	438a      	bics	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f383 8810 	msr	PRIMASK, r3
}
 8005ff8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006004:	2b01      	cmp	r3, #1
 8006006:	d108      	bne.n	800601a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600a:	2258      	movs	r2, #88	@ 0x58
 800600c:	5a9a      	ldrh	r2, [r3, r2]
 800600e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006010:	0011      	movs	r1, r2
 8006012:	0018      	movs	r0, r3
 8006014:	f7ff fa94 	bl	8005540 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006018:	e003      	b.n	8006022 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800601a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800601c:	0018      	movs	r0, r3
 800601e:	f000 f8db 	bl	80061d8 <HAL_UART_RxCpltCallback>
}
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	46bd      	mov	sp, r7
 8006026:	b014      	add	sp, #80	@ 0x50
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	fffffeff 	.word	0xfffffeff

08006030 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006048:	2b01      	cmp	r3, #1
 800604a:	d10a      	bne.n	8006062 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2258      	movs	r2, #88	@ 0x58
 8006050:	5a9b      	ldrh	r3, [r3, r2]
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	0011      	movs	r1, r2
 800605a:	0018      	movs	r0, r3
 800605c:	f7ff fa70 	bl	8005540 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006060:	e003      	b.n	800606a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	0018      	movs	r0, r3
 8006066:	f7ff fa63 	bl	8005530 <HAL_UART_RxHalfCpltCallback>
}
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b086      	sub	sp, #24
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006084:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2280      	movs	r2, #128	@ 0x80
 800608a:	589b      	ldr	r3, [r3, r2]
 800608c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2280      	movs	r2, #128	@ 0x80
 8006096:	4013      	ands	r3, r2
 8006098:	2b80      	cmp	r3, #128	@ 0x80
 800609a:	d10a      	bne.n	80060b2 <UART_DMAError+0x40>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b21      	cmp	r3, #33	@ 0x21
 80060a0:	d107      	bne.n	80060b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2252      	movs	r2, #82	@ 0x52
 80060a6:	2100      	movs	r1, #0
 80060a8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7ff fe47 	bl	8005d40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2240      	movs	r2, #64	@ 0x40
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b40      	cmp	r3, #64	@ 0x40
 80060be:	d10a      	bne.n	80060d6 <UART_DMAError+0x64>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b22      	cmp	r3, #34	@ 0x22
 80060c4:	d107      	bne.n	80060d6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	225a      	movs	r2, #90	@ 0x5a
 80060ca:	2100      	movs	r1, #0
 80060cc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f7ff fe59 	bl	8005d88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2284      	movs	r2, #132	@ 0x84
 80060da:	589b      	ldr	r3, [r3, r2]
 80060dc:	2210      	movs	r2, #16
 80060de:	431a      	orrs	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2184      	movs	r1, #132	@ 0x84
 80060e4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 f895 	bl	8006218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b006      	add	sp, #24
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	225a      	movs	r2, #90	@ 0x5a
 8006108:	2100      	movs	r1, #0
 800610a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2252      	movs	r2, #82	@ 0x52
 8006110:	2100      	movs	r1, #0
 8006112:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	0018      	movs	r0, r3
 8006118:	f000 f87e 	bl	8006218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611c:	46c0      	nop			@ (mov r8, r8)
 800611e:	46bd      	mov	sp, r7
 8006120:	b004      	add	sp, #16
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800612c:	f3ef 8310 	mrs	r3, PRIMASK
 8006130:	60bb      	str	r3, [r7, #8]
  return(result);
 8006132:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	2301      	movs	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f383 8810 	msr	PRIMASK, r3
}
 8006140:	46c0      	nop			@ (mov r8, r8)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2140      	movs	r1, #64	@ 0x40
 800614e:	438a      	bics	r2, r1
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f383 8810 	msr	PRIMASK, r3
}
 800615c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	0018      	movs	r0, r3
 800616e:	f000 f80c 	bl	800618a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	46bd      	mov	sp, r7
 8006176:	b006      	add	sp, #24
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006182:	46c0      	nop			@ (mov r8, r8)
 8006184:	46bd      	mov	sp, r7
 8006186:	b002      	add	sp, #8
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_UART_TxCpltCallback>:
		}

		return '\0';
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	0018      	movs	r0, r3
 8006196:	f000 f85d 	bl	8006254 <get_serial_handler>
 800619a:	0003      	movs	r3, r0
 800619c:	60fb      	str	r3, [r7, #12]
	
	if (serial_handler != NULL) {
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d015      	beq.n	80061d0 <HAL_UART_TxCpltCallback+0x46>
		if (!ring_buffer_is_empty(serial_handler->buffer_Tx)) {
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 f88f 	bl	80062cc <ring_buffer_is_empty>
 80061ae:	1e03      	subs	r3, r0, #0
 80061b0:	d10e      	bne.n	80061d0 <HAL_UART_TxCpltCallback+0x46>

			  ring_buffer_dequeue(serial_handler->buffer_Tx, serial_handler->hal_reg_Tx);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	0019      	movs	r1, r3
 80061bc:	0010      	movs	r0, r2
 80061be:	f000 f91d 	bl	80063fc <ring_buffer_dequeue>
			  HAL_UART_Transmit_DMA(huart, serial_handler->hal_reg_Tx, PRIMARY_REG_SIZE);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68d9      	ldr	r1, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2207      	movs	r2, #7
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7fe fde0 	bl	8004d90 <HAL_UART_Transmit_DMA>
		}
	}
}
 80061d0:	46c0      	nop			@ (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b004      	add	sp, #16
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 f836 	bl	8006254 <get_serial_handler>
 80061e8:	0003      	movs	r3, r0
 80061ea:	60fb      	str	r3, [r7, #12]
	
	if (serial_handler != NULL) {
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <HAL_UART_RxCpltCallback+0x38>
		ring_buffer_queue_arr(serial_handler->buffer_Rx, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6898      	ldr	r0, [r3, #8]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2207      	movs	r2, #7
 80061fc:	0019      	movs	r1, r3
 80061fe:	f000 f8d5 	bl	80063ac <ring_buffer_queue_arr>
		HAL_UART_Receive_DMA(huart, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6919      	ldr	r1, [r3, #16]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2207      	movs	r2, #7
 800620a:	0018      	movs	r0, r3
 800620c:	f7fe fe50 	bl	8004eb0 <HAL_UART_Receive_DMA>
	}
}
 8006210:	46c0      	nop			@ (mov r8, r8)
 8006212:	46bd      	mov	sp, r7
 8006214:	b004      	add	sp, #16
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2284      	movs	r2, #132	@ 0x84
 8006224:	589b      	ldr	r3, [r3, r2]
 8006226:	2b08      	cmp	r3, #8
 8006228:	d10f      	bne.n	800624a <HAL_UART_ErrorCallback+0x32>
		// Overrun error - restart DMA receive
		SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	0018      	movs	r0, r3
 800622e:	f000 f811 	bl	8006254 <get_serial_handler>
 8006232:	0003      	movs	r3, r0
 8006234:	60fb      	str	r3, [r7, #12]
		if (serial_handler != NULL) {
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <HAL_UART_ErrorCallback+0x32>
			HAL_UART_Receive_DMA(huart, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6919      	ldr	r1, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2207      	movs	r2, #7
 8006244:	0018      	movs	r0, r3
 8006246:	f7fe fe33 	bl	8004eb0 <HAL_UART_Receive_DMA>
		}
	}
}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	46bd      	mov	sp, r7
 800624e:	b004      	add	sp, #16
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <get_serial_handler>:
extern SERIAL_HandleTypeDef* USART1_Serial_Handler;
extern SERIAL_HandleTypeDef* USART2_Serial_Handler;
extern SERIAL_HandleTypeDef* USART3_Serial_Handler;
extern SERIAL_HandleTypeDef* USART4_Serial_Handler;

SERIAL_HandleTypeDef* get_serial_handler(UART_HandleTypeDef *huartx){
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* ret_serial_handler = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]

#ifdef USE_USART1
	if(huartx->Instance == USART1){
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a11      	ldr	r2, [pc, #68]	@ (80062ac <get_serial_handler+0x58>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d102      	bne.n	8006270 <get_serial_handler+0x1c>
		ret_serial_handler = USART1_Serial_Handler;
 800626a:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <get_serial_handler+0x5c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART2
	if(huartx->Instance == USART2){
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a0f      	ldr	r2, [pc, #60]	@ (80062b4 <get_serial_handler+0x60>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d102      	bne.n	8006280 <get_serial_handler+0x2c>
		ret_serial_handler = USART2_Serial_Handler;
 800627a:	4b0f      	ldr	r3, [pc, #60]	@ (80062b8 <get_serial_handler+0x64>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART3
	if(huartx->Instance == USART3){
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a0d      	ldr	r2, [pc, #52]	@ (80062bc <get_serial_handler+0x68>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d102      	bne.n	8006290 <get_serial_handler+0x3c>
		ret_serial_handler = USART3_Serial_Handler;
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <get_serial_handler+0x6c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART4
	if(huartx->Instance == USART4){
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0b      	ldr	r2, [pc, #44]	@ (80062c4 <get_serial_handler+0x70>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d102      	bne.n	80062a0 <get_serial_handler+0x4c>
		ret_serial_handler = USART4_Serial_Handler;
 800629a:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <get_serial_handler+0x74>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
	}
#endif
	return ret_serial_handler;
 80062a0:	68fb      	ldr	r3, [r7, #12]
}
 80062a2:	0018      	movs	r0, r3
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b004      	add	sp, #16
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	40013800 	.word	0x40013800
 80062b0:	200005f4 	.word	0x200005f4
 80062b4:	40004400 	.word	0x40004400
 80062b8:	200005f8 	.word	0x200005f8
 80062bc:	40004800 	.word	0x40004800
 80062c0:	200005fc 	.word	0x200005fc
 80062c4:	40004c00 	.word	0x40004c00
 80062c8:	20000600 	.word	0x20000600

080062cc <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a07      	ldr	r2, [pc, #28]	@ (80062f4 <ring_buffer_is_empty+0x28>)
 80062d8:	5a9a      	ldrh	r2, [r3, r2]
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	2380      	movs	r3, #128	@ 0x80
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	5acb      	ldrh	r3, [r1, r3]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	425a      	negs	r2, r3
 80062e6:	4153      	adcs	r3, r2
 80062e8:	b2db      	uxtb	r3, r3
}
 80062ea:	0018      	movs	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b002      	add	sp, #8
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	00000202 	.word	0x00000202

080062f8 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0a      	ldr	r2, [pc, #40]	@ (800632c <ring_buffer_is_full+0x34>)
 8006304:	5a9a      	ldrh	r2, [r3, r2]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	2380      	movs	r3, #128	@ 0x80
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	5acb      	ldrh	r3, [r1, r3]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	05db      	lsls	r3, r3, #23
 8006314:	0ddb      	lsrs	r3, r3, #23
 8006316:	4a06      	ldr	r2, [pc, #24]	@ (8006330 <ring_buffer_is_full+0x38>)
 8006318:	4694      	mov	ip, r2
 800631a:	4463      	add	r3, ip
 800631c:	425a      	negs	r2, r3
 800631e:	4153      	adcs	r3, r2
 8006320:	b2db      	uxtb	r3, r3
}
 8006322:	0018      	movs	r0, r3
 8006324:	46bd      	mov	sp, r7
 8006326:	b002      	add	sp, #8
 8006328:	bd80      	pop	{r7, pc}
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	00000202 	.word	0x00000202
 8006330:	fffffe01 	.word	0xfffffe01

08006334 <ring_buffer_queue>:
  /** debug features initialize. */
  buffer->byte_enqueue_hit = 0;
  buffer->byte_dequeue_hit = 0;
}

void ring_buffer_queue(ring_buffer_t *buffer, uint8_t data) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	000a      	movs	r2, r1
 800633e:	1cfb      	adds	r3, r7, #3
 8006340:	701a      	strb	r2, [r3, #0]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0018      	movs	r0, r3
 8006346:	f7ff ffd7 	bl	80062f8 <ring_buffer_is_full>
 800634a:	1e03      	subs	r3, r0, #0
 800634c:	d00c      	beq.n	8006368 <ring_buffer_queue+0x34>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	5ad3      	ldrh	r3, [r2, r3]
 8006356:	3301      	adds	r3, #1
 8006358:	b29b      	uxth	r3, r3
 800635a:	05db      	lsls	r3, r3, #23
 800635c:	0ddb      	lsrs	r3, r3, #23
 800635e:	b299      	uxth	r1, r3
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	2380      	movs	r3, #128	@ 0x80
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	52d1      	strh	r1, [r2, r3]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a0f      	ldr	r2, [pc, #60]	@ (80063a8 <ring_buffer_queue+0x74>)
 800636c:	5a9b      	ldrh	r3, [r3, r2]
 800636e:	0019      	movs	r1, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1cfa      	adds	r2, r7, #3
 8006374:	7812      	ldrb	r2, [r2, #0]
 8006376:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0b      	ldr	r2, [pc, #44]	@ (80063a8 <ring_buffer_queue+0x74>)
 800637c:	5a9b      	ldrh	r3, [r3, r2]
 800637e:	3301      	adds	r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	05db      	lsls	r3, r3, #23
 8006384:	0ddb      	lsrs	r3, r3, #23
 8006386:	b299      	uxth	r1, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a07      	ldr	r2, [pc, #28]	@ (80063a8 <ring_buffer_queue+0x74>)
 800638c:	5299      	strh	r1, [r3, r2]

  /** debug features update. */
  buffer->byte_enqueue_hit ++;
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	2381      	movs	r3, #129	@ 0x81
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	58d3      	ldr	r3, [r2, r3]
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	2381      	movs	r3, #129	@ 0x81
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	50d1      	str	r1, [r2, r3]

}
 80063a0:	46c0      	nop			@ (mov r8, r8)
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	00000202 	.word	0x00000202

080063ac <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, uint8_t *data, ring_buffer_size_t size) {
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	1dbb      	adds	r3, r7, #6
 80063b8:	801a      	strh	r2, [r3, #0]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 80063ba:	2316      	movs	r3, #22
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	2200      	movs	r2, #0
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	e00f      	b.n	80063e4 <ring_buffer_queue_arr+0x38>
    ring_buffer_queue(buffer, data[i]);
 80063c4:	2416      	movs	r4, #22
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	18d3      	adds	r3, r2, r3
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	0011      	movs	r1, r2
 80063d4:	0018      	movs	r0, r3
 80063d6:	f7ff ffad 	bl	8006334 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 80063da:	193b      	adds	r3, r7, r4
 80063dc:	881a      	ldrh	r2, [r3, #0]
 80063de:	193b      	adds	r3, r7, r4
 80063e0:	3201      	adds	r2, #1
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	2316      	movs	r3, #22
 80063e6:	18fa      	adds	r2, r7, r3
 80063e8:	1dbb      	adds	r3, r7, #6
 80063ea:	8812      	ldrh	r2, [r2, #0]
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d3e8      	bcc.n	80063c4 <ring_buffer_queue_arr+0x18>
  }
}
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	46c0      	nop			@ (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b007      	add	sp, #28
 80063fa:	bd90      	pop	{r4, r7, pc}

080063fc <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, uint8_t *data) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0018      	movs	r0, r3
 800640a:	f7ff ff5f 	bl	80062cc <ring_buffer_is_empty>
 800640e:	1e03      	subs	r3, r0, #0
 8006410:	d001      	beq.n	8006416 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8006412:	2300      	movs	r3, #0
 8006414:	e01f      	b.n	8006456 <ring_buffer_dequeue+0x5a>
  }

  *data = buffer->buffer[buffer->tail_index];
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	2380      	movs	r3, #128	@ 0x80
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	5ad3      	ldrh	r3, [r2, r3]
 800641e:	001a      	movs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	5c9a      	ldrb	r2, [r3, r2]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	2380      	movs	r3, #128	@ 0x80
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	5ad3      	ldrh	r3, [r2, r3]
 8006430:	3301      	adds	r3, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	05db      	lsls	r3, r3, #23
 8006436:	0ddb      	lsrs	r3, r3, #23
 8006438:	b299      	uxth	r1, r3
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	2380      	movs	r3, #128	@ 0x80
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	52d1      	strh	r1, [r2, r3]

  /** debug features update. */
  buffer->byte_dequeue_hit ++;
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	2382      	movs	r3, #130	@ 0x82
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	58d3      	ldr	r3, [r2, r3]
 800644a:	1c59      	adds	r1, r3, #1
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	2382      	movs	r3, #130	@ 0x82
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	50d1      	str	r1, [r2, r3]

  return 1;
 8006454:	2301      	movs	r3, #1
}
 8006456:	0018      	movs	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	b002      	add	sp, #8
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <std>:
 8006460:	2300      	movs	r3, #0
 8006462:	b510      	push	{r4, lr}
 8006464:	0004      	movs	r4, r0
 8006466:	6003      	str	r3, [r0, #0]
 8006468:	6043      	str	r3, [r0, #4]
 800646a:	6083      	str	r3, [r0, #8]
 800646c:	8181      	strh	r1, [r0, #12]
 800646e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006470:	81c2      	strh	r2, [r0, #14]
 8006472:	6103      	str	r3, [r0, #16]
 8006474:	6143      	str	r3, [r0, #20]
 8006476:	6183      	str	r3, [r0, #24]
 8006478:	0019      	movs	r1, r3
 800647a:	2208      	movs	r2, #8
 800647c:	305c      	adds	r0, #92	@ 0x5c
 800647e:	f000 fa0f 	bl	80068a0 <memset>
 8006482:	4b0b      	ldr	r3, [pc, #44]	@ (80064b0 <std+0x50>)
 8006484:	6224      	str	r4, [r4, #32]
 8006486:	6263      	str	r3, [r4, #36]	@ 0x24
 8006488:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <std+0x54>)
 800648a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800648c:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <std+0x58>)
 800648e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006490:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <std+0x5c>)
 8006492:	6323      	str	r3, [r4, #48]	@ 0x30
 8006494:	4b0a      	ldr	r3, [pc, #40]	@ (80064c0 <std+0x60>)
 8006496:	429c      	cmp	r4, r3
 8006498:	d005      	beq.n	80064a6 <std+0x46>
 800649a:	4b0a      	ldr	r3, [pc, #40]	@ (80064c4 <std+0x64>)
 800649c:	429c      	cmp	r4, r3
 800649e:	d002      	beq.n	80064a6 <std+0x46>
 80064a0:	4b09      	ldr	r3, [pc, #36]	@ (80064c8 <std+0x68>)
 80064a2:	429c      	cmp	r4, r3
 80064a4:	d103      	bne.n	80064ae <std+0x4e>
 80064a6:	0020      	movs	r0, r4
 80064a8:	3058      	adds	r0, #88	@ 0x58
 80064aa:	f000 fa79 	bl	80069a0 <__retarget_lock_init_recursive>
 80064ae:	bd10      	pop	{r4, pc}
 80064b0:	080066c9 	.word	0x080066c9
 80064b4:	080066f1 	.word	0x080066f1
 80064b8:	08006729 	.word	0x08006729
 80064bc:	08006755 	.word	0x08006755
 80064c0:	20000604 	.word	0x20000604
 80064c4:	2000066c 	.word	0x2000066c
 80064c8:	200006d4 	.word	0x200006d4

080064cc <stdio_exit_handler>:
 80064cc:	b510      	push	{r4, lr}
 80064ce:	4a03      	ldr	r2, [pc, #12]	@ (80064dc <stdio_exit_handler+0x10>)
 80064d0:	4903      	ldr	r1, [pc, #12]	@ (80064e0 <stdio_exit_handler+0x14>)
 80064d2:	4804      	ldr	r0, [pc, #16]	@ (80064e4 <stdio_exit_handler+0x18>)
 80064d4:	f000 f86c 	bl	80065b0 <_fwalk_sglue>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	20000020 	.word	0x20000020
 80064e0:	0800723d 	.word	0x0800723d
 80064e4:	20000030 	.word	0x20000030

080064e8 <cleanup_stdio>:
 80064e8:	6841      	ldr	r1, [r0, #4]
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <cleanup_stdio+0x30>)
 80064ec:	b510      	push	{r4, lr}
 80064ee:	0004      	movs	r4, r0
 80064f0:	4299      	cmp	r1, r3
 80064f2:	d001      	beq.n	80064f8 <cleanup_stdio+0x10>
 80064f4:	f000 fea2 	bl	800723c <_fflush_r>
 80064f8:	68a1      	ldr	r1, [r4, #8]
 80064fa:	4b08      	ldr	r3, [pc, #32]	@ (800651c <cleanup_stdio+0x34>)
 80064fc:	4299      	cmp	r1, r3
 80064fe:	d002      	beq.n	8006506 <cleanup_stdio+0x1e>
 8006500:	0020      	movs	r0, r4
 8006502:	f000 fe9b 	bl	800723c <_fflush_r>
 8006506:	68e1      	ldr	r1, [r4, #12]
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <cleanup_stdio+0x38>)
 800650a:	4299      	cmp	r1, r3
 800650c:	d002      	beq.n	8006514 <cleanup_stdio+0x2c>
 800650e:	0020      	movs	r0, r4
 8006510:	f000 fe94 	bl	800723c <_fflush_r>
 8006514:	bd10      	pop	{r4, pc}
 8006516:	46c0      	nop			@ (mov r8, r8)
 8006518:	20000604 	.word	0x20000604
 800651c:	2000066c 	.word	0x2000066c
 8006520:	200006d4 	.word	0x200006d4

08006524 <global_stdio_init.part.0>:
 8006524:	b510      	push	{r4, lr}
 8006526:	4b09      	ldr	r3, [pc, #36]	@ (800654c <global_stdio_init.part.0+0x28>)
 8006528:	4a09      	ldr	r2, [pc, #36]	@ (8006550 <global_stdio_init.part.0+0x2c>)
 800652a:	2104      	movs	r1, #4
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	4809      	ldr	r0, [pc, #36]	@ (8006554 <global_stdio_init.part.0+0x30>)
 8006530:	2200      	movs	r2, #0
 8006532:	f7ff ff95 	bl	8006460 <std>
 8006536:	2201      	movs	r2, #1
 8006538:	2109      	movs	r1, #9
 800653a:	4807      	ldr	r0, [pc, #28]	@ (8006558 <global_stdio_init.part.0+0x34>)
 800653c:	f7ff ff90 	bl	8006460 <std>
 8006540:	2202      	movs	r2, #2
 8006542:	2112      	movs	r1, #18
 8006544:	4805      	ldr	r0, [pc, #20]	@ (800655c <global_stdio_init.part.0+0x38>)
 8006546:	f7ff ff8b 	bl	8006460 <std>
 800654a:	bd10      	pop	{r4, pc}
 800654c:	2000073c 	.word	0x2000073c
 8006550:	080064cd 	.word	0x080064cd
 8006554:	20000604 	.word	0x20000604
 8006558:	2000066c 	.word	0x2000066c
 800655c:	200006d4 	.word	0x200006d4

08006560 <__sfp_lock_acquire>:
 8006560:	b510      	push	{r4, lr}
 8006562:	4802      	ldr	r0, [pc, #8]	@ (800656c <__sfp_lock_acquire+0xc>)
 8006564:	f000 fa1d 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8006568:	bd10      	pop	{r4, pc}
 800656a:	46c0      	nop			@ (mov r8, r8)
 800656c:	20000745 	.word	0x20000745

08006570 <__sfp_lock_release>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4802      	ldr	r0, [pc, #8]	@ (800657c <__sfp_lock_release+0xc>)
 8006574:	f000 fa16 	bl	80069a4 <__retarget_lock_release_recursive>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	20000745 	.word	0x20000745

08006580 <__sinit>:
 8006580:	b510      	push	{r4, lr}
 8006582:	0004      	movs	r4, r0
 8006584:	f7ff ffec 	bl	8006560 <__sfp_lock_acquire>
 8006588:	6a23      	ldr	r3, [r4, #32]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <__sinit+0x14>
 800658e:	f7ff ffef 	bl	8006570 <__sfp_lock_release>
 8006592:	bd10      	pop	{r4, pc}
 8006594:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <__sinit+0x28>)
 8006596:	6223      	str	r3, [r4, #32]
 8006598:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <__sinit+0x2c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f6      	bne.n	800658e <__sinit+0xe>
 80065a0:	f7ff ffc0 	bl	8006524 <global_stdio_init.part.0>
 80065a4:	e7f3      	b.n	800658e <__sinit+0xe>
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	080064e9 	.word	0x080064e9
 80065ac:	2000073c 	.word	0x2000073c

080065b0 <_fwalk_sglue>:
 80065b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b2:	0014      	movs	r4, r2
 80065b4:	2600      	movs	r6, #0
 80065b6:	9000      	str	r0, [sp, #0]
 80065b8:	9101      	str	r1, [sp, #4]
 80065ba:	68a5      	ldr	r5, [r4, #8]
 80065bc:	6867      	ldr	r7, [r4, #4]
 80065be:	3f01      	subs	r7, #1
 80065c0:	d504      	bpl.n	80065cc <_fwalk_sglue+0x1c>
 80065c2:	6824      	ldr	r4, [r4, #0]
 80065c4:	2c00      	cmp	r4, #0
 80065c6:	d1f8      	bne.n	80065ba <_fwalk_sglue+0xa>
 80065c8:	0030      	movs	r0, r6
 80065ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065cc:	89ab      	ldrh	r3, [r5, #12]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d908      	bls.n	80065e4 <_fwalk_sglue+0x34>
 80065d2:	220e      	movs	r2, #14
 80065d4:	5eab      	ldrsh	r3, [r5, r2]
 80065d6:	3301      	adds	r3, #1
 80065d8:	d004      	beq.n	80065e4 <_fwalk_sglue+0x34>
 80065da:	0029      	movs	r1, r5
 80065dc:	9800      	ldr	r0, [sp, #0]
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	4798      	blx	r3
 80065e2:	4306      	orrs	r6, r0
 80065e4:	3568      	adds	r5, #104	@ 0x68
 80065e6:	e7ea      	b.n	80065be <_fwalk_sglue+0xe>

080065e8 <iprintf>:
 80065e8:	b40f      	push	{r0, r1, r2, r3}
 80065ea:	b507      	push	{r0, r1, r2, lr}
 80065ec:	4905      	ldr	r1, [pc, #20]	@ (8006604 <iprintf+0x1c>)
 80065ee:	ab04      	add	r3, sp, #16
 80065f0:	6808      	ldr	r0, [r1, #0]
 80065f2:	cb04      	ldmia	r3!, {r2}
 80065f4:	6881      	ldr	r1, [r0, #8]
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	f000 fb02 	bl	8006c00 <_vfiprintf_r>
 80065fc:	b003      	add	sp, #12
 80065fe:	bc08      	pop	{r3}
 8006600:	b004      	add	sp, #16
 8006602:	4718      	bx	r3
 8006604:	2000002c 	.word	0x2000002c

08006608 <_puts_r>:
 8006608:	6a03      	ldr	r3, [r0, #32]
 800660a:	b570      	push	{r4, r5, r6, lr}
 800660c:	0005      	movs	r5, r0
 800660e:	000e      	movs	r6, r1
 8006610:	6884      	ldr	r4, [r0, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <_puts_r+0x12>
 8006616:	f7ff ffb3 	bl	8006580 <__sinit>
 800661a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800661c:	07db      	lsls	r3, r3, #31
 800661e:	d405      	bmi.n	800662c <_puts_r+0x24>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	059b      	lsls	r3, r3, #22
 8006624:	d402      	bmi.n	800662c <_puts_r+0x24>
 8006626:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006628:	f000 f9bb 	bl	80069a2 <__retarget_lock_acquire_recursive>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	071b      	lsls	r3, r3, #28
 8006630:	d502      	bpl.n	8006638 <_puts_r+0x30>
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d11f      	bne.n	8006678 <_puts_r+0x70>
 8006638:	0021      	movs	r1, r4
 800663a:	0028      	movs	r0, r5
 800663c:	f000 f8d2 	bl	80067e4 <__swsetup_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	d019      	beq.n	8006678 <_puts_r+0x70>
 8006644:	2501      	movs	r5, #1
 8006646:	426d      	negs	r5, r5
 8006648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800664a:	07db      	lsls	r3, r3, #31
 800664c:	d405      	bmi.n	800665a <_puts_r+0x52>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	059b      	lsls	r3, r3, #22
 8006652:	d402      	bmi.n	800665a <_puts_r+0x52>
 8006654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006656:	f000 f9a5 	bl	80069a4 <__retarget_lock_release_recursive>
 800665a:	0028      	movs	r0, r5
 800665c:	bd70      	pop	{r4, r5, r6, pc}
 800665e:	3601      	adds	r6, #1
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	da04      	bge.n	8006670 <_puts_r+0x68>
 8006666:	69a2      	ldr	r2, [r4, #24]
 8006668:	429a      	cmp	r2, r3
 800666a:	dc16      	bgt.n	800669a <_puts_r+0x92>
 800666c:	290a      	cmp	r1, #10
 800666e:	d014      	beq.n	800669a <_puts_r+0x92>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	6022      	str	r2, [r4, #0]
 8006676:	7019      	strb	r1, [r3, #0]
 8006678:	68a3      	ldr	r3, [r4, #8]
 800667a:	7831      	ldrb	r1, [r6, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	2900      	cmp	r1, #0
 8006680:	d1ed      	bne.n	800665e <_puts_r+0x56>
 8006682:	60a3      	str	r3, [r4, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	da0f      	bge.n	80066a8 <_puts_r+0xa0>
 8006688:	0022      	movs	r2, r4
 800668a:	0028      	movs	r0, r5
 800668c:	310a      	adds	r1, #10
 800668e:	f000 f867 	bl	8006760 <__swbuf_r>
 8006692:	3001      	adds	r0, #1
 8006694:	d0d6      	beq.n	8006644 <_puts_r+0x3c>
 8006696:	250a      	movs	r5, #10
 8006698:	e7d6      	b.n	8006648 <_puts_r+0x40>
 800669a:	0022      	movs	r2, r4
 800669c:	0028      	movs	r0, r5
 800669e:	f000 f85f 	bl	8006760 <__swbuf_r>
 80066a2:	3001      	adds	r0, #1
 80066a4:	d1e8      	bne.n	8006678 <_puts_r+0x70>
 80066a6:	e7cd      	b.n	8006644 <_puts_r+0x3c>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	6022      	str	r2, [r4, #0]
 80066ae:	220a      	movs	r2, #10
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	e7f0      	b.n	8006696 <_puts_r+0x8e>

080066b4 <puts>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4b03      	ldr	r3, [pc, #12]	@ (80066c4 <puts+0x10>)
 80066b8:	0001      	movs	r1, r0
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	f7ff ffa4 	bl	8006608 <_puts_r>
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	46c0      	nop			@ (mov r8, r8)
 80066c4:	2000002c 	.word	0x2000002c

080066c8 <__sread>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	000c      	movs	r4, r1
 80066cc:	250e      	movs	r5, #14
 80066ce:	5f49      	ldrsh	r1, [r1, r5]
 80066d0:	f000 f914 	bl	80068fc <_read_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	db03      	blt.n	80066e0 <__sread+0x18>
 80066d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80066da:	181b      	adds	r3, r3, r0
 80066dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	4a02      	ldr	r2, [pc, #8]	@ (80066ec <__sread+0x24>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	e7f9      	b.n	80066de <__sread+0x16>
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	ffffefff 	.word	0xffffefff

080066f0 <__swrite>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	001f      	movs	r7, r3
 80066f4:	898b      	ldrh	r3, [r1, #12]
 80066f6:	0005      	movs	r5, r0
 80066f8:	000c      	movs	r4, r1
 80066fa:	0016      	movs	r6, r2
 80066fc:	05db      	lsls	r3, r3, #23
 80066fe:	d505      	bpl.n	800670c <__swrite+0x1c>
 8006700:	230e      	movs	r3, #14
 8006702:	5ec9      	ldrsh	r1, [r1, r3]
 8006704:	2200      	movs	r2, #0
 8006706:	2302      	movs	r3, #2
 8006708:	f000 f8e4 	bl	80068d4 <_lseek_r>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	4a05      	ldr	r2, [pc, #20]	@ (8006724 <__swrite+0x34>)
 8006710:	0028      	movs	r0, r5
 8006712:	4013      	ands	r3, r2
 8006714:	81a3      	strh	r3, [r4, #12]
 8006716:	0032      	movs	r2, r6
 8006718:	230e      	movs	r3, #14
 800671a:	5ee1      	ldrsh	r1, [r4, r3]
 800671c:	003b      	movs	r3, r7
 800671e:	f000 f901 	bl	8006924 <_write_r>
 8006722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006724:	ffffefff 	.word	0xffffefff

08006728 <__sseek>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	000c      	movs	r4, r1
 800672c:	250e      	movs	r5, #14
 800672e:	5f49      	ldrsh	r1, [r1, r5]
 8006730:	f000 f8d0 	bl	80068d4 <_lseek_r>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	1c42      	adds	r2, r0, #1
 8006738:	d103      	bne.n	8006742 <__sseek+0x1a>
 800673a:	4a05      	ldr	r2, [pc, #20]	@ (8006750 <__sseek+0x28>)
 800673c:	4013      	ands	r3, r2
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	bd70      	pop	{r4, r5, r6, pc}
 8006742:	2280      	movs	r2, #128	@ 0x80
 8006744:	0152      	lsls	r2, r2, #5
 8006746:	4313      	orrs	r3, r2
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	6560      	str	r0, [r4, #84]	@ 0x54
 800674c:	e7f8      	b.n	8006740 <__sseek+0x18>
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	ffffefff 	.word	0xffffefff

08006754 <__sclose>:
 8006754:	b510      	push	{r4, lr}
 8006756:	230e      	movs	r3, #14
 8006758:	5ec9      	ldrsh	r1, [r1, r3]
 800675a:	f000 f8a9 	bl	80068b0 <_close_r>
 800675e:	bd10      	pop	{r4, pc}

08006760 <__swbuf_r>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	0006      	movs	r6, r0
 8006764:	000d      	movs	r5, r1
 8006766:	0014      	movs	r4, r2
 8006768:	2800      	cmp	r0, #0
 800676a:	d004      	beq.n	8006776 <__swbuf_r+0x16>
 800676c:	6a03      	ldr	r3, [r0, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <__swbuf_r+0x16>
 8006772:	f7ff ff05 	bl	8006580 <__sinit>
 8006776:	69a3      	ldr	r3, [r4, #24]
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	071b      	lsls	r3, r3, #28
 800677e:	d502      	bpl.n	8006786 <__swbuf_r+0x26>
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <__swbuf_r+0x3a>
 8006786:	0021      	movs	r1, r4
 8006788:	0030      	movs	r0, r6
 800678a:	f000 f82b 	bl	80067e4 <__swsetup_r>
 800678e:	2800      	cmp	r0, #0
 8006790:	d003      	beq.n	800679a <__swbuf_r+0x3a>
 8006792:	2501      	movs	r5, #1
 8006794:	426d      	negs	r5, r5
 8006796:	0028      	movs	r0, r5
 8006798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	b2ef      	uxtb	r7, r5
 80067a0:	1ac0      	subs	r0, r0, r3
 80067a2:	6963      	ldr	r3, [r4, #20]
 80067a4:	b2ed      	uxtb	r5, r5
 80067a6:	4283      	cmp	r3, r0
 80067a8:	dc05      	bgt.n	80067b6 <__swbuf_r+0x56>
 80067aa:	0021      	movs	r1, r4
 80067ac:	0030      	movs	r0, r6
 80067ae:	f000 fd45 	bl	800723c <_fflush_r>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d1ed      	bne.n	8006792 <__swbuf_r+0x32>
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	3001      	adds	r0, #1
 80067ba:	3b01      	subs	r3, #1
 80067bc:	60a3      	str	r3, [r4, #8]
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	6022      	str	r2, [r4, #0]
 80067c4:	701f      	strb	r7, [r3, #0]
 80067c6:	6963      	ldr	r3, [r4, #20]
 80067c8:	4283      	cmp	r3, r0
 80067ca:	d004      	beq.n	80067d6 <__swbuf_r+0x76>
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	07db      	lsls	r3, r3, #31
 80067d0:	d5e1      	bpl.n	8006796 <__swbuf_r+0x36>
 80067d2:	2d0a      	cmp	r5, #10
 80067d4:	d1df      	bne.n	8006796 <__swbuf_r+0x36>
 80067d6:	0021      	movs	r1, r4
 80067d8:	0030      	movs	r0, r6
 80067da:	f000 fd2f 	bl	800723c <_fflush_r>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0d9      	beq.n	8006796 <__swbuf_r+0x36>
 80067e2:	e7d6      	b.n	8006792 <__swbuf_r+0x32>

080067e4 <__swsetup_r>:
 80067e4:	4b2d      	ldr	r3, [pc, #180]	@ (800689c <__swsetup_r+0xb8>)
 80067e6:	b570      	push	{r4, r5, r6, lr}
 80067e8:	0005      	movs	r5, r0
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	000c      	movs	r4, r1
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d004      	beq.n	80067fc <__swsetup_r+0x18>
 80067f2:	6a03      	ldr	r3, [r0, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <__swsetup_r+0x18>
 80067f8:	f7ff fec2 	bl	8006580 <__sinit>
 80067fc:	220c      	movs	r2, #12
 80067fe:	5ea3      	ldrsh	r3, [r4, r2]
 8006800:	071a      	lsls	r2, r3, #28
 8006802:	d423      	bmi.n	800684c <__swsetup_r+0x68>
 8006804:	06da      	lsls	r2, r3, #27
 8006806:	d407      	bmi.n	8006818 <__swsetup_r+0x34>
 8006808:	2209      	movs	r2, #9
 800680a:	602a      	str	r2, [r5, #0]
 800680c:	2240      	movs	r2, #64	@ 0x40
 800680e:	2001      	movs	r0, #1
 8006810:	4313      	orrs	r3, r2
 8006812:	81a3      	strh	r3, [r4, #12]
 8006814:	4240      	negs	r0, r0
 8006816:	e03a      	b.n	800688e <__swsetup_r+0xaa>
 8006818:	075b      	lsls	r3, r3, #29
 800681a:	d513      	bpl.n	8006844 <__swsetup_r+0x60>
 800681c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800681e:	2900      	cmp	r1, #0
 8006820:	d008      	beq.n	8006834 <__swsetup_r+0x50>
 8006822:	0023      	movs	r3, r4
 8006824:	3344      	adds	r3, #68	@ 0x44
 8006826:	4299      	cmp	r1, r3
 8006828:	d002      	beq.n	8006830 <__swsetup_r+0x4c>
 800682a:	0028      	movs	r0, r5
 800682c:	f000 f8c4 	bl	80069b8 <_free_r>
 8006830:	2300      	movs	r3, #0
 8006832:	6363      	str	r3, [r4, #52]	@ 0x34
 8006834:	2224      	movs	r2, #36	@ 0x24
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	4393      	bics	r3, r2
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	2300      	movs	r3, #0
 800683e:	6063      	str	r3, [r4, #4]
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	2308      	movs	r3, #8
 8006846:	89a2      	ldrh	r2, [r4, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10b      	bne.n	800686a <__swsetup_r+0x86>
 8006852:	21a0      	movs	r1, #160	@ 0xa0
 8006854:	2280      	movs	r2, #128	@ 0x80
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	0089      	lsls	r1, r1, #2
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	400b      	ands	r3, r1
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <__swsetup_r+0x86>
 8006862:	0021      	movs	r1, r4
 8006864:	0028      	movs	r0, r5
 8006866:	f000 fd3f 	bl	80072e8 <__smakebuf_r>
 800686a:	220c      	movs	r2, #12
 800686c:	5ea3      	ldrsh	r3, [r4, r2]
 800686e:	2101      	movs	r1, #1
 8006870:	001a      	movs	r2, r3
 8006872:	400a      	ands	r2, r1
 8006874:	420b      	tst	r3, r1
 8006876:	d00b      	beq.n	8006890 <__swsetup_r+0xac>
 8006878:	2200      	movs	r2, #0
 800687a:	60a2      	str	r2, [r4, #8]
 800687c:	6962      	ldr	r2, [r4, #20]
 800687e:	4252      	negs	r2, r2
 8006880:	61a2      	str	r2, [r4, #24]
 8006882:	2000      	movs	r0, #0
 8006884:	6922      	ldr	r2, [r4, #16]
 8006886:	4282      	cmp	r2, r0
 8006888:	d101      	bne.n	800688e <__swsetup_r+0xaa>
 800688a:	061a      	lsls	r2, r3, #24
 800688c:	d4be      	bmi.n	800680c <__swsetup_r+0x28>
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	0799      	lsls	r1, r3, #30
 8006892:	d400      	bmi.n	8006896 <__swsetup_r+0xb2>
 8006894:	6962      	ldr	r2, [r4, #20]
 8006896:	60a2      	str	r2, [r4, #8]
 8006898:	e7f3      	b.n	8006882 <__swsetup_r+0x9e>
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	2000002c 	.word	0x2000002c

080068a0 <memset>:
 80068a0:	0003      	movs	r3, r0
 80068a2:	1882      	adds	r2, r0, r2
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d100      	bne.n	80068aa <memset+0xa>
 80068a8:	4770      	bx	lr
 80068aa:	7019      	strb	r1, [r3, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	e7f9      	b.n	80068a4 <memset+0x4>

080068b0 <_close_r>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b570      	push	{r4, r5, r6, lr}
 80068b4:	4d06      	ldr	r5, [pc, #24]	@ (80068d0 <_close_r+0x20>)
 80068b6:	0004      	movs	r4, r0
 80068b8:	0008      	movs	r0, r1
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	f7fb faa3 	bl	8001e06 <_close>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d103      	bne.n	80068cc <_close_r+0x1c>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d000      	beq.n	80068cc <_close_r+0x1c>
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	bd70      	pop	{r4, r5, r6, pc}
 80068ce:	46c0      	nop			@ (mov r8, r8)
 80068d0:	20000740 	.word	0x20000740

080068d4 <_lseek_r>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	0004      	movs	r4, r0
 80068d8:	0008      	movs	r0, r1
 80068da:	0011      	movs	r1, r2
 80068dc:	001a      	movs	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	4d05      	ldr	r5, [pc, #20]	@ (80068f8 <_lseek_r+0x24>)
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fb fab0 	bl	8001e48 <_lseek>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d103      	bne.n	80068f4 <_lseek_r+0x20>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d000      	beq.n	80068f4 <_lseek_r+0x20>
 80068f2:	6023      	str	r3, [r4, #0]
 80068f4:	bd70      	pop	{r4, r5, r6, pc}
 80068f6:	46c0      	nop			@ (mov r8, r8)
 80068f8:	20000740 	.word	0x20000740

080068fc <_read_r>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	0004      	movs	r4, r0
 8006900:	0008      	movs	r0, r1
 8006902:	0011      	movs	r1, r2
 8006904:	001a      	movs	r2, r3
 8006906:	2300      	movs	r3, #0
 8006908:	4d05      	ldr	r5, [pc, #20]	@ (8006920 <_read_r+0x24>)
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	f7fb fa42 	bl	8001d94 <_read>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d103      	bne.n	800691c <_read_r+0x20>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d000      	beq.n	800691c <_read_r+0x20>
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	bd70      	pop	{r4, r5, r6, pc}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	20000740 	.word	0x20000740

08006924 <_write_r>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	0004      	movs	r4, r0
 8006928:	0008      	movs	r0, r1
 800692a:	0011      	movs	r1, r2
 800692c:	001a      	movs	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	4d05      	ldr	r5, [pc, #20]	@ (8006948 <_write_r+0x24>)
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fb fa4b 	bl	8001dce <_write>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d103      	bne.n	8006944 <_write_r+0x20>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d000      	beq.n	8006944 <_write_r+0x20>
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	46c0      	nop			@ (mov r8, r8)
 8006948:	20000740 	.word	0x20000740

0800694c <__errno>:
 800694c:	4b01      	ldr	r3, [pc, #4]	@ (8006954 <__errno+0x8>)
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	4770      	bx	lr
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	2000002c 	.word	0x2000002c

08006958 <__libc_init_array>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	2600      	movs	r6, #0
 800695c:	4c0c      	ldr	r4, [pc, #48]	@ (8006990 <__libc_init_array+0x38>)
 800695e:	4d0d      	ldr	r5, [pc, #52]	@ (8006994 <__libc_init_array+0x3c>)
 8006960:	1b64      	subs	r4, r4, r5
 8006962:	10a4      	asrs	r4, r4, #2
 8006964:	42a6      	cmp	r6, r4
 8006966:	d109      	bne.n	800697c <__libc_init_array+0x24>
 8006968:	2600      	movs	r6, #0
 800696a:	f000 fd41 	bl	80073f0 <_init>
 800696e:	4c0a      	ldr	r4, [pc, #40]	@ (8006998 <__libc_init_array+0x40>)
 8006970:	4d0a      	ldr	r5, [pc, #40]	@ (800699c <__libc_init_array+0x44>)
 8006972:	1b64      	subs	r4, r4, r5
 8006974:	10a4      	asrs	r4, r4, #2
 8006976:	42a6      	cmp	r6, r4
 8006978:	d105      	bne.n	8006986 <__libc_init_array+0x2e>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	00b3      	lsls	r3, r6, #2
 800697e:	58eb      	ldr	r3, [r5, r3]
 8006980:	4798      	blx	r3
 8006982:	3601      	adds	r6, #1
 8006984:	e7ee      	b.n	8006964 <__libc_init_array+0xc>
 8006986:	00b3      	lsls	r3, r6, #2
 8006988:	58eb      	ldr	r3, [r5, r3]
 800698a:	4798      	blx	r3
 800698c:	3601      	adds	r6, #1
 800698e:	e7f2      	b.n	8006976 <__libc_init_array+0x1e>
 8006990:	080076c0 	.word	0x080076c0
 8006994:	080076c0 	.word	0x080076c0
 8006998:	080076c4 	.word	0x080076c4
 800699c:	080076c0 	.word	0x080076c0

080069a0 <__retarget_lock_init_recursive>:
 80069a0:	4770      	bx	lr

080069a2 <__retarget_lock_acquire_recursive>:
 80069a2:	4770      	bx	lr

080069a4 <__retarget_lock_release_recursive>:
 80069a4:	4770      	bx	lr

080069a6 <memcpy>:
 80069a6:	2300      	movs	r3, #0
 80069a8:	b510      	push	{r4, lr}
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d100      	bne.n	80069b0 <memcpy+0xa>
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	5ccc      	ldrb	r4, [r1, r3]
 80069b2:	54c4      	strb	r4, [r0, r3]
 80069b4:	3301      	adds	r3, #1
 80069b6:	e7f8      	b.n	80069aa <memcpy+0x4>

080069b8 <_free_r>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	0005      	movs	r5, r0
 80069bc:	1e0c      	subs	r4, r1, #0
 80069be:	d010      	beq.n	80069e2 <_free_r+0x2a>
 80069c0:	3c04      	subs	r4, #4
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da00      	bge.n	80069ca <_free_r+0x12>
 80069c8:	18e4      	adds	r4, r4, r3
 80069ca:	0028      	movs	r0, r5
 80069cc:	f000 f8e0 	bl	8006b90 <__malloc_lock>
 80069d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a48 <_free_r+0x90>)
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <_free_r+0x2c>
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	6014      	str	r4, [r2, #0]
 80069dc:	0028      	movs	r0, r5
 80069de:	f000 f8df 	bl	8006ba0 <__malloc_unlock>
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	d908      	bls.n	80069fa <_free_r+0x42>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	1821      	adds	r1, r4, r0
 80069ec:	428b      	cmp	r3, r1
 80069ee:	d1f3      	bne.n	80069d8 <_free_r+0x20>
 80069f0:	6819      	ldr	r1, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	1809      	adds	r1, r1, r0
 80069f6:	6021      	str	r1, [r4, #0]
 80069f8:	e7ee      	b.n	80069d8 <_free_r+0x20>
 80069fa:	001a      	movs	r2, r3
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <_free_r+0x4e>
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	d9f9      	bls.n	80069fa <_free_r+0x42>
 8006a06:	6811      	ldr	r1, [r2, #0]
 8006a08:	1850      	adds	r0, r2, r1
 8006a0a:	42a0      	cmp	r0, r4
 8006a0c:	d10b      	bne.n	8006a26 <_free_r+0x6e>
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	1809      	adds	r1, r1, r0
 8006a12:	1850      	adds	r0, r2, r1
 8006a14:	6011      	str	r1, [r2, #0]
 8006a16:	4283      	cmp	r3, r0
 8006a18:	d1e0      	bne.n	80069dc <_free_r+0x24>
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	1841      	adds	r1, r0, r1
 8006a20:	6011      	str	r1, [r2, #0]
 8006a22:	6053      	str	r3, [r2, #4]
 8006a24:	e7da      	b.n	80069dc <_free_r+0x24>
 8006a26:	42a0      	cmp	r0, r4
 8006a28:	d902      	bls.n	8006a30 <_free_r+0x78>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	e7d5      	b.n	80069dc <_free_r+0x24>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	1821      	adds	r1, r4, r0
 8006a34:	428b      	cmp	r3, r1
 8006a36:	d103      	bne.n	8006a40 <_free_r+0x88>
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	1809      	adds	r1, r1, r0
 8006a3e:	6021      	str	r1, [r4, #0]
 8006a40:	6063      	str	r3, [r4, #4]
 8006a42:	6054      	str	r4, [r2, #4]
 8006a44:	e7ca      	b.n	80069dc <_free_r+0x24>
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	2000074c 	.word	0x2000074c

08006a4c <sbrk_aligned>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a8c <sbrk_aligned+0x40>)
 8006a50:	000d      	movs	r5, r1
 8006a52:	6831      	ldr	r1, [r6, #0]
 8006a54:	0004      	movs	r4, r0
 8006a56:	2900      	cmp	r1, #0
 8006a58:	d102      	bne.n	8006a60 <sbrk_aligned+0x14>
 8006a5a:	f000 fcab 	bl	80073b4 <_sbrk_r>
 8006a5e:	6030      	str	r0, [r6, #0]
 8006a60:	0029      	movs	r1, r5
 8006a62:	0020      	movs	r0, r4
 8006a64:	f000 fca6 	bl	80073b4 <_sbrk_r>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d103      	bne.n	8006a74 <sbrk_aligned+0x28>
 8006a6c:	2501      	movs	r5, #1
 8006a6e:	426d      	negs	r5, r5
 8006a70:	0028      	movs	r0, r5
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	2303      	movs	r3, #3
 8006a76:	1cc5      	adds	r5, r0, #3
 8006a78:	439d      	bics	r5, r3
 8006a7a:	42a8      	cmp	r0, r5
 8006a7c:	d0f8      	beq.n	8006a70 <sbrk_aligned+0x24>
 8006a7e:	1a29      	subs	r1, r5, r0
 8006a80:	0020      	movs	r0, r4
 8006a82:	f000 fc97 	bl	80073b4 <_sbrk_r>
 8006a86:	3001      	adds	r0, #1
 8006a88:	d1f2      	bne.n	8006a70 <sbrk_aligned+0x24>
 8006a8a:	e7ef      	b.n	8006a6c <sbrk_aligned+0x20>
 8006a8c:	20000748 	.word	0x20000748

08006a90 <_malloc_r>:
 8006a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a92:	2203      	movs	r2, #3
 8006a94:	1ccb      	adds	r3, r1, #3
 8006a96:	4393      	bics	r3, r2
 8006a98:	3308      	adds	r3, #8
 8006a9a:	0005      	movs	r5, r0
 8006a9c:	001f      	movs	r7, r3
 8006a9e:	2b0c      	cmp	r3, #12
 8006aa0:	d234      	bcs.n	8006b0c <_malloc_r+0x7c>
 8006aa2:	270c      	movs	r7, #12
 8006aa4:	42b9      	cmp	r1, r7
 8006aa6:	d833      	bhi.n	8006b10 <_malloc_r+0x80>
 8006aa8:	0028      	movs	r0, r5
 8006aaa:	f000 f871 	bl	8006b90 <__malloc_lock>
 8006aae:	4e37      	ldr	r6, [pc, #220]	@ (8006b8c <_malloc_r+0xfc>)
 8006ab0:	6833      	ldr	r3, [r6, #0]
 8006ab2:	001c      	movs	r4, r3
 8006ab4:	2c00      	cmp	r4, #0
 8006ab6:	d12f      	bne.n	8006b18 <_malloc_r+0x88>
 8006ab8:	0039      	movs	r1, r7
 8006aba:	0028      	movs	r0, r5
 8006abc:	f7ff ffc6 	bl	8006a4c <sbrk_aligned>
 8006ac0:	0004      	movs	r4, r0
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d15f      	bne.n	8006b86 <_malloc_r+0xf6>
 8006ac6:	6834      	ldr	r4, [r6, #0]
 8006ac8:	9400      	str	r4, [sp, #0]
 8006aca:	9b00      	ldr	r3, [sp, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d14a      	bne.n	8006b66 <_malloc_r+0xd6>
 8006ad0:	2c00      	cmp	r4, #0
 8006ad2:	d052      	beq.n	8006b7a <_malloc_r+0xea>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	0028      	movs	r0, r5
 8006ad8:	18e3      	adds	r3, r4, r3
 8006ada:	9900      	ldr	r1, [sp, #0]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	f000 fc69 	bl	80073b4 <_sbrk_r>
 8006ae2:	9b01      	ldr	r3, [sp, #4]
 8006ae4:	4283      	cmp	r3, r0
 8006ae6:	d148      	bne.n	8006b7a <_malloc_r+0xea>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	0028      	movs	r0, r5
 8006aec:	1aff      	subs	r7, r7, r3
 8006aee:	0039      	movs	r1, r7
 8006af0:	f7ff ffac 	bl	8006a4c <sbrk_aligned>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d040      	beq.n	8006b7a <_malloc_r+0xea>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	19db      	adds	r3, r3, r7
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	6833      	ldr	r3, [r6, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d133      	bne.n	8006b6e <_malloc_r+0xde>
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	6033      	str	r3, [r6, #0]
 8006b0a:	e019      	b.n	8006b40 <_malloc_r+0xb0>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dac9      	bge.n	8006aa4 <_malloc_r+0x14>
 8006b10:	230c      	movs	r3, #12
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	2000      	movs	r0, #0
 8006b16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b18:	6821      	ldr	r1, [r4, #0]
 8006b1a:	1bc9      	subs	r1, r1, r7
 8006b1c:	d420      	bmi.n	8006b60 <_malloc_r+0xd0>
 8006b1e:	290b      	cmp	r1, #11
 8006b20:	d90a      	bls.n	8006b38 <_malloc_r+0xa8>
 8006b22:	19e2      	adds	r2, r4, r7
 8006b24:	6027      	str	r7, [r4, #0]
 8006b26:	42a3      	cmp	r3, r4
 8006b28:	d104      	bne.n	8006b34 <_malloc_r+0xa4>
 8006b2a:	6032      	str	r2, [r6, #0]
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	6011      	str	r1, [r2, #0]
 8006b30:	6053      	str	r3, [r2, #4]
 8006b32:	e005      	b.n	8006b40 <_malloc_r+0xb0>
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	e7f9      	b.n	8006b2c <_malloc_r+0x9c>
 8006b38:	6862      	ldr	r2, [r4, #4]
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	d10e      	bne.n	8006b5c <_malloc_r+0xcc>
 8006b3e:	6032      	str	r2, [r6, #0]
 8006b40:	0028      	movs	r0, r5
 8006b42:	f000 f82d 	bl	8006ba0 <__malloc_unlock>
 8006b46:	0020      	movs	r0, r4
 8006b48:	2207      	movs	r2, #7
 8006b4a:	300b      	adds	r0, #11
 8006b4c:	1d23      	adds	r3, r4, #4
 8006b4e:	4390      	bics	r0, r2
 8006b50:	1ac2      	subs	r2, r0, r3
 8006b52:	4298      	cmp	r0, r3
 8006b54:	d0df      	beq.n	8006b16 <_malloc_r+0x86>
 8006b56:	1a1b      	subs	r3, r3, r0
 8006b58:	50a3      	str	r3, [r4, r2]
 8006b5a:	e7dc      	b.n	8006b16 <_malloc_r+0x86>
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	e7ef      	b.n	8006b40 <_malloc_r+0xb0>
 8006b60:	0023      	movs	r3, r4
 8006b62:	6864      	ldr	r4, [r4, #4]
 8006b64:	e7a6      	b.n	8006ab4 <_malloc_r+0x24>
 8006b66:	9c00      	ldr	r4, [sp, #0]
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	e7ad      	b.n	8006aca <_malloc_r+0x3a>
 8006b6e:	001a      	movs	r2, r3
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	d1fb      	bne.n	8006b6e <_malloc_r+0xde>
 8006b76:	2300      	movs	r3, #0
 8006b78:	e7da      	b.n	8006b30 <_malloc_r+0xa0>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	0028      	movs	r0, r5
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f000 f80e 	bl	8006ba0 <__malloc_unlock>
 8006b84:	e7c6      	b.n	8006b14 <_malloc_r+0x84>
 8006b86:	6007      	str	r7, [r0, #0]
 8006b88:	e7da      	b.n	8006b40 <_malloc_r+0xb0>
 8006b8a:	46c0      	nop			@ (mov r8, r8)
 8006b8c:	2000074c 	.word	0x2000074c

08006b90 <__malloc_lock>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	4802      	ldr	r0, [pc, #8]	@ (8006b9c <__malloc_lock+0xc>)
 8006b94:	f7ff ff05 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	20000744 	.word	0x20000744

08006ba0 <__malloc_unlock>:
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	4802      	ldr	r0, [pc, #8]	@ (8006bac <__malloc_unlock+0xc>)
 8006ba4:	f7ff fefe 	bl	80069a4 <__retarget_lock_release_recursive>
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	20000744 	.word	0x20000744

08006bb0 <__sfputc_r>:
 8006bb0:	6893      	ldr	r3, [r2, #8]
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	6093      	str	r3, [r2, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da04      	bge.n	8006bc6 <__sfputc_r+0x16>
 8006bbc:	6994      	ldr	r4, [r2, #24]
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	db07      	blt.n	8006bd2 <__sfputc_r+0x22>
 8006bc2:	290a      	cmp	r1, #10
 8006bc4:	d005      	beq.n	8006bd2 <__sfputc_r+0x22>
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	1c58      	adds	r0, r3, #1
 8006bca:	6010      	str	r0, [r2, #0]
 8006bcc:	7019      	strb	r1, [r3, #0]
 8006bce:	0008      	movs	r0, r1
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	f7ff fdc5 	bl	8006760 <__swbuf_r>
 8006bd6:	0001      	movs	r1, r0
 8006bd8:	e7f9      	b.n	8006bce <__sfputc_r+0x1e>

08006bda <__sfputs_r>:
 8006bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bdc:	0006      	movs	r6, r0
 8006bde:	000f      	movs	r7, r1
 8006be0:	0014      	movs	r4, r2
 8006be2:	18d5      	adds	r5, r2, r3
 8006be4:	42ac      	cmp	r4, r5
 8006be6:	d101      	bne.n	8006bec <__sfputs_r+0x12>
 8006be8:	2000      	movs	r0, #0
 8006bea:	e007      	b.n	8006bfc <__sfputs_r+0x22>
 8006bec:	7821      	ldrb	r1, [r4, #0]
 8006bee:	003a      	movs	r2, r7
 8006bf0:	0030      	movs	r0, r6
 8006bf2:	f7ff ffdd 	bl	8006bb0 <__sfputc_r>
 8006bf6:	3401      	adds	r4, #1
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d1f3      	bne.n	8006be4 <__sfputs_r+0xa>
 8006bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c00 <_vfiprintf_r>:
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	b0a1      	sub	sp, #132	@ 0x84
 8006c04:	000f      	movs	r7, r1
 8006c06:	0015      	movs	r5, r2
 8006c08:	001e      	movs	r6, r3
 8006c0a:	9003      	str	r0, [sp, #12]
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d004      	beq.n	8006c1a <_vfiprintf_r+0x1a>
 8006c10:	6a03      	ldr	r3, [r0, #32]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <_vfiprintf_r+0x1a>
 8006c16:	f7ff fcb3 	bl	8006580 <__sinit>
 8006c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c1c:	07db      	lsls	r3, r3, #31
 8006c1e:	d405      	bmi.n	8006c2c <_vfiprintf_r+0x2c>
 8006c20:	89bb      	ldrh	r3, [r7, #12]
 8006c22:	059b      	lsls	r3, r3, #22
 8006c24:	d402      	bmi.n	8006c2c <_vfiprintf_r+0x2c>
 8006c26:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006c28:	f7ff febb 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8006c2c:	89bb      	ldrh	r3, [r7, #12]
 8006c2e:	071b      	lsls	r3, r3, #28
 8006c30:	d502      	bpl.n	8006c38 <_vfiprintf_r+0x38>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d113      	bne.n	8006c60 <_vfiprintf_r+0x60>
 8006c38:	0039      	movs	r1, r7
 8006c3a:	9803      	ldr	r0, [sp, #12]
 8006c3c:	f7ff fdd2 	bl	80067e4 <__swsetup_r>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d00d      	beq.n	8006c60 <_vfiprintf_r+0x60>
 8006c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c46:	07db      	lsls	r3, r3, #31
 8006c48:	d503      	bpl.n	8006c52 <_vfiprintf_r+0x52>
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	4240      	negs	r0, r0
 8006c4e:	b021      	add	sp, #132	@ 0x84
 8006c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c52:	89bb      	ldrh	r3, [r7, #12]
 8006c54:	059b      	lsls	r3, r3, #22
 8006c56:	d4f8      	bmi.n	8006c4a <_vfiprintf_r+0x4a>
 8006c58:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006c5a:	f7ff fea3 	bl	80069a4 <__retarget_lock_release_recursive>
 8006c5e:	e7f4      	b.n	8006c4a <_vfiprintf_r+0x4a>
 8006c60:	2300      	movs	r3, #0
 8006c62:	ac08      	add	r4, sp, #32
 8006c64:	6163      	str	r3, [r4, #20]
 8006c66:	3320      	adds	r3, #32
 8006c68:	7663      	strb	r3, [r4, #25]
 8006c6a:	3310      	adds	r3, #16
 8006c6c:	76a3      	strb	r3, [r4, #26]
 8006c6e:	9607      	str	r6, [sp, #28]
 8006c70:	002e      	movs	r6, r5
 8006c72:	7833      	ldrb	r3, [r6, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <_vfiprintf_r+0x7c>
 8006c78:	2b25      	cmp	r3, #37	@ 0x25
 8006c7a:	d148      	bne.n	8006d0e <_vfiprintf_r+0x10e>
 8006c7c:	1b73      	subs	r3, r6, r5
 8006c7e:	9305      	str	r3, [sp, #20]
 8006c80:	42ae      	cmp	r6, r5
 8006c82:	d00b      	beq.n	8006c9c <_vfiprintf_r+0x9c>
 8006c84:	002a      	movs	r2, r5
 8006c86:	0039      	movs	r1, r7
 8006c88:	9803      	ldr	r0, [sp, #12]
 8006c8a:	f7ff ffa6 	bl	8006bda <__sfputs_r>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d100      	bne.n	8006c94 <_vfiprintf_r+0x94>
 8006c92:	e0ae      	b.n	8006df2 <_vfiprintf_r+0x1f2>
 8006c94:	6963      	ldr	r3, [r4, #20]
 8006c96:	9a05      	ldr	r2, [sp, #20]
 8006c98:	189b      	adds	r3, r3, r2
 8006c9a:	6163      	str	r3, [r4, #20]
 8006c9c:	7833      	ldrb	r3, [r6, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d100      	bne.n	8006ca4 <_vfiprintf_r+0xa4>
 8006ca2:	e0a6      	b.n	8006df2 <_vfiprintf_r+0x1f2>
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4252      	negs	r2, r2
 8006caa:	6062      	str	r2, [r4, #4]
 8006cac:	a904      	add	r1, sp, #16
 8006cae:	3254      	adds	r2, #84	@ 0x54
 8006cb0:	1852      	adds	r2, r2, r1
 8006cb2:	1c75      	adds	r5, r6, #1
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	60e3      	str	r3, [r4, #12]
 8006cb8:	60a3      	str	r3, [r4, #8]
 8006cba:	7013      	strb	r3, [r2, #0]
 8006cbc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006cbe:	4b59      	ldr	r3, [pc, #356]	@ (8006e24 <_vfiprintf_r+0x224>)
 8006cc0:	2205      	movs	r2, #5
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	7829      	ldrb	r1, [r5, #0]
 8006cc6:	9305      	str	r3, [sp, #20]
 8006cc8:	f000 fb86 	bl	80073d8 <memchr>
 8006ccc:	1c6e      	adds	r6, r5, #1
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d11f      	bne.n	8006d12 <_vfiprintf_r+0x112>
 8006cd2:	6822      	ldr	r2, [r4, #0]
 8006cd4:	06d3      	lsls	r3, r2, #27
 8006cd6:	d504      	bpl.n	8006ce2 <_vfiprintf_r+0xe2>
 8006cd8:	2353      	movs	r3, #83	@ 0x53
 8006cda:	a904      	add	r1, sp, #16
 8006cdc:	185b      	adds	r3, r3, r1
 8006cde:	2120      	movs	r1, #32
 8006ce0:	7019      	strb	r1, [r3, #0]
 8006ce2:	0713      	lsls	r3, r2, #28
 8006ce4:	d504      	bpl.n	8006cf0 <_vfiprintf_r+0xf0>
 8006ce6:	2353      	movs	r3, #83	@ 0x53
 8006ce8:	a904      	add	r1, sp, #16
 8006cea:	185b      	adds	r3, r3, r1
 8006cec:	212b      	movs	r1, #43	@ 0x2b
 8006cee:	7019      	strb	r1, [r3, #0]
 8006cf0:	782b      	ldrb	r3, [r5, #0]
 8006cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cf4:	d016      	beq.n	8006d24 <_vfiprintf_r+0x124>
 8006cf6:	002e      	movs	r6, r5
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	200a      	movs	r0, #10
 8006cfc:	68e3      	ldr	r3, [r4, #12]
 8006cfe:	7832      	ldrb	r2, [r6, #0]
 8006d00:	1c75      	adds	r5, r6, #1
 8006d02:	3a30      	subs	r2, #48	@ 0x30
 8006d04:	2a09      	cmp	r2, #9
 8006d06:	d950      	bls.n	8006daa <_vfiprintf_r+0x1aa>
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	d111      	bne.n	8006d30 <_vfiprintf_r+0x130>
 8006d0c:	e017      	b.n	8006d3e <_vfiprintf_r+0x13e>
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7af      	b.n	8006c72 <_vfiprintf_r+0x72>
 8006d12:	9b05      	ldr	r3, [sp, #20]
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	1ac0      	subs	r0, r0, r3
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4083      	lsls	r3, r0
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	0035      	movs	r5, r6
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	e7cc      	b.n	8006cbe <_vfiprintf_r+0xbe>
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	1d19      	adds	r1, r3, #4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	9107      	str	r1, [sp, #28]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	db01      	blt.n	8006d34 <_vfiprintf_r+0x134>
 8006d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d32:	e004      	b.n	8006d3e <_vfiprintf_r+0x13e>
 8006d34:	425b      	negs	r3, r3
 8006d36:	60e3      	str	r3, [r4, #12]
 8006d38:	2302      	movs	r3, #2
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	7833      	ldrb	r3, [r6, #0]
 8006d40:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d42:	d10c      	bne.n	8006d5e <_vfiprintf_r+0x15e>
 8006d44:	7873      	ldrb	r3, [r6, #1]
 8006d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d48:	d134      	bne.n	8006db4 <_vfiprintf_r+0x1b4>
 8006d4a:	9b07      	ldr	r3, [sp, #28]
 8006d4c:	3602      	adds	r6, #2
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	9207      	str	r2, [sp, #28]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da01      	bge.n	8006d5c <_vfiprintf_r+0x15c>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	425b      	negs	r3, r3
 8006d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5e:	4d32      	ldr	r5, [pc, #200]	@ (8006e28 <_vfiprintf_r+0x228>)
 8006d60:	2203      	movs	r2, #3
 8006d62:	0028      	movs	r0, r5
 8006d64:	7831      	ldrb	r1, [r6, #0]
 8006d66:	f000 fb37 	bl	80073d8 <memchr>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d006      	beq.n	8006d7c <_vfiprintf_r+0x17c>
 8006d6e:	2340      	movs	r3, #64	@ 0x40
 8006d70:	1b40      	subs	r0, r0, r5
 8006d72:	4083      	lsls	r3, r0
 8006d74:	6822      	ldr	r2, [r4, #0]
 8006d76:	3601      	adds	r6, #1
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	7831      	ldrb	r1, [r6, #0]
 8006d7e:	2206      	movs	r2, #6
 8006d80:	482a      	ldr	r0, [pc, #168]	@ (8006e2c <_vfiprintf_r+0x22c>)
 8006d82:	1c75      	adds	r5, r6, #1
 8006d84:	7621      	strb	r1, [r4, #24]
 8006d86:	f000 fb27 	bl	80073d8 <memchr>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d040      	beq.n	8006e10 <_vfiprintf_r+0x210>
 8006d8e:	4b28      	ldr	r3, [pc, #160]	@ (8006e30 <_vfiprintf_r+0x230>)
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d122      	bne.n	8006dda <_vfiprintf_r+0x1da>
 8006d94:	2207      	movs	r2, #7
 8006d96:	9b07      	ldr	r3, [sp, #28]
 8006d98:	3307      	adds	r3, #7
 8006d9a:	4393      	bics	r3, r2
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	6963      	ldr	r3, [r4, #20]
 8006da2:	9a04      	ldr	r2, [sp, #16]
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	6163      	str	r3, [r4, #20]
 8006da8:	e762      	b.n	8006c70 <_vfiprintf_r+0x70>
 8006daa:	4343      	muls	r3, r0
 8006dac:	002e      	movs	r6, r5
 8006dae:	2101      	movs	r1, #1
 8006db0:	189b      	adds	r3, r3, r2
 8006db2:	e7a4      	b.n	8006cfe <_vfiprintf_r+0xfe>
 8006db4:	2300      	movs	r3, #0
 8006db6:	200a      	movs	r0, #10
 8006db8:	0019      	movs	r1, r3
 8006dba:	3601      	adds	r6, #1
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	7832      	ldrb	r2, [r6, #0]
 8006dc0:	1c75      	adds	r5, r6, #1
 8006dc2:	3a30      	subs	r2, #48	@ 0x30
 8006dc4:	2a09      	cmp	r2, #9
 8006dc6:	d903      	bls.n	8006dd0 <_vfiprintf_r+0x1d0>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0c8      	beq.n	8006d5e <_vfiprintf_r+0x15e>
 8006dcc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dce:	e7c6      	b.n	8006d5e <_vfiprintf_r+0x15e>
 8006dd0:	4341      	muls	r1, r0
 8006dd2:	002e      	movs	r6, r5
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	1889      	adds	r1, r1, r2
 8006dd8:	e7f1      	b.n	8006dbe <_vfiprintf_r+0x1be>
 8006dda:	aa07      	add	r2, sp, #28
 8006ddc:	9200      	str	r2, [sp, #0]
 8006dde:	0021      	movs	r1, r4
 8006de0:	003a      	movs	r2, r7
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <_vfiprintf_r+0x234>)
 8006de4:	9803      	ldr	r0, [sp, #12]
 8006de6:	e000      	b.n	8006dea <_vfiprintf_r+0x1ea>
 8006de8:	bf00      	nop
 8006dea:	9004      	str	r0, [sp, #16]
 8006dec:	9b04      	ldr	r3, [sp, #16]
 8006dee:	3301      	adds	r3, #1
 8006df0:	d1d6      	bne.n	8006da0 <_vfiprintf_r+0x1a0>
 8006df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006df4:	07db      	lsls	r3, r3, #31
 8006df6:	d405      	bmi.n	8006e04 <_vfiprintf_r+0x204>
 8006df8:	89bb      	ldrh	r3, [r7, #12]
 8006dfa:	059b      	lsls	r3, r3, #22
 8006dfc:	d402      	bmi.n	8006e04 <_vfiprintf_r+0x204>
 8006dfe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006e00:	f7ff fdd0 	bl	80069a4 <__retarget_lock_release_recursive>
 8006e04:	89bb      	ldrh	r3, [r7, #12]
 8006e06:	065b      	lsls	r3, r3, #25
 8006e08:	d500      	bpl.n	8006e0c <_vfiprintf_r+0x20c>
 8006e0a:	e71e      	b.n	8006c4a <_vfiprintf_r+0x4a>
 8006e0c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006e0e:	e71e      	b.n	8006c4e <_vfiprintf_r+0x4e>
 8006e10:	aa07      	add	r2, sp, #28
 8006e12:	9200      	str	r2, [sp, #0]
 8006e14:	0021      	movs	r1, r4
 8006e16:	003a      	movs	r2, r7
 8006e18:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <_vfiprintf_r+0x234>)
 8006e1a:	9803      	ldr	r0, [sp, #12]
 8006e1c:	f000 f87c 	bl	8006f18 <_printf_i>
 8006e20:	e7e3      	b.n	8006dea <_vfiprintf_r+0x1ea>
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	0800768c 	.word	0x0800768c
 8006e28:	08007692 	.word	0x08007692
 8006e2c:	08007696 	.word	0x08007696
 8006e30:	00000000 	.word	0x00000000
 8006e34:	08006bdb 	.word	0x08006bdb

08006e38 <_printf_common>:
 8006e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e3a:	0016      	movs	r6, r2
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	688a      	ldr	r2, [r1, #8]
 8006e40:	690b      	ldr	r3, [r1, #16]
 8006e42:	000c      	movs	r4, r1
 8006e44:	9000      	str	r0, [sp, #0]
 8006e46:	4293      	cmp	r3, r2
 8006e48:	da00      	bge.n	8006e4c <_printf_common+0x14>
 8006e4a:	0013      	movs	r3, r2
 8006e4c:	0022      	movs	r2, r4
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	3243      	adds	r2, #67	@ 0x43
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	d001      	beq.n	8006e5c <_printf_common+0x24>
 8006e58:	3301      	adds	r3, #1
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	069b      	lsls	r3, r3, #26
 8006e60:	d502      	bpl.n	8006e68 <_printf_common+0x30>
 8006e62:	6833      	ldr	r3, [r6, #0]
 8006e64:	3302      	adds	r3, #2
 8006e66:	6033      	str	r3, [r6, #0]
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	2306      	movs	r3, #6
 8006e6c:	0015      	movs	r5, r2
 8006e6e:	401d      	ands	r5, r3
 8006e70:	421a      	tst	r2, r3
 8006e72:	d027      	beq.n	8006ec4 <_printf_common+0x8c>
 8006e74:	0023      	movs	r3, r4
 8006e76:	3343      	adds	r3, #67	@ 0x43
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	1e5a      	subs	r2, r3, #1
 8006e7c:	4193      	sbcs	r3, r2
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	0692      	lsls	r2, r2, #26
 8006e82:	d430      	bmi.n	8006ee6 <_printf_common+0xae>
 8006e84:	0022      	movs	r2, r4
 8006e86:	9901      	ldr	r1, [sp, #4]
 8006e88:	9800      	ldr	r0, [sp, #0]
 8006e8a:	9d08      	ldr	r5, [sp, #32]
 8006e8c:	3243      	adds	r2, #67	@ 0x43
 8006e8e:	47a8      	blx	r5
 8006e90:	3001      	adds	r0, #1
 8006e92:	d025      	beq.n	8006ee0 <_printf_common+0xa8>
 8006e94:	2206      	movs	r2, #6
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	2500      	movs	r5, #0
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d105      	bne.n	8006eac <_printf_common+0x74>
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	68e5      	ldr	r5, [r4, #12]
 8006ea4:	1aed      	subs	r5, r5, r3
 8006ea6:	43eb      	mvns	r3, r5
 8006ea8:	17db      	asrs	r3, r3, #31
 8006eaa:	401d      	ands	r5, r3
 8006eac:	68a3      	ldr	r3, [r4, #8]
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	dd01      	ble.n	8006eb8 <_printf_common+0x80>
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	18ed      	adds	r5, r5, r3
 8006eb8:	2600      	movs	r6, #0
 8006eba:	42b5      	cmp	r5, r6
 8006ebc:	d120      	bne.n	8006f00 <_printf_common+0xc8>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	e010      	b.n	8006ee4 <_printf_common+0xac>
 8006ec2:	3501      	adds	r5, #1
 8006ec4:	68e3      	ldr	r3, [r4, #12]
 8006ec6:	6832      	ldr	r2, [r6, #0]
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	42ab      	cmp	r3, r5
 8006ecc:	ddd2      	ble.n	8006e74 <_printf_common+0x3c>
 8006ece:	0022      	movs	r2, r4
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	9901      	ldr	r1, [sp, #4]
 8006ed4:	9800      	ldr	r0, [sp, #0]
 8006ed6:	9f08      	ldr	r7, [sp, #32]
 8006ed8:	3219      	adds	r2, #25
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1f0      	bne.n	8006ec2 <_printf_common+0x8a>
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	4240      	negs	r0, r0
 8006ee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ee6:	2030      	movs	r0, #48	@ 0x30
 8006ee8:	18e1      	adds	r1, r4, r3
 8006eea:	3143      	adds	r1, #67	@ 0x43
 8006eec:	7008      	strb	r0, [r1, #0]
 8006eee:	0021      	movs	r1, r4
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	3145      	adds	r1, #69	@ 0x45
 8006ef4:	7809      	ldrb	r1, [r1, #0]
 8006ef6:	18a2      	adds	r2, r4, r2
 8006ef8:	3243      	adds	r2, #67	@ 0x43
 8006efa:	3302      	adds	r3, #2
 8006efc:	7011      	strb	r1, [r2, #0]
 8006efe:	e7c1      	b.n	8006e84 <_printf_common+0x4c>
 8006f00:	0022      	movs	r2, r4
 8006f02:	2301      	movs	r3, #1
 8006f04:	9901      	ldr	r1, [sp, #4]
 8006f06:	9800      	ldr	r0, [sp, #0]
 8006f08:	9f08      	ldr	r7, [sp, #32]
 8006f0a:	321a      	adds	r2, #26
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d0e6      	beq.n	8006ee0 <_printf_common+0xa8>
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7d1      	b.n	8006eba <_printf_common+0x82>
	...

08006f18 <_printf_i>:
 8006f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1a:	b08b      	sub	sp, #44	@ 0x2c
 8006f1c:	9206      	str	r2, [sp, #24]
 8006f1e:	000a      	movs	r2, r1
 8006f20:	3243      	adds	r2, #67	@ 0x43
 8006f22:	9307      	str	r3, [sp, #28]
 8006f24:	9005      	str	r0, [sp, #20]
 8006f26:	9203      	str	r2, [sp, #12]
 8006f28:	7e0a      	ldrb	r2, [r1, #24]
 8006f2a:	000c      	movs	r4, r1
 8006f2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f2e:	2a78      	cmp	r2, #120	@ 0x78
 8006f30:	d809      	bhi.n	8006f46 <_printf_i+0x2e>
 8006f32:	2a62      	cmp	r2, #98	@ 0x62
 8006f34:	d80b      	bhi.n	8006f4e <_printf_i+0x36>
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	d100      	bne.n	8006f3c <_printf_i+0x24>
 8006f3a:	e0ba      	b.n	80070b2 <_printf_i+0x19a>
 8006f3c:	497a      	ldr	r1, [pc, #488]	@ (8007128 <_printf_i+0x210>)
 8006f3e:	9104      	str	r1, [sp, #16]
 8006f40:	2a58      	cmp	r2, #88	@ 0x58
 8006f42:	d100      	bne.n	8006f46 <_printf_i+0x2e>
 8006f44:	e08e      	b.n	8007064 <_printf_i+0x14c>
 8006f46:	0025      	movs	r5, r4
 8006f48:	3542      	adds	r5, #66	@ 0x42
 8006f4a:	702a      	strb	r2, [r5, #0]
 8006f4c:	e022      	b.n	8006f94 <_printf_i+0x7c>
 8006f4e:	0010      	movs	r0, r2
 8006f50:	3863      	subs	r0, #99	@ 0x63
 8006f52:	2815      	cmp	r0, #21
 8006f54:	d8f7      	bhi.n	8006f46 <_printf_i+0x2e>
 8006f56:	f7f9 f8d7 	bl	8000108 <__gnu_thumb1_case_shi>
 8006f5a:	0016      	.short	0x0016
 8006f5c:	fff6001f 	.word	0xfff6001f
 8006f60:	fff6fff6 	.word	0xfff6fff6
 8006f64:	001ffff6 	.word	0x001ffff6
 8006f68:	fff6fff6 	.word	0xfff6fff6
 8006f6c:	fff6fff6 	.word	0xfff6fff6
 8006f70:	0036009f 	.word	0x0036009f
 8006f74:	fff6007e 	.word	0xfff6007e
 8006f78:	00b0fff6 	.word	0x00b0fff6
 8006f7c:	0036fff6 	.word	0x0036fff6
 8006f80:	fff6fff6 	.word	0xfff6fff6
 8006f84:	0082      	.short	0x0082
 8006f86:	0025      	movs	r5, r4
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	3542      	adds	r5, #66	@ 0x42
 8006f8c:	1d11      	adds	r1, r2, #4
 8006f8e:	6019      	str	r1, [r3, #0]
 8006f90:	6813      	ldr	r3, [r2, #0]
 8006f92:	702b      	strb	r3, [r5, #0]
 8006f94:	2301      	movs	r3, #1
 8006f96:	e09e      	b.n	80070d6 <_printf_i+0x1be>
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	6809      	ldr	r1, [r1, #0]
 8006f9c:	1d02      	adds	r2, r0, #4
 8006f9e:	060d      	lsls	r5, r1, #24
 8006fa0:	d50b      	bpl.n	8006fba <_printf_i+0xa2>
 8006fa2:	6806      	ldr	r6, [r0, #0]
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	2e00      	cmp	r6, #0
 8006fa8:	da03      	bge.n	8006fb2 <_printf_i+0x9a>
 8006faa:	232d      	movs	r3, #45	@ 0x2d
 8006fac:	9a03      	ldr	r2, [sp, #12]
 8006fae:	4276      	negs	r6, r6
 8006fb0:	7013      	strb	r3, [r2, #0]
 8006fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8007128 <_printf_i+0x210>)
 8006fb4:	270a      	movs	r7, #10
 8006fb6:	9304      	str	r3, [sp, #16]
 8006fb8:	e018      	b.n	8006fec <_printf_i+0xd4>
 8006fba:	6806      	ldr	r6, [r0, #0]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	0649      	lsls	r1, r1, #25
 8006fc0:	d5f1      	bpl.n	8006fa6 <_printf_i+0x8e>
 8006fc2:	b236      	sxth	r6, r6
 8006fc4:	e7ef      	b.n	8006fa6 <_printf_i+0x8e>
 8006fc6:	6808      	ldr	r0, [r1, #0]
 8006fc8:	6819      	ldr	r1, [r3, #0]
 8006fca:	c940      	ldmia	r1!, {r6}
 8006fcc:	0605      	lsls	r5, r0, #24
 8006fce:	d402      	bmi.n	8006fd6 <_printf_i+0xbe>
 8006fd0:	0640      	lsls	r0, r0, #25
 8006fd2:	d500      	bpl.n	8006fd6 <_printf_i+0xbe>
 8006fd4:	b2b6      	uxth	r6, r6
 8006fd6:	6019      	str	r1, [r3, #0]
 8006fd8:	4b53      	ldr	r3, [pc, #332]	@ (8007128 <_printf_i+0x210>)
 8006fda:	270a      	movs	r7, #10
 8006fdc:	9304      	str	r3, [sp, #16]
 8006fde:	2a6f      	cmp	r2, #111	@ 0x6f
 8006fe0:	d100      	bne.n	8006fe4 <_printf_i+0xcc>
 8006fe2:	3f02      	subs	r7, #2
 8006fe4:	0023      	movs	r3, r4
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	3343      	adds	r3, #67	@ 0x43
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	60a3      	str	r3, [r4, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	db06      	blt.n	8007002 <_printf_i+0xea>
 8006ff4:	2104      	movs	r1, #4
 8006ff6:	6822      	ldr	r2, [r4, #0]
 8006ff8:	9d03      	ldr	r5, [sp, #12]
 8006ffa:	438a      	bics	r2, r1
 8006ffc:	6022      	str	r2, [r4, #0]
 8006ffe:	4333      	orrs	r3, r6
 8007000:	d00c      	beq.n	800701c <_printf_i+0x104>
 8007002:	9d03      	ldr	r5, [sp, #12]
 8007004:	0030      	movs	r0, r6
 8007006:	0039      	movs	r1, r7
 8007008:	f7f9 f90e 	bl	8000228 <__aeabi_uidivmod>
 800700c:	9b04      	ldr	r3, [sp, #16]
 800700e:	3d01      	subs	r5, #1
 8007010:	5c5b      	ldrb	r3, [r3, r1]
 8007012:	702b      	strb	r3, [r5, #0]
 8007014:	0033      	movs	r3, r6
 8007016:	0006      	movs	r6, r0
 8007018:	429f      	cmp	r7, r3
 800701a:	d9f3      	bls.n	8007004 <_printf_i+0xec>
 800701c:	2f08      	cmp	r7, #8
 800701e:	d109      	bne.n	8007034 <_printf_i+0x11c>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	07db      	lsls	r3, r3, #31
 8007024:	d506      	bpl.n	8007034 <_printf_i+0x11c>
 8007026:	6862      	ldr	r2, [r4, #4]
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	429a      	cmp	r2, r3
 800702c:	dc02      	bgt.n	8007034 <_printf_i+0x11c>
 800702e:	2330      	movs	r3, #48	@ 0x30
 8007030:	3d01      	subs	r5, #1
 8007032:	702b      	strb	r3, [r5, #0]
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	1b5b      	subs	r3, r3, r5
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	9b07      	ldr	r3, [sp, #28]
 800703c:	0021      	movs	r1, r4
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	9805      	ldr	r0, [sp, #20]
 8007042:	9b06      	ldr	r3, [sp, #24]
 8007044:	aa09      	add	r2, sp, #36	@ 0x24
 8007046:	f7ff fef7 	bl	8006e38 <_printf_common>
 800704a:	3001      	adds	r0, #1
 800704c:	d148      	bne.n	80070e0 <_printf_i+0x1c8>
 800704e:	2001      	movs	r0, #1
 8007050:	4240      	negs	r0, r0
 8007052:	b00b      	add	sp, #44	@ 0x2c
 8007054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007056:	2220      	movs	r2, #32
 8007058:	6809      	ldr	r1, [r1, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	2278      	movs	r2, #120	@ 0x78
 8007060:	4932      	ldr	r1, [pc, #200]	@ (800712c <_printf_i+0x214>)
 8007062:	9104      	str	r1, [sp, #16]
 8007064:	0021      	movs	r1, r4
 8007066:	3145      	adds	r1, #69	@ 0x45
 8007068:	700a      	strb	r2, [r1, #0]
 800706a:	6819      	ldr	r1, [r3, #0]
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	c940      	ldmia	r1!, {r6}
 8007070:	0610      	lsls	r0, r2, #24
 8007072:	d402      	bmi.n	800707a <_printf_i+0x162>
 8007074:	0650      	lsls	r0, r2, #25
 8007076:	d500      	bpl.n	800707a <_printf_i+0x162>
 8007078:	b2b6      	uxth	r6, r6
 800707a:	6019      	str	r1, [r3, #0]
 800707c:	07d3      	lsls	r3, r2, #31
 800707e:	d502      	bpl.n	8007086 <_printf_i+0x16e>
 8007080:	2320      	movs	r3, #32
 8007082:	4313      	orrs	r3, r2
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	2e00      	cmp	r6, #0
 8007088:	d001      	beq.n	800708e <_printf_i+0x176>
 800708a:	2710      	movs	r7, #16
 800708c:	e7aa      	b.n	8006fe4 <_printf_i+0xcc>
 800708e:	2220      	movs	r2, #32
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	4393      	bics	r3, r2
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	e7f8      	b.n	800708a <_printf_i+0x172>
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	680d      	ldr	r5, [r1, #0]
 800709c:	1d10      	adds	r0, r2, #4
 800709e:	6949      	ldr	r1, [r1, #20]
 80070a0:	6018      	str	r0, [r3, #0]
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	062e      	lsls	r6, r5, #24
 80070a6:	d501      	bpl.n	80070ac <_printf_i+0x194>
 80070a8:	6019      	str	r1, [r3, #0]
 80070aa:	e002      	b.n	80070b2 <_printf_i+0x19a>
 80070ac:	066d      	lsls	r5, r5, #25
 80070ae:	d5fb      	bpl.n	80070a8 <_printf_i+0x190>
 80070b0:	8019      	strh	r1, [r3, #0]
 80070b2:	2300      	movs	r3, #0
 80070b4:	9d03      	ldr	r5, [sp, #12]
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	e7bf      	b.n	800703a <_printf_i+0x122>
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	1d11      	adds	r1, r2, #4
 80070be:	6019      	str	r1, [r3, #0]
 80070c0:	6815      	ldr	r5, [r2, #0]
 80070c2:	2100      	movs	r1, #0
 80070c4:	0028      	movs	r0, r5
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	f000 f986 	bl	80073d8 <memchr>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d001      	beq.n	80070d4 <_printf_i+0x1bc>
 80070d0:	1b40      	subs	r0, r0, r5
 80070d2:	6060      	str	r0, [r4, #4]
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	6123      	str	r3, [r4, #16]
 80070d8:	2300      	movs	r3, #0
 80070da:	9a03      	ldr	r2, [sp, #12]
 80070dc:	7013      	strb	r3, [r2, #0]
 80070de:	e7ac      	b.n	800703a <_printf_i+0x122>
 80070e0:	002a      	movs	r2, r5
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	9906      	ldr	r1, [sp, #24]
 80070e6:	9805      	ldr	r0, [sp, #20]
 80070e8:	9d07      	ldr	r5, [sp, #28]
 80070ea:	47a8      	blx	r5
 80070ec:	3001      	adds	r0, #1
 80070ee:	d0ae      	beq.n	800704e <_printf_i+0x136>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	079b      	lsls	r3, r3, #30
 80070f4:	d415      	bmi.n	8007122 <_printf_i+0x20a>
 80070f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f8:	68e0      	ldr	r0, [r4, #12]
 80070fa:	4298      	cmp	r0, r3
 80070fc:	daa9      	bge.n	8007052 <_printf_i+0x13a>
 80070fe:	0018      	movs	r0, r3
 8007100:	e7a7      	b.n	8007052 <_printf_i+0x13a>
 8007102:	0022      	movs	r2, r4
 8007104:	2301      	movs	r3, #1
 8007106:	9906      	ldr	r1, [sp, #24]
 8007108:	9805      	ldr	r0, [sp, #20]
 800710a:	9e07      	ldr	r6, [sp, #28]
 800710c:	3219      	adds	r2, #25
 800710e:	47b0      	blx	r6
 8007110:	3001      	adds	r0, #1
 8007112:	d09c      	beq.n	800704e <_printf_i+0x136>
 8007114:	3501      	adds	r5, #1
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	42ab      	cmp	r3, r5
 800711e:	dcf0      	bgt.n	8007102 <_printf_i+0x1ea>
 8007120:	e7e9      	b.n	80070f6 <_printf_i+0x1de>
 8007122:	2500      	movs	r5, #0
 8007124:	e7f7      	b.n	8007116 <_printf_i+0x1fe>
 8007126:	46c0      	nop			@ (mov r8, r8)
 8007128:	0800769d 	.word	0x0800769d
 800712c:	080076ae 	.word	0x080076ae

08007130 <__sflush_r>:
 8007130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007132:	220c      	movs	r2, #12
 8007134:	5e8b      	ldrsh	r3, [r1, r2]
 8007136:	0005      	movs	r5, r0
 8007138:	000c      	movs	r4, r1
 800713a:	071a      	lsls	r2, r3, #28
 800713c:	d456      	bmi.n	80071ec <__sflush_r+0xbc>
 800713e:	684a      	ldr	r2, [r1, #4]
 8007140:	2a00      	cmp	r2, #0
 8007142:	dc02      	bgt.n	800714a <__sflush_r+0x1a>
 8007144:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007146:	2a00      	cmp	r2, #0
 8007148:	dd4e      	ble.n	80071e8 <__sflush_r+0xb8>
 800714a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800714c:	2f00      	cmp	r7, #0
 800714e:	d04b      	beq.n	80071e8 <__sflush_r+0xb8>
 8007150:	2200      	movs	r2, #0
 8007152:	2080      	movs	r0, #128	@ 0x80
 8007154:	682e      	ldr	r6, [r5, #0]
 8007156:	602a      	str	r2, [r5, #0]
 8007158:	001a      	movs	r2, r3
 800715a:	0140      	lsls	r0, r0, #5
 800715c:	6a21      	ldr	r1, [r4, #32]
 800715e:	4002      	ands	r2, r0
 8007160:	4203      	tst	r3, r0
 8007162:	d033      	beq.n	80071cc <__sflush_r+0x9c>
 8007164:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	075b      	lsls	r3, r3, #29
 800716a:	d506      	bpl.n	800717a <__sflush_r+0x4a>
 800716c:	6863      	ldr	r3, [r4, #4]
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <__sflush_r+0x4a>
 8007176:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007178:	1ad2      	subs	r2, r2, r3
 800717a:	2300      	movs	r3, #0
 800717c:	0028      	movs	r0, r5
 800717e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007180:	6a21      	ldr	r1, [r4, #32]
 8007182:	47b8      	blx	r7
 8007184:	89a2      	ldrh	r2, [r4, #12]
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d106      	bne.n	8007198 <__sflush_r+0x68>
 800718a:	6829      	ldr	r1, [r5, #0]
 800718c:	291d      	cmp	r1, #29
 800718e:	d846      	bhi.n	800721e <__sflush_r+0xee>
 8007190:	4b29      	ldr	r3, [pc, #164]	@ (8007238 <__sflush_r+0x108>)
 8007192:	40cb      	lsrs	r3, r1
 8007194:	07db      	lsls	r3, r3, #31
 8007196:	d542      	bpl.n	800721e <__sflush_r+0xee>
 8007198:	2300      	movs	r3, #0
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	04d2      	lsls	r2, r2, #19
 80071a2:	d505      	bpl.n	80071b0 <__sflush_r+0x80>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <__sflush_r+0x7e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d100      	bne.n	80071b0 <__sflush_r+0x80>
 80071ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80071b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071b2:	602e      	str	r6, [r5, #0]
 80071b4:	2900      	cmp	r1, #0
 80071b6:	d017      	beq.n	80071e8 <__sflush_r+0xb8>
 80071b8:	0023      	movs	r3, r4
 80071ba:	3344      	adds	r3, #68	@ 0x44
 80071bc:	4299      	cmp	r1, r3
 80071be:	d002      	beq.n	80071c6 <__sflush_r+0x96>
 80071c0:	0028      	movs	r0, r5
 80071c2:	f7ff fbf9 	bl	80069b8 <_free_r>
 80071c6:	2300      	movs	r3, #0
 80071c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80071ca:	e00d      	b.n	80071e8 <__sflush_r+0xb8>
 80071cc:	2301      	movs	r3, #1
 80071ce:	0028      	movs	r0, r5
 80071d0:	47b8      	blx	r7
 80071d2:	0002      	movs	r2, r0
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d1c6      	bne.n	8007166 <__sflush_r+0x36>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0c3      	beq.n	8007166 <__sflush_r+0x36>
 80071de:	2b1d      	cmp	r3, #29
 80071e0:	d001      	beq.n	80071e6 <__sflush_r+0xb6>
 80071e2:	2b16      	cmp	r3, #22
 80071e4:	d11a      	bne.n	800721c <__sflush_r+0xec>
 80071e6:	602e      	str	r6, [r5, #0]
 80071e8:	2000      	movs	r0, #0
 80071ea:	e01e      	b.n	800722a <__sflush_r+0xfa>
 80071ec:	690e      	ldr	r6, [r1, #16]
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d0fa      	beq.n	80071e8 <__sflush_r+0xb8>
 80071f2:	680f      	ldr	r7, [r1, #0]
 80071f4:	600e      	str	r6, [r1, #0]
 80071f6:	1bba      	subs	r2, r7, r6
 80071f8:	9201      	str	r2, [sp, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	079b      	lsls	r3, r3, #30
 80071fe:	d100      	bne.n	8007202 <__sflush_r+0xd2>
 8007200:	694a      	ldr	r2, [r1, #20]
 8007202:	60a2      	str	r2, [r4, #8]
 8007204:	9b01      	ldr	r3, [sp, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	ddee      	ble.n	80071e8 <__sflush_r+0xb8>
 800720a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800720c:	0032      	movs	r2, r6
 800720e:	001f      	movs	r7, r3
 8007210:	0028      	movs	r0, r5
 8007212:	9b01      	ldr	r3, [sp, #4]
 8007214:	6a21      	ldr	r1, [r4, #32]
 8007216:	47b8      	blx	r7
 8007218:	2800      	cmp	r0, #0
 800721a:	dc07      	bgt.n	800722c <__sflush_r+0xfc>
 800721c:	89a2      	ldrh	r2, [r4, #12]
 800721e:	2340      	movs	r3, #64	@ 0x40
 8007220:	2001      	movs	r0, #1
 8007222:	4313      	orrs	r3, r2
 8007224:	b21b      	sxth	r3, r3
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	4240      	negs	r0, r0
 800722a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800722c:	9b01      	ldr	r3, [sp, #4]
 800722e:	1836      	adds	r6, r6, r0
 8007230:	1a1b      	subs	r3, r3, r0
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	e7e6      	b.n	8007204 <__sflush_r+0xd4>
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	20400001 	.word	0x20400001

0800723c <_fflush_r>:
 800723c:	690b      	ldr	r3, [r1, #16]
 800723e:	b570      	push	{r4, r5, r6, lr}
 8007240:	0005      	movs	r5, r0
 8007242:	000c      	movs	r4, r1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <_fflush_r+0x12>
 8007248:	2500      	movs	r5, #0
 800724a:	0028      	movs	r0, r5
 800724c:	bd70      	pop	{r4, r5, r6, pc}
 800724e:	2800      	cmp	r0, #0
 8007250:	d004      	beq.n	800725c <_fflush_r+0x20>
 8007252:	6a03      	ldr	r3, [r0, #32]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <_fflush_r+0x20>
 8007258:	f7ff f992 	bl	8006580 <__sinit>
 800725c:	220c      	movs	r2, #12
 800725e:	5ea3      	ldrsh	r3, [r4, r2]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0f1      	beq.n	8007248 <_fflush_r+0xc>
 8007264:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007266:	07d2      	lsls	r2, r2, #31
 8007268:	d404      	bmi.n	8007274 <_fflush_r+0x38>
 800726a:	059b      	lsls	r3, r3, #22
 800726c:	d402      	bmi.n	8007274 <_fflush_r+0x38>
 800726e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007270:	f7ff fb97 	bl	80069a2 <__retarget_lock_acquire_recursive>
 8007274:	0028      	movs	r0, r5
 8007276:	0021      	movs	r1, r4
 8007278:	f7ff ff5a 	bl	8007130 <__sflush_r>
 800727c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800727e:	0005      	movs	r5, r0
 8007280:	07db      	lsls	r3, r3, #31
 8007282:	d4e2      	bmi.n	800724a <_fflush_r+0xe>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	059b      	lsls	r3, r3, #22
 8007288:	d4df      	bmi.n	800724a <_fflush_r+0xe>
 800728a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728c:	f7ff fb8a 	bl	80069a4 <__retarget_lock_release_recursive>
 8007290:	e7db      	b.n	800724a <_fflush_r+0xe>
	...

08007294 <__swhatbuf_r>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	000e      	movs	r6, r1
 8007298:	001d      	movs	r5, r3
 800729a:	230e      	movs	r3, #14
 800729c:	5ec9      	ldrsh	r1, [r1, r3]
 800729e:	0014      	movs	r4, r2
 80072a0:	b096      	sub	sp, #88	@ 0x58
 80072a2:	2900      	cmp	r1, #0
 80072a4:	da0c      	bge.n	80072c0 <__swhatbuf_r+0x2c>
 80072a6:	89b2      	ldrh	r2, [r6, #12]
 80072a8:	2380      	movs	r3, #128	@ 0x80
 80072aa:	0011      	movs	r1, r2
 80072ac:	4019      	ands	r1, r3
 80072ae:	421a      	tst	r2, r3
 80072b0:	d114      	bne.n	80072dc <__swhatbuf_r+0x48>
 80072b2:	2380      	movs	r3, #128	@ 0x80
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	2000      	movs	r0, #0
 80072b8:	6029      	str	r1, [r5, #0]
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	b016      	add	sp, #88	@ 0x58
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	466a      	mov	r2, sp
 80072c2:	f000 f853 	bl	800736c <_fstat_r>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	dbed      	blt.n	80072a6 <__swhatbuf_r+0x12>
 80072ca:	23f0      	movs	r3, #240	@ 0xf0
 80072cc:	9901      	ldr	r1, [sp, #4]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	4019      	ands	r1, r3
 80072d2:	4b04      	ldr	r3, [pc, #16]	@ (80072e4 <__swhatbuf_r+0x50>)
 80072d4:	18c9      	adds	r1, r1, r3
 80072d6:	424b      	negs	r3, r1
 80072d8:	4159      	adcs	r1, r3
 80072da:	e7ea      	b.n	80072b2 <__swhatbuf_r+0x1e>
 80072dc:	2100      	movs	r1, #0
 80072de:	2340      	movs	r3, #64	@ 0x40
 80072e0:	e7e9      	b.n	80072b6 <__swhatbuf_r+0x22>
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	ffffe000 	.word	0xffffe000

080072e8 <__smakebuf_r>:
 80072e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ea:	2602      	movs	r6, #2
 80072ec:	898b      	ldrh	r3, [r1, #12]
 80072ee:	0005      	movs	r5, r0
 80072f0:	000c      	movs	r4, r1
 80072f2:	b085      	sub	sp, #20
 80072f4:	4233      	tst	r3, r6
 80072f6:	d007      	beq.n	8007308 <__smakebuf_r+0x20>
 80072f8:	0023      	movs	r3, r4
 80072fa:	3347      	adds	r3, #71	@ 0x47
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	2301      	movs	r3, #1
 8007302:	6163      	str	r3, [r4, #20]
 8007304:	b005      	add	sp, #20
 8007306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007308:	ab03      	add	r3, sp, #12
 800730a:	aa02      	add	r2, sp, #8
 800730c:	f7ff ffc2 	bl	8007294 <__swhatbuf_r>
 8007310:	9f02      	ldr	r7, [sp, #8]
 8007312:	9001      	str	r0, [sp, #4]
 8007314:	0039      	movs	r1, r7
 8007316:	0028      	movs	r0, r5
 8007318:	f7ff fbba 	bl	8006a90 <_malloc_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	d108      	bne.n	8007332 <__smakebuf_r+0x4a>
 8007320:	220c      	movs	r2, #12
 8007322:	5ea3      	ldrsh	r3, [r4, r2]
 8007324:	059a      	lsls	r2, r3, #22
 8007326:	d4ed      	bmi.n	8007304 <__smakebuf_r+0x1c>
 8007328:	2203      	movs	r2, #3
 800732a:	4393      	bics	r3, r2
 800732c:	431e      	orrs	r6, r3
 800732e:	81a6      	strh	r6, [r4, #12]
 8007330:	e7e2      	b.n	80072f8 <__smakebuf_r+0x10>
 8007332:	2380      	movs	r3, #128	@ 0x80
 8007334:	89a2      	ldrh	r2, [r4, #12]
 8007336:	6020      	str	r0, [r4, #0]
 8007338:	4313      	orrs	r3, r2
 800733a:	81a3      	strh	r3, [r4, #12]
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	6120      	str	r0, [r4, #16]
 8007340:	6167      	str	r7, [r4, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00c      	beq.n	8007360 <__smakebuf_r+0x78>
 8007346:	0028      	movs	r0, r5
 8007348:	230e      	movs	r3, #14
 800734a:	5ee1      	ldrsh	r1, [r4, r3]
 800734c:	f000 f820 	bl	8007390 <_isatty_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	d005      	beq.n	8007360 <__smakebuf_r+0x78>
 8007354:	2303      	movs	r3, #3
 8007356:	89a2      	ldrh	r2, [r4, #12]
 8007358:	439a      	bics	r2, r3
 800735a:	3b02      	subs	r3, #2
 800735c:	4313      	orrs	r3, r2
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	9a01      	ldr	r2, [sp, #4]
 8007364:	4313      	orrs	r3, r2
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	e7cc      	b.n	8007304 <__smakebuf_r+0x1c>
	...

0800736c <_fstat_r>:
 800736c:	2300      	movs	r3, #0
 800736e:	b570      	push	{r4, r5, r6, lr}
 8007370:	4d06      	ldr	r5, [pc, #24]	@ (800738c <_fstat_r+0x20>)
 8007372:	0004      	movs	r4, r0
 8007374:	0008      	movs	r0, r1
 8007376:	0011      	movs	r1, r2
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	f7fa fd4e 	bl	8001e1a <_fstat>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d103      	bne.n	800738a <_fstat_r+0x1e>
 8007382:	682b      	ldr	r3, [r5, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d000      	beq.n	800738a <_fstat_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	20000740 	.word	0x20000740

08007390 <_isatty_r>:
 8007390:	2300      	movs	r3, #0
 8007392:	b570      	push	{r4, r5, r6, lr}
 8007394:	4d06      	ldr	r5, [pc, #24]	@ (80073b0 <_isatty_r+0x20>)
 8007396:	0004      	movs	r4, r0
 8007398:	0008      	movs	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fa fd4b 	bl	8001e36 <_isatty>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d103      	bne.n	80073ac <_isatty_r+0x1c>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d000      	beq.n	80073ac <_isatty_r+0x1c>
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
 80073ae:	46c0      	nop			@ (mov r8, r8)
 80073b0:	20000740 	.word	0x20000740

080073b4 <_sbrk_r>:
 80073b4:	2300      	movs	r3, #0
 80073b6:	b570      	push	{r4, r5, r6, lr}
 80073b8:	4d06      	ldr	r5, [pc, #24]	@ (80073d4 <_sbrk_r+0x20>)
 80073ba:	0004      	movs	r4, r0
 80073bc:	0008      	movs	r0, r1
 80073be:	602b      	str	r3, [r5, #0]
 80073c0:	f7fa fd4e 	bl	8001e60 <_sbrk>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d103      	bne.n	80073d0 <_sbrk_r+0x1c>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d000      	beq.n	80073d0 <_sbrk_r+0x1c>
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	20000740 	.word	0x20000740

080073d8 <memchr>:
 80073d8:	b2c9      	uxtb	r1, r1
 80073da:	1882      	adds	r2, r0, r2
 80073dc:	4290      	cmp	r0, r2
 80073de:	d101      	bne.n	80073e4 <memchr+0xc>
 80073e0:	2000      	movs	r0, #0
 80073e2:	4770      	bx	lr
 80073e4:	7803      	ldrb	r3, [r0, #0]
 80073e6:	428b      	cmp	r3, r1
 80073e8:	d0fb      	beq.n	80073e2 <memchr+0xa>
 80073ea:	3001      	adds	r0, #1
 80073ec:	e7f6      	b.n	80073dc <memchr+0x4>
	...

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	46c0      	nop			@ (mov r8, r8)
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	46c0      	nop			@ (mov r8, r8)
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr
