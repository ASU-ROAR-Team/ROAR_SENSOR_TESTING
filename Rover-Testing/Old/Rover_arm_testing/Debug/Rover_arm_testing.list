
Rover_arm_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004234  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004340  08004340  00005340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800436c  0800436c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800436c  0800436c  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800436c  0800436c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004370  08004370  00005370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004374  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb0  20000068  080043dc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001018  080043dc  00007018  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc54  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ea  00000000  00000000  00012ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00014ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b8  00000000  00000000  00015a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e20  00000000  00000000  00016300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c88e  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c32  00000000  00000000  0003a9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c15e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f00  00000000  00000000  000c1624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c4524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004328 	.word	0x08004328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004328 	.word	0x08004328

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_FilterTypeDef sFilterConfig;
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8] = {64, 64, 64, 64, 64, 64, 0, 0};
uint8_t delayLED;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000154:	4b04      	ldr	r3, [pc, #16]	@ (8000168 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 8000156:	4a05      	ldr	r2, [pc, #20]	@ (800016c <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8000158:	2101      	movs	r1, #1
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 ffe0 	bl	8001120 <HAL_CAN_GetRxMessage>
}
 8000160:	bf00      	nop
 8000162:	3708      	adds	r7, #8
 8000164:	46bd      	mov	sp, r7
 8000166:	bd80      	pop	{r7, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	20000380 	.word	0x20000380

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000176:	f000 fd45 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f8b3 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f9f1 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 8000182:	f000 f9a9 	bl	80004d8 <MX_DMA_Init>
  MX_CAN_Init();
 8000186:	f000 f8f3 	bl	8000370 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800018a:	f000 f927 	bl	80003dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800018e:	f000 f94f 	bl	8000430 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000192:	f000 f977 	bl	8000484 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

 /* Initialize RoboClaws */
	hserial_uart1 = serial_init(&huart1);
 8000196:	4847      	ldr	r0, [pc, #284]	@ (80002b4 <main+0x144>)
 8000198:	f003 fe72 	bl	8003e80 <serial_init>
 800019c:	4603      	mov	r3, r0
 800019e:	4a46      	ldr	r2, [pc, #280]	@ (80002b8 <main+0x148>)
 80001a0:	6013      	str	r3, [r2, #0]
	hroboclaw_mc1.hserial = hserial_uart1;
 80001a2:	4b45      	ldr	r3, [pc, #276]	@ (80002b8 <main+0x148>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a45      	ldr	r2, [pc, #276]	@ (80002bc <main+0x14c>)
 80001a8:	6093      	str	r3, [r2, #8]
	hroboclaw_mc1.packetserial_address = 0x80;
 80001aa:	4b44      	ldr	r3, [pc, #272]	@ (80002bc <main+0x14c>)
 80001ac:	2280      	movs	r2, #128	@ 0x80
 80001ae:	731a      	strb	r2, [r3, #12]

	hserial_uart2 = serial_init(&huart2);
 80001b0:	4843      	ldr	r0, [pc, #268]	@ (80002c0 <main+0x150>)
 80001b2:	f003 fe65 	bl	8003e80 <serial_init>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a42      	ldr	r2, [pc, #264]	@ (80002c4 <main+0x154>)
 80001ba:	6013      	str	r3, [r2, #0]
	hroboclaw_mc2.hserial = hserial_uart2;
 80001bc:	4b41      	ldr	r3, [pc, #260]	@ (80002c4 <main+0x154>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a41      	ldr	r2, [pc, #260]	@ (80002c8 <main+0x158>)
 80001c2:	6093      	str	r3, [r2, #8]
	hroboclaw_mc2.packetserial_address = 0x82;
 80001c4:	4b40      	ldr	r3, [pc, #256]	@ (80002c8 <main+0x158>)
 80001c6:	2282      	movs	r2, #130	@ 0x82
 80001c8:	731a      	strb	r2, [r3, #12]

	hserial_uart3 = serial_init(&huart3);
 80001ca:	4840      	ldr	r0, [pc, #256]	@ (80002cc <main+0x15c>)
 80001cc:	f003 fe58 	bl	8003e80 <serial_init>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a3f      	ldr	r2, [pc, #252]	@ (80002d0 <main+0x160>)
 80001d4:	6013      	str	r3, [r2, #0]
	hroboclaw_mc3.hserial = hserial_uart3;
 80001d6:	4b3e      	ldr	r3, [pc, #248]	@ (80002d0 <main+0x160>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a3e      	ldr	r2, [pc, #248]	@ (80002d4 <main+0x164>)
 80001dc:	6093      	str	r3, [r2, #8]
	hroboclaw_mc3.packetserial_address = 0x84;
 80001de:	4b3d      	ldr	r3, [pc, #244]	@ (80002d4 <main+0x164>)
 80001e0:	2284      	movs	r2, #132	@ 0x84
 80001e2:	731a      	strb	r2, [r3, #12]

/* Initialize CAN */
	HAL_CAN_Start(&hcan);
 80001e4:	483c      	ldr	r0, [pc, #240]	@ (80002d8 <main+0x168>)
 80001e6:	f000 ff57 	bl	8001098 <HAL_CAN_Start>
    TxHeader.DLC = 8;  // data length
 80001ea:	4b3c      	ldr	r3, [pc, #240]	@ (80002dc <main+0x16c>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 80001f0:	4b3a      	ldr	r3, [pc, #232]	@ (80002dc <main+0x16c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80001f6:	4b39      	ldr	r3, [pc, #228]	@ (80002dc <main+0x16c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 80001fc:	4b37      	ldr	r3, [pc, #220]	@ (80002dc <main+0x16c>)
 80001fe:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 8000202:	601a      	str	r2, [r3, #0]
	// Configure the filter
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000204:	4b36      	ldr	r3, [pc, #216]	@ (80002e0 <main+0x170>)
 8000206:	2201      	movs	r2, #1
 8000208:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800020a:	4b35      	ldr	r3, [pc, #212]	@ (80002e0 <main+0x170>)
 800020c:	2201      	movs	r2, #1
 800020e:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000210:	4b33      	ldr	r3, [pc, #204]	@ (80002e0 <main+0x170>)
 8000212:	2200      	movs	r2, #0
 8000214:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterIdHigh = 0x6A5<<5;
 8000216:	4b32      	ldr	r3, [pc, #200]	@ (80002e0 <main+0x170>)
 8000218:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 800021c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 800021e:	4b30      	ldr	r3, [pc, #192]	@ (80002e0 <main+0x170>)
 8000220:	2200      	movs	r2, #0
 8000222:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000224:	4b2e      	ldr	r3, [pc, #184]	@ (80002e0 <main+0x170>)
 8000226:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800022a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800022c:	4b2c      	ldr	r3, [pc, #176]	@ (80002e0 <main+0x170>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000232:	4b2b      	ldr	r3, [pc, #172]	@ (80002e0 <main+0x170>)
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000238:	4929      	ldr	r1, [pc, #164]	@ (80002e0 <main+0x170>)
 800023a:	4827      	ldr	r0, [pc, #156]	@ (80002d8 <main+0x168>)
 800023c:	f000 fe63 	bl	8000f06 <HAL_CAN_ConfigFilter>
	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000240:	2110      	movs	r1, #16
 8000242:	4825      	ldr	r0, [pc, #148]	@ (80002d8 <main+0x168>)
 8000244:	f001 f88d 	bl	8001362 <HAL_CAN_ActivateNotification>
	  uint32_t pos;
	  uint8_t status;
	  bool valid;

	  // Get current position
	  pos = ReadEncM1(&hroboclaw_mc3, &status, &valid);
 8000248:	1cba      	adds	r2, r7, #2
 800024a:	1cfb      	adds	r3, r7, #3
 800024c:	4619      	mov	r1, r3
 800024e:	4821      	ldr	r0, [pc, #132]	@ (80002d4 <main+0x164>)
 8000250:	f003 fe05 	bl	8003e5e <ReadEncM1>
 8000254:	6078      	str	r0, [r7, #4]

	  if (valid) {
 8000256:	78bb      	ldrb	r3, [r7, #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f5      	beq.n	8000248 <main+0xd8>
	      // Move 1000 ticks forward
	      SpeedAccelDeccelPositionM1(&hroboclaw_mc3,
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000262:	2201      	movs	r2, #1
 8000264:	9201      	str	r2, [sp, #4]
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000270:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000274:	4817      	ldr	r0, [pc, #92]	@ (80002d4 <main+0x164>)
 8000276:	f003 fd84 	bl	8003d82 <SpeedAccelDeccelPositionM1>
	                                 1000, 2000, 1000,
	                                 pos + 1000, 1);

	      HAL_Delay(2000);  // wait for move to complete
 800027a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800027e:	f000 fd23 	bl	8000cc8 <HAL_Delay>

	      // Then lock in that new position
	      pos = ReadEncM1(&hroboclaw_mc3, &status, &valid);
 8000282:	1cba      	adds	r2, r7, #2
 8000284:	1cfb      	adds	r3, r7, #3
 8000286:	4619      	mov	r1, r3
 8000288:	4812      	ldr	r0, [pc, #72]	@ (80002d4 <main+0x164>)
 800028a:	f003 fde8 	bl	8003e5e <ReadEncM1>
 800028e:	6078      	str	r0, [r7, #4]
	      if (valid) {
 8000290:	78bb      	ldrb	r3, [r7, #2]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0d8      	beq.n	8000248 <main+0xd8>
	          SpeedAccelDeccelPositionM1(&hroboclaw_mc3,
 8000296:	2301      	movs	r3, #1
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002aa:	480a      	ldr	r0, [pc, #40]	@ (80002d4 <main+0x164>)
 80002ac:	f003 fd69 	bl	8003d82 <SpeedAccelDeccelPositionM1>
  {
 80002b0:	e7ca      	b.n	8000248 <main+0xd8>
 80002b2:	bf00      	nop
 80002b4:	200000e8 	.word	0x200000e8
 80002b8:	20000084 	.word	0x20000084
 80002bc:	20000090 	.word	0x20000090
 80002c0:	20000130 	.word	0x20000130
 80002c4:	20000088 	.word	0x20000088
 80002c8:	200000a0 	.word	0x200000a0
 80002cc:	20000178 	.word	0x20000178
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	200000b0 	.word	0x200000b0
 80002d8:	200000c0 	.word	0x200000c0
 80002dc:	2000039c 	.word	0x2000039c
 80002e0:	20000358 	.word	0x20000358

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	@ 0x40
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2228      	movs	r2, #40	@ 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 ffeb 	bl	80042ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000306:	2301      	movs	r3, #1
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	2302      	movs	r3, #2
 800031a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000320:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000322:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0318 	add.w	r3, r7, #24
 800032c:	4618      	mov	r0, r3
 800032e:	f001 ff95 	bl	800225c <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000338:	f000 f942 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2302      	movs	r3, #2
 8000342:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000348:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2102      	movs	r1, #2
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fa02 	bl	8002760 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000362:	f000 f92d 	bl	80005c0 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	@ 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <MX_CAN_Init+0x64>)
 8000376:	4a18      	ldr	r2, [pc, #96]	@ (80003d8 <MX_CAN_Init+0x68>)
 8000378:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <MX_CAN_Init+0x64>)
 800037c:	2212      	movs	r2, #18
 800037e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <MX_CAN_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <MX_CAN_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <MX_CAN_Init+0x64>)
 800038e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000392:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000394:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <MX_CAN_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <MX_CAN_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_CAN_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <MX_CAN_Init+0x64>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_CAN_Init+0x64>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <MX_CAN_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <MX_CAN_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003be:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <MX_CAN_Init+0x64>)
 80003c0:	f000 fca6 	bl	8000d10 <HAL_CAN_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80003ca:	f000 f8f9 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200000c0 	.word	0x200000c0
 80003d8:	40006400 	.word	0x40006400

080003dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	@ (800042c <MX_USART1_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000414:	f002 fb32 	bl	8002a7c <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f8cf 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000e8 	.word	0x200000e8
 800042c:	40013800 	.word	0x40013800

08000430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 8000436:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <MX_USART2_UART_Init+0x50>)
 8000438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 800043c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b08      	ldr	r3, [pc, #32]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_USART2_UART_Init+0x4c>)
 8000468:	f002 fb08 	bl	8002a7c <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000472:	f000 f8a5 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000130 	.word	0x20000130
 8000480:	40004400 	.word	0x40004400

08000484 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	@ (80004d4 <MX_USART3_UART_Init+0x50>)
 800048c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800048e:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 8000490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_USART3_UART_Init+0x4c>)
 80004bc:	f002 fade 	bl	8002a7c <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004c6:	f000 f87b 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000178 	.word	0x20000178
 80004d4:	40004800 	.word	0x40004800

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <MX_DMA_Init+0x88>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000560 <MX_DMA_Init+0x88>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_DMA_Init+0x88>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200c      	movs	r0, #12
 80004fc:	f001 fa51 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000500:	200c      	movs	r0, #12
 8000502:	f001 fa6a 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	200d      	movs	r0, #13
 800050c:	f001 fa49 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000510:	200d      	movs	r0, #13
 8000512:	f001 fa62 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	200e      	movs	r0, #14
 800051c:	f001 fa41 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000520:	200e      	movs	r0, #14
 8000522:	f001 fa5a 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	200f      	movs	r0, #15
 800052c:	f001 fa39 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000530:	200f      	movs	r0, #15
 8000532:	f001 fa52 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2010      	movs	r0, #16
 800053c:	f001 fa31 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000540:	2010      	movs	r0, #16
 8000542:	f001 fa4a 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2011      	movs	r0, #17
 800054c:	f001 fa29 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000550:	2011      	movs	r0, #17
 8000552:	f001 fa42 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_GPIO_Init+0x58>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <MX_GPIO_Init+0x58>)
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_GPIO_Init+0x58>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0320 	and.w	r3, r3, #32
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_GPIO_Init+0x58>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <MX_GPIO_Init+0x58>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <MX_GPIO_Init+0x58>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <MX_GPIO_Init+0x58>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <MX_GPIO_Init+0x58>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <MX_GPIO_Init+0x58>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <Error_Handler+0x8>

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <HAL_MspInit+0x5c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a14      	ldr	r2, [pc, #80]	@ (8000628 <HAL_MspInit+0x5c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_MspInit+0x5c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_MspInit+0x5c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <HAL_MspInit+0x5c>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <HAL_MspInit+0x5c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <HAL_MspInit+0x60>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <HAL_MspInit+0x60>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000
 800062c:	40010000 	.word	0x40010000

08000630 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a20      	ldr	r2, [pc, #128]	@ (80006cc <HAL_CAN_MspInit+0x9c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d139      	bne.n	80006c4 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <HAL_CAN_MspInit+0xa0>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	4a1e      	ldr	r2, [pc, #120]	@ (80006d0 <HAL_CAN_MspInit+0xa0>)
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065a:	61d3      	str	r3, [r2, #28]
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <HAL_CAN_MspInit+0xa0>)
 800065e:	69db      	ldr	r3, [r3, #28]
 8000660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <HAL_CAN_MspInit+0xa0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a18      	ldr	r2, [pc, #96]	@ (80006d0 <HAL_CAN_MspInit+0xa0>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <HAL_CAN_MspInit+0xa0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000680:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4619      	mov	r1, r3
 8000694:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <HAL_CAN_MspInit+0xa4>)
 8000696:	f001 fc5d 	bl	8001f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <HAL_CAN_MspInit+0xa4>)
 80006b0:	f001 fc50 	bl	8001f54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2015      	movs	r0, #21
 80006ba:	f001 f972 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006be:	2015      	movs	r0, #21
 80006c0:	f001 f98b 	bl	80019da <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40006400 	.word	0x40006400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a8b      	ldr	r2, [pc, #556]	@ (8000920 <HAL_UART_MspInit+0x248>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	f040 8087 	bne.w	8000808 <HAL_UART_MspInit+0x130>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006fa:	4b8a      	ldr	r3, [pc, #552]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a89      	ldr	r2, [pc, #548]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b87      	ldr	r3, [pc, #540]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b84      	ldr	r3, [pc, #528]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a83      	ldr	r2, [pc, #524]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b81      	ldr	r3, [pc, #516]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800072a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4619      	mov	r1, r3
 800073e:	487a      	ldr	r0, [pc, #488]	@ (8000928 <HAL_UART_MspInit+0x250>)
 8000740:	f001 fc08 	bl	8001f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	4619      	mov	r1, r3
 8000758:	4873      	ldr	r0, [pc, #460]	@ (8000928 <HAL_UART_MspInit+0x250>)
 800075a:	f001 fbfb 	bl	8001f54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800075e:	4b73      	ldr	r3, [pc, #460]	@ (800092c <HAL_UART_MspInit+0x254>)
 8000760:	4a73      	ldr	r2, [pc, #460]	@ (8000930 <HAL_UART_MspInit+0x258>)
 8000762:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000764:	4b71      	ldr	r3, [pc, #452]	@ (800092c <HAL_UART_MspInit+0x254>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800076a:	4b70      	ldr	r3, [pc, #448]	@ (800092c <HAL_UART_MspInit+0x254>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000770:	4b6e      	ldr	r3, [pc, #440]	@ (800092c <HAL_UART_MspInit+0x254>)
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000776:	4b6d      	ldr	r3, [pc, #436]	@ (800092c <HAL_UART_MspInit+0x254>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800077c:	4b6b      	ldr	r3, [pc, #428]	@ (800092c <HAL_UART_MspInit+0x254>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000782:	4b6a      	ldr	r3, [pc, #424]	@ (800092c <HAL_UART_MspInit+0x254>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000788:	4b68      	ldr	r3, [pc, #416]	@ (800092c <HAL_UART_MspInit+0x254>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800078e:	4867      	ldr	r0, [pc, #412]	@ (800092c <HAL_UART_MspInit+0x254>)
 8000790:	f001 f93e 	bl	8001a10 <HAL_DMA_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800079a:	f7ff ff11 	bl	80005c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a62      	ldr	r2, [pc, #392]	@ (800092c <HAL_UART_MspInit+0x254>)
 80007a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007a4:	4a61      	ldr	r2, [pc, #388]	@ (800092c <HAL_UART_MspInit+0x254>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80007aa:	4b62      	ldr	r3, [pc, #392]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007ac:	4a62      	ldr	r2, [pc, #392]	@ (8000938 <HAL_UART_MspInit+0x260>)
 80007ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007b0:	4b60      	ldr	r3, [pc, #384]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007b2:	2210      	movs	r2, #16
 80007b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b6:	4b5f      	ldr	r3, [pc, #380]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007bc:	4b5d      	ldr	r3, [pc, #372]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007c8:	4b5a      	ldr	r3, [pc, #360]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80007ce:	4b59      	ldr	r3, [pc, #356]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007d4:	4b57      	ldr	r3, [pc, #348]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80007da:	4856      	ldr	r0, [pc, #344]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007dc:	f001 f918 	bl	8001a10 <HAL_DMA_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80007e6:	f7ff feeb 	bl	80005c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a51      	ldr	r2, [pc, #324]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80007f0:	4a50      	ldr	r2, [pc, #320]	@ (8000934 <HAL_UART_MspInit+0x25c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2025      	movs	r0, #37	@ 0x25
 80007fc:	f001 f8d1 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000800:	2025      	movs	r0, #37	@ 0x25
 8000802:	f001 f8ea 	bl	80019da <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000806:	e12f      	b.n	8000a68 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a4b      	ldr	r2, [pc, #300]	@ (800093c <HAL_UART_MspInit+0x264>)
 800080e:	4293      	cmp	r3, r2
 8000810:	f040 809e 	bne.w	8000950 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000814:	4b43      	ldr	r3, [pc, #268]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	4a42      	ldr	r2, [pc, #264]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 800081a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800081e:	61d3      	str	r3, [r2, #28]
 8000820:	4b40      	ldr	r3, [pc, #256]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b3d      	ldr	r3, [pc, #244]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a3c      	ldr	r2, [pc, #240]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b3a      	ldr	r3, [pc, #232]	@ (8000924 <HAL_UART_MspInit+0x24c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000844:	2304      	movs	r3, #4
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4619      	mov	r1, r3
 8000856:	4834      	ldr	r0, [pc, #208]	@ (8000928 <HAL_UART_MspInit+0x250>)
 8000858:	f001 fb7c 	bl	8001f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800085c:	2308      	movs	r3, #8
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4619      	mov	r1, r3
 800086e:	482e      	ldr	r0, [pc, #184]	@ (8000928 <HAL_UART_MspInit+0x250>)
 8000870:	f001 fb70 	bl	8001f54 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000874:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <HAL_UART_MspInit+0x268>)
 8000876:	4a33      	ldr	r2, [pc, #204]	@ (8000944 <HAL_UART_MspInit+0x26c>)
 8000878:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800087a:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <HAL_UART_MspInit+0x268>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000880:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <HAL_UART_MspInit+0x268>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000886:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_UART_MspInit+0x268>)
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800088c:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <HAL_UART_MspInit+0x268>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000892:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <HAL_UART_MspInit+0x268>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000898:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <HAL_UART_MspInit+0x268>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800089e:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <HAL_UART_MspInit+0x268>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008a4:	4826      	ldr	r0, [pc, #152]	@ (8000940 <HAL_UART_MspInit+0x268>)
 80008a6:	f001 f8b3 	bl	8001a10 <HAL_DMA_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80008b0:	f7ff fe86 	bl	80005c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <HAL_UART_MspInit+0x268>)
 80008b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ba:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <HAL_UART_MspInit+0x268>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008c2:	4a22      	ldr	r2, [pc, #136]	@ (800094c <HAL_UART_MspInit+0x274>)
 80008c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008c8:	2210      	movs	r2, #16
 80008ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008f0:	4815      	ldr	r0, [pc, #84]	@ (8000948 <HAL_UART_MspInit+0x270>)
 80008f2:	f001 f88d 	bl	8001a10 <HAL_DMA_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80008fc:	f7ff fe60 	bl	80005c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <HAL_UART_MspInit+0x270>)
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
 8000906:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <HAL_UART_MspInit+0x270>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2026      	movs	r0, #38	@ 0x26
 8000912:	f001 f846 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000916:	2026      	movs	r0, #38	@ 0x26
 8000918:	f001 f85f 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 800091c:	e0a4      	b.n	8000a68 <HAL_UART_MspInit+0x390>
 800091e:	bf00      	nop
 8000920:	40013800 	.word	0x40013800
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800
 800092c:	200001c0 	.word	0x200001c0
 8000930:	40020058 	.word	0x40020058
 8000934:	20000204 	.word	0x20000204
 8000938:	40020044 	.word	0x40020044
 800093c:	40004400 	.word	0x40004400
 8000940:	20000248 	.word	0x20000248
 8000944:	4002006c 	.word	0x4002006c
 8000948:	2000028c 	.word	0x2000028c
 800094c:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a46      	ldr	r2, [pc, #280]	@ (8000a70 <HAL_UART_MspInit+0x398>)
 8000956:	4293      	cmp	r3, r2
 8000958:	f040 8086 	bne.w	8000a68 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 800095c:	4b45      	ldr	r3, [pc, #276]	@ (8000a74 <HAL_UART_MspInit+0x39c>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	4a44      	ldr	r2, [pc, #272]	@ (8000a74 <HAL_UART_MspInit+0x39c>)
 8000962:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000966:	61d3      	str	r3, [r2, #28]
 8000968:	4b42      	ldr	r3, [pc, #264]	@ (8000a74 <HAL_UART_MspInit+0x39c>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b3f      	ldr	r3, [pc, #252]	@ (8000a74 <HAL_UART_MspInit+0x39c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a3e      	ldr	r2, [pc, #248]	@ (8000a74 <HAL_UART_MspInit+0x39c>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b3c      	ldr	r3, [pc, #240]	@ (8000a74 <HAL_UART_MspInit+0x39c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	4619      	mov	r1, r3
 80009a0:	4835      	ldr	r0, [pc, #212]	@ (8000a78 <HAL_UART_MspInit+0x3a0>)
 80009a2:	f001 fad7 	bl	8001f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4619      	mov	r1, r3
 80009ba:	482f      	ldr	r0, [pc, #188]	@ (8000a78 <HAL_UART_MspInit+0x3a0>)
 80009bc:	f001 faca 	bl	8001f54 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80009c0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <HAL_UART_MspInit+0x3a8>)
 80009c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d8:	4b28      	ldr	r3, [pc, #160]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009de:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80009e4:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ea:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80009f0:	4822      	ldr	r0, [pc, #136]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 80009f2:	f001 f80d 	bl	8001a10 <HAL_DMA_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_UART_MspInit+0x328>
      Error_Handler();
 80009fc:	f7ff fde0 	bl	80005c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a1e      	ldr	r2, [pc, #120]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 8000a04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a06:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <HAL_UART_MspInit+0x3a4>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a88 <HAL_UART_MspInit+0x3b0>)
 8000a10:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a14:	2210      	movs	r2, #16
 8000a16:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000a3c:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a3e:	f000 ffe7 	bl	8001a10 <HAL_DMA_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_UART_MspInit+0x374>
      Error_Handler();
 8000a48:	f7ff fdba 	bl	80005c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a50:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a52:	4a0c      	ldr	r2, [pc, #48]	@ (8000a84 <HAL_UART_MspInit+0x3ac>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2027      	movs	r0, #39	@ 0x27
 8000a5e:	f000 ffa0 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a62:	2027      	movs	r0, #39	@ 0x27
 8000a64:	f000 ffb9 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 8000a68:	bf00      	nop
 8000a6a:	3730      	adds	r7, #48	@ 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004800 	.word	0x40004800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010c00 	.word	0x40010c00
 8000a7c:	200002d0 	.word	0x200002d0
 8000a80:	40020030 	.word	0x40020030
 8000a84:	20000314 	.word	0x20000314
 8000a88:	4002001c 	.word	0x4002001c

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f8d8 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <DMA1_Channel2_IRQHandler+0x10>)
 8000aea:	f001 f8ff 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000314 	.word	0x20000314

08000af8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <DMA1_Channel3_IRQHandler+0x10>)
 8000afe:	f001 f8f5 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200002d0 	.word	0x200002d0

08000b0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <DMA1_Channel4_IRQHandler+0x10>)
 8000b12:	f001 f8eb 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000204 	.word	0x20000204

08000b20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <DMA1_Channel5_IRQHandler+0x10>)
 8000b26:	f001 f8e1 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200001c0 	.word	0x200001c0

08000b34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <DMA1_Channel6_IRQHandler+0x10>)
 8000b3a:	f001 f8d7 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000248 	.word	0x20000248

08000b48 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <DMA1_Channel7_IRQHandler+0x10>)
 8000b4e:	f001 f8cd 	bl	8001cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000028c 	.word	0x2000028c

08000b5c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <CAN1_RX1_IRQHandler+0x10>)
 8000b62:	f000 fc23 	bl	80013ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000c0 	.word	0x200000c0

08000b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <USART1_IRQHandler+0x10>)
 8000b76:	f002 f867 	bl	8002c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000e8 	.word	0x200000e8

08000b84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <USART2_IRQHandler+0x10>)
 8000b8a:	f002 f85d 	bl	8002c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000130 	.word	0x20000130

08000b98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <USART3_IRQHandler+0x10>)
 8000b9e:	f002 f853 	bl	8002c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000178 	.word	0x20000178

08000bac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb8:	f7ff fff8 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480b      	ldr	r0, [pc, #44]	@ (8000bec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bbe:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a09      	ldr	r2, [pc, #36]	@ (8000bf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bd4:	4c09      	ldr	r4, [pc, #36]	@ (8000bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f003 fb7d 	bl	80042e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fac3 	bl	8000170 <main>
  bx lr
 8000bea:	4770      	bx	lr
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bf4:	08004374 	.word	0x08004374
  ldr r2, =_sbss
 8000bf8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bfc:	20001018 	.word	0x20001018

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 feb9 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fcd4 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fed1 	bl	80019f6 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 fe99 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000010 	.word	0x20000010
 8000c8c:	2000000c 	.word	0x2000000c

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <HAL_IncTick+0x1c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a03      	ldr	r2, [pc, #12]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20000010 	.word	0x20000010
 8000cb0:	200003b4 	.word	0x200003b4

08000cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	@ (8000cc4 <HAL_GetTick+0x10>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	200003b4 	.word	0x200003b4

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fff0 	bl	8000cb4 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffe0 	bl	8000cb4 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000010 	.word	0x20000010

08000d10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0ed      	b.n	8000efe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fc7e 	bl	8000630 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d44:	f7ff ffb6 	bl	8000cb4 <HAL_GetTick>
 8000d48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4a:	e012      	b.n	8000d72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d4c:	f7ff ffb2 	bl	8000cb4 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d90b      	bls.n	8000d72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2205      	movs	r2, #5
 8000d6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e0c5      	b.n	8000efe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0e5      	beq.n	8000d4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0202 	bic.w	r2, r2, #2
 8000d8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d90:	f7ff ff90 	bl	8000cb4 <HAL_GetTick>
 8000d94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d96:	e012      	b.n	8000dbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d98:	f7ff ff8c 	bl	8000cb4 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b0a      	cmp	r3, #10
 8000da4:	d90b      	bls.n	8000dbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000daa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2205      	movs	r2, #5
 8000db6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e09f      	b.n	8000efe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1e5      	bne.n	8000d98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7e1b      	ldrb	r3, [r3, #24]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d108      	bne.n	8000de6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e007      	b.n	8000df6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7e5b      	ldrb	r3, [r3, #25]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d108      	bne.n	8000e10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	e007      	b.n	8000e20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7e9b      	ldrb	r3, [r3, #26]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d108      	bne.n	8000e3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0220 	orr.w	r2, r2, #32
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e007      	b.n	8000e4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0220 	bic.w	r2, r2, #32
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7edb      	ldrb	r3, [r3, #27]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0210 	bic.w	r2, r2, #16
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0210 	orr.w	r2, r2, #16
 8000e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7f1b      	ldrb	r3, [r3, #28]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0208 	orr.w	r2, r2, #8
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e007      	b.n	8000e9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0208 	bic.w	r2, r2, #8
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7f5b      	ldrb	r3, [r3, #29]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d108      	bne.n	8000eb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0204 	orr.w	r2, r2, #4
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e007      	b.n	8000ec8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0204 	bic.w	r2, r2, #4
 8000ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	ea42 0103 	orr.w	r1, r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f1e:	7cfb      	ldrb	r3, [r7, #19]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d003      	beq.n	8000f2c <HAL_CAN_ConfigFilter+0x26>
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	f040 80aa 	bne.w	8001080 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2201      	movs	r2, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d123      	bne.n	8000fae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	401a      	ands	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3248      	adds	r2, #72	@ 0x48
 8000f8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fa4:	6979      	ldr	r1, [r7, #20]
 8000fa6:	3348      	adds	r3, #72	@ 0x48
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	440b      	add	r3, r1
 8000fac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d122      	bne.n	8000ffc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3248      	adds	r2, #72	@ 0x48
 8000fdc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff2:	6979      	ldr	r1, [r7, #20]
 8000ff4:	3348      	adds	r3, #72	@ 0x48
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001016:	e007      	b.n	8001028 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001042:	e007      	b.n	8001054 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	431a      	orrs	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001072:	f023 0201 	bic.w	r2, r3, #1
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	e006      	b.n	800108e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001084:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
  }
}
 800108e:	4618      	mov	r0, r3
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d12e      	bne.n	800110a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010c4:	f7ff fdf6 	bl	8000cb4 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ca:	e012      	b.n	80010f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010cc:	f7ff fdf2 	bl	8000cb4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e012      	b.n	8001118 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e5      	bne.n	80010cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e006      	b.n	8001118 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
  }
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001134:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d003      	beq.n	8001144 <HAL_CAN_GetRxMessage+0x24>
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	2b02      	cmp	r3, #2
 8001140:	f040 8103 	bne.w	800134a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10e      	bne.n	8001168 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d116      	bne.n	8001186 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0f7      	b.n	8001358 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0e8      	b.n	8001358 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	331b      	adds	r3, #27
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0204 	and.w	r2, r3, #4
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10c      	bne.n	80011be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	331b      	adds	r3, #27
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	0d5b      	lsrs	r3, r3, #21
 80011b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e00b      	b.n	80011d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	331b      	adds	r3, #27
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	08db      	lsrs	r3, r3, #3
 80011ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	331b      	adds	r3, #27
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0202 	and.w	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	331b      	adds	r3, #27
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4413      	add	r3, r2
 80011f8:	3304      	adds	r3, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2208      	movs	r2, #8
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	e00b      	b.n	8001224 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	331b      	adds	r3, #27
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 020f 	and.w	r2, r3, #15
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	331b      	adds	r3, #27
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	3304      	adds	r3, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	331b      	adds	r3, #27
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	3304      	adds	r3, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	b29a      	uxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	0a1a      	lsrs	r2, r3, #8
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4413      	add	r3, r2
 800128e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0c1a      	lsrs	r2, r3, #16
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	3302      	adds	r3, #2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	0e1a      	lsrs	r2, r3, #24
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3303      	adds	r3, #3
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3304      	adds	r3, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0a1a      	lsrs	r2, r3, #8
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3305      	adds	r3, #5
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0c1a      	lsrs	r2, r3, #16
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	3306      	adds	r3, #6
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	4413      	add	r3, r2
 800130e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0e1a      	lsrs	r2, r3, #24
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	3307      	adds	r3, #7
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d108      	bne.n	8001336 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0220 	orr.w	r2, r2, #32
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	e007      	b.n	8001346 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0220 	orr.w	r2, r2, #32
 8001344:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e006      	b.n	8001358 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001362:	b480      	push	{r7}
 8001364:	b085      	sub	sp, #20
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001372:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d002      	beq.n	8001380 <HAL_CAN_ActivateNotification+0x1e>
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d109      	bne.n	8001394 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6959      	ldr	r1, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	e006      	b.n	80013a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
  }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d07c      	beq.n	80014ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f983 	bl	800171a <HAL_CAN_TxMailbox0CompleteCallback>
 8001414:	e016      	b.n	8001444 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
 8001428:	e00c      	b.n	8001444 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
 800143c:	e002      	b.n	8001444 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f986 	bl	8001750 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d024      	beq.n	8001498 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001456:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f962 	bl	800172c <HAL_CAN_TxMailbox1CompleteCallback>
 8001468:	e016      	b.n	8001498 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
 800147c:	e00c      	b.n	8001498 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001490:	e002      	b.n	8001498 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f965 	bl	8001762 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d024      	beq.n	80014ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f941 	bl	800173e <HAL_CAN_TxMailbox2CompleteCallback>
 80014bc:	e016      	b.n	80014ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d0:	e00c      	b.n	80014ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e4:	e002      	b.n	80014ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f944 	bl	8001774 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00c      	beq.n	8001510 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2210      	movs	r2, #16
 800150e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f933 	bl	8001798 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f91b 	bl	8001786 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00c      	beq.n	8001574 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2210      	movs	r2, #16
 8001572:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2208      	movs	r2, #8
 800158e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f90a 	bl	80017aa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe fdcc 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2210      	movs	r2, #16
 80015ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f8f3 	bl	80017bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00b      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2208      	movs	r2, #8
 80015f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f8eb 	bl	80017ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d07b      	beq.n	80016fa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d072      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d008      	beq.n	8001628 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001666:	2b00      	cmp	r3, #0
 8001668:	d043      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03e      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800167a:	2b60      	cmp	r3, #96	@ 0x60
 800167c:	d02b      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x32a>
 800167e:	2b60      	cmp	r3, #96	@ 0x60
 8001680:	d82e      	bhi.n	80016e0 <HAL_CAN_IRQHandler+0x334>
 8001682:	2b50      	cmp	r3, #80	@ 0x50
 8001684:	d022      	beq.n	80016cc <HAL_CAN_IRQHandler+0x320>
 8001686:	2b50      	cmp	r3, #80	@ 0x50
 8001688:	d82a      	bhi.n	80016e0 <HAL_CAN_IRQHandler+0x334>
 800168a:	2b40      	cmp	r3, #64	@ 0x40
 800168c:	d019      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x316>
 800168e:	2b40      	cmp	r3, #64	@ 0x40
 8001690:	d826      	bhi.n	80016e0 <HAL_CAN_IRQHandler+0x334>
 8001692:	2b30      	cmp	r3, #48	@ 0x30
 8001694:	d010      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x30c>
 8001696:	2b30      	cmp	r3, #48	@ 0x30
 8001698:	d822      	bhi.n	80016e0 <HAL_CAN_IRQHandler+0x334>
 800169a:	2b10      	cmp	r3, #16
 800169c:	d002      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x2f8>
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d005      	beq.n	80016ae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016a2:	e01d      	b.n	80016e0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016ac:	e019      	b.n	80016e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016b6:	e014      	b.n	80016e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016c0:	e00f      	b.n	80016e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016ca:	e00a      	b.n	80016e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016d4:	e005      	b.n	80016e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016de:	e000      	b.n	80016e2 <HAL_CAN_IRQHandler+0x336>
            break;
 80016e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699a      	ldr	r2, [r3, #24]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80016f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2204      	movs	r2, #4
 80016f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f867 	bl	80017e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db0b      	blt.n	8001882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	4906      	ldr	r1, [pc, #24]	@ (800188c <__NVIC_EnableIRQ+0x34>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2001      	movs	r0, #1
 800187a:	fa00 f202 	lsl.w	r2, r0, r2
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	@ (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	@ (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	@ 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff90 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff2d 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff42 	bl	800183c <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff90 	bl	80018e4 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5f 	bl	8001890 <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff35 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e043      	b.n	8001aae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <HAL_DMA_Init+0xa8>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a22      	ldr	r2, [pc, #136]	@ (8001abc <HAL_DMA_Init+0xac>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac0 <HAL_DMA_Init+0xb0>)
 8001a42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a5a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	bffdfff8 	.word	0xbffdfff8
 8001abc:	cccccccd 	.word	0xcccccccd
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_DMA_Start_IT+0x20>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e04b      	b.n	8001b7c <HAL_DMA_Start_IT+0xb8>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d13a      	bne.n	8001b6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f9eb 	bl	8001ef8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d008      	beq.n	8001b3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 020e 	orr.w	r2, r2, #14
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00f      	b.n	8001b5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 020a 	orr.w	r2, r2, #10
 8001b5a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e005      	b.n	8001b7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b76:	2302      	movs	r3, #2
 8001b78:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e020      	b.n	8001bf0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 020e 	bic.w	r2, r2, #14
 8001bbc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d005      	beq.n	8001c20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2204      	movs	r2, #4
 8001c18:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e051      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 020e 	bic.w	r2, r2, #14
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a22      	ldr	r2, [pc, #136]	@ (8001cd0 <HAL_DMA_Abort_IT+0xd4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d029      	beq.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a21      	ldr	r2, [pc, #132]	@ (8001cd4 <HAL_DMA_Abort_IT+0xd8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x9e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd8 <HAL_DMA_Abort_IT+0xdc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01a      	beq.n	8001c94 <HAL_DMA_Abort_IT+0x98>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1e      	ldr	r2, [pc, #120]	@ (8001cdc <HAL_DMA_Abort_IT+0xe0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d012      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x92>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce0 <HAL_DMA_Abort_IT+0xe4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00a      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x8c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce4 <HAL_DMA_Abort_IT+0xe8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d102      	bne.n	8001c82 <HAL_DMA_Abort_IT+0x86>
 8001c7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c80:	e00e      	b.n	8001ca0 <HAL_DMA_Abort_IT+0xa4>
 8001c82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c86:	e00b      	b.n	8001ca0 <HAL_DMA_Abort_IT+0xa4>
 8001c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c8c:	e008      	b.n	8001ca0 <HAL_DMA_Abort_IT+0xa4>
 8001c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c92:	e005      	b.n	8001ca0 <HAL_DMA_Abort_IT+0xa4>
 8001c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c98:	e002      	b.n	8001ca0 <HAL_DMA_Abort_IT+0xa4>
 8001c9a:	2310      	movs	r3, #16
 8001c9c:	e000      	b.n	8001ca0 <HAL_DMA_Abort_IT+0xa4>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_DMA_Abort_IT+0xec>)
 8001ca2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
    } 
  }
  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40020008 	.word	0x40020008
 8001cd4:	4002001c 	.word	0x4002001c
 8001cd8:	40020030 	.word	0x40020030
 8001cdc:	40020044 	.word	0x40020044
 8001ce0:	40020058 	.word	0x40020058
 8001ce4:	4002006c 	.word	0x4002006c
 8001ce8:	40020000 	.word	0x40020000

08001cec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	2204      	movs	r2, #4
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d04f      	beq.n	8001db4 <HAL_DMA_IRQHandler+0xc8>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d04a      	beq.n	8001db4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a66      	ldr	r2, [pc, #408]	@ (8001edc <HAL_DMA_IRQHandler+0x1f0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d029      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xae>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a65      	ldr	r2, [pc, #404]	@ (8001ee0 <HAL_DMA_IRQHandler+0x1f4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d022      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xaa>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a63      	ldr	r2, [pc, #396]	@ (8001ee4 <HAL_DMA_IRQHandler+0x1f8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01a      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xa4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a62      	ldr	r2, [pc, #392]	@ (8001ee8 <HAL_DMA_IRQHandler+0x1fc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d012      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x9e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a60      	ldr	r2, [pc, #384]	@ (8001eec <HAL_DMA_IRQHandler+0x200>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00a      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x98>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef0 <HAL_DMA_IRQHandler+0x204>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d102      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x92>
 8001d78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d7c:	e00e      	b.n	8001d9c <HAL_DMA_IRQHandler+0xb0>
 8001d7e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d82:	e00b      	b.n	8001d9c <HAL_DMA_IRQHandler+0xb0>
 8001d84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d88:	e008      	b.n	8001d9c <HAL_DMA_IRQHandler+0xb0>
 8001d8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d8e:	e005      	b.n	8001d9c <HAL_DMA_IRQHandler+0xb0>
 8001d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d94:	e002      	b.n	8001d9c <HAL_DMA_IRQHandler+0xb0>
 8001d96:	2340      	movs	r3, #64	@ 0x40
 8001d98:	e000      	b.n	8001d9c <HAL_DMA_IRQHandler+0xb0>
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	4a55      	ldr	r2, [pc, #340]	@ (8001ef4 <HAL_DMA_IRQHandler+0x208>)
 8001d9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8094 	beq.w	8001ed2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001db2:	e08e      	b.n	8001ed2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	2202      	movs	r2, #2
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d056      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x186>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d051      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 020a 	bic.w	r2, r2, #10
 8001dea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a38      	ldr	r2, [pc, #224]	@ (8001edc <HAL_DMA_IRQHandler+0x1f0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d029      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x166>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a37      	ldr	r2, [pc, #220]	@ (8001ee0 <HAL_DMA_IRQHandler+0x1f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x162>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a35      	ldr	r2, [pc, #212]	@ (8001ee4 <HAL_DMA_IRQHandler+0x1f8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01a      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x15c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a34      	ldr	r2, [pc, #208]	@ (8001ee8 <HAL_DMA_IRQHandler+0x1fc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d012      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x156>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <HAL_DMA_IRQHandler+0x200>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00a      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x150>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a31      	ldr	r2, [pc, #196]	@ (8001ef0 <HAL_DMA_IRQHandler+0x204>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d102      	bne.n	8001e36 <HAL_DMA_IRQHandler+0x14a>
 8001e30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e34:	e00e      	b.n	8001e54 <HAL_DMA_IRQHandler+0x168>
 8001e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e3a:	e00b      	b.n	8001e54 <HAL_DMA_IRQHandler+0x168>
 8001e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e40:	e008      	b.n	8001e54 <HAL_DMA_IRQHandler+0x168>
 8001e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e46:	e005      	b.n	8001e54 <HAL_DMA_IRQHandler+0x168>
 8001e48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e4c:	e002      	b.n	8001e54 <HAL_DMA_IRQHandler+0x168>
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e000      	b.n	8001e54 <HAL_DMA_IRQHandler+0x168>
 8001e52:	2302      	movs	r3, #2
 8001e54:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <HAL_DMA_IRQHandler+0x208>)
 8001e56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d034      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e70:	e02f      	b.n	8001ed2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	2208      	movs	r2, #8
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d028      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x1e8>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 020e 	bic.w	r2, r2, #14
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d004      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	4798      	blx	r3
    }
  }
  return;
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
}
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40020008 	.word	0x40020008
 8001ee0:	4002001c 	.word	0x4002001c
 8001ee4:	40020030 	.word	0x40020030
 8001ee8:	40020044 	.word	0x40020044
 8001eec:	40020058 	.word	0x40020058
 8001ef0:	4002006c 	.word	0x4002006c
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d108      	bne.n	8001f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f36:	e007      	b.n	8001f48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	@ 0x2c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f66:	e169      	b.n	800223c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8158 	bne.w	8002236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a9a      	ldr	r2, [pc, #616]	@ (80021f4 <HAL_GPIO_Init+0x2a0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d05e      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f90:	4a98      	ldr	r2, [pc, #608]	@ (80021f4 <HAL_GPIO_Init+0x2a0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d875      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001f96:	4a98      	ldr	r2, [pc, #608]	@ (80021f8 <HAL_GPIO_Init+0x2a4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d058      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f9c:	4a96      	ldr	r2, [pc, #600]	@ (80021f8 <HAL_GPIO_Init+0x2a4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d86f      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fa2:	4a96      	ldr	r2, [pc, #600]	@ (80021fc <HAL_GPIO_Init+0x2a8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d052      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fa8:	4a94      	ldr	r2, [pc, #592]	@ (80021fc <HAL_GPIO_Init+0x2a8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d869      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fae:	4a94      	ldr	r2, [pc, #592]	@ (8002200 <HAL_GPIO_Init+0x2ac>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d04c      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fb4:	4a92      	ldr	r2, [pc, #584]	@ (8002200 <HAL_GPIO_Init+0x2ac>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d863      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fba:	4a92      	ldr	r2, [pc, #584]	@ (8002204 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d046      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fc0:	4a90      	ldr	r2, [pc, #576]	@ (8002204 <HAL_GPIO_Init+0x2b0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d85d      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d82a      	bhi.n	8002020 <HAL_GPIO_Init+0xcc>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d859      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fce:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd4 <HAL_GPIO_Init+0x80>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	0800204f 	.word	0x0800204f
 8001fd8:	08002029 	.word	0x08002029
 8001fdc:	0800203b 	.word	0x0800203b
 8001fe0:	0800207d 	.word	0x0800207d
 8001fe4:	08002083 	.word	0x08002083
 8001fe8:	08002083 	.word	0x08002083
 8001fec:	08002083 	.word	0x08002083
 8001ff0:	08002083 	.word	0x08002083
 8001ff4:	08002083 	.word	0x08002083
 8001ff8:	08002083 	.word	0x08002083
 8001ffc:	08002083 	.word	0x08002083
 8002000:	08002083 	.word	0x08002083
 8002004:	08002083 	.word	0x08002083
 8002008:	08002083 	.word	0x08002083
 800200c:	08002083 	.word	0x08002083
 8002010:	08002083 	.word	0x08002083
 8002014:	08002083 	.word	0x08002083
 8002018:	08002031 	.word	0x08002031
 800201c:	08002045 	.word	0x08002045
 8002020:	4a79      	ldr	r2, [pc, #484]	@ (8002208 <HAL_GPIO_Init+0x2b4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002026:	e02c      	b.n	8002082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e029      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	3304      	adds	r3, #4
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e024      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	3308      	adds	r3, #8
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e01f      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	330c      	adds	r3, #12
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e01a      	b.n	8002084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002056:	2304      	movs	r3, #4
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e013      	b.n	8002084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002064:	2308      	movs	r3, #8
 8002066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	611a      	str	r2, [r3, #16]
          break;
 800206e:	e009      	b.n	8002084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002070:	2308      	movs	r3, #8
 8002072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	615a      	str	r2, [r3, #20]
          break;
 800207a:	e003      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
          break;
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x130>
          break;
 8002082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	@ 0xff
 8002088:	d801      	bhi.n	800208e <HAL_GPIO_Init+0x13a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_Init+0x13e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	@ 0xff
 8002098:	d802      	bhi.n	80020a0 <HAL_GPIO_Init+0x14c>
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x152>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	3b08      	subs	r3, #8
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	210f      	movs	r1, #15
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	401a      	ands	r2, r3
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80b1 	beq.w	8002236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d4:	4b4d      	ldr	r3, [pc, #308]	@ (800220c <HAL_GPIO_Init+0x2b8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	@ (800220c <HAL_GPIO_Init+0x2b8>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b4a      	ldr	r3, [pc, #296]	@ (800220c <HAL_GPIO_Init+0x2b8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ec:	4a48      	ldr	r2, [pc, #288]	@ (8002210 <HAL_GPIO_Init+0x2bc>)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	@ (8002214 <HAL_GPIO_Init+0x2c0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_GPIO_Init+0x1ec>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3f      	ldr	r2, [pc, #252]	@ (8002218 <HAL_GPIO_Init+0x2c4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00d      	beq.n	800213c <HAL_GPIO_Init+0x1e8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3e      	ldr	r2, [pc, #248]	@ (800221c <HAL_GPIO_Init+0x2c8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d007      	beq.n	8002138 <HAL_GPIO_Init+0x1e4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3d      	ldr	r2, [pc, #244]	@ (8002220 <HAL_GPIO_Init+0x2cc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_GPIO_Init+0x1e0>
 8002130:	2303      	movs	r3, #3
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002134:	2304      	movs	r3, #4
 8002136:	e004      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002140:	2300      	movs	r3, #0
 8002142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002152:	492f      	ldr	r1, [pc, #188]	@ (8002210 <HAL_GPIO_Init+0x2bc>)
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800216c:	4b2d      	ldr	r3, [pc, #180]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	492c      	ldr	r1, [pc, #176]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217a:	4b2a      	ldr	r3, [pc, #168]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4928      	ldr	r1, [pc, #160]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002194:	4b23      	ldr	r3, [pc, #140]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4922      	ldr	r1, [pc, #136]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a2:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	491e      	ldr	r1, [pc, #120]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4918      	ldr	r1, [pc, #96]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ca:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4914      	ldr	r1, [pc, #80]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d021      	beq.n	8002228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	490e      	ldr	r1, [pc, #56]	@ (8002224 <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
 80021f0:	e021      	b.n	8002236 <HAL_GPIO_Init+0x2e2>
 80021f2:	bf00      	nop
 80021f4:	10320000 	.word	0x10320000
 80021f8:	10310000 	.word	0x10310000
 80021fc:	10220000 	.word	0x10220000
 8002200:	10210000 	.word	0x10210000
 8002204:	10120000 	.word	0x10120000
 8002208:	10110000 	.word	0x10110000
 800220c:	40021000 	.word	0x40021000
 8002210:	40010000 	.word	0x40010000
 8002214:	40010800 	.word	0x40010800
 8002218:	40010c00 	.word	0x40010c00
 800221c:	40011000 	.word	0x40011000
 8002220:	40011400 	.word	0x40011400
 8002224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_GPIO_Init+0x304>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	43db      	mvns	r3, r3
 8002230:	4909      	ldr	r1, [pc, #36]	@ (8002258 <HAL_GPIO_Init+0x304>)
 8002232:	4013      	ands	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	3301      	adds	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	f47f ae8e 	bne.w	8001f68 <HAL_GPIO_Init+0x14>
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	372c      	adds	r7, #44	@ 0x2c
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e272      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8087 	beq.w	800238a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800227c:	4b92      	ldr	r3, [pc, #584]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b04      	cmp	r3, #4
 8002286:	d00c      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002288:	4b8f      	ldr	r3, [pc, #572]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b08      	cmp	r3, #8
 8002292:	d112      	bne.n	80022ba <HAL_RCC_OscConfig+0x5e>
 8002294:	4b8c      	ldr	r3, [pc, #560]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a0:	d10b      	bne.n	80022ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a2:	4b89      	ldr	r3, [pc, #548]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d06c      	beq.n	8002388 <HAL_RCC_OscConfig+0x12c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d168      	bne.n	8002388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e24c      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x76>
 80022c4:	4b80      	ldr	r3, [pc, #512]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a7f      	ldr	r2, [pc, #508]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e02e      	b.n	8002330 <HAL_RCC_OscConfig+0xd4>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x98>
 80022da:	4b7b      	ldr	r3, [pc, #492]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7a      	ldr	r2, [pc, #488]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b78      	ldr	r3, [pc, #480]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a77      	ldr	r2, [pc, #476]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e01d      	b.n	8002330 <HAL_RCC_OscConfig+0xd4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0xbc>
 80022fe:	4b72      	ldr	r3, [pc, #456]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a71      	ldr	r2, [pc, #452]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b6f      	ldr	r3, [pc, #444]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a6e      	ldr	r2, [pc, #440]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0xd4>
 8002318:	4b6b      	ldr	r3, [pc, #428]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6a      	ldr	r2, [pc, #424]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800231e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b68      	ldr	r3, [pc, #416]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a67      	ldr	r2, [pc, #412]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800232a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fcbc 	bl	8000cb4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fcb8 	bl	8000cb4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e200      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b5d      	ldr	r3, [pc, #372]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0xe4>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fca8 	bl	8000cb4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7fe fca4 	bl	8000cb4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1ec      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	4b53      	ldr	r3, [pc, #332]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x10c>
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d063      	beq.n	800245e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002396:	4b4c      	ldr	r3, [pc, #304]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023a2:	4b49      	ldr	r3, [pc, #292]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d11c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x18c>
 80023ae:	4b46      	ldr	r3, [pc, #280]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d116      	bne.n	80023e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_RCC_OscConfig+0x176>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e1c0      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b3d      	ldr	r3, [pc, #244]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4939      	ldr	r1, [pc, #228]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	e03a      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f0:	4b36      	ldr	r3, [pc, #216]	@ (80024cc <HAL_RCC_OscConfig+0x270>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe fc5d 	bl	8000cb4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe fc59 	bl	8000cb4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1a1      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	4b2d      	ldr	r3, [pc, #180]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b2a      	ldr	r3, [pc, #168]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4927      	ldr	r1, [pc, #156]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	e015      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002432:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <HAL_RCC_OscConfig+0x270>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe fc3c 	bl	8000cb4 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe fc38 	bl	8000cb4 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e180      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d03a      	beq.n	80024e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d019      	beq.n	80024a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe fc1c 	bl	8000cb4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7fe fc18 	bl	8000cb4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e160      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <HAL_RCC_OscConfig+0x26c>)
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800249e:	2001      	movs	r0, #1
 80024a0:	f000 face 	bl	8002a40 <RCC_Delay>
 80024a4:	e01c      	b.n	80024e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fc02 	bl	8000cb4 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b2:	e00f      	b.n	80024d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fbfe 	bl	8000cb4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d908      	bls.n	80024d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e146      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	42420000 	.word	0x42420000
 80024d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b92      	ldr	r3, [pc, #584]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e9      	bne.n	80024b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a6 	beq.w	800263a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a87      	ldr	r2, [pc, #540]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b85      	ldr	r3, [pc, #532]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b82      	ldr	r3, [pc, #520]	@ (8002724 <HAL_RCC_OscConfig+0x4c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b7f      	ldr	r3, [pc, #508]	@ (8002724 <HAL_RCC_OscConfig+0x4c8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7e      	ldr	r2, [pc, #504]	@ (8002724 <HAL_RCC_OscConfig+0x4c8>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe fbbf 	bl	8000cb4 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fbbb 	bl	8000cb4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b64      	cmp	r3, #100	@ 0x64
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e103      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b75      	ldr	r3, [pc, #468]	@ (8002724 <HAL_RCC_OscConfig+0x4c8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x312>
 8002560:	4b6f      	ldr	r3, [pc, #444]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a6e      	ldr	r2, [pc, #440]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	e02d      	b.n	80025ca <HAL_RCC_OscConfig+0x36e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x334>
 8002576:	4b6a      	ldr	r3, [pc, #424]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a69      	ldr	r2, [pc, #420]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6213      	str	r3, [r2, #32]
 8002582:	4b67      	ldr	r3, [pc, #412]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a66      	ldr	r2, [pc, #408]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	e01c      	b.n	80025ca <HAL_RCC_OscConfig+0x36e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b05      	cmp	r3, #5
 8002596:	d10c      	bne.n	80025b2 <HAL_RCC_OscConfig+0x356>
 8002598:	4b61      	ldr	r3, [pc, #388]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a60      	ldr	r2, [pc, #384]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6213      	str	r3, [r2, #32]
 80025a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6213      	str	r3, [r2, #32]
 80025b0:	e00b      	b.n	80025ca <HAL_RCC_OscConfig+0x36e>
 80025b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	4b58      	ldr	r3, [pc, #352]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a57      	ldr	r2, [pc, #348]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d015      	beq.n	80025fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fb6f 	bl	8000cb4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fb6b 	bl	8000cb4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0b1      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ee      	beq.n	80025da <HAL_RCC_OscConfig+0x37e>
 80025fc:	e014      	b.n	8002628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe fb59 	bl	8000cb4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe fb55 	bl	8000cb4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e09b      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	4b40      	ldr	r3, [pc, #256]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ee      	bne.n	8002606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4b3c      	ldr	r3, [pc, #240]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a3b      	ldr	r2, [pc, #236]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8087 	beq.w	8002752 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002644:	4b36      	ldr	r3, [pc, #216]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d061      	beq.n	8002714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d146      	bne.n	80026e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_RCC_OscConfig+0x4cc>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fb29 	bl	8000cb4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fb25 	bl	8000cb4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e06d      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268c:	d108      	bne.n	80026a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800268e:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4921      	ldr	r1, [pc, #132]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a19      	ldr	r1, [r3, #32]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	430b      	orrs	r3, r1
 80026b2:	491b      	ldr	r1, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe faf9 	bl	8000cb4 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fe faf5 	bl	8000cb4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e03d      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d8:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x46a>
 80026e4:	e035      	b.n	8002752 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fae2 	bl	8000cb4 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe fade 	bl	8000cb4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e026      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x498>
 8002712:	e01e      	b.n	8002752 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e019      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_OscConfig+0x500>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0d0      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d910      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b67      	ldr	r3, [pc, #412]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4965      	ldr	r1, [pc, #404]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b63      	ldr	r3, [pc, #396]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0b8      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027bc:	4b59      	ldr	r3, [pc, #356]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a58      	ldr	r2, [pc, #352]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	494d      	ldr	r1, [pc, #308]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d040      	beq.n	8002880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d115      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e073      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	4b3d      	ldr	r3, [pc, #244]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06b      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283e:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f023 0203 	bic.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4936      	ldr	r1, [pc, #216]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002850:	f7fe fa30 	bl	8000cb4 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	e00a      	b.n	800286e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7fe fa2c 	bl	8000cb4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e053      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 020c 	and.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	429a      	cmp	r2, r3
 800287e:	d1eb      	bne.n	8002858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d210      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 0207 	bic.w	r2, r3, #7
 8002896:	4922      	ldr	r1, [pc, #136]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e032      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4916      	ldr	r1, [pc, #88]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	490e      	ldr	r1, [pc, #56]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ee:	f000 f821 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	490a      	ldr	r1, [pc, #40]	@ (8002928 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	5ccb      	ldrb	r3, [r1, r3]
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	4a09      	ldr	r2, [pc, #36]	@ (800292c <HAL_RCC_ClockConfig+0x1cc>)
 8002908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_RCC_ClockConfig+0x1d0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f98e 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40022000 	.word	0x40022000
 8002924:	40021000 	.word	0x40021000
 8002928:	08004340 	.word	0x08004340
 800292c:	20000008 	.word	0x20000008
 8002930:	2000000c 	.word	0x2000000c

08002934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800294e:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d002      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x30>
 800295e:	2b08      	cmp	r3, #8
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x36>
 8002962:	e027      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002966:	613b      	str	r3, [r7, #16]
      break;
 8002968:	e027      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0c9b      	lsrs	r3, r3, #18
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	4a17      	ldr	r2, [pc, #92]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d010      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	0c5b      	lsrs	r3, r3, #17
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0d      	ldr	r2, [pc, #52]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002996:	fb03 f202 	mul.w	r2, r3, r2
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e004      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	613b      	str	r3, [r7, #16]
      break;
 80029b2:	e002      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x98>)
 80029b6:	613b      	str	r3, [r7, #16]
      break;
 80029b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ba:	693b      	ldr	r3, [r7, #16]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	007a1200 	.word	0x007a1200
 80029d0:	08004358 	.word	0x08004358
 80029d4:	08004368 	.word	0x08004368
 80029d8:	003d0900 	.word	0x003d0900

080029dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <HAL_RCC_GetHCLKFreq+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000008 	.word	0x20000008

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f4:	f7ff fff2 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08004350 	.word	0x08004350

08002a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a1c:	f7ff ffde 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0adb      	lsrs	r3, r3, #11
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	@ (8002a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08004350 	.word	0x08004350

08002a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <RCC_Delay+0x34>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <RCC_Delay+0x38>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0a5b      	lsrs	r3, r3, #9
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a5c:	bf00      	nop
  }
  while (Delay --);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	60fa      	str	r2, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f9      	bne.n	8002a5c <RCC_Delay+0x1c>
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000008 	.word	0x20000008
 8002a78:	10624dd3 	.word	0x10624dd3

08002a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e042      	b.n	8002b14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd fe18 	bl	80006d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 ff25 	bl	8003910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	@ 0x30
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d156      	bne.n	8002be4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_UART_Transmit_DMA+0x26>
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e04f      	b.n	8002be6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2221      	movs	r2, #33	@ 0x21
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_UART_Transmit_DMA+0xd4>)
 8002b6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	4a20      	ldr	r2, [pc, #128]	@ (8002bf4 <HAL_UART_Transmit_DMA+0xd8>)
 8002b74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf8 <HAL_UART_Transmit_DMA+0xdc>)
 8002b7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	2200      	movs	r2, #0
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	f7fe ff91 	bl	8001ac4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002baa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	617b      	str	r3, [r7, #20]
   return(result);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e5      	bne.n	8002bac <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3730      	adds	r7, #48	@ 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	080031a7 	.word	0x080031a7
 8002bf4:	08003241 	.word	0x08003241
 8002bf8:	080033c5 	.word	0x080033c5

08002bfc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d112      	bne.n	8002c3c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_UART_Receive_DMA+0x26>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00b      	b.n	8002c3e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fc10 	bl	8003458 <UART_Start_Receive_DMA>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	e000      	b.n	8002c3e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_UART_IRQHandler+0x66>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fd74 	bl	8003794 <UART_Receive_IT>
      return;
 8002cac:	e25b      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80de 	beq.w	8002e74 <HAL_UART_IRQHandler+0x22c>
 8002cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80d1 	beq.w	8002e74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xae>
 8002cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_UART_IRQHandler+0xd2>
 8002d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_UART_IRQHandler+0xf6>
 8002d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f043 0204 	orr.w	r2, r3, #4
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d011      	beq.n	8002d6e <HAL_UART_IRQHandler+0x126>
 8002d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f043 0208 	orr.w	r2, r3, #8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 81f2 	beq.w	800315c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_UART_IRQHandler+0x14e>
 8002d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fcff 	bl	8003794 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d103      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x17a>
 8002dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d04f      	beq.n	8002e62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fc09 	bl	80035da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d041      	beq.n	8002e5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3314      	adds	r3, #20
 8002dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1d9      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d013      	beq.n	8002e52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003028 <HAL_UART_IRQHandler+0x3e0>)
 8002e30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fee0 	bl	8001bfc <HAL_DMA_Abort_IT>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	e00e      	b.n	8002e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f001 f93a 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	e00a      	b.n	8002e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f001 f936 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	e006      	b.n	8002e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f001 f932 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e6e:	e175      	b.n	800315c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	bf00      	nop
    return;
 8002e72:	e173      	b.n	800315c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f040 814f 	bne.w	800311c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8148 	beq.w	800311c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8141 	beq.w	800311c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80b6 	beq.w	800302c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ecc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8145 	beq.w	8003160 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	f080 813e 	bcs.w	8003160 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	f000 8088 	beq.w	8003008 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1d9      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e1      	bne.n	8002f44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002fa4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002faa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e3      	bne.n	8002f80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd8:	f023 0310 	bic.w	r3, r3, #16
 8002fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002fea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e3      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fdbe 	bl	8001b84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003016:	b29b      	uxth	r3, r3
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8b6 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003024:	e09c      	b.n	8003160 <HAL_UART_IRQHandler+0x518>
 8003026:	bf00      	nop
 8003028:	0800369f 	.word	0x0800369f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003034:	b29b      	uxth	r3, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 808e 	beq.w	8003164 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8089 	beq.w	8003164 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003076:	647a      	str	r2, [r7, #68]	@ 0x44
 8003078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800307c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e3      	bne.n	8003052 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	623b      	str	r3, [r7, #32]
   return(result);
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3314      	adds	r3, #20
 80030aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e3      	bne.n	800308a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	60fb      	str	r3, [r7, #12]
   return(result);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0310 	bic.w	r3, r3, #16
 80030e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030f4:	61fa      	str	r2, [r7, #28]
 80030f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	617b      	str	r3, [r7, #20]
   return(result);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e3      	bne.n	80030d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800310e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f83b 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800311a:	e023      	b.n	8003164 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800311c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_UART_IRQHandler+0x4f4>
 8003128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800312c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fac6 	bl	80036c6 <UART_Transmit_IT>
    return;
 800313a:	e014      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <HAL_UART_IRQHandler+0x51e>
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb05 	bl	8003764 <UART_EndTransmit_IT>
    return;
 800315a:	e004      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
    return;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
      return;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_UART_IRQHandler+0x51e>
      return;
 8003164:	bf00      	nop
  }
}
 8003166:	37e8      	adds	r7, #232	@ 0xe8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b090      	sub	sp, #64	@ 0x40
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d137      	bne.n	8003232 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80031c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c4:	2200      	movs	r2, #0
 80031c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	623b      	str	r3, [r7, #32]
   return(result);
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	e853 3f00 	ldrex	r3, [r3]
 800320a:	60fb      	str	r3, [r7, #12]
   return(result);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34
 8003214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800321c:	61fa      	str	r2, [r7, #28]
 800321e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	69b9      	ldr	r1, [r7, #24]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	617b      	str	r3, [r7, #20]
   return(result);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e5      	bne.n	80031fc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003230:	e002      	b.n	8003238 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003232:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003234:	f000 ff0c 	bl	8004050 <HAL_UART_TxCpltCallback>
}
 8003238:	bf00      	nop
 800323a:	3740      	adds	r7, #64	@ 0x40
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff ff8c 	bl	800316c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b09c      	sub	sp, #112	@ 0x70
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d172      	bne.n	800335e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800327a:	2200      	movs	r2, #0
 800327c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800327e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800328e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800329e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80032ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e5      	bne.n	800327e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80032ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3314      	adds	r3, #20
 80032d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80032d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80032d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e5      	bne.n	80032b2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3314      	adds	r3, #20
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	623b      	str	r3, [r7, #32]
   return(result);
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003306:	633a      	str	r2, [r7, #48]	@ 0x30
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800330c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800331a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	2b01      	cmp	r3, #1
 8003328:	d119      	bne.n	800335e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	60fb      	str	r3, [r7, #12]
   return(result);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f023 0310 	bic.w	r3, r3, #16
 8003340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800334a:	61fa      	str	r2, [r7, #28]
 800334c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	617b      	str	r3, [r7, #20]
   return(result);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800335e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003360:	2200      	movs	r2, #0
 8003362:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d106      	bne.n	800337a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800336c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800336e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003370:	4619      	mov	r1, r3
 8003372:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003374:	f7ff ff0c 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003378:	e002      	b.n	8003380 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800337a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800337c:	f000 fe8b 	bl	8004096 <HAL_UART_RxCpltCallback>
}
 8003380:	bf00      	nop
 8003382:	3770      	adds	r7, #112	@ 0x70
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d108      	bne.n	80033b6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff feee 	bl	8003190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80033b4:	e002      	b.n	80033bc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff fee1 	bl	800317e <HAL_UART_RxHalfCpltCallback>
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b21      	cmp	r3, #33	@ 0x21
 80033f6:	d108      	bne.n	800340a <UART_DMAError+0x46>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2200      	movs	r2, #0
 8003402:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f000 f8c1 	bl	800358c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b22      	cmp	r3, #34	@ 0x22
 800342a:	d108      	bne.n	800343e <UART_DMAError+0x7a>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003438:	68b8      	ldr	r0, [r7, #8]
 800343a:	f000 f8ce 	bl	80035da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800344a:	68b8      	ldr	r0, [r7, #8]
 800344c:	f000 fe3e 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b098      	sub	sp, #96	@ 0x60
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2222      	movs	r2, #34	@ 0x22
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003484:	4a3e      	ldr	r2, [pc, #248]	@ (8003580 <UART_Start_Receive_DMA+0x128>)
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	4a3d      	ldr	r2, [pc, #244]	@ (8003584 <UART_Start_Receive_DMA+0x12c>)
 800348e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	4a3c      	ldr	r2, [pc, #240]	@ (8003588 <UART_Start_Receive_DMA+0x130>)
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	2200      	movs	r2, #0
 800349e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	f7fe fb04 	bl	8001ac4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d019      	beq.n	800350e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003500:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e5      	bne.n	80034da <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3314      	adds	r3, #20
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	657b      	str	r3, [r7, #84]	@ 0x54
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800352e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003530:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e5      	bne.n	800350e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	617b      	str	r3, [r7, #20]
   return(result);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003558:	653b      	str	r3, [r7, #80]	@ 0x50
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003562:	627a      	str	r2, [r7, #36]	@ 0x24
 8003564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6a39      	ldr	r1, [r7, #32]
 8003568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e5      	bne.n	8003542 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3760      	adds	r7, #96	@ 0x60
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800325d 	.word	0x0800325d
 8003584:	08003389 	.word	0x08003389
 8003588:	080033c5 	.word	0x080033c5

0800358c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	61ba      	str	r2, [r7, #24]
 80035b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6979      	ldr	r1, [r7, #20]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	613b      	str	r3, [r7, #16]
   return(result);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e5      	bne.n	8003594 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80035d0:	bf00      	nop
 80035d2:	3724      	adds	r7, #36	@ 0x24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035da:	b480      	push	{r7}
 80035dc:	b095      	sub	sp, #84	@ 0x54
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003602:	643a      	str	r2, [r7, #64]	@ 0x40
 8003604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e5      	bne.n	80035e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3314      	adds	r3, #20
 800361c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	61fb      	str	r3, [r7, #28]
   return(result);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800363c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	2b01      	cmp	r3, #1
 8003650:	d119      	bne.n	8003686 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	60bb      	str	r3, [r7, #8]
   return(result);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f023 0310 	bic.w	r3, r3, #16
 8003668:	647b      	str	r3, [r7, #68]	@ 0x44
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003672:	61ba      	str	r2, [r7, #24]
 8003674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6979      	ldr	r1, [r7, #20]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	613b      	str	r3, [r7, #16]
   return(result);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e5      	bne.n	8003652 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003694:	bf00      	nop
 8003696:	3754      	adds	r7, #84	@ 0x54
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fd07 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b21      	cmp	r3, #33	@ 0x21
 80036d8:	d13e      	bne.n	8003758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e2:	d114      	bne.n	800370e <UART_Transmit_IT+0x48>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d110      	bne.n	800370e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	1c9a      	adds	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	621a      	str	r2, [r3, #32]
 800370c:	e008      	b.n	8003720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6211      	str	r1, [r2, #32]
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29b      	uxth	r3, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4619      	mov	r1, r3
 800372e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800377a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fc63 	bl	8004050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	@ 0x30
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b22      	cmp	r3, #34	@ 0x22
 80037a6:	f040 80ae 	bne.w	8003906 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b2:	d117      	bne.n	80037e4 <UART_Receive_IT+0x50>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d113      	bne.n	80037e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037e2:	e026      	b.n	8003832 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f6:	d007      	beq.n	8003808 <UART_Receive_IT+0x74>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <UART_Receive_IT+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e008      	b.n	8003828 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003822:	b2da      	uxtb	r2, r3
 8003824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003826:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4619      	mov	r1, r3
 8003840:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003842:	2b00      	cmp	r3, #0
 8003844:	d15d      	bne.n	8003902 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0220 	bic.w	r2, r2, #32
 8003854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	2b01      	cmp	r3, #1
 800388a:	d135      	bne.n	80038f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	613b      	str	r3, [r7, #16]
   return(result);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b2:	623a      	str	r2, [r7, #32]
 80038b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	69f9      	ldr	r1, [r7, #28]
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d10a      	bne.n	80038ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fc4d 	bl	8003190 <HAL_UARTEx_RxEventCallback>
 80038f6:	e002      	b.n	80038fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fbcc 	bl	8004096 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e002      	b.n	8003908 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3730      	adds	r7, #48	@ 0x30
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800394a:	f023 030c 	bic.w	r3, r3, #12
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	430b      	orrs	r3, r1
 8003956:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2c      	ldr	r2, [pc, #176]	@ (8003a24 <UART_SetConfig+0x114>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d103      	bne.n	8003980 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7ff f84e 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	e002      	b.n	8003986 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7ff f836 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8003984:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	4a22      	ldr	r2, [pc, #136]	@ (8003a28 <UART_SetConfig+0x118>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	0119      	lsls	r1, r3, #4
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009a      	lsls	r2, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a28 <UART_SetConfig+0x118>)
 80039be:	fba3 0302 	umull	r0, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2064      	movs	r0, #100	@ 0x64
 80039c6:	fb00 f303 	mul.w	r3, r0, r3
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	3332      	adds	r3, #50	@ 0x32
 80039d0:	4a15      	ldr	r2, [pc, #84]	@ (8003a28 <UART_SetConfig+0x118>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039dc:	4419      	add	r1, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009a      	lsls	r2, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <UART_SetConfig+0x118>)
 80039f6:	fba3 0302 	umull	r0, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2064      	movs	r0, #100	@ 0x64
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	3332      	adds	r3, #50	@ 0x32
 8003a08:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <UART_SetConfig+0x118>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	440a      	add	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40013800 	.word	0x40013800
 8003a28:	51eb851f 	.word	0x51eb851f

08003a2c <crc_clear>:
	if(!hroboClaw->timeout) hroboClaw->timeout = MAXTOUT;

	return ROBOCLAW_OK;
}

static void crc_clear(RoboClaw_HandleTypeDef* hroboClaw){
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	hroboClaw->crc = 0;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	801a      	strh	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <crc_update>:

static void crc_update (RoboClaw_HandleTypeDef* hroboClaw, uint8_t data){
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	hroboClaw->crc = hroboClaw->crc ^ ((uint16_t)data << 8);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	4053      	eors	r3, r2
 8003a60:	b21b      	sxth	r3, r3
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e01b      	b.n	8003aa6 <crc_update+0x62>
	{
		if (hroboClaw->crc & 0x8000)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	da0d      	bge.n	8003a94 <crc_update+0x50>
			hroboClaw->crc = (hroboClaw->crc << 1) ^ 0x1021;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	b21b      	sxth	r3, r3
 8003a82:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8003a86:	f083 0301 	eor.w	r3, r3, #1
 8003a8a:	b21b      	sxth	r3, r3
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	e005      	b.n	8003aa0 <crc_update+0x5c>
		else
			hroboClaw->crc <<= 1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d9e0      	bls.n	8003a6e <crc_update+0x2a>
	}
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <crc_get>:

static uint16_t crc_get(RoboClaw_HandleTypeDef* hroboClaw){
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	return hroboClaw->crc;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <write_n>:

static ROBOCLAW_StatusTypeDef write_n(RoboClaw_HandleTypeDef* hroboClaw, uint8_t cnt, ...){
 8003ace:	b40e      	push	{r1, r2, r3}
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	uint8_t trys=MAXRETRY;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	75fb      	strb	r3, [r7, #23]
	uint8_t data;
	uint8_t temp;
	do{
		crc_clear(hroboClaw);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ffa5 	bl	8003a2c <crc_clear>
		//send data with crc
		va_list marker;
		va_start( marker, cnt );     /* Initialize variable arguments. */
 8003ae2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ae6:	60fb      	str	r3, [r7, #12]
		for(uint8_t index=0; index<cnt ;index++){
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75bb      	strb	r3, [r7, #22]
 8003aec:	e013      	b.n	8003b16 <write_n+0x48>
			data = va_arg(marker, int);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	60fa      	str	r2, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	74fb      	strb	r3, [r7, #19]
			crc_update(hroboClaw, data);
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ffa0 	bl	8003a44 <crc_update>
			write(hroboClaw, &data);
 8003b04:	f107 0313 	add.w	r3, r7, #19
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f836 	bl	8003b7c <write>
		for(uint8_t index=0; index<cnt ;index++){
 8003b10:	7dbb      	ldrb	r3, [r7, #22]
 8003b12:	3301      	adds	r3, #1
 8003b14:	75bb      	strb	r3, [r7, #22]
 8003b16:	7dba      	ldrb	r2, [r7, #22]
 8003b18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d3e6      	bcc.n	8003aee <write_n+0x20>
		}
		va_end( marker );              /* Reset variable arguments.      */
		uint16_t crc = crc_get(hroboClaw);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ffc9 	bl	8003ab8 <crc_get>
 8003b26:	4603      	mov	r3, r0
 8003b28:	82bb      	strh	r3, [r7, #20]
		temp = crc>>8;
 8003b2a:	8abb      	ldrh	r3, [r7, #20]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	74bb      	strb	r3, [r7, #18]
		write(hroboClaw, &temp);
 8003b34:	f107 0312 	add.w	r3, r7, #18
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f81e 	bl	8003b7c <write>
		temp = (uint8_t)crc;
 8003b40:	8abb      	ldrh	r3, [r7, #20]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	74bb      	strb	r3, [r7, #18]
		write(hroboClaw,  &temp);
 8003b46:	f107 0312 	add.w	r3, r7, #18
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f815 	bl	8003b7c <write>
		if(read_timeout(hroboClaw)==0xFF)
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f822 	bl	8003b9c <read_timeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2bff      	cmp	r3, #255	@ 0xff
 8003b5c:	d101      	bne.n	8003b62 <write_n+0x94>
			return  ROBOCLAW_OK ;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e005      	b.n	8003b6e <write_n+0xa0>
	}while(trys--);
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	1e5a      	subs	r2, r3, #1
 8003b66:	75fa      	strb	r2, [r7, #23]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1b7      	bne.n	8003adc <write_n+0xe>
	return  ROBOCLAW_ERROR;
 8003b6c:	2301      	movs	r3, #1
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b78:	b003      	add	sp, #12
 8003b7a:	4770      	bx	lr

08003b7c <write>:

static void write(RoboClaw_HandleTypeDef* hroboClaw, uint8_t *byte){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	serial_write(hroboClaw->hserial, byte, SEND_BYTE_LEN);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fa02 	bl	8003f98 <serial_write>
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <read_timeout>:

static int read(RoboClaw_HandleTypeDef* hroboClaw){
	return serial_read(hroboClaw->hserial);
}

static int read_timeout(RoboClaw_HandleTypeDef* hroboClaw){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick();
 8003ba4:	f7fd f886 	bl	8000cb4 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]
	// Empty buffer?
	while(!serial_available(hroboClaw->hserial)){
 8003baa:	e00b      	b.n	8003bc4 <read_timeout+0x28>
		if((HAL_GetTick()-start)>=hroboClaw->timeout){
 8003bac:	f7fd f882 	bl	8000cb4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad2      	subs	r2, r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <read_timeout+0x28>
			return -1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc2:	e00d      	b.n	8003be0 <read_timeout+0x44>
	while(!serial_available(hroboClaw->hserial)){
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fa11 	bl	8003ff0 <serial_available>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0eb      	beq.n	8003bac <read_timeout+0x10>
		}
	}
	return serial_read(hroboClaw->hserial);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fa1c 	bl	8004016 <serial_read>
 8003bde:	4603      	mov	r3, r0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <Read4_1>:

static uint32_t Read4_1(RoboClaw_HandleTypeDef* hroboClaw, uint8_t cmd, uint8_t *status, bool *valid){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	72fb      	strb	r3, [r7, #11]

	if(valid)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <Read4_1+0x1c>
		*valid = false;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]

	uint32_t value=0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
	uint8_t trys=MAXRETRY;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	76fb      	strb	r3, [r7, #27]
	int16_t data;
	do{

		crc_clear(hroboClaw);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff0d 	bl	8003a2c <crc_clear>
		write(hroboClaw, &hroboClaw->packetserial_address);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	330c      	adds	r3, #12
 8003c16:	4619      	mov	r1, r3
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ffaf 	bl	8003b7c <write>
		crc_update(hroboClaw, hroboClaw->packetserial_address);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	7b1b      	ldrb	r3, [r3, #12]
 8003c22:	4619      	mov	r1, r3
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ff0d 	bl	8003a44 <crc_update>
		write(hroboClaw, &cmd);
 8003c2a:	f107 030b 	add.w	r3, r7, #11
 8003c2e:	4619      	mov	r1, r3
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff ffa3 	bl	8003b7c <write>
		crc_update(hroboClaw, cmd);
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff02 	bl	8003a44 <crc_update>

		data = read_timeout(hroboClaw);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7ff ffab 	bl	8003b9c <read_timeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	833b      	strh	r3, [r7, #24]
		crc_update(hroboClaw, data);
 8003c4a:	8b3b      	ldrh	r3, [r7, #24]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	4619      	mov	r1, r3
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fef7 	bl	8003a44 <crc_update>
		value=(uint32_t)data<<24;
 8003c56:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c5a:	061b      	lsls	r3, r3, #24
 8003c5c:	61fb      	str	r3, [r7, #28]

		if(data!=-1){
 8003c5e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d010      	beq.n	8003c8a <Read4_1+0xa2>
			data = read_timeout(hroboClaw);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff ff97 	bl	8003b9c <read_timeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	833b      	strh	r3, [r7, #24]
			crc_update(hroboClaw, data);
 8003c72:	8b3b      	ldrh	r3, [r7, #24]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4619      	mov	r1, r3
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fee3 	bl	8003a44 <crc_update>
			value|=(uint32_t)data<<16;
 8003c7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61fb      	str	r3, [r7, #28]
		}

		if(data!=-1){
 8003c8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d010      	beq.n	8003cb6 <Read4_1+0xce>
			data = read_timeout(hroboClaw);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff ff81 	bl	8003b9c <read_timeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	833b      	strh	r3, [r7, #24]
			crc_update(hroboClaw, data);
 8003c9e:	8b3b      	ldrh	r3, [r7, #24]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fecd 	bl	8003a44 <crc_update>
			value|=(uint32_t)data<<8;
 8003caa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]
		}

		if(data!=-1){
 8003cb6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d00f      	beq.n	8003ce0 <Read4_1+0xf8>
			data = read_timeout(hroboClaw);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7ff ff6b 	bl	8003b9c <read_timeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	833b      	strh	r3, [r7, #24]
			crc_update(hroboClaw, data);
 8003cca:	8b3b      	ldrh	r3, [r7, #24]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff feb7 	bl	8003a44 <crc_update>
			value|=(uint32_t)data;
 8003cd6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61fb      	str	r3, [r7, #28]
		}

		if(data!=-1){
 8003ce0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d011      	beq.n	8003d0e <Read4_1+0x126>
			data = read_timeout(hroboClaw);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff ff56 	bl	8003b9c <read_timeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	833b      	strh	r3, [r7, #24]
			crc_update(hroboClaw, data);
 8003cf4:	8b3b      	ldrh	r3, [r7, #24]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff fea2 	bl	8003a44 <crc_update>
			if(status)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <Read4_1+0x126>
				*status = data;
 8003d06:	8b3b      	ldrh	r3, [r7, #24]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	701a      	strb	r2, [r3, #0]
		}

		if(data!=-1){
 8003d0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d029      	beq.n	8003d6c <Read4_1+0x184>
			uint16_t ccrc;
			data = read_timeout(hroboClaw);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff ff3f 	bl	8003b9c <read_timeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	833b      	strh	r3, [r7, #24]
			if(data!=-1){
 8003d22:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d01f      	beq.n	8003d6c <Read4_1+0x184>
				ccrc = data << 8;
 8003d2c:	8b3b      	ldrh	r3, [r7, #24]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	82fb      	strh	r3, [r7, #22]
				data = read_timeout(hroboClaw);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff ff32 	bl	8003b9c <read_timeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	833b      	strh	r3, [r7, #24]
				if(data!=-1){
 8003d3c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d012      	beq.n	8003d6c <Read4_1+0x184>
					ccrc |= data;
 8003d46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003d4a:	8b3b      	ldrh	r3, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b21b      	sxth	r3, r3
 8003d50:	82fb      	strh	r3, [r7, #22]
					if(crc_get(hroboClaw)==ccrc){
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff feb0 	bl	8003ab8 <crc_get>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	8afb      	ldrh	r3, [r7, #22]
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d104      	bne.n	8003d6c <Read4_1+0x184>
						*valid = true;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
						return value;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	e006      	b.n	8003d7a <Read4_1+0x192>
					}
				}
			}
		}
	}while(trys--);
 8003d6c:	7efb      	ldrb	r3, [r7, #27]
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	76fa      	strb	r2, [r7, #27]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f47f af4a 	bne.w	8003c0c <Read4_1+0x24>

	return false;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <SpeedAccelDeccelPositionM1>:
	uint32_t kp=kp_fp*1024;
	uint32_t ki=ki_fp*1024;
	uint32_t kd=kd_fp*1024;
	return write_n(hroboClaw, 30, hroboClaw->packetserial_address,SETM2POSPID,SetDWORDval(kd),SetDWORDval(kp),SetDWORDval(ki),SetDWORDval(kiMax),SetDWORDval(deadzone),SetDWORDval(min),SetDWORDval(max));
}
ROBOCLAW_StatusTypeDef SpeedAccelDeccelPositionM1(RoboClaw_HandleTypeDef* hroboClaw,uint32_t accel,uint32_t speed,uint32_t deccel,uint32_t position,uint8_t flag){
 8003d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d84:	b0a1      	sub	sp, #132	@ 0x84
 8003d86:	af12      	add	r7, sp, #72	@ 0x48
 8003d88:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d8a:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	return write_n(hroboClaw, 19, hroboClaw->packetserial_address,M1SPEEDACCELDECCELPOS,SetDWORDval(accel),SetDWORDval(speed),SetDWORDval(deccel),SetDWORDval(position),flag);
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d92:	7b1b      	ldrb	r3, [r3, #12]
 8003d94:	469c      	mov	ip, r3
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	0e1b      	lsrs	r3, r3, #24
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461e      	mov	r6, r3
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	0e1b      	lsrs	r3, r3, #24
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd4:	0e1b      	lsrs	r3, r3, #24
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df2:	0e1b      	lsrs	r3, r3, #24
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461c      	mov	r4, r3
 8003df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4618      	mov	r0, r3
 8003e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4619      	mov	r1, r3
 8003e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003e12:	9310      	str	r3, [sp, #64]	@ 0x40
 8003e14:	920f      	str	r2, [sp, #60]	@ 0x3c
 8003e16:	910e      	str	r1, [sp, #56]	@ 0x38
 8003e18:	900d      	str	r0, [sp, #52]	@ 0x34
 8003e1a:	940c      	str	r4, [sp, #48]	@ 0x30
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	920a      	str	r2, [sp, #40]	@ 0x28
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	9208      	str	r2, [sp, #32]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	9207      	str	r2, [sp, #28]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	9206      	str	r2, [sp, #24]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	9205      	str	r2, [sp, #20]
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	9204      	str	r2, [sp, #16]
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	9203      	str	r2, [sp, #12]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	9302      	str	r3, [sp, #8]
 8003e44:	9601      	str	r6, [sp, #4]
 8003e46:	9500      	str	r5, [sp, #0]
 8003e48:	2341      	movs	r3, #65	@ 0x41
 8003e4a:	4662      	mov	r2, ip
 8003e4c:	2113      	movs	r1, #19
 8003e4e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e50:	f7ff fe3d 	bl	8003ace <write_n>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	373c      	adds	r7, #60	@ 0x3c
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e5e <ReadEncM1>:



/* roboClaw get commands */

uint32_t ReadEncM1(RoboClaw_HandleTypeDef* hroboClaw, uint8_t *status, bool *valid){
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
	return Read4_1(hroboClaw, GETM1ENC, status, valid);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	2110      	movs	r1, #16
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff feb9 	bl	8003be8 <Read4_1>
 8003e76:	4603      	mov	r3, r0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <serial_init>:
		.application_reg_Rx = &USART3_Application_Reg_Tx,
		.WriteLock = SERIAL_WRITE_UNLOCKED,
		.ReadLock = SERIAL_READ_UNLOCKED
};
#endif
SERIAL_HandleTypeDef* serial_init(UART_HandleTypeDef *huartx) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef *serial_handler = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

#ifdef USE_USART1
		if(huartx->Instance == USART1){
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a38      	ldr	r2, [pc, #224]	@ (8003f74 <serial_init+0xf4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d11f      	bne.n	8003ed6 <serial_init+0x56>

			USART1_Serial_Handler = &(__usart1_serial_handler);
 8003e96:	4b38      	ldr	r3, [pc, #224]	@ (8003f78 <serial_init+0xf8>)
 8003e98:	4a38      	ldr	r2, [pc, #224]	@ (8003f7c <serial_init+0xfc>)
 8003e9a:	601a      	str	r2, [r3, #0]

			USART1_Serial_Handler->huartx = huartx;
 8003e9c:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <serial_init+0xf8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART1_Serial_Handler->buffer_Rx);
 8003ea4:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <serial_init+0xf8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f978 	bl	80041a0 <ring_buffer_init>
			ring_buffer_init(USART1_Serial_Handler->buffer_Tx);
 8003eb0:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <serial_init+0xf8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f972 	bl	80041a0 <ring_buffer_init>
			serial_handler = USART1_Serial_Handler;
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8003f78 <serial_init+0xf8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART1_Serial_Handler->huartx, USART1_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <serial_init+0xf8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <serial_init+0xf8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f7fe fe93 	bl	8002bfc <HAL_UART_Receive_DMA>
		}
#endif
#ifdef USE_USART2
		if(huartx->Instance == USART2){
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a29      	ldr	r2, [pc, #164]	@ (8003f80 <serial_init+0x100>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d11f      	bne.n	8003f20 <serial_init+0xa0>

			USART2_Serial_Handler = &(__usart2_serial_handler);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <serial_init+0x104>)
 8003ee2:	4a29      	ldr	r2, [pc, #164]	@ (8003f88 <serial_init+0x108>)
 8003ee4:	601a      	str	r2, [r3, #0]

			USART2_Serial_Handler->huartx = huartx;
 8003ee6:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <serial_init+0x104>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART2_Serial_Handler->buffer_Rx);
 8003eee:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <serial_init+0x104>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f953 	bl	80041a0 <ring_buffer_init>
			ring_buffer_init(USART2_Serial_Handler->buffer_Tx);
 8003efa:	4b22      	ldr	r3, [pc, #136]	@ (8003f84 <serial_init+0x104>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f94d 	bl	80041a0 <ring_buffer_init>
			serial_handler = USART2_Serial_Handler;
 8003f06:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <serial_init+0x104>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART2_Serial_Handler->huartx, USART2_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <serial_init+0x104>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <serial_init+0x104>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f7fe fe6e 	bl	8002bfc <HAL_UART_Receive_DMA>
		}
#endif
#ifdef USE_USART3
		if(huartx->Instance == USART3){
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <serial_init+0x10c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d11f      	bne.n	8003f6a <serial_init+0xea>

			USART3_Serial_Handler = &(__usart3_serial_handler);
 8003f2a:	4b19      	ldr	r3, [pc, #100]	@ (8003f90 <serial_init+0x110>)
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <serial_init+0x114>)
 8003f2e:	601a      	str	r2, [r3, #0]

			USART3_Serial_Handler->huartx = huartx;
 8003f30:	4b17      	ldr	r3, [pc, #92]	@ (8003f90 <serial_init+0x110>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART3_Serial_Handler->buffer_Rx);
 8003f38:	4b15      	ldr	r3, [pc, #84]	@ (8003f90 <serial_init+0x110>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f92e 	bl	80041a0 <ring_buffer_init>
			ring_buffer_init(USART3_Serial_Handler->buffer_Tx);
 8003f44:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <serial_init+0x110>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f928 	bl	80041a0 <ring_buffer_init>
			serial_handler = USART3_Serial_Handler;
 8003f50:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <serial_init+0x110>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART3_Serial_Handler->huartx, USART3_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8003f56:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <serial_init+0x110>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <serial_init+0x110>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2201      	movs	r2, #1
 8003f64:	4619      	mov	r1, r3
 8003f66:	f7fe fe49 	bl	8002bfc <HAL_UART_Receive_DMA>
		}
#endif

	return serial_handler;
 8003f6a:	68fb      	ldr	r3, [r7, #12]

}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40013800 	.word	0x40013800
 8003f78:	200003b8 	.word	0x200003b8
 8003f7c:	20000014 	.word	0x20000014
 8003f80:	40004400 	.word	0x40004400
 8003f84:	200007d8 	.word	0x200007d8
 8003f88:	20000030 	.word	0x20000030
 8003f8c:	40004800 	.word	0x40004800
 8003f90:	20000bf8 	.word	0x20000bf8
 8003f94:	2000004c 	.word	0x2000004c

08003f98 <serial_write>:

void serial_write(SERIAL_HandleTypeDef* hserial, uint8_t *pData, uint16_t len) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]

	if (ring_buffer_is_empty(hserial->buffer_Tx)) {
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f8ca 	bl	8004144 <ring_buffer_is_empty>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d011      	beq.n	8003fda <serial_write+0x42>

			if (HAL_UART_Transmit_DMA(hserial->huartx, pData, len) != HAL_OK) {
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fdac 	bl	8002b1c <HAL_UART_Transmit_DMA>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <serial_write+0x50>
				ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f931 	bl	800423a <ring_buffer_queue_arr>
			}
	} else {
			ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
	}
//	ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
}
 8003fd8:	e006      	b.n	8003fe8 <serial_write+0x50>
			ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f929 	bl	800423a <ring_buffer_queue_arr>
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <serial_available>:

uint8_t serial_available(SERIAL_HandleTypeDef* hserial) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

	return !ring_buffer_is_empty(hserial->buffer_Rx);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f8a1 	bl	8004144 <ring_buffer_is_empty>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <serial_read>:

uint8_t serial_read(SERIAL_HandleTypeDef* hserial) {
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]

		if (!ring_buffer_is_empty(hserial->buffer_Rx)) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f88e 	bl	8004144 <ring_buffer_is_empty>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <serial_read+0x30>
			ring_buffer_dequeue(hserial->buffer_Rx, hserial->application_reg_Rx);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 f91c 	bl	8004276 <ring_buffer_dequeue>
			return *(hserial->application_reg_Rx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	e000      	b.n	8004048 <serial_read+0x32>
		}

		return '\0';
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f843 	bl	80040e4 <get_serial_handler>
 800405e:	60f8      	str	r0, [r7, #12]

	if (!ring_buffer_is_empty(serial_handler->buffer_Tx)) {
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f86d 	bl	8004144 <ring_buffer_is_empty>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10e      	bne.n	800408e <HAL_UART_TxCpltCallback+0x3e>

		  ring_buffer_dequeue(serial_handler->buffer_Tx, serial_handler->hal_reg_Tx);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 f8fb 	bl	8004276 <ring_buffer_dequeue>
		  HAL_UART_Transmit_DMA(huart, serial_handler->hal_reg_Tx, PRIMARY_REG_SIZE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fe fd47 	bl	8002b1c <HAL_UART_Transmit_DMA>
	}
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f820 	bl	80040e4 <get_serial_handler>
 80040a4:	60f8      	str	r0, [r7, #12]

	ring_buffer_queue_arr(serial_handler->buffer_Rx, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6898      	ldr	r0, [r3, #8]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2201      	movs	r2, #1
 80040b0:	4619      	mov	r1, r3
 80040b2:	f000 f8c2 	bl	800423a <ring_buffer_queue_arr>
	HAL_UART_Receive_DMA(huart, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2201      	movs	r2, #1
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fe fd9c 	bl	8002bfc <HAL_UART_Receive_DMA>
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44

	}
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
	...

080040e4 <get_serial_handler>:

extern SERIAL_HandleTypeDef* USART1_Serial_Handler;
extern SERIAL_HandleTypeDef* USART2_Serial_Handler;
extern SERIAL_HandleTypeDef* USART3_Serial_Handler;

SERIAL_HandleTypeDef* get_serial_handler(UART_HandleTypeDef *huartx){
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* ret_serial_handler = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]

#ifdef USE_USART1
	if(huartx->Instance == USART1){
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <get_serial_handler+0x48>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d102      	bne.n	8004100 <get_serial_handler+0x1c>
		ret_serial_handler = USART1_Serial_Handler;
 80040fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <get_serial_handler+0x4c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART2
	if(huartx->Instance == USART2){
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0b      	ldr	r2, [pc, #44]	@ (8004134 <get_serial_handler+0x50>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d102      	bne.n	8004110 <get_serial_handler+0x2c>
		ret_serial_handler = USART2_Serial_Handler;
 800410a:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <get_serial_handler+0x54>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART3
	if(huartx->Instance == USART3){
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a09      	ldr	r2, [pc, #36]	@ (800413c <get_serial_handler+0x58>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d102      	bne.n	8004120 <get_serial_handler+0x3c>
		ret_serial_handler = USART3_Serial_Handler;
 800411a:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <get_serial_handler+0x5c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]
	}
#endif
	return ret_serial_handler;
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	40013800 	.word	0x40013800
 8004130:	200003b8 	.word	0x200003b8
 8004134:	40004400 	.word	0x40004400
 8004138:	200007d8 	.word	0x200007d8
 800413c:	40004800 	.word	0x40004800
 8004140:	20000bf8 	.word	0x20000bf8

08004144 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 2202 	ldrh.w	r2, [r3, #514]	@ 0x202
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8004158:	429a      	cmp	r2, r3
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 2202 	ldrh.w	r2, [r3, #514]	@ 0x202
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	b29b      	uxth	r3, r3
 8004184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004188:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800418c:	4293      	cmp	r3, r2
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
  buffer->head_index = 0;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

  /** debug features initialize. */
  buffer->byte_enqueue_hit = 0;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  buffer->byte_dequeue_hit = 0;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, uint8_t data) {
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ffc4 	bl	800416c <ring_buffer_is_full>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 80041f0:	3301      	adds	r3, #1
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8004206:	4619      	mov	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8004214:	3301      	adds	r3, #1
 8004216:	b29b      	uxth	r3, r3
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

  /** debug features update. */
  buffer->byte_enqueue_hit ++;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, uint8_t *data, ring_buffer_size_t size) {
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 8004248:	2300      	movs	r3, #0
 800424a:	82fb      	strh	r3, [r7, #22]
 800424c:	e00a      	b.n	8004264 <ring_buffer_queue_arr+0x2a>
    ring_buffer_queue(buffer, data[i]);
 800424e:	8afb      	ldrh	r3, [r7, #22]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	4413      	add	r3, r2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	4619      	mov	r1, r3
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff ffba 	bl	80041d2 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 800425e:	8afb      	ldrh	r3, [r7, #22]
 8004260:	3301      	adds	r3, #1
 8004262:	82fb      	strh	r3, [r7, #22]
 8004264:	8afa      	ldrh	r2, [r7, #22]
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	429a      	cmp	r2, r3
 800426a:	d3f0      	bcc.n	800424e <ring_buffer_queue_arr+0x14>
  }
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, uint8_t *data) {
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff5f 	bl	8004144 <ring_buffer_is_empty>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 800428c:	2300      	movs	r3, #0
 800428e:	e01a      	b.n	80042c6 <ring_buffer_dequeue+0x50>
  }

  *data = buffer->buffer[buffer->tail_index];
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	5c9a      	ldrb	r2, [r3, r2]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 80042a6:	3301      	adds	r3, #1
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200

  /** debug features update. */
  buffer->byte_dequeue_hit ++;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208

  return 1;
 80042c4:	2301      	movs	r3, #1
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <memset>:
 80042ce:	4603      	mov	r3, r0
 80042d0:	4402      	add	r2, r0
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d100      	bne.n	80042d8 <memset+0xa>
 80042d6:	4770      	bx	lr
 80042d8:	f803 1b01 	strb.w	r1, [r3], #1
 80042dc:	e7f9      	b.n	80042d2 <memset+0x4>
	...

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	2600      	movs	r6, #0
 80042e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004318 <__libc_init_array+0x38>)
 80042e6:	4c0d      	ldr	r4, [pc, #52]	@ (800431c <__libc_init_array+0x3c>)
 80042e8:	1b64      	subs	r4, r4, r5
 80042ea:	10a4      	asrs	r4, r4, #2
 80042ec:	42a6      	cmp	r6, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	f000 f81a 	bl	8004328 <_init>
 80042f4:	2600      	movs	r6, #0
 80042f6:	4d0a      	ldr	r5, [pc, #40]	@ (8004320 <__libc_init_array+0x40>)
 80042f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004324 <__libc_init_array+0x44>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	42a6      	cmp	r6, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f855 3b04 	ldr.w	r3, [r5], #4
 8004308:	4798      	blx	r3
 800430a:	3601      	adds	r6, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004312:	4798      	blx	r3
 8004314:	3601      	adds	r6, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	0800436c 	.word	0x0800436c
 800431c:	0800436c 	.word	0x0800436c
 8004320:	0800436c 	.word	0x0800436c
 8004324:	08004370 	.word	0x08004370

08004328 <_init>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr

08004334 <_fini>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr
