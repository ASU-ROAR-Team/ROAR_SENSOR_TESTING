
Rover_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042fc  080042fc  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080042fc  080042fc  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080042fc  080042fc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000052fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004304  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc4  20000068  0800436c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  0800436c  0000702c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca5e  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  00012aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00014cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ac  00000000  00000000  00015820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e02  00000000  00000000  000160cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c858  00000000  00000000  0002dece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b61  00000000  00000000  0003a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1287  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb0  00000000  00000000  000c12cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c417c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080042b8 	.word	0x080042b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080042b8 	.word	0x080042b8

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
CAN_FilterTypeDef sFilterConfig;
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];
uint8_t delayLED;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000154:	4b04      	ldr	r3, [pc, #16]	@ (8000168 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>)
 8000156:	4a05      	ldr	r2, [pc, #20]	@ (800016c <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8000158:	2101      	movs	r1, #1
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f001 f8cb 	bl	80012f6 <HAL_CAN_GetRxMessage>
}
 8000160:	bf00      	nop
 8000162:	3708      	adds	r7, #8
 8000164:	46bd      	mov	sp, r7
 8000166:	bd80      	pop	{r7, pc}
 8000168:	200003a4 	.word	0x200003a4
 800016c:	20000388 	.word	0x20000388

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000174:	f000 fd62 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000178:	f000 f8d0 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017c:	f000 fa0e 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 8000180:	f000 f9c6 	bl	8000510 <MX_DMA_Init>
  MX_CAN_Init();
 8000184:	f000 f910 	bl	80003a8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000188:	f000 f944 	bl	8000414 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800018c:	f000 f96c 	bl	8000468 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000190:	f000 f994 	bl	80004bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize RoboClaws */
	hserial_uart1 = serial_init(&huart1);
 8000194:	4851      	ldr	r0, [pc, #324]	@ (80002dc <main+0x16c>)
 8000196:	f003 fe3b 	bl	8003e10 <serial_init>
 800019a:	4603      	mov	r3, r0
 800019c:	4a50      	ldr	r2, [pc, #320]	@ (80002e0 <main+0x170>)
 800019e:	6013      	str	r3, [r2, #0]
	hroboclaw_mc1.hserial = hserial_uart1;
 80001a0:	4b4f      	ldr	r3, [pc, #316]	@ (80002e0 <main+0x170>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a4f      	ldr	r2, [pc, #316]	@ (80002e4 <main+0x174>)
 80001a6:	6093      	str	r3, [r2, #8]
	hroboclaw_mc1.packetserial_address = 0x80;
 80001a8:	4b4e      	ldr	r3, [pc, #312]	@ (80002e4 <main+0x174>)
 80001aa:	2280      	movs	r2, #128	@ 0x80
 80001ac:	731a      	strb	r2, [r3, #12]

	hserial_uart2 = serial_init(&huart2);
 80001ae:	484e      	ldr	r0, [pc, #312]	@ (80002e8 <main+0x178>)
 80001b0:	f003 fe2e 	bl	8003e10 <serial_init>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4a4d      	ldr	r2, [pc, #308]	@ (80002ec <main+0x17c>)
 80001b8:	6013      	str	r3, [r2, #0]
	hroboclaw_mc2.hserial = hserial_uart2;
 80001ba:	4b4c      	ldr	r3, [pc, #304]	@ (80002ec <main+0x17c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a4c      	ldr	r2, [pc, #304]	@ (80002f0 <main+0x180>)
 80001c0:	6093      	str	r3, [r2, #8]
	hroboclaw_mc2.packetserial_address = 0x82;
 80001c2:	4b4b      	ldr	r3, [pc, #300]	@ (80002f0 <main+0x180>)
 80001c4:	2282      	movs	r2, #130	@ 0x82
 80001c6:	731a      	strb	r2, [r3, #12]

	hserial_uart3 = serial_init(&huart3);
 80001c8:	484a      	ldr	r0, [pc, #296]	@ (80002f4 <main+0x184>)
 80001ca:	f003 fe21 	bl	8003e10 <serial_init>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a49      	ldr	r2, [pc, #292]	@ (80002f8 <main+0x188>)
 80001d2:	6013      	str	r3, [r2, #0]
	hroboclaw_mc3.hserial = hserial_uart3;
 80001d4:	4b48      	ldr	r3, [pc, #288]	@ (80002f8 <main+0x188>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a48      	ldr	r2, [pc, #288]	@ (80002fc <main+0x18c>)
 80001da:	6093      	str	r3, [r2, #8]
	hroboclaw_mc3.packetserial_address = 0x84;
 80001dc:	4b47      	ldr	r3, [pc, #284]	@ (80002fc <main+0x18c>)
 80001de:	2284      	movs	r2, #132	@ 0x84
 80001e0:	731a      	strb	r2, [r3, #12]

	HAL_CAN_Start(&hcan);
 80001e2:	4847      	ldr	r0, [pc, #284]	@ (8000300 <main+0x190>)
 80001e4:	f000 ff74 	bl	80010d0 <HAL_CAN_Start>
    TxHeader.DLC = 8;  // data length
 80001e8:	4b46      	ldr	r3, [pc, #280]	@ (8000304 <main+0x194>)
 80001ea:	2208      	movs	r2, #8
 80001ec:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 80001ee:	4b45      	ldr	r3, [pc, #276]	@ (8000304 <main+0x194>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80001f4:	4b43      	ldr	r3, [pc, #268]	@ (8000304 <main+0x194>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 80001fa:	4b42      	ldr	r3, [pc, #264]	@ (8000304 <main+0x194>)
 80001fc:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 8000200:	601a      	str	r2, [r3, #0]


    HAL_CAN_Start(&hcan);
 8000202:	483f      	ldr	r0, [pc, #252]	@ (8000300 <main+0x190>)
 8000204:	f000 ff64 	bl	80010d0 <HAL_CAN_Start>
	// Configure the filter
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000208:	4b3f      	ldr	r3, [pc, #252]	@ (8000308 <main+0x198>)
 800020a:	2201      	movs	r2, #1
 800020c:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800020e:	4b3e      	ldr	r3, [pc, #248]	@ (8000308 <main+0x198>)
 8000210:	2201      	movs	r2, #1
 8000212:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000214:	4b3c      	ldr	r3, [pc, #240]	@ (8000308 <main+0x198>)
 8000216:	2200      	movs	r2, #0
 8000218:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterIdHigh = 0x6A5<<5;
 800021a:	4b3b      	ldr	r3, [pc, #236]	@ (8000308 <main+0x198>)
 800021c:	f24d 42a0 	movw	r2, #54432	@ 0xd4a0
 8000220:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000222:	4b39      	ldr	r3, [pc, #228]	@ (8000308 <main+0x198>)
 8000224:	2200      	movs	r2, #0
 8000226:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x7FF<<5; // SET 0 to unfilter
 8000228:	4b37      	ldr	r3, [pc, #220]	@ (8000308 <main+0x198>)
 800022a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800022e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000230:	4b35      	ldr	r3, [pc, #212]	@ (8000308 <main+0x198>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000236:	4b34      	ldr	r3, [pc, #208]	@ (8000308 <main+0x198>)
 8000238:	2201      	movs	r2, #1
 800023a:	61da      	str	r2, [r3, #28]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800023c:	4932      	ldr	r1, [pc, #200]	@ (8000308 <main+0x198>)
 800023e:	4830      	ldr	r0, [pc, #192]	@ (8000300 <main+0x190>)
 8000240:	f000 fe7d 	bl	8000f3e <HAL_CAN_ConfigFilter>
	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000244:	2110      	movs	r1, #16
 8000246:	482e      	ldr	r0, [pc, #184]	@ (8000300 <main+0x190>)
 8000248:	f001 f976 	bl	8001538 <HAL_CAN_ActivateNotification>

	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
	  HAL_Delay(1000);
	  */

	 HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800024c:	4b2f      	ldr	r3, [pc, #188]	@ (800030c <main+0x19c>)
 800024e:	4a30      	ldr	r2, [pc, #192]	@ (8000310 <main+0x1a0>)
 8000250:	492c      	ldr	r1, [pc, #176]	@ (8000304 <main+0x194>)
 8000252:	482b      	ldr	r0, [pc, #172]	@ (8000300 <main+0x190>)
 8000254:	f000 ff80 	bl	8001158 <HAL_CAN_AddTxMessage>

	  motorsSpeeds[0] = RxData[0];
 8000258:	4b2e      	ldr	r3, [pc, #184]	@ (8000314 <main+0x1a4>)
 800025a:	781a      	ldrb	r2, [r3, #0]
 800025c:	4b2e      	ldr	r3, [pc, #184]	@ (8000318 <main+0x1a8>)
 800025e:	701a      	strb	r2, [r3, #0]
	  motorsSpeeds[1] = RxData[1];
 8000260:	4b2c      	ldr	r3, [pc, #176]	@ (8000314 <main+0x1a4>)
 8000262:	785a      	ldrb	r2, [r3, #1]
 8000264:	4b2c      	ldr	r3, [pc, #176]	@ (8000318 <main+0x1a8>)
 8000266:	705a      	strb	r2, [r3, #1]
	  motorsSpeeds[2] = RxData[2];
 8000268:	4b2a      	ldr	r3, [pc, #168]	@ (8000314 <main+0x1a4>)
 800026a:	789a      	ldrb	r2, [r3, #2]
 800026c:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <main+0x1a8>)
 800026e:	709a      	strb	r2, [r3, #2]
	  motorsSpeeds[3] = RxData[3];
 8000270:	4b28      	ldr	r3, [pc, #160]	@ (8000314 <main+0x1a4>)
 8000272:	78da      	ldrb	r2, [r3, #3]
 8000274:	4b28      	ldr	r3, [pc, #160]	@ (8000318 <main+0x1a8>)
 8000276:	70da      	strb	r2, [r3, #3]
	  motorsSpeeds[4] = RxData[4];
 8000278:	4b26      	ldr	r3, [pc, #152]	@ (8000314 <main+0x1a4>)
 800027a:	791a      	ldrb	r2, [r3, #4]
 800027c:	4b26      	ldr	r3, [pc, #152]	@ (8000318 <main+0x1a8>)
 800027e:	711a      	strb	r2, [r3, #4]
	  motorsSpeeds[5] = RxData[5];
 8000280:	4b24      	ldr	r3, [pc, #144]	@ (8000314 <main+0x1a4>)
 8000282:	795a      	ldrb	r2, [r3, #5]
 8000284:	4b24      	ldr	r3, [pc, #144]	@ (8000318 <main+0x1a8>)
 8000286:	715a      	strb	r2, [r3, #5]


	  ForwardBackwardM1(&hroboclaw_mc1, RxData[3]);
 8000288:	4b22      	ldr	r3, [pc, #136]	@ (8000314 <main+0x1a4>)
 800028a:	78db      	ldrb	r3, [r3, #3]
 800028c:	4619      	mov	r1, r3
 800028e:	4815      	ldr	r0, [pc, #84]	@ (80002e4 <main+0x174>)
 8000290:	f003 fd94 	bl	8003dbc <ForwardBackwardM1>
	  ForwardBackwardM2(&hroboclaw_mc1, RxData[0]);
 8000294:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <main+0x1a4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4619      	mov	r1, r3
 800029a:	4812      	ldr	r0, [pc, #72]	@ (80002e4 <main+0x174>)
 800029c:	f003 fda3 	bl	8003de6 <ForwardBackwardM2>

	  ForwardBackwardM1(&hroboclaw_mc2, RxData[1]);
 80002a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000314 <main+0x1a4>)
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	4619      	mov	r1, r3
 80002a6:	4812      	ldr	r0, [pc, #72]	@ (80002f0 <main+0x180>)
 80002a8:	f003 fd88 	bl	8003dbc <ForwardBackwardM1>
	  ForwardBackwardM2(&hroboclaw_mc2, RxData[4]);
 80002ac:	4b19      	ldr	r3, [pc, #100]	@ (8000314 <main+0x1a4>)
 80002ae:	791b      	ldrb	r3, [r3, #4]
 80002b0:	4619      	mov	r1, r3
 80002b2:	480f      	ldr	r0, [pc, #60]	@ (80002f0 <main+0x180>)
 80002b4:	f003 fd97 	bl	8003de6 <ForwardBackwardM2>

	  ForwardBackwardM1(&hroboclaw_mc3, RxData[2]);
 80002b8:	4b16      	ldr	r3, [pc, #88]	@ (8000314 <main+0x1a4>)
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	4619      	mov	r1, r3
 80002be:	480f      	ldr	r0, [pc, #60]	@ (80002fc <main+0x18c>)
 80002c0:	f003 fd7c 	bl	8003dbc <ForwardBackwardM1>
	  ForwardBackwardM2(&hroboclaw_mc3, RxData[5]);
 80002c4:	4b13      	ldr	r3, [pc, #76]	@ (8000314 <main+0x1a4>)
 80002c6:	795b      	ldrb	r3, [r3, #5]
 80002c8:	4619      	mov	r1, r3
 80002ca:	480c      	ldr	r0, [pc, #48]	@ (80002fc <main+0x18c>)
 80002cc:	f003 fd8b 	bl	8003de6 <ForwardBackwardM2>

	  HAL_Delay(20);
 80002d0:	2014      	movs	r0, #20
 80002d2:	f000 fd15 	bl	8000d00 <HAL_Delay>
	 HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80002d6:	bf00      	nop
 80002d8:	e7b8      	b.n	800024c <main+0xdc>
 80002da:	bf00      	nop
 80002dc:	200000f0 	.word	0x200000f0
 80002e0:	20000084 	.word	0x20000084
 80002e4:	20000090 	.word	0x20000090
 80002e8:	20000138 	.word	0x20000138
 80002ec:	20000088 	.word	0x20000088
 80002f0:	200000a0 	.word	0x200000a0
 80002f4:	20000180 	.word	0x20000180
 80002f8:	2000008c 	.word	0x2000008c
 80002fc:	200000b0 	.word	0x200000b0
 8000300:	200000c8 	.word	0x200000c8
 8000304:	200003ac 	.word	0x200003ac
 8000308:	20000360 	.word	0x20000360
 800030c:	200003c4 	.word	0x200003c4
 8000310:	20000000 	.word	0x20000000
 8000314:	200003a4 	.word	0x200003a4
 8000318:	200000c0 	.word	0x200000c0

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	@ 0x40
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2228      	movs	r2, #40	@ 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f003 ff97 	bl	800425e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	2302      	movs	r3, #2
 8000352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000358:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800035e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f002 f863 	bl	8002430 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000370:	f000 f942 	bl	80005f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2302      	movs	r3, #2
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000380:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fad0 	bl	8002934 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800039a:	f000 f92d 	bl	80005f8 <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3740      	adds	r7, #64	@ 0x40
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003ac:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_CAN_Init+0x64>)
 80003ae:	4a18      	ldr	r2, [pc, #96]	@ (8000410 <MX_CAN_Init+0x68>)
 80003b0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_CAN_Init+0x64>)
 80003b4:	2212      	movs	r2, #18
 80003b6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_CAN_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003be:	4b13      	ldr	r3, [pc, #76]	@ (800040c <MX_CAN_Init+0x64>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <MX_CAN_Init+0x64>)
 80003c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003ca:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_CAN_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_CAN_Init+0x64>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <MX_CAN_Init+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <MX_CAN_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <MX_CAN_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <MX_CAN_Init+0x64>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <MX_CAN_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <MX_CAN_Init+0x64>)
 80003f8:	f000 fca6 	bl	8000d48 <HAL_CAN_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000402:	f000 f8f9 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200000c8 	.word	0x200000c8
 8000410:	40006400 	.word	0x40006400

08000414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000418:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800041a:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <MX_USART1_UART_Init+0x50>)
 800041c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800044c:	f002 fc00 	bl	8002c50 <HAL_UART_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000456:	f000 f8cf 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000f0 	.word	0x200000f0
 8000464:	40013800 	.word	0x40013800

08000468 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 800046e:	4a12      	ldr	r2, [pc, #72]	@ (80004b8 <MX_USART2_UART_Init+0x50>)
 8000470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000472:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 8000474:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800048c:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 800048e:	220c      	movs	r2, #12
 8000490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000492:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_USART2_UART_Init+0x4c>)
 80004a0:	f002 fbd6 	bl	8002c50 <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004aa:	f000 f8a5 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000138 	.word	0x20000138
 80004b8:	40004400 	.word	0x40004400

080004bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	@ (800050c <MX_USART3_UART_Init+0x50>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_USART3_UART_Init+0x4c>)
 80004f4:	f002 fbac 	bl	8002c50 <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004fe:	f000 f87b 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000180 	.word	0x20000180
 800050c:	40004800 	.word	0x40004800

08000510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000516:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <MX_DMA_Init+0x88>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a1f      	ldr	r2, [pc, #124]	@ (8000598 <MX_DMA_Init+0x88>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_DMA_Init+0x88>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	200c      	movs	r0, #12
 8000534:	f001 fb1f 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000538:	200c      	movs	r0, #12
 800053a:	f001 fb38 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200d      	movs	r0, #13
 8000544:	f001 fb17 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000548:	200d      	movs	r0, #13
 800054a:	f001 fb30 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200e      	movs	r0, #14
 8000554:	f001 fb0f 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000558:	200e      	movs	r0, #14
 800055a:	f001 fb28 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	200f      	movs	r0, #15
 8000564:	f001 fb07 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000568:	200f      	movs	r0, #15
 800056a:	f001 fb20 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2010      	movs	r0, #16
 8000574:	f001 faff 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000578:	2010      	movs	r0, #16
 800057a:	f001 fb18 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2011      	movs	r0, #17
 8000584:	f001 faf7 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000588:	2011      	movs	r0, #17
 800058a:	f001 fb10 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a13      	ldr	r2, [pc, #76]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <MX_GPIO_Init+0x58>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0308 	and.w	r3, r3, #8
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <Error_Handler+0x8>

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <HAL_MspInit+0x5c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a14      	ldr	r2, [pc, #80]	@ (8000660 <HAL_MspInit+0x5c>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <HAL_MspInit+0x5c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <HAL_MspInit+0x5c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a0e      	ldr	r2, [pc, #56]	@ (8000660 <HAL_MspInit+0x5c>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <HAL_MspInit+0x5c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_MspInit+0x60>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <HAL_MspInit+0x60>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	40021000 	.word	0x40021000
 8000664:	40010000 	.word	0x40010000

08000668 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <HAL_CAN_MspInit+0x9c>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d139      	bne.n	80006fc <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <HAL_CAN_MspInit+0xa0>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <HAL_CAN_MspInit+0xa0>)
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000692:	61d3      	str	r3, [r2, #28]
 8000694:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <HAL_CAN_MspInit+0xa0>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <HAL_CAN_MspInit+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a18      	ldr	r2, [pc, #96]	@ (8000708 <HAL_CAN_MspInit+0xa0>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <HAL_CAN_MspInit+0xa0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480f      	ldr	r0, [pc, #60]	@ (800070c <HAL_CAN_MspInit+0xa4>)
 80006ce:	f001 fd2b 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4809      	ldr	r0, [pc, #36]	@ (800070c <HAL_CAN_MspInit+0xa4>)
 80006e8:	f001 fd1e 	bl	8002128 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2015      	movs	r0, #21
 80006f2:	f001 fa40 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006f6:	2015      	movs	r0, #21
 80006f8:	f001 fa59 	bl	8001bae <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40006400 	.word	0x40006400
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a8b      	ldr	r2, [pc, #556]	@ (8000958 <HAL_UART_MspInit+0x248>)
 800072c:	4293      	cmp	r3, r2
 800072e:	f040 8087 	bne.w	8000840 <HAL_UART_MspInit+0x130>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000732:	4b8a      	ldr	r3, [pc, #552]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a89      	ldr	r2, [pc, #548]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b87      	ldr	r3, [pc, #540]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000746:	61fb      	str	r3, [r7, #28]
 8000748:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b84      	ldr	r3, [pc, #528]	@ (800095c <HAL_UART_MspInit+0x24c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a83      	ldr	r2, [pc, #524]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b81      	ldr	r3, [pc, #516]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4619      	mov	r1, r3
 8000776:	487a      	ldr	r0, [pc, #488]	@ (8000960 <HAL_UART_MspInit+0x250>)
 8000778:	f001 fcd6 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800077c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4619      	mov	r1, r3
 8000790:	4873      	ldr	r0, [pc, #460]	@ (8000960 <HAL_UART_MspInit+0x250>)
 8000792:	f001 fcc9 	bl	8002128 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000796:	4b73      	ldr	r3, [pc, #460]	@ (8000964 <HAL_UART_MspInit+0x254>)
 8000798:	4a73      	ldr	r2, [pc, #460]	@ (8000968 <HAL_UART_MspInit+0x258>)
 800079a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079c:	4b71      	ldr	r3, [pc, #452]	@ (8000964 <HAL_UART_MspInit+0x254>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a2:	4b70      	ldr	r3, [pc, #448]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007a8:	4b6e      	ldr	r3, [pc, #440]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ae:	4b6d      	ldr	r3, [pc, #436]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007b4:	4b6b      	ldr	r3, [pc, #428]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80007ba:	4b6a      	ldr	r3, [pc, #424]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007c0:	4b68      	ldr	r3, [pc, #416]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007c6:	4867      	ldr	r0, [pc, #412]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007c8:	f001 fa0c 	bl	8001be4 <HAL_DMA_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80007d2:	f7ff ff11 	bl	80005f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a62      	ldr	r2, [pc, #392]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007dc:	4a61      	ldr	r2, [pc, #388]	@ (8000964 <HAL_UART_MspInit+0x254>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80007e2:	4b62      	ldr	r3, [pc, #392]	@ (800096c <HAL_UART_MspInit+0x25c>)
 80007e4:	4a62      	ldr	r2, [pc, #392]	@ (8000970 <HAL_UART_MspInit+0x260>)
 80007e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007e8:	4b60      	ldr	r3, [pc, #384]	@ (800096c <HAL_UART_MspInit+0x25c>)
 80007ea:	2210      	movs	r2, #16
 80007ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ee:	4b5f      	ldr	r3, [pc, #380]	@ (800096c <HAL_UART_MspInit+0x25c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	@ (800096c <HAL_UART_MspInit+0x25c>)
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007fa:	4b5c      	ldr	r3, [pc, #368]	@ (800096c <HAL_UART_MspInit+0x25c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000800:	4b5a      	ldr	r3, [pc, #360]	@ (800096c <HAL_UART_MspInit+0x25c>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000806:	4b59      	ldr	r3, [pc, #356]	@ (800096c <HAL_UART_MspInit+0x25c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800080c:	4b57      	ldr	r3, [pc, #348]	@ (800096c <HAL_UART_MspInit+0x25c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000812:	4856      	ldr	r0, [pc, #344]	@ (800096c <HAL_UART_MspInit+0x25c>)
 8000814:	f001 f9e6 	bl	8001be4 <HAL_DMA_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800081e:	f7ff feeb 	bl	80005f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a51      	ldr	r2, [pc, #324]	@ (800096c <HAL_UART_MspInit+0x25c>)
 8000826:	639a      	str	r2, [r3, #56]	@ 0x38
 8000828:	4a50      	ldr	r2, [pc, #320]	@ (800096c <HAL_UART_MspInit+0x25c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2025      	movs	r0, #37	@ 0x25
 8000834:	f001 f99f 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000838:	2025      	movs	r0, #37	@ 0x25
 800083a:	f001 f9b8 	bl	8001bae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800083e:	e12f      	b.n	8000aa0 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a4b      	ldr	r2, [pc, #300]	@ (8000974 <HAL_UART_MspInit+0x264>)
 8000846:	4293      	cmp	r3, r2
 8000848:	f040 809e 	bne.w	8000988 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 800084c:	4b43      	ldr	r3, [pc, #268]	@ (800095c <HAL_UART_MspInit+0x24c>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	4a42      	ldr	r2, [pc, #264]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000856:	61d3      	str	r3, [r2, #28]
 8000858:	4b40      	ldr	r3, [pc, #256]	@ (800095c <HAL_UART_MspInit+0x24c>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a3c      	ldr	r2, [pc, #240]	@ (800095c <HAL_UART_MspInit+0x24c>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b3a      	ldr	r3, [pc, #232]	@ (800095c <HAL_UART_MspInit+0x24c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800087c:	2304      	movs	r3, #4
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4619      	mov	r1, r3
 800088e:	4834      	ldr	r0, [pc, #208]	@ (8000960 <HAL_UART_MspInit+0x250>)
 8000890:	f001 fc4a 	bl	8002128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000894:	2308      	movs	r3, #8
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4619      	mov	r1, r3
 80008a6:	482e      	ldr	r0, [pc, #184]	@ (8000960 <HAL_UART_MspInit+0x250>)
 80008a8:	f001 fc3e 	bl	8002128 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008ac:	4b32      	ldr	r3, [pc, #200]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008ae:	4a33      	ldr	r2, [pc, #204]	@ (800097c <HAL_UART_MspInit+0x26c>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b2:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008d6:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008dc:	4826      	ldr	r0, [pc, #152]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008de:	f001 f981 	bl	8001be4 <HAL_DMA_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80008e8:	f7ff fe86 	bl	80005f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008f2:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <HAL_UART_MspInit+0x268>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80008f8:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <HAL_UART_MspInit+0x270>)
 80008fa:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <HAL_UART_MspInit+0x274>)
 80008fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_UART_MspInit+0x270>)
 8000900:	2210      	movs	r2, #16
 8000902:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <HAL_UART_MspInit+0x270>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_UART_MspInit+0x270>)
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <HAL_UART_MspInit+0x270>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_UART_MspInit+0x270>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <HAL_UART_MspInit+0x270>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_UART_MspInit+0x270>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000928:	4815      	ldr	r0, [pc, #84]	@ (8000980 <HAL_UART_MspInit+0x270>)
 800092a:	f001 f95b 	bl	8001be4 <HAL_DMA_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000934:	f7ff fe60 	bl	80005f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a11      	ldr	r2, [pc, #68]	@ (8000980 <HAL_UART_MspInit+0x270>)
 800093c:	639a      	str	r2, [r3, #56]	@ 0x38
 800093e:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <HAL_UART_MspInit+0x270>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2026      	movs	r0, #38	@ 0x26
 800094a:	f001 f914 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800094e:	2026      	movs	r0, #38	@ 0x26
 8000950:	f001 f92d 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 8000954:	e0a4      	b.n	8000aa0 <HAL_UART_MspInit+0x390>
 8000956:	bf00      	nop
 8000958:	40013800 	.word	0x40013800
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800
 8000964:	200001c8 	.word	0x200001c8
 8000968:	40020058 	.word	0x40020058
 800096c:	2000020c 	.word	0x2000020c
 8000970:	40020044 	.word	0x40020044
 8000974:	40004400 	.word	0x40004400
 8000978:	20000250 	.word	0x20000250
 800097c:	4002006c 	.word	0x4002006c
 8000980:	20000294 	.word	0x20000294
 8000984:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a46      	ldr	r2, [pc, #280]	@ (8000aa8 <HAL_UART_MspInit+0x398>)
 800098e:	4293      	cmp	r3, r2
 8000990:	f040 8086 	bne.w	8000aa0 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000994:	4b45      	ldr	r3, [pc, #276]	@ (8000aac <HAL_UART_MspInit+0x39c>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a44      	ldr	r2, [pc, #272]	@ (8000aac <HAL_UART_MspInit+0x39c>)
 800099a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800099e:	61d3      	str	r3, [r2, #28]
 80009a0:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <HAL_UART_MspInit+0x39c>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b3f      	ldr	r3, [pc, #252]	@ (8000aac <HAL_UART_MspInit+0x39c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a3e      	ldr	r2, [pc, #248]	@ (8000aac <HAL_UART_MspInit+0x39c>)
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b3c      	ldr	r3, [pc, #240]	@ (8000aac <HAL_UART_MspInit+0x39c>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	4619      	mov	r1, r3
 80009d8:	4835      	ldr	r0, [pc, #212]	@ (8000ab0 <HAL_UART_MspInit+0x3a0>)
 80009da:	f001 fba5 	bl	8002128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4619      	mov	r1, r3
 80009f2:	482f      	ldr	r0, [pc, #188]	@ (8000ab0 <HAL_UART_MspInit+0x3a0>)
 80009f4:	f001 fb98 	bl	8002128 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80009f8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 80009fa:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab8 <HAL_UART_MspInit+0x3a8>)
 80009fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fe:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a04:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a10:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a16:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000a1c:	4b25      	ldr	r3, [pc, #148]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a22:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a28:	4822      	ldr	r0, [pc, #136]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a2a:	f001 f8db 	bl	8001be4 <HAL_DMA_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_UART_MspInit+0x328>
      Error_Handler();
 8000a34:	f7ff fde0 	bl	80005f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab4 <HAL_UART_MspInit+0x3a4>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a46:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac0 <HAL_UART_MspInit+0x3b0>)
 8000a48:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a76:	f001 f8b5 	bl	8001be4 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_UART_MspInit+0x374>
      Error_Handler();
 8000a80:	f7ff fdba 	bl	80005f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a88:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000abc <HAL_UART_MspInit+0x3ac>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2027      	movs	r0, #39	@ 0x27
 8000a96:	f001 f86e 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a9a:	2027      	movs	r0, #39	@ 0x27
 8000a9c:	f001 f887 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	@ 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40004800 	.word	0x40004800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	200002d8 	.word	0x200002d8
 8000ab8:	40020030 	.word	0x40020030
 8000abc:	2000031c 	.word	0x2000031c
 8000ac0:	4002001c 	.word	0x4002001c

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f8d8 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <DMA1_Channel2_IRQHandler+0x10>)
 8000b22:	f001 f9cd 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000031c 	.word	0x2000031c

08000b30 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <DMA1_Channel3_IRQHandler+0x10>)
 8000b36:	f001 f9c3 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200002d8 	.word	0x200002d8

08000b44 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <DMA1_Channel4_IRQHandler+0x10>)
 8000b4a:	f001 f9b9 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000020c 	.word	0x2000020c

08000b58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <DMA1_Channel5_IRQHandler+0x10>)
 8000b5e:	f001 f9af 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200001c8 	.word	0x200001c8

08000b6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b70:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <DMA1_Channel6_IRQHandler+0x10>)
 8000b72:	f001 f9a5 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000250 	.word	0x20000250

08000b80 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <DMA1_Channel7_IRQHandler+0x10>)
 8000b86:	f001 f99b 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000294 	.word	0x20000294

08000b94 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <CAN1_RX1_IRQHandler+0x10>)
 8000b9a:	f000 fcf2 	bl	8001582 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000c8 	.word	0x200000c8

08000ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <USART1_IRQHandler+0x10>)
 8000bae:	f002 f935 	bl	8002e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000f0 	.word	0x200000f0

08000bbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <USART2_IRQHandler+0x10>)
 8000bc2:	f002 f92b 	bl	8002e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000138 	.word	0x20000138

08000bd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <USART3_IRQHandler+0x10>)
 8000bd6:	f002 f921 	bl	8002e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000180 	.word	0x20000180

08000be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff fff8 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bf6:	490c      	ldr	r1, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a09      	ldr	r2, [pc, #36]	@ (8000c30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c0c:	4c09      	ldr	r4, [pc, #36]	@ (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f003 fb29 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff faa7 	bl	8000170 <main>
  bx lr
 8000c22:	4770      	bx	lr
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c2c:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 8000c30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c34:	2000102c 	.word	0x2000102c

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 ff87 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fcd4 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 ff9f 	bl	8001bca <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 ff67 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000010 	.word	0x20000010
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a03      	ldr	r2, [pc, #12]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000010 	.word	0x20000010
 8000ce8:	200003c8 	.word	0x200003c8

08000cec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b02      	ldr	r3, [pc, #8]	@ (8000cfc <HAL_GetTick+0x10>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	200003c8 	.word	0x200003c8

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff fff0 	bl	8000cec <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffe0 	bl	8000cec <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000010 	.word	0x20000010

08000d48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e0ed      	b.n	8000f36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fc7e 	bl	8000668 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d7c:	f7ff ffb6 	bl	8000cec <HAL_GetTick>
 8000d80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d82:	e012      	b.n	8000daa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d84:	f7ff ffb2 	bl	8000cec <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d90b      	bls.n	8000daa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2205      	movs	r2, #5
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0c5      	b.n	8000f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0e5      	beq.n	8000d84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0202 	bic.w	r2, r2, #2
 8000dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc8:	f7ff ff90 	bl	8000cec <HAL_GetTick>
 8000dcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dce:	e012      	b.n	8000df6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd0:	f7ff ff8c 	bl	8000cec <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	d90b      	bls.n	8000df6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2205      	movs	r2, #5
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e09f      	b.n	8000f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e5      	bne.n	8000dd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e1b      	ldrb	r3, [r3, #24]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d108      	bne.n	8000e1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e007      	b.n	8000e2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7e5b      	ldrb	r3, [r3, #25]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d108      	bne.n	8000e48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e007      	b.n	8000e58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7e9b      	ldrb	r3, [r3, #26]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0220 	orr.w	r2, r2, #32
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e007      	b.n	8000e82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0220 	bic.w	r2, r2, #32
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7edb      	ldrb	r3, [r3, #27]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d108      	bne.n	8000e9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0210 	bic.w	r2, r2, #16
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e007      	b.n	8000eac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0210 	orr.w	r2, r2, #16
 8000eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7f1b      	ldrb	r3, [r3, #28]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0208 	orr.w	r2, r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e007      	b.n	8000ed6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0208 	bic.w	r2, r2, #8
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7f5b      	ldrb	r3, [r3, #29]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d108      	bne.n	8000ef0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0204 	orr.w	r2, r2, #4
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e007      	b.n	8000f00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0204 	bic.w	r2, r2, #4
 8000efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	ea42 0103 	orr.w	r1, r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b087      	sub	sp, #28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f56:	7cfb      	ldrb	r3, [r7, #19]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d003      	beq.n	8000f64 <HAL_CAN_ConfigFilter+0x26>
 8000f5c:	7cfb      	ldrb	r3, [r7, #19]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	f040 80aa 	bne.w	80010b8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d123      	bne.n	8000fe6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	401a      	ands	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fc0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3248      	adds	r2, #72	@ 0x48
 8000fc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fdc:	6979      	ldr	r1, [r7, #20]
 8000fde:	3348      	adds	r3, #72	@ 0x48
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d122      	bne.n	8001034 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800100e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3248      	adds	r2, #72	@ 0x48
 8001014:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001028:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800102a:	6979      	ldr	r1, [r7, #20]
 800102c:	3348      	adds	r3, #72	@ 0x48
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d109      	bne.n	8001050 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800104e:	e007      	b.n	8001060 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800107a:	e007      	b.n	800108c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d107      	bne.n	80010a4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010aa:	f023 0201 	bic.w	r2, r3, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e006      	b.n	80010c6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
  }
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d12e      	bne.n	8001142 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010fc:	f7ff fdf6 	bl	8000cec <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001102:	e012      	b.n	800112a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001104:	f7ff fdf2 	bl	8000cec <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d90b      	bls.n	800112a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2205      	movs	r2, #5
 8001122:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e012      	b.n	8001150 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e5      	bne.n	8001104 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e006      	b.n	8001150 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
  }
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d003      	beq.n	8001184 <HAL_CAN_AddTxMessage+0x2c>
 800117c:	7ffb      	ldrb	r3, [r7, #31]
 800117e:	2b02      	cmp	r3, #2
 8001180:	f040 80ad 	bne.w	80012de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10a      	bne.n	80011a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8095 	beq.w	80012ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	0e1b      	lsrs	r3, r3, #24
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10d      	bne.n	80011dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011ca:	68f9      	ldr	r1, [r7, #12]
 80011cc:	6809      	ldr	r1, [r1, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3318      	adds	r3, #24
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	440b      	add	r3, r1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e00f      	b.n	80011fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3318      	adds	r3, #24
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	440b      	add	r3, r1
 80011fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3318      	adds	r3, #24
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	440b      	add	r3, r1
 800120c:	3304      	adds	r3, #4
 800120e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	7d1b      	ldrb	r3, [r3, #20]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d111      	bne.n	800123c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3318      	adds	r3, #24
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	6811      	ldr	r1, [r2, #0]
 800122c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3318      	adds	r3, #24
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	440b      	add	r3, r1
 8001238:	3304      	adds	r3, #4
 800123a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3307      	adds	r3, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	061a      	lsls	r2, r3, #24
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3306      	adds	r3, #6
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	041b      	lsls	r3, r3, #16
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3305      	adds	r3, #5
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	4313      	orrs	r3, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	3204      	adds	r2, #4
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	4610      	mov	r0, r2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	6811      	ldr	r1, [r2, #0]
 8001264:	ea43 0200 	orr.w	r2, r3, r0
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	440b      	add	r3, r1
 800126e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001272:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3303      	adds	r3, #3
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	061a      	lsls	r2, r3, #24
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3302      	adds	r3, #2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3301      	adds	r3, #1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	4313      	orrs	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	4610      	mov	r0, r2
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	ea43 0200 	orr.w	r2, r3, r0
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	440b      	add	r3, r1
 80012a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80012a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3318      	adds	r3, #24
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	6811      	ldr	r1, [r2, #0]
 80012bc:	f043 0201 	orr.w	r2, r3, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3318      	adds	r3, #24
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	440b      	add	r3, r1
 80012c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e00e      	b.n	80012ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e006      	b.n	80012ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3724      	adds	r7, #36	@ 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012f6:	b480      	push	{r7}
 80012f8:	b087      	sub	sp, #28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d003      	beq.n	800131a <HAL_CAN_GetRxMessage+0x24>
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b02      	cmp	r3, #2
 8001316:	f040 8103 	bne.w	8001520 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10e      	bne.n	800133e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0f7      	b.n	800152e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0e8      	b.n	800152e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	331b      	adds	r3, #27
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0204 	and.w	r2, r3, #4
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	331b      	adds	r3, #27
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0d5b      	lsrs	r3, r3, #21
 800138a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e00b      	b.n	80013ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	331b      	adds	r3, #27
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	331b      	adds	r3, #27
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0202 	and.w	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	331b      	adds	r3, #27
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	3304      	adds	r3, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2208      	movs	r2, #8
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	e00b      	b.n	80013fa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	331b      	adds	r3, #27
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 020f 	and.w	r2, r3, #15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	331b      	adds	r3, #27
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b2da      	uxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0a1a      	lsrs	r2, r3, #8
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0c1a      	lsrs	r2, r3, #16
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3302      	adds	r3, #2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0e1a      	lsrs	r2, r3, #24
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3303      	adds	r3, #3
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3304      	adds	r3, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0a1a      	lsrs	r2, r3, #8
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	3305      	adds	r3, #5
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1a      	lsrs	r2, r3, #16
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3306      	adds	r3, #6
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0e1a      	lsrs	r2, r3, #24
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3307      	adds	r3, #7
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e007      	b.n	800151c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0220 	orr.w	r2, r2, #32
 800151a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	e006      	b.n	800152e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
  }
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001548:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <HAL_CAN_ActivateNotification+0x1e>
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d109      	bne.n	800156a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6959      	ldr	r1, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e006      	b.n	8001578 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b08a      	sub	sp, #40	@ 0x28
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d07c      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d023      	beq.n	800161a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f983 	bl	80018f0 <HAL_CAN_TxMailbox0CompleteCallback>
 80015ea:	e016      	b.n	800161a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fe:	e00c      	b.n	800161a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
 8001612:	e002      	b.n	800161a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f986 	bl	8001926 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d024      	beq.n	800166e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800162c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f962 	bl	8001902 <HAL_CAN_TxMailbox1CompleteCallback>
 800163e:	e016      	b.n	800166e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
 8001652:	e00c      	b.n	800166e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
 8001666:	e002      	b.n	800166e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f965 	bl	8001938 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d024      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001680:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f941 	bl	8001914 <HAL_CAN_TxMailbox2CompleteCallback>
 8001692:	e016      	b.n	80016c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a6:	e00c      	b.n	80016c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ba:	e002      	b.n	80016c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f944 	bl	800194a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00c      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2210      	movs	r2, #16
 80016e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2208      	movs	r2, #8
 8001700:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f933 	bl	800196e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f91b 	bl	800195c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00c      	beq.n	800174a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2210      	movs	r2, #16
 8001748:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2208      	movs	r2, #8
 8001764:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f90a 	bl	8001980 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7fe fce1 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2210      	movs	r2, #16
 80017a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f8f3 	bl	8001992 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2208      	movs	r2, #8
 80017c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f8eb 	bl	80019a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d07b      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d072      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800183c:	2b00      	cmp	r3, #0
 800183e:	d043      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d03e      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001850:	2b60      	cmp	r3, #96	@ 0x60
 8001852:	d02b      	beq.n	80018ac <HAL_CAN_IRQHandler+0x32a>
 8001854:	2b60      	cmp	r3, #96	@ 0x60
 8001856:	d82e      	bhi.n	80018b6 <HAL_CAN_IRQHandler+0x334>
 8001858:	2b50      	cmp	r3, #80	@ 0x50
 800185a:	d022      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x320>
 800185c:	2b50      	cmp	r3, #80	@ 0x50
 800185e:	d82a      	bhi.n	80018b6 <HAL_CAN_IRQHandler+0x334>
 8001860:	2b40      	cmp	r3, #64	@ 0x40
 8001862:	d019      	beq.n	8001898 <HAL_CAN_IRQHandler+0x316>
 8001864:	2b40      	cmp	r3, #64	@ 0x40
 8001866:	d826      	bhi.n	80018b6 <HAL_CAN_IRQHandler+0x334>
 8001868:	2b30      	cmp	r3, #48	@ 0x30
 800186a:	d010      	beq.n	800188e <HAL_CAN_IRQHandler+0x30c>
 800186c:	2b30      	cmp	r3, #48	@ 0x30
 800186e:	d822      	bhi.n	80018b6 <HAL_CAN_IRQHandler+0x334>
 8001870:	2b10      	cmp	r3, #16
 8001872:	d002      	beq.n	800187a <HAL_CAN_IRQHandler+0x2f8>
 8001874:	2b20      	cmp	r3, #32
 8001876:	d005      	beq.n	8001884 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001878:	e01d      	b.n	80018b6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001882:	e019      	b.n	80018b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800188c:	e014      	b.n	80018b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001896:	e00f      	b.n	80018b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018a0:	e00a      	b.n	80018b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018aa:	e005      	b.n	80018b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018b4:	e000      	b.n	80018b8 <HAL_CAN_IRQHandler+0x336>
            break;
 80018b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80018c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2204      	movs	r2, #4
 80018ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f867 	bl	80019b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4906      	ldr	r1, [pc, #24]	@ (8001a60 <__NVIC_EnableIRQ+0x34>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	@ (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	@ 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff90 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff2d 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff42 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff90 	bl	8001ab8 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5f 	bl	8001a64 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff35 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e043      	b.n	8001c82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <HAL_DMA_Init+0xa8>)
 8001c02:	4413      	add	r3, r2
 8001c04:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <HAL_DMA_Init+0xac>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	009a      	lsls	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a1f      	ldr	r2, [pc, #124]	@ (8001c94 <HAL_DMA_Init+0xb0>)
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001c32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	bffdfff8 	.word	0xbffdfff8
 8001c90:	cccccccd 	.word	0xcccccccd
 8001c94:	40020000 	.word	0x40020000

08001c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_DMA_Start_IT+0x20>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e04b      	b.n	8001d50 <HAL_DMA_Start_IT+0xb8>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d13a      	bne.n	8001d42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f9eb 	bl	80020cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 020e 	orr.w	r2, r2, #14
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e00f      	b.n	8001d30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 020a 	orr.w	r2, r2, #10
 8001d2e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e005      	b.n	8001d4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d008      	beq.n	8001d82 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2204      	movs	r2, #4
 8001d74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e020      	b.n	8001dc4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 020e 	bic.w	r2, r2, #14
 8001d90:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d005      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2204      	movs	r2, #4
 8001dec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e051      	b.n	8001e98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 020e 	bic.w	r2, r2, #14
 8001e02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a22      	ldr	r2, [pc, #136]	@ (8001ea4 <HAL_DMA_Abort_IT+0xd4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d029      	beq.n	8001e72 <HAL_DMA_Abort_IT+0xa2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <HAL_DMA_Abort_IT+0xd8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d022      	beq.n	8001e6e <HAL_DMA_Abort_IT+0x9e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eac <HAL_DMA_Abort_IT+0xdc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01a      	beq.n	8001e68 <HAL_DMA_Abort_IT+0x98>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb0 <HAL_DMA_Abort_IT+0xe0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d012      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x92>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb4 <HAL_DMA_Abort_IT+0xe4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00a      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x8c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_DMA_Abort_IT+0xe8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d102      	bne.n	8001e56 <HAL_DMA_Abort_IT+0x86>
 8001e50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e54:	e00e      	b.n	8001e74 <HAL_DMA_Abort_IT+0xa4>
 8001e56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e5a:	e00b      	b.n	8001e74 <HAL_DMA_Abort_IT+0xa4>
 8001e5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e60:	e008      	b.n	8001e74 <HAL_DMA_Abort_IT+0xa4>
 8001e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e66:	e005      	b.n	8001e74 <HAL_DMA_Abort_IT+0xa4>
 8001e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6c:	e002      	b.n	8001e74 <HAL_DMA_Abort_IT+0xa4>
 8001e6e:	2310      	movs	r3, #16
 8001e70:	e000      	b.n	8001e74 <HAL_DMA_Abort_IT+0xa4>
 8001e72:	2301      	movs	r3, #1
 8001e74:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_DMA_Abort_IT+0xec>)
 8001e76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
    } 
  }
  return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40020008 	.word	0x40020008
 8001ea8:	4002001c 	.word	0x4002001c
 8001eac:	40020030 	.word	0x40020030
 8001eb0:	40020044 	.word	0x40020044
 8001eb4:	40020058 	.word	0x40020058
 8001eb8:	4002006c 	.word	0x4002006c
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	2204      	movs	r2, #4
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d04f      	beq.n	8001f88 <HAL_DMA_IRQHandler+0xc8>
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d04a      	beq.n	8001f88 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a66      	ldr	r2, [pc, #408]	@ (80020b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d029      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xae>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a65      	ldr	r2, [pc, #404]	@ (80020b4 <HAL_DMA_IRQHandler+0x1f4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d022      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xaa>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01a      	beq.n	8001f64 <HAL_DMA_IRQHandler+0xa4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a62      	ldr	r2, [pc, #392]	@ (80020bc <HAL_DMA_IRQHandler+0x1fc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d012      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x9e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a60      	ldr	r2, [pc, #384]	@ (80020c0 <HAL_DMA_IRQHandler+0x200>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00a      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x98>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a5f      	ldr	r2, [pc, #380]	@ (80020c4 <HAL_DMA_IRQHandler+0x204>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d102      	bne.n	8001f52 <HAL_DMA_IRQHandler+0x92>
 8001f4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f50:	e00e      	b.n	8001f70 <HAL_DMA_IRQHandler+0xb0>
 8001f52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f56:	e00b      	b.n	8001f70 <HAL_DMA_IRQHandler+0xb0>
 8001f58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f5c:	e008      	b.n	8001f70 <HAL_DMA_IRQHandler+0xb0>
 8001f5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f62:	e005      	b.n	8001f70 <HAL_DMA_IRQHandler+0xb0>
 8001f64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f68:	e002      	b.n	8001f70 <HAL_DMA_IRQHandler+0xb0>
 8001f6a:	2340      	movs	r3, #64	@ 0x40
 8001f6c:	e000      	b.n	8001f70 <HAL_DMA_IRQHandler+0xb0>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	4a55      	ldr	r2, [pc, #340]	@ (80020c8 <HAL_DMA_IRQHandler+0x208>)
 8001f72:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8094 	beq.w	80020a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f86:	e08e      	b.n	80020a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d056      	beq.n	8002046 <HAL_DMA_IRQHandler+0x186>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d051      	beq.n	8002046 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 020a 	bic.w	r2, r2, #10
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a38      	ldr	r2, [pc, #224]	@ (80020b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d029      	beq.n	8002026 <HAL_DMA_IRQHandler+0x166>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a37      	ldr	r2, [pc, #220]	@ (80020b4 <HAL_DMA_IRQHandler+0x1f4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_IRQHandler+0x162>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a35      	ldr	r2, [pc, #212]	@ (80020b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01a      	beq.n	800201c <HAL_DMA_IRQHandler+0x15c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a34      	ldr	r2, [pc, #208]	@ (80020bc <HAL_DMA_IRQHandler+0x1fc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d012      	beq.n	8002016 <HAL_DMA_IRQHandler+0x156>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a32      	ldr	r2, [pc, #200]	@ (80020c0 <HAL_DMA_IRQHandler+0x200>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00a      	beq.n	8002010 <HAL_DMA_IRQHandler+0x150>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a31      	ldr	r2, [pc, #196]	@ (80020c4 <HAL_DMA_IRQHandler+0x204>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d102      	bne.n	800200a <HAL_DMA_IRQHandler+0x14a>
 8002004:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002008:	e00e      	b.n	8002028 <HAL_DMA_IRQHandler+0x168>
 800200a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800200e:	e00b      	b.n	8002028 <HAL_DMA_IRQHandler+0x168>
 8002010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002014:	e008      	b.n	8002028 <HAL_DMA_IRQHandler+0x168>
 8002016:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800201a:	e005      	b.n	8002028 <HAL_DMA_IRQHandler+0x168>
 800201c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002020:	e002      	b.n	8002028 <HAL_DMA_IRQHandler+0x168>
 8002022:	2320      	movs	r3, #32
 8002024:	e000      	b.n	8002028 <HAL_DMA_IRQHandler+0x168>
 8002026:	2302      	movs	r3, #2
 8002028:	4a27      	ldr	r2, [pc, #156]	@ (80020c8 <HAL_DMA_IRQHandler+0x208>)
 800202a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	d034      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002044:	e02f      	b.n	80020a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	2208      	movs	r2, #8
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d028      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x1e8>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d023      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 020e 	bic.w	r2, r2, #14
 800206e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
    }
  }
  return;
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
}
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40020008 	.word	0x40020008
 80020b4:	4002001c 	.word	0x4002001c
 80020b8:	40020030 	.word	0x40020030
 80020bc:	40020044 	.word	0x40020044
 80020c0:	40020058 	.word	0x40020058
 80020c4:	4002006c 	.word	0x4002006c
 80020c8:	40020000 	.word	0x40020000

080020cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d108      	bne.n	800210c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800210a:	e007      	b.n	800211c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	@ 0x2c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	e169      	b.n	8002410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800213c:	2201      	movs	r2, #1
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8158 	bne.w	800240a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a9a      	ldr	r2, [pc, #616]	@ (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002164:	4a98      	ldr	r2, [pc, #608]	@ (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d875      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800216a:	4a98      	ldr	r2, [pc, #608]	@ (80023cc <HAL_GPIO_Init+0x2a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d058      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002170:	4a96      	ldr	r2, [pc, #600]	@ (80023cc <HAL_GPIO_Init+0x2a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d86f      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002176:	4a96      	ldr	r2, [pc, #600]	@ (80023d0 <HAL_GPIO_Init+0x2a8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d052      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 800217c:	4a94      	ldr	r2, [pc, #592]	@ (80023d0 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d869      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002182:	4a94      	ldr	r2, [pc, #592]	@ (80023d4 <HAL_GPIO_Init+0x2ac>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d04c      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002188:	4a92      	ldr	r2, [pc, #584]	@ (80023d4 <HAL_GPIO_Init+0x2ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d863      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800218e:	4a92      	ldr	r2, [pc, #584]	@ (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d046      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002194:	4a90      	ldr	r2, [pc, #576]	@ (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d85d      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d82a      	bhi.n	80021f4 <HAL_GPIO_Init+0xcc>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d859      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 80021a2:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <HAL_GPIO_Init+0x80>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	08002223 	.word	0x08002223
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	0800220f 	.word	0x0800220f
 80021b4:	08002251 	.word	0x08002251
 80021b8:	08002257 	.word	0x08002257
 80021bc:	08002257 	.word	0x08002257
 80021c0:	08002257 	.word	0x08002257
 80021c4:	08002257 	.word	0x08002257
 80021c8:	08002257 	.word	0x08002257
 80021cc:	08002257 	.word	0x08002257
 80021d0:	08002257 	.word	0x08002257
 80021d4:	08002257 	.word	0x08002257
 80021d8:	08002257 	.word	0x08002257
 80021dc:	08002257 	.word	0x08002257
 80021e0:	08002257 	.word	0x08002257
 80021e4:	08002257 	.word	0x08002257
 80021e8:	08002257 	.word	0x08002257
 80021ec:	08002205 	.word	0x08002205
 80021f0:	08002219 	.word	0x08002219
 80021f4:	4a79      	ldr	r2, [pc, #484]	@ (80023dc <HAL_GPIO_Init+0x2b4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fa:	e02c      	b.n	8002256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e029      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e024      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	3308      	adds	r3, #8
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e01f      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	330c      	adds	r3, #12
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e01a      	b.n	8002258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222a:	2304      	movs	r3, #4
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e013      	b.n	8002258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	611a      	str	r2, [r3, #16]
          break;
 8002242:	e009      	b.n	8002258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	615a      	str	r2, [r3, #20]
          break;
 800224e:	e003      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x130>
          break;
 8002256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	@ 0xff
 800225c:	d801      	bhi.n	8002262 <HAL_GPIO_Init+0x13a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_Init+0x13e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d802      	bhi.n	8002274 <HAL_GPIO_Init+0x14c>
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x152>
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	3b08      	subs	r3, #8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	210f      	movs	r1, #15
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b1 	beq.w	800240a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a8:	4b4d      	ldr	r3, [pc, #308]	@ (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	@ (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b4a      	ldr	r3, [pc, #296]	@ (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c0:	4a48      	ldr	r2, [pc, #288]	@ (80023e4 <HAL_GPIO_Init+0x2bc>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a40      	ldr	r2, [pc, #256]	@ (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1ec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3f      	ldr	r2, [pc, #252]	@ (80023ec <HAL_GPIO_Init+0x2c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1e8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3e      	ldr	r2, [pc, #248]	@ (80023f0 <HAL_GPIO_Init+0x2c8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1e4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	@ (80023f4 <HAL_GPIO_Init+0x2cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1e0>
 8002304:	2303      	movs	r3, #3
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002308:	2304      	movs	r3, #4
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 800230c:	2302      	movs	r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002314:	2300      	movs	r3, #0
 8002316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002326:	492f      	ldr	r1, [pc, #188]	@ (80023e4 <HAL_GPIO_Init+0x2bc>)
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002340:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	492c      	ldr	r1, [pc, #176]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800234e:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4928      	ldr	r1, [pc, #160]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002368:	4b23      	ldr	r3, [pc, #140]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4922      	ldr	r1, [pc, #136]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	491e      	ldr	r1, [pc, #120]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002380:	4013      	ands	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4918      	ldr	r1, [pc, #96]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800239e:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4914      	ldr	r1, [pc, #80]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	490e      	ldr	r1, [pc, #56]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e021      	b.n	800240a <HAL_GPIO_Init+0x2e2>
 80023c6:	bf00      	nop
 80023c8:	10320000 	.word	0x10320000
 80023cc:	10310000 	.word	0x10310000
 80023d0:	10220000 	.word	0x10220000
 80023d4:	10210000 	.word	0x10210000
 80023d8:	10120000 	.word	0x10120000
 80023dc:	10110000 	.word	0x10110000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40010800 	.word	0x40010800
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_GPIO_Init+0x304>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	43db      	mvns	r3, r3
 8002404:	4909      	ldr	r1, [pc, #36]	@ (800242c <HAL_GPIO_Init+0x304>)
 8002406:	4013      	ands	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	3301      	adds	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f ae8e 	bne.w	800213c <HAL_GPIO_Init+0x14>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	372c      	adds	r7, #44	@ 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e272      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002450:	4b92      	ldr	r3, [pc, #584]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b04      	cmp	r3, #4
 800245a:	d00c      	beq.n	8002476 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800245c:	4b8f      	ldr	r3, [pc, #572]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d112      	bne.n	800248e <HAL_RCC_OscConfig+0x5e>
 8002468:	4b8c      	ldr	r3, [pc, #560]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002474:	d10b      	bne.n	800248e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002476:	4b89      	ldr	r3, [pc, #548]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d06c      	beq.n	800255c <HAL_RCC_OscConfig+0x12c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d168      	bne.n	800255c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e24c      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x76>
 8002498:	4b80      	ldr	r3, [pc, #512]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a7f      	ldr	r2, [pc, #508]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e02e      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b7b      	ldr	r3, [pc, #492]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7a      	ldr	r2, [pc, #488]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b78      	ldr	r3, [pc, #480]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a77      	ldr	r2, [pc, #476]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0xbc>
 80024d2:	4b72      	ldr	r3, [pc, #456]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a71      	ldr	r2, [pc, #452]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024ec:	4b6b      	ldr	r3, [pc, #428]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6a      	ldr	r2, [pc, #424]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b68      	ldr	r3, [pc, #416]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a67      	ldr	r2, [pc, #412]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002502:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fbee 	bl	8000cec <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fbea 	bl	8000cec <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	@ 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e200      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b5d      	ldr	r3, [pc, #372]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xe4>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fbda 	bl	8000cec <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fbd6 	bl	8000cec <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	@ 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1ec      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x10c>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256a:	4b4c      	ldr	r3, [pc, #304]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002576:	4b49      	ldr	r3, [pc, #292]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x18c>
 8002582:	4b46      	ldr	r3, [pc, #280]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b43      	ldr	r3, [pc, #268]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x176>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c0      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4939      	ldr	r1, [pc, #228]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fb8f 	bl	8000cec <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe fb8b 	bl	8000cec <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1a1      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4927      	ldr	r1, [pc, #156]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fb6e 	bl	8000cec <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe fb6a 	bl	8000cec <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e180      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03a      	beq.n	80026b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d019      	beq.n	800267a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <HAL_RCC_OscConfig+0x274>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe fb4e 	bl	8000cec <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe fb4a 	bl	8000cec <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e160      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_RCC_OscConfig+0x26c>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f000 face 	bl	8002c14 <RCC_Delay>
 8002678:	e01c      	b.n	80026b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <HAL_RCC_OscConfig+0x274>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7fe fb34 	bl	8000cec <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002686:	e00f      	b.n	80026a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fb30 	bl	8000cec <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d908      	bls.n	80026a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e146      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	42420000 	.word	0x42420000
 80026a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b92      	ldr	r3, [pc, #584]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e9      	bne.n	8002688 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a6 	beq.w	800280e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b8b      	ldr	r3, [pc, #556]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a87      	ldr	r2, [pc, #540]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	61d3      	str	r3, [r2, #28]
 80026de:	4b85      	ldr	r3, [pc, #532]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b82      	ldr	r3, [pc, #520]	@ (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b7f      	ldr	r3, [pc, #508]	@ (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7e      	ldr	r2, [pc, #504]	@ (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7fe faf1 	bl	8000cec <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7fe faed 	bl	8000cec <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b64      	cmp	r3, #100	@ 0x64
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e103      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b75      	ldr	r3, [pc, #468]	@ (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x312>
 8002734:	4b6f      	ldr	r3, [pc, #444]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a6e      	ldr	r2, [pc, #440]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	e02d      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x334>
 800274a:	4b6a      	ldr	r3, [pc, #424]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a69      	ldr	r2, [pc, #420]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b67      	ldr	r3, [pc, #412]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a66      	ldr	r2, [pc, #408]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	e01c      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0x356>
 800276c:	4b61      	ldr	r3, [pc, #388]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a60      	ldr	r2, [pc, #384]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	4b5e      	ldr	r3, [pc, #376]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a5d      	ldr	r2, [pc, #372]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	e00b      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002786:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a5a      	ldr	r2, [pc, #360]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6213      	str	r3, [r2, #32]
 8002792:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a57      	ldr	r2, [pc, #348]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d015      	beq.n	80027d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe faa1 	bl	8000cec <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fa9d 	bl	8000cec <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0b1      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	4b4b      	ldr	r3, [pc, #300]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ee      	beq.n	80027ae <HAL_RCC_OscConfig+0x37e>
 80027d0:	e014      	b.n	80027fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe fa8b 	bl	8000cec <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fa87 	bl	8000cec <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e09b      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f0:	4b40      	ldr	r3, [pc, #256]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ee      	bne.n	80027da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b3c      	ldr	r3, [pc, #240]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a3b      	ldr	r2, [pc, #236]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002818:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d061      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d146      	bne.n	80028ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282c:	4b33      	ldr	r3, [pc, #204]	@ (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe fa5b 	bl	8000cec <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe fa57 	bl	8000cec <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e06d      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284c:	4b29      	ldr	r3, [pc, #164]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002860:	d108      	bne.n	8002874 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	4921      	ldr	r1, [pc, #132]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a19      	ldr	r1, [r3, #32]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	430b      	orrs	r3, r1
 8002886:	491b      	ldr	r1, [pc, #108]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fa2b 	bl	8000cec <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fa27 	bl	8000cec <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x46a>
 80028b8:	e035      	b.n	8002926 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fa14 	bl	8000cec <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fa10 	bl	8000cec <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e026      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x498>
 80028e6:	e01e      	b.n	8002926 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e019      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_RCC_OscConfig+0x500>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	429a      	cmp	r2, r3
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0d0      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b6a      	ldr	r3, [pc, #424]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d910      	bls.n	8002978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b67      	ldr	r3, [pc, #412]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0207 	bic.w	r2, r3, #7
 800295e:	4965      	ldr	r1, [pc, #404]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b63      	ldr	r3, [pc, #396]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b8      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002990:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a58      	ldr	r2, [pc, #352]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800299a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a8:	4b53      	ldr	r3, [pc, #332]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a52      	ldr	r2, [pc, #328]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b50      	ldr	r3, [pc, #320]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	494d      	ldr	r1, [pc, #308]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d040      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d115      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e073      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06b      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4936      	ldr	r1, [pc, #216]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe f962 	bl	8000cec <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe f95e 	bl	8000cec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e053      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d210      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b24      	ldr	r3, [pc, #144]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 0207 	bic.w	r2, r3, #7
 8002a6a:	4922      	ldr	r1, [pc, #136]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e032      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4916      	ldr	r1, [pc, #88]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	490e      	ldr	r1, [pc, #56]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac2:	f000 f821 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	490a      	ldr	r1, [pc, #40]	@ (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <HAL_RCC_ClockConfig+0x1cc>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_RCC_ClockConfig+0x1d0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe f8c0 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	080042d0 	.word	0x080042d0
 8002b00:	20000008 	.word	0x20000008
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b22:	4b1e      	ldr	r3, [pc, #120]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x30>
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x36>
 8002b36:	e027      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3a:	613b      	str	r3, [r7, #16]
      break;
 8002b3c:	e027      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0c9b      	lsrs	r3, r3, #18
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a17      	ldr	r2, [pc, #92]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b56:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0c5b      	lsrs	r3, r3, #17
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	4a11      	ldr	r2, [pc, #68]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6a:	fb03 f202 	mul.w	r2, r3, r2
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e004      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	613b      	str	r3, [r7, #16]
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b8a:	613b      	str	r3, [r7, #16]
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	693b      	ldr	r3, [r7, #16]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	007a1200 	.word	0x007a1200
 8002ba4:	080042e8 	.word	0x080042e8
 8002ba8:	080042f8 	.word	0x080042f8
 8002bac:	003d0900 	.word	0x003d0900

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b02      	ldr	r3, [pc, #8]	@ (8002bc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	20000008 	.word	0x20000008

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff2 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	080042e0 	.word	0x080042e0

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffde 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0adb      	lsrs	r3, r3, #11
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	080042e0 	.word	0x080042e0

08002c14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <RCC_Delay+0x34>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <RCC_Delay+0x38>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0a5b      	lsrs	r3, r3, #9
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c30:	bf00      	nop
  }
  while (Delay --);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	60fa      	str	r2, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f9      	bne.n	8002c30 <RCC_Delay+0x1c>
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	20000008 	.word	0x20000008
 8002c4c:	10624dd3 	.word	0x10624dd3

08002c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e042      	b.n	8002ce8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd fd4a 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	@ 0x24
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 ff25 	bl	8003ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	@ 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d156      	bne.n	8002db8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_UART_Transmit_DMA+0x26>
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e04f      	b.n	8002dba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	@ 0x21
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	4a21      	ldr	r2, [pc, #132]	@ (8002dc4 <HAL_UART_Transmit_DMA+0xd4>)
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d46:	4a20      	ldr	r2, [pc, #128]	@ (8002dc8 <HAL_UART_Transmit_DMA+0xd8>)
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dcc <HAL_UART_Transmit_DMA+0xdc>)
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	2200      	movs	r2, #0
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	461a      	mov	r2, r3
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	f7fe ff91 	bl	8001c98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3314      	adds	r3, #20
 8002d86:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	617b      	str	r3, [r7, #20]
   return(result);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3314      	adds	r3, #20
 8002d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002da2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da8:	e841 2300 	strex	r3, r2, [r1]
 8002dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e5      	bne.n	8002d80 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3730      	adds	r7, #48	@ 0x30
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800337b 	.word	0x0800337b
 8002dc8:	08003415 	.word	0x08003415
 8002dcc:	08003599 	.word	0x08003599

08002dd0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d112      	bne.n	8002e10 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_UART_Receive_DMA+0x26>
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00b      	b.n	8002e12 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fc10 	bl	800362c <UART_Start_Receive_DMA>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	e000      	b.n	8002e12 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_UART_IRQHandler+0x66>
 8002e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fd74 	bl	8003968 <UART_Receive_IT>
      return;
 8002e80:	e25b      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80de 	beq.w	8003048 <HAL_UART_IRQHandler+0x22c>
 8002e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80d1 	beq.w	8003048 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xae>
 8002eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_UART_IRQHandler+0xd2>
 8002ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	f043 0202 	orr.w	r2, r3, #2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_UART_IRQHandler+0xf6>
 8002efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f043 0204 	orr.w	r2, r3, #4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d011      	beq.n	8002f42 <HAL_UART_IRQHandler+0x126>
 8002f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f043 0208 	orr.w	r2, r3, #8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 81f2 	beq.w	8003330 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_UART_IRQHandler+0x14e>
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fcff 	bl	8003968 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_UART_IRQHandler+0x17a>
 8002f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d04f      	beq.n	8003036 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fc09 	bl	80037ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d041      	beq.n	800302e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1d9      	bne.n	8002faa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d013      	beq.n	8003026 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003002:	4a7e      	ldr	r2, [pc, #504]	@ (80031fc <HAL_UART_IRQHandler+0x3e0>)
 8003004:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fee0 	bl	8001dd0 <HAL_DMA_Abort_IT>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003020:	4610      	mov	r0, r2
 8003022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	e00e      	b.n	8003044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f001 f818 	bl	800405c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	e00a      	b.n	8003044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f001 f814 	bl	800405c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e006      	b.n	8003044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f001 f810 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003042:	e175      	b.n	8003330 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	bf00      	nop
    return;
 8003046:	e173      	b.n	8003330 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	2b01      	cmp	r3, #1
 800304e:	f040 814f 	bne.w	80032f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8148 	beq.w	80032f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8141 	beq.w	80032f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80b6 	beq.w	8003200 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8145 	beq.w	8003334 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030b2:	429a      	cmp	r2, r3
 80030b4:	f080 813e 	bcs.w	8003334 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f000 8088 	beq.w	80031dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003104:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1d9      	bne.n	80030cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003128:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800313c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003140:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003144:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800314e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e1      	bne.n	8003118 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800316a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3314      	adds	r3, #20
 8003174:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003178:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800317a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800317e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e3      	bne.n	8003154 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e3      	bne.n	800319a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fdbe 	bl	8001d58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8b6 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031f8:	e09c      	b.n	8003334 <HAL_UART_IRQHandler+0x518>
 80031fa:	bf00      	nop
 80031fc:	08003873 	.word	0x08003873
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003208:	b29b      	uxth	r3, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 808e 	beq.w	8003338 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800321c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8089 	beq.w	8003338 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	330c      	adds	r3, #12
 800322c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800323c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800324a:	647a      	str	r2, [r7, #68]	@ 0x44
 800324c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e3      	bne.n	8003226 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	623b      	str	r3, [r7, #32]
   return(result);
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003282:	633a      	str	r2, [r7, #48]	@ 0x30
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e3      	bne.n	800325e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0310 	bic.w	r3, r3, #16
 80032ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032c8:	61fa      	str	r2, [r7, #28]
 80032ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	617b      	str	r3, [r7, #20]
   return(result);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e3      	bne.n	80032a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032e6:	4619      	mov	r1, r3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f83b 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032ee:	e023      	b.n	8003338 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_UART_IRQHandler+0x4f4>
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fac6 	bl	800389a <UART_Transmit_IT>
    return;
 800330e:	e014      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <HAL_UART_IRQHandler+0x51e>
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fb05 	bl	8003938 <UART_EndTransmit_IT>
    return;
 800332e:	e004      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
    return;
 8003330:	bf00      	nop
 8003332:	e002      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
      return;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
      return;
 8003338:	bf00      	nop
  }
}
 800333a:	37e8      	adds	r7, #232	@ 0xe8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b090      	sub	sp, #64	@ 0x40
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d137      	bne.n	8003406 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003398:	2200      	movs	r2, #0
 800339a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800339c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	623b      	str	r3, [r7, #32]
   return(result);
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e5      	bne.n	800339c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033f0:	61fa      	str	r2, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	617b      	str	r3, [r7, #20]
   return(result);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003404:	e002      	b.n	800340c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003406:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003408:	f000 fdea 	bl	8003fe0 <HAL_UART_TxCpltCallback>
}
 800340c:	bf00      	nop
 800340e:	3740      	adds	r7, #64	@ 0x40
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f7ff ff8c 	bl	8003340 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b09c      	sub	sp, #112	@ 0x70
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d172      	bne.n	8003532 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800344c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344e:	2200      	movs	r2, #0
 8003450:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800346a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003472:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003474:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	667b      	str	r3, [r7, #100]	@ 0x64
 800349e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80034a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80034a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80034d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80034da:	633a      	str	r2, [r7, #48]	@ 0x30
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d119      	bne.n	8003532 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	60fb      	str	r3, [r7, #12]
   return(result);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f023 0310 	bic.w	r3, r3, #16
 8003514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800351e:	61fa      	str	r2, [r7, #28]
 8003520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	69b9      	ldr	r1, [r7, #24]
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	617b      	str	r3, [r7, #20]
   return(result);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e5      	bne.n	80034fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003534:	2200      	movs	r2, #0
 8003536:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	2b01      	cmp	r3, #1
 800353e:	d106      	bne.n	800354e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003542:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003544:	4619      	mov	r1, r3
 8003546:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003548:	f7ff ff0c 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800354c:	e002      	b.n	8003554 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800354e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003550:	f000 fd69 	bl	8004026 <HAL_UART_RxCpltCallback>
}
 8003554:	bf00      	nop
 8003556:	3770      	adds	r7, #112	@ 0x70
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff feee 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003588:	e002      	b.n	8003590 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff fee1 	bl	8003352 <HAL_UART_RxHalfCpltCallback>
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b21      	cmp	r3, #33	@ 0x21
 80035ca:	d108      	bne.n	80035de <UART_DMAError+0x46>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f000 f8c1 	bl	8003760 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b22      	cmp	r3, #34	@ 0x22
 80035fe:	d108      	bne.n	8003612 <UART_DMAError+0x7a>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800360c:	68b8      	ldr	r0, [r7, #8]
 800360e:	f000 f8ce 	bl	80037ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	f043 0210 	orr.w	r2, r3, #16
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800361e:	68b8      	ldr	r0, [r7, #8]
 8003620:	f000 fd1c 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b098      	sub	sp, #96	@ 0x60
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2222      	movs	r2, #34	@ 0x22
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	4a3e      	ldr	r2, [pc, #248]	@ (8003754 <UART_Start_Receive_DMA+0x128>)
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	4a3d      	ldr	r2, [pc, #244]	@ (8003758 <UART_Start_Receive_DMA+0x12c>)
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	4a3c      	ldr	r2, [pc, #240]	@ (800375c <UART_Start_Receive_DMA+0x130>)
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	2200      	movs	r2, #0
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003674:	f107 0308 	add.w	r3, r7, #8
 8003678:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	f7fe fb04 	bl	8001c98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d019      	beq.n	80036e2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80036dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3314      	adds	r3, #20
 8003700:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003702:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	617b      	str	r3, [r7, #20]
   return(result);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800372c:	653b      	str	r3, [r7, #80]	@ 0x50
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003736:	627a      	str	r2, [r7, #36]	@ 0x24
 8003738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6a39      	ldr	r1, [r7, #32]
 800373c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	61fb      	str	r3, [r7, #28]
   return(result);
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e5      	bne.n	8003716 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3760      	adds	r7, #96	@ 0x60
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08003431 	.word	0x08003431
 8003758:	0800355d 	.word	0x0800355d
 800375c:	08003599 	.word	0x08003599

08003760 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	@ 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	60bb      	str	r3, [r7, #8]
   return(result);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	61ba      	str	r2, [r7, #24]
 800378a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6979      	ldr	r1, [r7, #20]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	613b      	str	r3, [r7, #16]
   return(result);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80037a4:	bf00      	nop
 80037a6:	3724      	adds	r7, #36	@ 0x24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b095      	sub	sp, #84	@ 0x54
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80037d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3314      	adds	r3, #20
 80037f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3314      	adds	r3, #20
 8003808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800380a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e5      	bne.n	80037ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	2b01      	cmp	r3, #1
 8003824:	d119      	bne.n	800385a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	60bb      	str	r3, [r7, #8]
   return(result);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	647b      	str	r3, [r7, #68]	@ 0x44
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003846:	61ba      	str	r2, [r7, #24]
 8003848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	613b      	str	r3, [r7, #16]
   return(result);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003868:	bf00      	nop
 800386a:	3754      	adds	r7, #84	@ 0x54
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fbe5 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b21      	cmp	r3, #33	@ 0x21
 80038ac:	d13e      	bne.n	800392c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	d114      	bne.n	80038e2 <UART_Transmit_IT+0x48>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d110      	bne.n	80038e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	1c9a      	adds	r2, r3, #2
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	621a      	str	r2, [r3, #32]
 80038e0:	e008      	b.n	80038f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6211      	str	r1, [r2, #32]
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4619      	mov	r1, r3
 8003902:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10f      	bne.n	8003928 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800394e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fb41 	bl	8003fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08c      	sub	sp, #48	@ 0x30
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b22      	cmp	r3, #34	@ 0x22
 800397a:	f040 80ae 	bne.w	8003ada <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003986:	d117      	bne.n	80039b8 <UART_Receive_IT+0x50>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d113      	bne.n	80039b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039b6:	e026      	b.n	8003a06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ca:	d007      	beq.n	80039dc <UART_Receive_IT+0x74>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <UART_Receive_IT+0x82>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e008      	b.n	80039fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4619      	mov	r1, r3
 8003a14:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d15d      	bne.n	8003ad6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0220 	bic.w	r2, r2, #32
 8003a28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d135      	bne.n	8003acc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	613b      	str	r3, [r7, #16]
   return(result);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f023 0310 	bic.w	r3, r3, #16
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a86:	623a      	str	r2, [r7, #32]
 8003a88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	69f9      	ldr	r1, [r7, #28]
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e5      	bne.n	8003a66 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d10a      	bne.n	8003abe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fc4d 	bl	8003364 <HAL_UARTEx_RxEventCallback>
 8003aca:	e002      	b.n	8003ad2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 faaa 	bl	8004026 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e002      	b.n	8003adc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3730      	adds	r7, #48	@ 0x30
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b1e:	f023 030c 	bic.w	r3, r3, #12
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf8 <UART_SetConfig+0x114>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b4c:	f7ff f84e 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	e002      	b.n	8003b5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7ff f836 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003b58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	4a22      	ldr	r2, [pc, #136]	@ (8003bfc <UART_SetConfig+0x118>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	0119      	lsls	r1, r3, #4
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b90:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <UART_SetConfig+0x118>)
 8003b92:	fba3 0302 	umull	r0, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2064      	movs	r0, #100	@ 0x64
 8003b9a:	fb00 f303 	mul.w	r3, r0, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	@ 0x32
 8003ba4:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <UART_SetConfig+0x118>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb0:	4419      	add	r1, r3
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009a      	lsls	r2, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <UART_SetConfig+0x118>)
 8003bca:	fba3 0302 	umull	r0, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2064      	movs	r0, #100	@ 0x64
 8003bd2:	fb00 f303 	mul.w	r3, r0, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	3332      	adds	r3, #50	@ 0x32
 8003bdc:	4a07      	ldr	r2, [pc, #28]	@ (8003bfc <UART_SetConfig+0x118>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	440a      	add	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40013800 	.word	0x40013800
 8003bfc:	51eb851f 	.word	0x51eb851f

08003c00 <crc_clear>:
	if(!hroboClaw->timeout) hroboClaw->timeout = MAXTOUT;

	return ROBOCLAW_OK;
}

static void crc_clear(RoboClaw_HandleTypeDef* hroboClaw){
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	hroboClaw->crc = 0;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	801a      	strh	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <crc_update>:

static void crc_update (RoboClaw_HandleTypeDef* hroboClaw, uint8_t data){
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	hroboClaw->crc = hroboClaw->crc ^ ((uint16_t)data << 8);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	b21b      	sxth	r3, r3
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	4053      	eors	r3, r2
 8003c34:	b21b      	sxth	r3, r3
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e01b      	b.n	8003c7a <crc_update+0x62>
	{
		if (hroboClaw->crc & 0x8000)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	da0d      	bge.n	8003c68 <crc_update+0x50>
			hroboClaw->crc = (hroboClaw->crc << 1) ^ 0x1021;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	b21b      	sxth	r3, r3
 8003c56:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8003c5a:	f083 0301 	eor.w	r3, r3, #1
 8003c5e:	b21b      	sxth	r3, r3
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e005      	b.n	8003c74 <crc_update+0x5c>
		else
			hroboClaw->crc <<= 1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	3301      	adds	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b07      	cmp	r3, #7
 8003c7e:	d9e0      	bls.n	8003c42 <crc_update+0x2a>
	}
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <crc_get>:

static uint16_t crc_get(RoboClaw_HandleTypeDef* hroboClaw){
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	return hroboClaw->crc;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	881b      	ldrh	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr

08003ca2 <write_n>:

static ROBOCLAW_StatusTypeDef write_n(RoboClaw_HandleTypeDef* hroboClaw, uint8_t cnt, ...){
 8003ca2:	b40e      	push	{r1, r2, r3}
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	uint8_t trys=MAXRETRY;
 8003cac:	2302      	movs	r3, #2
 8003cae:	75fb      	strb	r3, [r7, #23]
	uint8_t data;
	uint8_t temp;
	do{
		crc_clear(hroboClaw);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ffa5 	bl	8003c00 <crc_clear>
		//send data with crc
		va_list marker;
		va_start( marker, cnt );     /* Initialize variable arguments. */
 8003cb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cba:	60fb      	str	r3, [r7, #12]
		for(uint8_t index=0; index<cnt ;index++){
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	75bb      	strb	r3, [r7, #22]
 8003cc0:	e013      	b.n	8003cea <write_n+0x48>
			data = va_arg(marker, int);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1d1a      	adds	r2, r3, #4
 8003cc6:	60fa      	str	r2, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	74fb      	strb	r3, [r7, #19]
			crc_update(hroboClaw, data);
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffa0 	bl	8003c18 <crc_update>
			write(hroboClaw, &data);
 8003cd8:	f107 0313 	add.w	r3, r7, #19
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f836 	bl	8003d50 <write>
		for(uint8_t index=0; index<cnt ;index++){
 8003ce4:	7dbb      	ldrb	r3, [r7, #22]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	75bb      	strb	r3, [r7, #22]
 8003cea:	7dba      	ldrb	r2, [r7, #22]
 8003cec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d3e6      	bcc.n	8003cc2 <write_n+0x20>
		}
		va_end( marker );              /* Reset variable arguments.      */
		uint16_t crc = crc_get(hroboClaw);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ffc9 	bl	8003c8c <crc_get>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	82bb      	strh	r3, [r7, #20]
		temp = crc>>8;
 8003cfe:	8abb      	ldrh	r3, [r7, #20]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	74bb      	strb	r3, [r7, #18]
		write(hroboClaw, &temp);
 8003d08:	f107 0312 	add.w	r3, r7, #18
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f81e 	bl	8003d50 <write>
		temp = (uint8_t)crc;
 8003d14:	8abb      	ldrh	r3, [r7, #20]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	74bb      	strb	r3, [r7, #18]
		write(hroboClaw,  &temp);
 8003d1a:	f107 0312 	add.w	r3, r7, #18
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f815 	bl	8003d50 <write>
		if(read_timeout(hroboClaw)==0xFF)
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f822 	bl	8003d70 <read_timeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2bff      	cmp	r3, #255	@ 0xff
 8003d30:	d101      	bne.n	8003d36 <write_n+0x94>
			return  ROBOCLAW_OK ;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e005      	b.n	8003d42 <write_n+0xa0>
	}while(trys--);
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	75fa      	strb	r2, [r7, #23]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1b7      	bne.n	8003cb0 <write_n+0xe>
	return  ROBOCLAW_ERROR;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d4c:	b003      	add	sp, #12
 8003d4e:	4770      	bx	lr

08003d50 <write>:

static void write(RoboClaw_HandleTypeDef* hroboClaw, uint8_t *byte){
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
	serial_write(hroboClaw->hserial, byte, SEND_BYTE_LEN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f8e0 	bl	8003f28 <serial_write>
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <read_timeout>:

static int read(RoboClaw_HandleTypeDef* hroboClaw){
	return serial_read(hroboClaw->hserial);
}

static int read_timeout(RoboClaw_HandleTypeDef* hroboClaw){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick();
 8003d78:	f7fc ffb8 	bl	8000cec <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]
	// Empty buffer?
	while(!serial_available(hroboClaw->hserial)){
 8003d7e:	e00b      	b.n	8003d98 <read_timeout+0x28>
		if((HAL_GetTick()-start)>=hroboClaw->timeout){
 8003d80:	f7fc ffb4 	bl	8000cec <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <read_timeout+0x28>
			return -1;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	e00d      	b.n	8003db4 <read_timeout+0x44>
	while(!serial_available(hroboClaw->hserial)){
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f8ef 	bl	8003f80 <serial_available>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0eb      	beq.n	8003d80 <read_timeout+0x10>
		}
	}
	return serial_read(hroboClaw->hserial);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f8fa 	bl	8003fa6 <serial_read>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <ForwardBackwardM1>:

ROBOCLAW_StatusTypeDef BackwardM2(RoboClaw_HandleTypeDef* hroboClaw, uint8_t speed){
	return write_n(hroboClaw, 3, hroboClaw->packetserial_address,M2BACKWARD,speed);
}

ROBOCLAW_StatusTypeDef ForwardBackwardM1(RoboClaw_HandleTypeDef* hroboClaw, uint8_t speed){
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
	return write_n(hroboClaw, 3, hroboClaw->packetserial_address,M17BIT,speed);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7b1b      	ldrb	r3, [r3, #12]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff63 	bl	8003ca2 <write_n>
 8003ddc:	4603      	mov	r3, r0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <ForwardBackwardM2>:

ROBOCLAW_StatusTypeDef ForwardBackwardM2(RoboClaw_HandleTypeDef* hroboClaw, uint8_t speed){
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af02      	add	r7, sp, #8
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
	return write_n(hroboClaw, 3, hroboClaw->packetserial_address,M27BIT,speed);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7b1b      	ldrb	r3, [r3, #12]
 8003df6:	461a      	mov	r2, r3
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2307      	movs	r3, #7
 8003dfe:	2103      	movs	r1, #3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff4e 	bl	8003ca2 <write_n>
 8003e06:	4603      	mov	r3, r0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <serial_init>:
		.application_reg_Rx = &USART3_Application_Reg_Tx,
		.WriteLock = SERIAL_WRITE_UNLOCKED,
		.ReadLock = SERIAL_READ_UNLOCKED
};
#endif
SERIAL_HandleTypeDef* serial_init(UART_HandleTypeDef *huartx) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef *serial_handler = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

#ifdef USE_USART1
		if(huartx->Instance == USART1){
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a38      	ldr	r2, [pc, #224]	@ (8003f04 <serial_init+0xf4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d11f      	bne.n	8003e66 <serial_init+0x56>

			USART1_Serial_Handler = &(__usart1_serial_handler);
 8003e26:	4b38      	ldr	r3, [pc, #224]	@ (8003f08 <serial_init+0xf8>)
 8003e28:	4a38      	ldr	r2, [pc, #224]	@ (8003f0c <serial_init+0xfc>)
 8003e2a:	601a      	str	r2, [r3, #0]

			USART1_Serial_Handler->huartx = huartx;
 8003e2c:	4b36      	ldr	r3, [pc, #216]	@ (8003f08 <serial_init+0xf8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART1_Serial_Handler->buffer_Rx);
 8003e34:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <serial_init+0xf8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f978 	bl	8004130 <ring_buffer_init>
			ring_buffer_init(USART1_Serial_Handler->buffer_Tx);
 8003e40:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <serial_init+0xf8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f972 	bl	8004130 <ring_buffer_init>
			serial_handler = USART1_Serial_Handler;
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f08 <serial_init+0xf8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART1_Serial_Handler->huartx, USART1_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8003e52:	4b2d      	ldr	r3, [pc, #180]	@ (8003f08 <serial_init+0xf8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	4b2b      	ldr	r3, [pc, #172]	@ (8003f08 <serial_init+0xf8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4619      	mov	r1, r3
 8003e62:	f7fe ffb5 	bl	8002dd0 <HAL_UART_Receive_DMA>
		}
#endif
#ifdef USE_USART2
		if(huartx->Instance == USART2){
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a29      	ldr	r2, [pc, #164]	@ (8003f10 <serial_init+0x100>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d11f      	bne.n	8003eb0 <serial_init+0xa0>

			USART2_Serial_Handler = &(__usart2_serial_handler);
 8003e70:	4b28      	ldr	r3, [pc, #160]	@ (8003f14 <serial_init+0x104>)
 8003e72:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <serial_init+0x108>)
 8003e74:	601a      	str	r2, [r3, #0]

			USART2_Serial_Handler->huartx = huartx;
 8003e76:	4b27      	ldr	r3, [pc, #156]	@ (8003f14 <serial_init+0x104>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART2_Serial_Handler->buffer_Rx);
 8003e7e:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <serial_init+0x104>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f953 	bl	8004130 <ring_buffer_init>
			ring_buffer_init(USART2_Serial_Handler->buffer_Tx);
 8003e8a:	4b22      	ldr	r3, [pc, #136]	@ (8003f14 <serial_init+0x104>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f94d 	bl	8004130 <ring_buffer_init>
			serial_handler = USART2_Serial_Handler;
 8003e96:	4b1f      	ldr	r3, [pc, #124]	@ (8003f14 <serial_init+0x104>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART2_Serial_Handler->huartx, USART2_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <serial_init+0x104>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8003f14 <serial_init+0x104>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fe ff90 	bl	8002dd0 <HAL_UART_Receive_DMA>
		}
#endif
#ifdef USE_USART3
		if(huartx->Instance == USART3){
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a19      	ldr	r2, [pc, #100]	@ (8003f1c <serial_init+0x10c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d11f      	bne.n	8003efa <serial_init+0xea>

			USART3_Serial_Handler = &(__usart3_serial_handler);
 8003eba:	4b19      	ldr	r3, [pc, #100]	@ (8003f20 <serial_init+0x110>)
 8003ebc:	4a19      	ldr	r2, [pc, #100]	@ (8003f24 <serial_init+0x114>)
 8003ebe:	601a      	str	r2, [r3, #0]

			USART3_Serial_Handler->huartx = huartx;
 8003ec0:	4b17      	ldr	r3, [pc, #92]	@ (8003f20 <serial_init+0x110>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART3_Serial_Handler->buffer_Rx);
 8003ec8:	4b15      	ldr	r3, [pc, #84]	@ (8003f20 <serial_init+0x110>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f92e 	bl	8004130 <ring_buffer_init>
			ring_buffer_init(USART3_Serial_Handler->buffer_Tx);
 8003ed4:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <serial_init+0x110>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f928 	bl	8004130 <ring_buffer_init>
			serial_handler = USART3_Serial_Handler;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <serial_init+0x110>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART3_Serial_Handler->huartx, USART3_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <serial_init+0x110>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <serial_init+0x110>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f7fe ff6b 	bl	8002dd0 <HAL_UART_Receive_DMA>
		}
#endif

	return serial_handler;
 8003efa:	68fb      	ldr	r3, [r7, #12]

}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40013800 	.word	0x40013800
 8003f08:	200003cc 	.word	0x200003cc
 8003f0c:	20000014 	.word	0x20000014
 8003f10:	40004400 	.word	0x40004400
 8003f14:	200007ec 	.word	0x200007ec
 8003f18:	20000030 	.word	0x20000030
 8003f1c:	40004800 	.word	0x40004800
 8003f20:	20000c0c 	.word	0x20000c0c
 8003f24:	2000004c 	.word	0x2000004c

08003f28 <serial_write>:

void serial_write(SERIAL_HandleTypeDef* hserial, uint8_t *pData, uint16_t len) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]

	if (ring_buffer_is_empty(hserial->buffer_Tx)) {
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8ca 	bl	80040d4 <ring_buffer_is_empty>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d011      	beq.n	8003f6a <serial_write+0x42>

			if (HAL_UART_Transmit_DMA(hserial->huartx, pData, len) != HAL_OK) {
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fece 	bl	8002cf0 <HAL_UART_Transmit_DMA>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <serial_write+0x50>
				ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f931 	bl	80041ca <ring_buffer_queue_arr>
			}
	} else {
			ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
	}
//	ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
}
 8003f68:	e006      	b.n	8003f78 <serial_write+0x50>
			ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f929 	bl	80041ca <ring_buffer_queue_arr>
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <serial_available>:

uint8_t serial_available(SERIAL_HandleTypeDef* hserial) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

	return !ring_buffer_is_empty(hserial->buffer_Rx);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f8a1 	bl	80040d4 <ring_buffer_is_empty>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <serial_read>:

uint8_t serial_read(SERIAL_HandleTypeDef* hserial) {
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]

		if (!ring_buffer_is_empty(hserial->buffer_Rx)) {
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f88e 	bl	80040d4 <ring_buffer_is_empty>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <serial_read+0x30>
			ring_buffer_dequeue(hserial->buffer_Rx, hserial->application_reg_Rx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f000 f91c 	bl	8004206 <ring_buffer_dequeue>
			return *(hserial->application_reg_Rx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	e000      	b.n	8003fd8 <serial_read+0x32>
		}

		return '\0';
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f843 	bl	8004074 <get_serial_handler>
 8003fee:	60f8      	str	r0, [r7, #12]

	if (!ring_buffer_is_empty(serial_handler->buffer_Tx)) {
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f86d 	bl	80040d4 <ring_buffer_is_empty>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10e      	bne.n	800401e <HAL_UART_TxCpltCallback+0x3e>

		  ring_buffer_dequeue(serial_handler->buffer_Tx, serial_handler->hal_reg_Tx);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 f8fb 	bl	8004206 <ring_buffer_dequeue>
		  HAL_UART_Transmit_DMA(huart, serial_handler->hal_reg_Tx, PRIMARY_REG_SIZE);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fe fe69 	bl	8002cf0 <HAL_UART_Transmit_DMA>
	}
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f820 	bl	8004074 <get_serial_handler>
 8004034:	60f8      	str	r0, [r7, #12]

	ring_buffer_queue_arr(serial_handler->buffer_Rx, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6898      	ldr	r0, [r3, #8]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2201      	movs	r2, #1
 8004040:	4619      	mov	r1, r3
 8004042:	f000 f8c2 	bl	80041ca <ring_buffer_queue_arr>
	HAL_UART_Receive_DMA(huart, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2201      	movs	r2, #1
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe febe 	bl	8002dd0 <HAL_UART_Receive_DMA>
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44

	}
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <get_serial_handler>:

extern SERIAL_HandleTypeDef* USART1_Serial_Handler;
extern SERIAL_HandleTypeDef* USART2_Serial_Handler;
extern SERIAL_HandleTypeDef* USART3_Serial_Handler;

SERIAL_HandleTypeDef* get_serial_handler(UART_HandleTypeDef *huartx){
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* ret_serial_handler = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]

#ifdef USE_USART1
	if(huartx->Instance == USART1){
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <get_serial_handler+0x48>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d102      	bne.n	8004090 <get_serial_handler+0x1c>
		ret_serial_handler = USART1_Serial_Handler;
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <get_serial_handler+0x4c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART2
	if(huartx->Instance == USART2){
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0b      	ldr	r2, [pc, #44]	@ (80040c4 <get_serial_handler+0x50>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d102      	bne.n	80040a0 <get_serial_handler+0x2c>
		ret_serial_handler = USART2_Serial_Handler;
 800409a:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <get_serial_handler+0x54>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART3
	if(huartx->Instance == USART3){
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a09      	ldr	r2, [pc, #36]	@ (80040cc <get_serial_handler+0x58>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d102      	bne.n	80040b0 <get_serial_handler+0x3c>
		ret_serial_handler = USART3_Serial_Handler;
 80040aa:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <get_serial_handler+0x5c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
	}
#endif
	return ret_serial_handler;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40013800 	.word	0x40013800
 80040c0:	200003cc 	.word	0x200003cc
 80040c4:	40004400 	.word	0x40004400
 80040c8:	200007ec 	.word	0x200007ec
 80040cc:	40004800 	.word	0x40004800
 80040d0:	20000c0c 	.word	0x20000c0c

080040d4 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 2202 	ldrh.w	r2, [r3, #514]	@ 0x202
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 80040e8:	429a      	cmp	r2, r3
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 2202 	ldrh.w	r2, [r3, #514]	@ 0x202
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004118:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800411c:	4293      	cmp	r3, r2
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
  buffer->head_index = 0;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

  /** debug features initialize. */
  buffer->byte_enqueue_hit = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  buffer->byte_dequeue_hit = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, uint8_t data) {
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ffc4 	bl	80040fc <ring_buffer_is_full>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8004180:	3301      	adds	r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8004196:	4619      	mov	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80041a4:	3301      	adds	r3, #1
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202

  /** debug features update. */
  buffer->byte_enqueue_hit ++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, uint8_t *data, ring_buffer_size_t size) {
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	4613      	mov	r3, r2
 80041d6:	80fb      	strh	r3, [r7, #6]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 80041d8:	2300      	movs	r3, #0
 80041da:	82fb      	strh	r3, [r7, #22]
 80041dc:	e00a      	b.n	80041f4 <ring_buffer_queue_arr+0x2a>
    ring_buffer_queue(buffer, data[i]);
 80041de:	8afb      	ldrh	r3, [r7, #22]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	4413      	add	r3, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff ffba 	bl	8004162 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 80041ee:	8afb      	ldrh	r3, [r7, #22]
 80041f0:	3301      	adds	r3, #1
 80041f2:	82fb      	strh	r3, [r7, #22]
 80041f4:	8afa      	ldrh	r2, [r7, #22]
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d3f0      	bcc.n	80041de <ring_buffer_queue_arr+0x14>
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, uint8_t *data) {
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff5f 	bl	80040d4 <ring_buffer_is_empty>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 800421c:	2300      	movs	r3, #0
 800421e:	e01a      	b.n	8004256 <ring_buffer_dequeue+0x50>
  }

  *data = buffer->buffer[buffer->tail_index];
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	5c9a      	ldrb	r2, [r3, r2]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8004236:	3301      	adds	r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200

  /** debug features update. */
  buffer->byte_dequeue_hit ++;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208

  return 1;
 8004254:	2301      	movs	r3, #1
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <memset>:
 800425e:	4603      	mov	r3, r0
 8004260:	4402      	add	r2, r0
 8004262:	4293      	cmp	r3, r2
 8004264:	d100      	bne.n	8004268 <memset+0xa>
 8004266:	4770      	bx	lr
 8004268:	f803 1b01 	strb.w	r1, [r3], #1
 800426c:	e7f9      	b.n	8004262 <memset+0x4>
	...

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	2600      	movs	r6, #0
 8004274:	4d0c      	ldr	r5, [pc, #48]	@ (80042a8 <__libc_init_array+0x38>)
 8004276:	4c0d      	ldr	r4, [pc, #52]	@ (80042ac <__libc_init_array+0x3c>)
 8004278:	1b64      	subs	r4, r4, r5
 800427a:	10a4      	asrs	r4, r4, #2
 800427c:	42a6      	cmp	r6, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	f000 f81a 	bl	80042b8 <_init>
 8004284:	2600      	movs	r6, #0
 8004286:	4d0a      	ldr	r5, [pc, #40]	@ (80042b0 <__libc_init_array+0x40>)
 8004288:	4c0a      	ldr	r4, [pc, #40]	@ (80042b4 <__libc_init_array+0x44>)
 800428a:	1b64      	subs	r4, r4, r5
 800428c:	10a4      	asrs	r4, r4, #2
 800428e:	42a6      	cmp	r6, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f855 3b04 	ldr.w	r3, [r5], #4
 8004298:	4798      	blx	r3
 800429a:	3601      	adds	r6, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a2:	4798      	blx	r3
 80042a4:	3601      	adds	r6, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	080042fc 	.word	0x080042fc
 80042ac:	080042fc 	.word	0x080042fc
 80042b0:	080042fc 	.word	0x080042fc
 80042b4:	08004300 	.word	0x08004300

080042b8 <_init>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr

080042c4 <_fini>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr
