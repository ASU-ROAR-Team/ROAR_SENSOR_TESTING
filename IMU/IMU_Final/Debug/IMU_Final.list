
IMU_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080043c8  080043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004678  08004678  00006074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004678  08004678  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004678  08004678  00005678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800467c  0800467c  0000567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004680  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000078  080046f4  00006078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080046f4  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d48  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b45  00000000  00000000  0000dde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0000f930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a0  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d7e  00000000  00000000  000108a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bba5  00000000  00000000  0001361e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff3d  00000000  00000000  0001f1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002648  00000000  00000000  000af144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000b178c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043b0 	.word	0x080043b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080043b0 	.word	0x080043b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_ddiv>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46de      	mov	lr, fp
 8000238:	4645      	mov	r5, r8
 800023a:	4657      	mov	r7, sl
 800023c:	464e      	mov	r6, r9
 800023e:	b5e0      	push	{r5, r6, r7, lr}
 8000240:	b087      	sub	sp, #28
 8000242:	9200      	str	r2, [sp, #0]
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	030b      	lsls	r3, r1, #12
 8000248:	0b1b      	lsrs	r3, r3, #12
 800024a:	469b      	mov	fp, r3
 800024c:	0fca      	lsrs	r2, r1, #31
 800024e:	004b      	lsls	r3, r1, #1
 8000250:	0004      	movs	r4, r0
 8000252:	4680      	mov	r8, r0
 8000254:	0d5b      	lsrs	r3, r3, #21
 8000256:	9202      	str	r2, [sp, #8]
 8000258:	d100      	bne.n	800025c <__aeabi_ddiv+0x28>
 800025a:	e098      	b.n	800038e <__aeabi_ddiv+0x15a>
 800025c:	4a7c      	ldr	r2, [pc, #496]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d037      	beq.n	80002d2 <__aeabi_ddiv+0x9e>
 8000262:	4659      	mov	r1, fp
 8000264:	0f42      	lsrs	r2, r0, #29
 8000266:	00c9      	lsls	r1, r1, #3
 8000268:	430a      	orrs	r2, r1
 800026a:	2180      	movs	r1, #128	@ 0x80
 800026c:	0409      	lsls	r1, r1, #16
 800026e:	4311      	orrs	r1, r2
 8000270:	00c2      	lsls	r2, r0, #3
 8000272:	4690      	mov	r8, r2
 8000274:	4a77      	ldr	r2, [pc, #476]	@ (8000454 <__aeabi_ddiv+0x220>)
 8000276:	4689      	mov	r9, r1
 8000278:	4692      	mov	sl, r2
 800027a:	449a      	add	sl, r3
 800027c:	2300      	movs	r3, #0
 800027e:	2400      	movs	r4, #0
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	9e00      	ldr	r6, [sp, #0]
 8000284:	9f01      	ldr	r7, [sp, #4]
 8000286:	033b      	lsls	r3, r7, #12
 8000288:	0b1b      	lsrs	r3, r3, #12
 800028a:	469b      	mov	fp, r3
 800028c:	007b      	lsls	r3, r7, #1
 800028e:	0030      	movs	r0, r6
 8000290:	0d5b      	lsrs	r3, r3, #21
 8000292:	0ffd      	lsrs	r5, r7, #31
 8000294:	2b00      	cmp	r3, #0
 8000296:	d059      	beq.n	800034c <__aeabi_ddiv+0x118>
 8000298:	4a6d      	ldr	r2, [pc, #436]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d048      	beq.n	8000330 <__aeabi_ddiv+0xfc>
 800029e:	4659      	mov	r1, fp
 80002a0:	0f72      	lsrs	r2, r6, #29
 80002a2:	00c9      	lsls	r1, r1, #3
 80002a4:	430a      	orrs	r2, r1
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	0409      	lsls	r1, r1, #16
 80002aa:	4311      	orrs	r1, r2
 80002ac:	468b      	mov	fp, r1
 80002ae:	4969      	ldr	r1, [pc, #420]	@ (8000454 <__aeabi_ddiv+0x220>)
 80002b0:	00f2      	lsls	r2, r6, #3
 80002b2:	468c      	mov	ip, r1
 80002b4:	4651      	mov	r1, sl
 80002b6:	4463      	add	r3, ip
 80002b8:	1acb      	subs	r3, r1, r3
 80002ba:	469a      	mov	sl, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	9e02      	ldr	r6, [sp, #8]
 80002c0:	406e      	eors	r6, r5
 80002c2:	b2f6      	uxtb	r6, r6
 80002c4:	2c0f      	cmp	r4, #15
 80002c6:	d900      	bls.n	80002ca <__aeabi_ddiv+0x96>
 80002c8:	e0ce      	b.n	8000468 <__aeabi_ddiv+0x234>
 80002ca:	4b63      	ldr	r3, [pc, #396]	@ (8000458 <__aeabi_ddiv+0x224>)
 80002cc:	00a4      	lsls	r4, r4, #2
 80002ce:	591b      	ldr	r3, [r3, r4]
 80002d0:	469f      	mov	pc, r3
 80002d2:	465a      	mov	r2, fp
 80002d4:	4302      	orrs	r2, r0
 80002d6:	4691      	mov	r9, r2
 80002d8:	d000      	beq.n	80002dc <__aeabi_ddiv+0xa8>
 80002da:	e090      	b.n	80003fe <__aeabi_ddiv+0x1ca>
 80002dc:	469a      	mov	sl, r3
 80002de:	2302      	movs	r3, #2
 80002e0:	4690      	mov	r8, r2
 80002e2:	2408      	movs	r4, #8
 80002e4:	9303      	str	r3, [sp, #12]
 80002e6:	e7cc      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80002e8:	46cb      	mov	fp, r9
 80002ea:	4642      	mov	r2, r8
 80002ec:	9d02      	ldr	r5, [sp, #8]
 80002ee:	9903      	ldr	r1, [sp, #12]
 80002f0:	2902      	cmp	r1, #2
 80002f2:	d100      	bne.n	80002f6 <__aeabi_ddiv+0xc2>
 80002f4:	e1de      	b.n	80006b4 <__aeabi_ddiv+0x480>
 80002f6:	2903      	cmp	r1, #3
 80002f8:	d100      	bne.n	80002fc <__aeabi_ddiv+0xc8>
 80002fa:	e08d      	b.n	8000418 <__aeabi_ddiv+0x1e4>
 80002fc:	2901      	cmp	r1, #1
 80002fe:	d000      	beq.n	8000302 <__aeabi_ddiv+0xce>
 8000300:	e179      	b.n	80005f6 <__aeabi_ddiv+0x3c2>
 8000302:	002e      	movs	r6, r5
 8000304:	2200      	movs	r2, #0
 8000306:	2300      	movs	r3, #0
 8000308:	2400      	movs	r4, #0
 800030a:	4690      	mov	r8, r2
 800030c:	051b      	lsls	r3, r3, #20
 800030e:	4323      	orrs	r3, r4
 8000310:	07f6      	lsls	r6, r6, #31
 8000312:	4333      	orrs	r3, r6
 8000314:	4640      	mov	r0, r8
 8000316:	0019      	movs	r1, r3
 8000318:	b007      	add	sp, #28
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2200      	movs	r2, #0
 8000328:	2400      	movs	r4, #0
 800032a:	4690      	mov	r8, r2
 800032c:	4b48      	ldr	r3, [pc, #288]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800032e:	e7ed      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000330:	465a      	mov	r2, fp
 8000332:	9b00      	ldr	r3, [sp, #0]
 8000334:	431a      	orrs	r2, r3
 8000336:	4b49      	ldr	r3, [pc, #292]	@ (800045c <__aeabi_ddiv+0x228>)
 8000338:	469c      	mov	ip, r3
 800033a:	44e2      	add	sl, ip
 800033c:	2a00      	cmp	r2, #0
 800033e:	d159      	bne.n	80003f4 <__aeabi_ddiv+0x1c0>
 8000340:	2302      	movs	r3, #2
 8000342:	431c      	orrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	2102      	movs	r1, #2
 8000348:	469b      	mov	fp, r3
 800034a:	e7b8      	b.n	80002be <__aeabi_ddiv+0x8a>
 800034c:	465a      	mov	r2, fp
 800034e:	9b00      	ldr	r3, [sp, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	d049      	beq.n	80003e8 <__aeabi_ddiv+0x1b4>
 8000354:	465b      	mov	r3, fp
 8000356:	2b00      	cmp	r3, #0
 8000358:	d100      	bne.n	800035c <__aeabi_ddiv+0x128>
 800035a:	e19c      	b.n	8000696 <__aeabi_ddiv+0x462>
 800035c:	4658      	mov	r0, fp
 800035e:	f000 fad3 	bl	8000908 <__clzsi2>
 8000362:	0002      	movs	r2, r0
 8000364:	0003      	movs	r3, r0
 8000366:	3a0b      	subs	r2, #11
 8000368:	271d      	movs	r7, #29
 800036a:	9e00      	ldr	r6, [sp, #0]
 800036c:	1aba      	subs	r2, r7, r2
 800036e:	0019      	movs	r1, r3
 8000370:	4658      	mov	r0, fp
 8000372:	40d6      	lsrs	r6, r2
 8000374:	3908      	subs	r1, #8
 8000376:	4088      	lsls	r0, r1
 8000378:	0032      	movs	r2, r6
 800037a:	4302      	orrs	r2, r0
 800037c:	4693      	mov	fp, r2
 800037e:	9a00      	ldr	r2, [sp, #0]
 8000380:	408a      	lsls	r2, r1
 8000382:	4937      	ldr	r1, [pc, #220]	@ (8000460 <__aeabi_ddiv+0x22c>)
 8000384:	4453      	add	r3, sl
 8000386:	468a      	mov	sl, r1
 8000388:	2100      	movs	r1, #0
 800038a:	449a      	add	sl, r3
 800038c:	e797      	b.n	80002be <__aeabi_ddiv+0x8a>
 800038e:	465b      	mov	r3, fp
 8000390:	4303      	orrs	r3, r0
 8000392:	4699      	mov	r9, r3
 8000394:	d021      	beq.n	80003da <__aeabi_ddiv+0x1a6>
 8000396:	465b      	mov	r3, fp
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_ddiv+0x16a>
 800039c:	e169      	b.n	8000672 <__aeabi_ddiv+0x43e>
 800039e:	4658      	mov	r0, fp
 80003a0:	f000 fab2 	bl	8000908 <__clzsi2>
 80003a4:	230b      	movs	r3, #11
 80003a6:	425b      	negs	r3, r3
 80003a8:	469c      	mov	ip, r3
 80003aa:	0002      	movs	r2, r0
 80003ac:	4484      	add	ip, r0
 80003ae:	4666      	mov	r6, ip
 80003b0:	231d      	movs	r3, #29
 80003b2:	1b9b      	subs	r3, r3, r6
 80003b4:	0026      	movs	r6, r4
 80003b6:	0011      	movs	r1, r2
 80003b8:	4658      	mov	r0, fp
 80003ba:	40de      	lsrs	r6, r3
 80003bc:	3908      	subs	r1, #8
 80003be:	4088      	lsls	r0, r1
 80003c0:	0033      	movs	r3, r6
 80003c2:	4303      	orrs	r3, r0
 80003c4:	4699      	mov	r9, r3
 80003c6:	0023      	movs	r3, r4
 80003c8:	408b      	lsls	r3, r1
 80003ca:	4698      	mov	r8, r3
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <__aeabi_ddiv+0x230>)
 80003ce:	2400      	movs	r4, #0
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	469a      	mov	sl, r3
 80003d4:	2300      	movs	r3, #0
 80003d6:	9303      	str	r3, [sp, #12]
 80003d8:	e753      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80003da:	2300      	movs	r3, #0
 80003dc:	4698      	mov	r8, r3
 80003de:	469a      	mov	sl, r3
 80003e0:	3301      	adds	r3, #1
 80003e2:	2404      	movs	r4, #4
 80003e4:	9303      	str	r3, [sp, #12]
 80003e6:	e74c      	b.n	8000282 <__aeabi_ddiv+0x4e>
 80003e8:	2301      	movs	r3, #1
 80003ea:	431c      	orrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	469b      	mov	fp, r3
 80003f2:	e764      	b.n	80002be <__aeabi_ddiv+0x8a>
 80003f4:	2303      	movs	r3, #3
 80003f6:	0032      	movs	r2, r6
 80003f8:	2103      	movs	r1, #3
 80003fa:	431c      	orrs	r4, r3
 80003fc:	e75f      	b.n	80002be <__aeabi_ddiv+0x8a>
 80003fe:	469a      	mov	sl, r3
 8000400:	2303      	movs	r3, #3
 8000402:	46d9      	mov	r9, fp
 8000404:	240c      	movs	r4, #12
 8000406:	9303      	str	r3, [sp, #12]
 8000408:	e73b      	b.n	8000282 <__aeabi_ddiv+0x4e>
 800040a:	2300      	movs	r3, #0
 800040c:	2480      	movs	r4, #128	@ 0x80
 800040e:	4698      	mov	r8, r3
 8000410:	2600      	movs	r6, #0
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <__aeabi_ddiv+0x21c>)
 8000414:	0324      	lsls	r4, r4, #12
 8000416:	e779      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000418:	2480      	movs	r4, #128	@ 0x80
 800041a:	465b      	mov	r3, fp
 800041c:	0324      	lsls	r4, r4, #12
 800041e:	431c      	orrs	r4, r3
 8000420:	0324      	lsls	r4, r4, #12
 8000422:	002e      	movs	r6, r5
 8000424:	4690      	mov	r8, r2
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <__aeabi_ddiv+0x21c>)
 8000428:	0b24      	lsrs	r4, r4, #12
 800042a:	e76f      	b.n	800030c <__aeabi_ddiv+0xd8>
 800042c:	2480      	movs	r4, #128	@ 0x80
 800042e:	464b      	mov	r3, r9
 8000430:	0324      	lsls	r4, r4, #12
 8000432:	4223      	tst	r3, r4
 8000434:	d002      	beq.n	800043c <__aeabi_ddiv+0x208>
 8000436:	465b      	mov	r3, fp
 8000438:	4223      	tst	r3, r4
 800043a:	d0f0      	beq.n	800041e <__aeabi_ddiv+0x1ea>
 800043c:	2480      	movs	r4, #128	@ 0x80
 800043e:	464b      	mov	r3, r9
 8000440:	0324      	lsls	r4, r4, #12
 8000442:	431c      	orrs	r4, r3
 8000444:	0324      	lsls	r4, r4, #12
 8000446:	9e02      	ldr	r6, [sp, #8]
 8000448:	4b01      	ldr	r3, [pc, #4]	@ (8000450 <__aeabi_ddiv+0x21c>)
 800044a:	0b24      	lsrs	r4, r4, #12
 800044c:	e75e      	b.n	800030c <__aeabi_ddiv+0xd8>
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	000007ff 	.word	0x000007ff
 8000454:	fffffc01 	.word	0xfffffc01
 8000458:	080045d4 	.word	0x080045d4
 800045c:	fffff801 	.word	0xfffff801
 8000460:	000003f3 	.word	0x000003f3
 8000464:	fffffc0d 	.word	0xfffffc0d
 8000468:	45cb      	cmp	fp, r9
 800046a:	d200      	bcs.n	800046e <__aeabi_ddiv+0x23a>
 800046c:	e0f8      	b.n	8000660 <__aeabi_ddiv+0x42c>
 800046e:	d100      	bne.n	8000472 <__aeabi_ddiv+0x23e>
 8000470:	e0f3      	b.n	800065a <__aeabi_ddiv+0x426>
 8000472:	2301      	movs	r3, #1
 8000474:	425b      	negs	r3, r3
 8000476:	469c      	mov	ip, r3
 8000478:	4644      	mov	r4, r8
 800047a:	4648      	mov	r0, r9
 800047c:	2500      	movs	r5, #0
 800047e:	44e2      	add	sl, ip
 8000480:	465b      	mov	r3, fp
 8000482:	0e17      	lsrs	r7, r2, #24
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	431f      	orrs	r7, r3
 8000488:	0c19      	lsrs	r1, r3, #16
 800048a:	043b      	lsls	r3, r7, #16
 800048c:	0212      	lsls	r2, r2, #8
 800048e:	9700      	str	r7, [sp, #0]
 8000490:	0c1f      	lsrs	r7, r3, #16
 8000492:	4691      	mov	r9, r2
 8000494:	9102      	str	r1, [sp, #8]
 8000496:	9703      	str	r7, [sp, #12]
 8000498:	f7ff fec6 	bl	8000228 <__aeabi_uidivmod>
 800049c:	0002      	movs	r2, r0
 800049e:	437a      	muls	r2, r7
 80004a0:	040b      	lsls	r3, r1, #16
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	4680      	mov	r8, r0
 80004a6:	4319      	orrs	r1, r3
 80004a8:	428a      	cmp	r2, r1
 80004aa:	d909      	bls.n	80004c0 <__aeabi_ddiv+0x28c>
 80004ac:	9f00      	ldr	r7, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	46bc      	mov	ip, r7
 80004b2:	425b      	negs	r3, r3
 80004b4:	4461      	add	r1, ip
 80004b6:	469c      	mov	ip, r3
 80004b8:	44e0      	add	r8, ip
 80004ba:	428f      	cmp	r7, r1
 80004bc:	d800      	bhi.n	80004c0 <__aeabi_ddiv+0x28c>
 80004be:	e15c      	b.n	800077a <__aeabi_ddiv+0x546>
 80004c0:	1a88      	subs	r0, r1, r2
 80004c2:	9902      	ldr	r1, [sp, #8]
 80004c4:	f7ff feb0 	bl	8000228 <__aeabi_uidivmod>
 80004c8:	9a03      	ldr	r2, [sp, #12]
 80004ca:	0424      	lsls	r4, r4, #16
 80004cc:	4342      	muls	r2, r0
 80004ce:	0409      	lsls	r1, r1, #16
 80004d0:	0c24      	lsrs	r4, r4, #16
 80004d2:	0003      	movs	r3, r0
 80004d4:	430c      	orrs	r4, r1
 80004d6:	42a2      	cmp	r2, r4
 80004d8:	d906      	bls.n	80004e8 <__aeabi_ddiv+0x2b4>
 80004da:	9900      	ldr	r1, [sp, #0]
 80004dc:	3b01      	subs	r3, #1
 80004de:	468c      	mov	ip, r1
 80004e0:	4464      	add	r4, ip
 80004e2:	42a1      	cmp	r1, r4
 80004e4:	d800      	bhi.n	80004e8 <__aeabi_ddiv+0x2b4>
 80004e6:	e142      	b.n	800076e <__aeabi_ddiv+0x53a>
 80004e8:	1aa0      	subs	r0, r4, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	0412      	lsls	r2, r2, #16
 80004ee:	431a      	orrs	r2, r3
 80004f0:	4693      	mov	fp, r2
 80004f2:	464b      	mov	r3, r9
 80004f4:	4659      	mov	r1, fp
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001f      	movs	r7, r3
 80004fa:	9304      	str	r3, [sp, #16]
 80004fc:	040b      	lsls	r3, r1, #16
 80004fe:	4649      	mov	r1, r9
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	0c09      	lsrs	r1, r1, #16
 8000504:	000c      	movs	r4, r1
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	435c      	muls	r4, r3
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	437b      	muls	r3, r7
 800050e:	4688      	mov	r8, r1
 8000510:	4351      	muls	r1, r2
 8000512:	437a      	muls	r2, r7
 8000514:	0c27      	lsrs	r7, r4, #16
 8000516:	46bc      	mov	ip, r7
 8000518:	185b      	adds	r3, r3, r1
 800051a:	4463      	add	r3, ip
 800051c:	4299      	cmp	r1, r3
 800051e:	d903      	bls.n	8000528 <__aeabi_ddiv+0x2f4>
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	0249      	lsls	r1, r1, #9
 8000524:	468c      	mov	ip, r1
 8000526:	4462      	add	r2, ip
 8000528:	0c19      	lsrs	r1, r3, #16
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	041b      	lsls	r3, r3, #16
 800052e:	0c24      	lsrs	r4, r4, #16
 8000530:	188a      	adds	r2, r1, r2
 8000532:	191c      	adds	r4, r3, r4
 8000534:	4290      	cmp	r0, r2
 8000536:	d302      	bcc.n	800053e <__aeabi_ddiv+0x30a>
 8000538:	d116      	bne.n	8000568 <__aeabi_ddiv+0x334>
 800053a:	42a5      	cmp	r5, r4
 800053c:	d214      	bcs.n	8000568 <__aeabi_ddiv+0x334>
 800053e:	465b      	mov	r3, fp
 8000540:	9f00      	ldr	r7, [sp, #0]
 8000542:	3b01      	subs	r3, #1
 8000544:	444d      	add	r5, r9
 8000546:	9305      	str	r3, [sp, #20]
 8000548:	454d      	cmp	r5, r9
 800054a:	419b      	sbcs	r3, r3
 800054c:	46bc      	mov	ip, r7
 800054e:	425b      	negs	r3, r3
 8000550:	4463      	add	r3, ip
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	4287      	cmp	r7, r0
 8000556:	d300      	bcc.n	800055a <__aeabi_ddiv+0x326>
 8000558:	e102      	b.n	8000760 <__aeabi_ddiv+0x52c>
 800055a:	4282      	cmp	r2, r0
 800055c:	d900      	bls.n	8000560 <__aeabi_ddiv+0x32c>
 800055e:	e129      	b.n	80007b4 <__aeabi_ddiv+0x580>
 8000560:	d100      	bne.n	8000564 <__aeabi_ddiv+0x330>
 8000562:	e124      	b.n	80007ae <__aeabi_ddiv+0x57a>
 8000564:	9b05      	ldr	r3, [sp, #20]
 8000566:	469b      	mov	fp, r3
 8000568:	1b2c      	subs	r4, r5, r4
 800056a:	42a5      	cmp	r5, r4
 800056c:	41ad      	sbcs	r5, r5
 800056e:	9b00      	ldr	r3, [sp, #0]
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	426d      	negs	r5, r5
 8000574:	1b40      	subs	r0, r0, r5
 8000576:	4283      	cmp	r3, r0
 8000578:	d100      	bne.n	800057c <__aeabi_ddiv+0x348>
 800057a:	e10f      	b.n	800079c <__aeabi_ddiv+0x568>
 800057c:	9902      	ldr	r1, [sp, #8]
 800057e:	f7ff fe53 	bl	8000228 <__aeabi_uidivmod>
 8000582:	9a03      	ldr	r2, [sp, #12]
 8000584:	040b      	lsls	r3, r1, #16
 8000586:	4342      	muls	r2, r0
 8000588:	0c21      	lsrs	r1, r4, #16
 800058a:	0005      	movs	r5, r0
 800058c:	4319      	orrs	r1, r3
 800058e:	428a      	cmp	r2, r1
 8000590:	d900      	bls.n	8000594 <__aeabi_ddiv+0x360>
 8000592:	e0cb      	b.n	800072c <__aeabi_ddiv+0x4f8>
 8000594:	1a88      	subs	r0, r1, r2
 8000596:	9902      	ldr	r1, [sp, #8]
 8000598:	f7ff fe46 	bl	8000228 <__aeabi_uidivmod>
 800059c:	9a03      	ldr	r2, [sp, #12]
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	4342      	muls	r2, r0
 80005a2:	0409      	lsls	r1, r1, #16
 80005a4:	0c24      	lsrs	r4, r4, #16
 80005a6:	0003      	movs	r3, r0
 80005a8:	430c      	orrs	r4, r1
 80005aa:	42a2      	cmp	r2, r4
 80005ac:	d900      	bls.n	80005b0 <__aeabi_ddiv+0x37c>
 80005ae:	e0ca      	b.n	8000746 <__aeabi_ddiv+0x512>
 80005b0:	4641      	mov	r1, r8
 80005b2:	1aa4      	subs	r4, r4, r2
 80005b4:	042a      	lsls	r2, r5, #16
 80005b6:	431a      	orrs	r2, r3
 80005b8:	9f04      	ldr	r7, [sp, #16]
 80005ba:	0413      	lsls	r3, r2, #16
 80005bc:	0c1b      	lsrs	r3, r3, #16
 80005be:	4359      	muls	r1, r3
 80005c0:	4640      	mov	r0, r8
 80005c2:	437b      	muls	r3, r7
 80005c4:	469c      	mov	ip, r3
 80005c6:	0c15      	lsrs	r5, r2, #16
 80005c8:	4368      	muls	r0, r5
 80005ca:	0c0b      	lsrs	r3, r1, #16
 80005cc:	4484      	add	ip, r0
 80005ce:	4463      	add	r3, ip
 80005d0:	437d      	muls	r5, r7
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d903      	bls.n	80005de <__aeabi_ddiv+0x3aa>
 80005d6:	2080      	movs	r0, #128	@ 0x80
 80005d8:	0240      	lsls	r0, r0, #9
 80005da:	4684      	mov	ip, r0
 80005dc:	4465      	add	r5, ip
 80005de:	0c18      	lsrs	r0, r3, #16
 80005e0:	0409      	lsls	r1, r1, #16
 80005e2:	041b      	lsls	r3, r3, #16
 80005e4:	0c09      	lsrs	r1, r1, #16
 80005e6:	1940      	adds	r0, r0, r5
 80005e8:	185b      	adds	r3, r3, r1
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d327      	bcc.n	800063e <__aeabi_ddiv+0x40a>
 80005ee:	d023      	beq.n	8000638 <__aeabi_ddiv+0x404>
 80005f0:	2301      	movs	r3, #1
 80005f2:	0035      	movs	r5, r6
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4b94      	ldr	r3, [pc, #592]	@ (8000848 <__aeabi_ddiv+0x614>)
 80005f8:	4453      	add	r3, sl
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	dd60      	ble.n	80006c0 <__aeabi_ddiv+0x48c>
 80005fe:	0751      	lsls	r1, r2, #29
 8000600:	d000      	beq.n	8000604 <__aeabi_ddiv+0x3d0>
 8000602:	e086      	b.n	8000712 <__aeabi_ddiv+0x4de>
 8000604:	002e      	movs	r6, r5
 8000606:	08d1      	lsrs	r1, r2, #3
 8000608:	465a      	mov	r2, fp
 800060a:	01d2      	lsls	r2, r2, #7
 800060c:	d506      	bpl.n	800061c <__aeabi_ddiv+0x3e8>
 800060e:	465a      	mov	r2, fp
 8000610:	4b8e      	ldr	r3, [pc, #568]	@ (800084c <__aeabi_ddiv+0x618>)
 8000612:	401a      	ands	r2, r3
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	4693      	mov	fp, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4453      	add	r3, sl
 800061c:	4a8c      	ldr	r2, [pc, #560]	@ (8000850 <__aeabi_ddiv+0x61c>)
 800061e:	4293      	cmp	r3, r2
 8000620:	dd00      	ble.n	8000624 <__aeabi_ddiv+0x3f0>
 8000622:	e680      	b.n	8000326 <__aeabi_ddiv+0xf2>
 8000624:	465a      	mov	r2, fp
 8000626:	0752      	lsls	r2, r2, #29
 8000628:	430a      	orrs	r2, r1
 800062a:	4690      	mov	r8, r2
 800062c:	465a      	mov	r2, fp
 800062e:	055b      	lsls	r3, r3, #21
 8000630:	0254      	lsls	r4, r2, #9
 8000632:	0b24      	lsrs	r4, r4, #12
 8000634:	0d5b      	lsrs	r3, r3, #21
 8000636:	e669      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000638:	0035      	movs	r5, r6
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_ddiv+0x3c2>
 800063e:	9d00      	ldr	r5, [sp, #0]
 8000640:	1e51      	subs	r1, r2, #1
 8000642:	46ac      	mov	ip, r5
 8000644:	4464      	add	r4, ip
 8000646:	42ac      	cmp	r4, r5
 8000648:	d200      	bcs.n	800064c <__aeabi_ddiv+0x418>
 800064a:	e09e      	b.n	800078a <__aeabi_ddiv+0x556>
 800064c:	4284      	cmp	r4, r0
 800064e:	d200      	bcs.n	8000652 <__aeabi_ddiv+0x41e>
 8000650:	e0e1      	b.n	8000816 <__aeabi_ddiv+0x5e2>
 8000652:	d100      	bne.n	8000656 <__aeabi_ddiv+0x422>
 8000654:	e0ee      	b.n	8000834 <__aeabi_ddiv+0x600>
 8000656:	000a      	movs	r2, r1
 8000658:	e7ca      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 800065a:	4542      	cmp	r2, r8
 800065c:	d900      	bls.n	8000660 <__aeabi_ddiv+0x42c>
 800065e:	e708      	b.n	8000472 <__aeabi_ddiv+0x23e>
 8000660:	464b      	mov	r3, r9
 8000662:	07dc      	lsls	r4, r3, #31
 8000664:	0858      	lsrs	r0, r3, #1
 8000666:	4643      	mov	r3, r8
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	431c      	orrs	r4, r3
 800066c:	4643      	mov	r3, r8
 800066e:	07dd      	lsls	r5, r3, #31
 8000670:	e706      	b.n	8000480 <__aeabi_ddiv+0x24c>
 8000672:	f000 f949 	bl	8000908 <__clzsi2>
 8000676:	2315      	movs	r3, #21
 8000678:	469c      	mov	ip, r3
 800067a:	4484      	add	ip, r0
 800067c:	0002      	movs	r2, r0
 800067e:	4663      	mov	r3, ip
 8000680:	3220      	adds	r2, #32
 8000682:	2b1c      	cmp	r3, #28
 8000684:	dc00      	bgt.n	8000688 <__aeabi_ddiv+0x454>
 8000686:	e692      	b.n	80003ae <__aeabi_ddiv+0x17a>
 8000688:	0023      	movs	r3, r4
 800068a:	3808      	subs	r0, #8
 800068c:	4083      	lsls	r3, r0
 800068e:	4699      	mov	r9, r3
 8000690:	2300      	movs	r3, #0
 8000692:	4698      	mov	r8, r3
 8000694:	e69a      	b.n	80003cc <__aeabi_ddiv+0x198>
 8000696:	f000 f937 	bl	8000908 <__clzsi2>
 800069a:	0002      	movs	r2, r0
 800069c:	0003      	movs	r3, r0
 800069e:	3215      	adds	r2, #21
 80006a0:	3320      	adds	r3, #32
 80006a2:	2a1c      	cmp	r2, #28
 80006a4:	dc00      	bgt.n	80006a8 <__aeabi_ddiv+0x474>
 80006a6:	e65f      	b.n	8000368 <__aeabi_ddiv+0x134>
 80006a8:	9900      	ldr	r1, [sp, #0]
 80006aa:	3808      	subs	r0, #8
 80006ac:	4081      	lsls	r1, r0
 80006ae:	2200      	movs	r2, #0
 80006b0:	468b      	mov	fp, r1
 80006b2:	e666      	b.n	8000382 <__aeabi_ddiv+0x14e>
 80006b4:	2200      	movs	r2, #0
 80006b6:	002e      	movs	r6, r5
 80006b8:	2400      	movs	r4, #0
 80006ba:	4690      	mov	r8, r2
 80006bc:	4b65      	ldr	r3, [pc, #404]	@ (8000854 <__aeabi_ddiv+0x620>)
 80006be:	e625      	b.n	800030c <__aeabi_ddiv+0xd8>
 80006c0:	002e      	movs	r6, r5
 80006c2:	2101      	movs	r1, #1
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	2938      	cmp	r1, #56	@ 0x38
 80006c8:	dd00      	ble.n	80006cc <__aeabi_ddiv+0x498>
 80006ca:	e61b      	b.n	8000304 <__aeabi_ddiv+0xd0>
 80006cc:	291f      	cmp	r1, #31
 80006ce:	dc7e      	bgt.n	80007ce <__aeabi_ddiv+0x59a>
 80006d0:	4861      	ldr	r0, [pc, #388]	@ (8000858 <__aeabi_ddiv+0x624>)
 80006d2:	0014      	movs	r4, r2
 80006d4:	4450      	add	r0, sl
 80006d6:	465b      	mov	r3, fp
 80006d8:	4082      	lsls	r2, r0
 80006da:	4083      	lsls	r3, r0
 80006dc:	40cc      	lsrs	r4, r1
 80006de:	1e50      	subs	r0, r2, #1
 80006e0:	4182      	sbcs	r2, r0
 80006e2:	4323      	orrs	r3, r4
 80006e4:	431a      	orrs	r2, r3
 80006e6:	465b      	mov	r3, fp
 80006e8:	40cb      	lsrs	r3, r1
 80006ea:	0751      	lsls	r1, r2, #29
 80006ec:	d009      	beq.n	8000702 <__aeabi_ddiv+0x4ce>
 80006ee:	210f      	movs	r1, #15
 80006f0:	4011      	ands	r1, r2
 80006f2:	2904      	cmp	r1, #4
 80006f4:	d005      	beq.n	8000702 <__aeabi_ddiv+0x4ce>
 80006f6:	1d11      	adds	r1, r2, #4
 80006f8:	4291      	cmp	r1, r2
 80006fa:	4192      	sbcs	r2, r2
 80006fc:	4252      	negs	r2, r2
 80006fe:	189b      	adds	r3, r3, r2
 8000700:	000a      	movs	r2, r1
 8000702:	0219      	lsls	r1, r3, #8
 8000704:	d400      	bmi.n	8000708 <__aeabi_ddiv+0x4d4>
 8000706:	e09b      	b.n	8000840 <__aeabi_ddiv+0x60c>
 8000708:	2200      	movs	r2, #0
 800070a:	2301      	movs	r3, #1
 800070c:	2400      	movs	r4, #0
 800070e:	4690      	mov	r8, r2
 8000710:	e5fc      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000712:	210f      	movs	r1, #15
 8000714:	4011      	ands	r1, r2
 8000716:	2904      	cmp	r1, #4
 8000718:	d100      	bne.n	800071c <__aeabi_ddiv+0x4e8>
 800071a:	e773      	b.n	8000604 <__aeabi_ddiv+0x3d0>
 800071c:	1d11      	adds	r1, r2, #4
 800071e:	4291      	cmp	r1, r2
 8000720:	4192      	sbcs	r2, r2
 8000722:	4252      	negs	r2, r2
 8000724:	002e      	movs	r6, r5
 8000726:	08c9      	lsrs	r1, r1, #3
 8000728:	4493      	add	fp, r2
 800072a:	e76d      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 800072c:	9b00      	ldr	r3, [sp, #0]
 800072e:	3d01      	subs	r5, #1
 8000730:	469c      	mov	ip, r3
 8000732:	4461      	add	r1, ip
 8000734:	428b      	cmp	r3, r1
 8000736:	d900      	bls.n	800073a <__aeabi_ddiv+0x506>
 8000738:	e72c      	b.n	8000594 <__aeabi_ddiv+0x360>
 800073a:	428a      	cmp	r2, r1
 800073c:	d800      	bhi.n	8000740 <__aeabi_ddiv+0x50c>
 800073e:	e729      	b.n	8000594 <__aeabi_ddiv+0x360>
 8000740:	1e85      	subs	r5, r0, #2
 8000742:	4461      	add	r1, ip
 8000744:	e726      	b.n	8000594 <__aeabi_ddiv+0x360>
 8000746:	9900      	ldr	r1, [sp, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	468c      	mov	ip, r1
 800074c:	4464      	add	r4, ip
 800074e:	42a1      	cmp	r1, r4
 8000750:	d900      	bls.n	8000754 <__aeabi_ddiv+0x520>
 8000752:	e72d      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 8000754:	42a2      	cmp	r2, r4
 8000756:	d800      	bhi.n	800075a <__aeabi_ddiv+0x526>
 8000758:	e72a      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 800075a:	1e83      	subs	r3, r0, #2
 800075c:	4464      	add	r4, ip
 800075e:	e727      	b.n	80005b0 <__aeabi_ddiv+0x37c>
 8000760:	4287      	cmp	r7, r0
 8000762:	d000      	beq.n	8000766 <__aeabi_ddiv+0x532>
 8000764:	e6fe      	b.n	8000564 <__aeabi_ddiv+0x330>
 8000766:	45a9      	cmp	r9, r5
 8000768:	d900      	bls.n	800076c <__aeabi_ddiv+0x538>
 800076a:	e6fb      	b.n	8000564 <__aeabi_ddiv+0x330>
 800076c:	e6f5      	b.n	800055a <__aeabi_ddiv+0x326>
 800076e:	42a2      	cmp	r2, r4
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x540>
 8000772:	e6b9      	b.n	80004e8 <__aeabi_ddiv+0x2b4>
 8000774:	1e83      	subs	r3, r0, #2
 8000776:	4464      	add	r4, ip
 8000778:	e6b6      	b.n	80004e8 <__aeabi_ddiv+0x2b4>
 800077a:	428a      	cmp	r2, r1
 800077c:	d800      	bhi.n	8000780 <__aeabi_ddiv+0x54c>
 800077e:	e69f      	b.n	80004c0 <__aeabi_ddiv+0x28c>
 8000780:	46bc      	mov	ip, r7
 8000782:	1e83      	subs	r3, r0, #2
 8000784:	4698      	mov	r8, r3
 8000786:	4461      	add	r1, ip
 8000788:	e69a      	b.n	80004c0 <__aeabi_ddiv+0x28c>
 800078a:	000a      	movs	r2, r1
 800078c:	4284      	cmp	r4, r0
 800078e:	d000      	beq.n	8000792 <__aeabi_ddiv+0x55e>
 8000790:	e72e      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 8000792:	454b      	cmp	r3, r9
 8000794:	d000      	beq.n	8000798 <__aeabi_ddiv+0x564>
 8000796:	e72b      	b.n	80005f0 <__aeabi_ddiv+0x3bc>
 8000798:	0035      	movs	r5, r6
 800079a:	e72c      	b.n	80005f6 <__aeabi_ddiv+0x3c2>
 800079c:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <__aeabi_ddiv+0x614>)
 800079e:	4a2f      	ldr	r2, [pc, #188]	@ (800085c <__aeabi_ddiv+0x628>)
 80007a0:	4453      	add	r3, sl
 80007a2:	4592      	cmp	sl, r2
 80007a4:	db43      	blt.n	800082e <__aeabi_ddiv+0x5fa>
 80007a6:	2201      	movs	r2, #1
 80007a8:	2100      	movs	r1, #0
 80007aa:	4493      	add	fp, r2
 80007ac:	e72c      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 80007ae:	42ac      	cmp	r4, r5
 80007b0:	d800      	bhi.n	80007b4 <__aeabi_ddiv+0x580>
 80007b2:	e6d7      	b.n	8000564 <__aeabi_ddiv+0x330>
 80007b4:	2302      	movs	r3, #2
 80007b6:	425b      	negs	r3, r3
 80007b8:	469c      	mov	ip, r3
 80007ba:	9900      	ldr	r1, [sp, #0]
 80007bc:	444d      	add	r5, r9
 80007be:	454d      	cmp	r5, r9
 80007c0:	419b      	sbcs	r3, r3
 80007c2:	44e3      	add	fp, ip
 80007c4:	468c      	mov	ip, r1
 80007c6:	425b      	negs	r3, r3
 80007c8:	4463      	add	r3, ip
 80007ca:	18c0      	adds	r0, r0, r3
 80007cc:	e6cc      	b.n	8000568 <__aeabi_ddiv+0x334>
 80007ce:	201f      	movs	r0, #31
 80007d0:	4240      	negs	r0, r0
 80007d2:	1ac3      	subs	r3, r0, r3
 80007d4:	4658      	mov	r0, fp
 80007d6:	40d8      	lsrs	r0, r3
 80007d8:	2920      	cmp	r1, #32
 80007da:	d004      	beq.n	80007e6 <__aeabi_ddiv+0x5b2>
 80007dc:	4659      	mov	r1, fp
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <__aeabi_ddiv+0x62c>)
 80007e0:	4453      	add	r3, sl
 80007e2:	4099      	lsls	r1, r3
 80007e4:	430a      	orrs	r2, r1
 80007e6:	1e53      	subs	r3, r2, #1
 80007e8:	419a      	sbcs	r2, r3
 80007ea:	2307      	movs	r3, #7
 80007ec:	0019      	movs	r1, r3
 80007ee:	4302      	orrs	r2, r0
 80007f0:	2400      	movs	r4, #0
 80007f2:	4011      	ands	r1, r2
 80007f4:	4213      	tst	r3, r2
 80007f6:	d009      	beq.n	800080c <__aeabi_ddiv+0x5d8>
 80007f8:	3308      	adds	r3, #8
 80007fa:	4013      	ands	r3, r2
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d01d      	beq.n	800083c <__aeabi_ddiv+0x608>
 8000800:	1d13      	adds	r3, r2, #4
 8000802:	4293      	cmp	r3, r2
 8000804:	4189      	sbcs	r1, r1
 8000806:	001a      	movs	r2, r3
 8000808:	4249      	negs	r1, r1
 800080a:	0749      	lsls	r1, r1, #29
 800080c:	08d2      	lsrs	r2, r2, #3
 800080e:	430a      	orrs	r2, r1
 8000810:	4690      	mov	r8, r2
 8000812:	2300      	movs	r3, #0
 8000814:	e57a      	b.n	800030c <__aeabi_ddiv+0xd8>
 8000816:	4649      	mov	r1, r9
 8000818:	9f00      	ldr	r7, [sp, #0]
 800081a:	004d      	lsls	r5, r1, #1
 800081c:	454d      	cmp	r5, r9
 800081e:	4189      	sbcs	r1, r1
 8000820:	46bc      	mov	ip, r7
 8000822:	4249      	negs	r1, r1
 8000824:	4461      	add	r1, ip
 8000826:	46a9      	mov	r9, r5
 8000828:	3a02      	subs	r2, #2
 800082a:	1864      	adds	r4, r4, r1
 800082c:	e7ae      	b.n	800078c <__aeabi_ddiv+0x558>
 800082e:	2201      	movs	r2, #1
 8000830:	4252      	negs	r2, r2
 8000832:	e746      	b.n	80006c2 <__aeabi_ddiv+0x48e>
 8000834:	4599      	cmp	r9, r3
 8000836:	d3ee      	bcc.n	8000816 <__aeabi_ddiv+0x5e2>
 8000838:	000a      	movs	r2, r1
 800083a:	e7aa      	b.n	8000792 <__aeabi_ddiv+0x55e>
 800083c:	2100      	movs	r1, #0
 800083e:	e7e5      	b.n	800080c <__aeabi_ddiv+0x5d8>
 8000840:	0759      	lsls	r1, r3, #29
 8000842:	025b      	lsls	r3, r3, #9
 8000844:	0b1c      	lsrs	r4, r3, #12
 8000846:	e7e1      	b.n	800080c <__aeabi_ddiv+0x5d8>
 8000848:	000003ff 	.word	0x000003ff
 800084c:	feffffff 	.word	0xfeffffff
 8000850:	000007fe 	.word	0x000007fe
 8000854:	000007ff 	.word	0x000007ff
 8000858:	0000041e 	.word	0x0000041e
 800085c:	fffffc02 	.word	0xfffffc02
 8000860:	0000043e 	.word	0x0000043e

08000864 <__aeabi_i2d>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	2800      	cmp	r0, #0
 8000868:	d016      	beq.n	8000898 <__aeabi_i2d+0x34>
 800086a:	17c3      	asrs	r3, r0, #31
 800086c:	18c5      	adds	r5, r0, r3
 800086e:	405d      	eors	r5, r3
 8000870:	0fc4      	lsrs	r4, r0, #31
 8000872:	0028      	movs	r0, r5
 8000874:	f000 f848 	bl	8000908 <__clzsi2>
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <__aeabi_i2d+0x58>)
 800087a:	1a1b      	subs	r3, r3, r0
 800087c:	055b      	lsls	r3, r3, #21
 800087e:	0d5b      	lsrs	r3, r3, #21
 8000880:	280a      	cmp	r0, #10
 8000882:	dc14      	bgt.n	80008ae <__aeabi_i2d+0x4a>
 8000884:	0002      	movs	r2, r0
 8000886:	002e      	movs	r6, r5
 8000888:	3215      	adds	r2, #21
 800088a:	4096      	lsls	r6, r2
 800088c:	220b      	movs	r2, #11
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	40d5      	lsrs	r5, r2
 8000892:	032d      	lsls	r5, r5, #12
 8000894:	0b2d      	lsrs	r5, r5, #12
 8000896:	e003      	b.n	80008a0 <__aeabi_i2d+0x3c>
 8000898:	2400      	movs	r4, #0
 800089a:	2300      	movs	r3, #0
 800089c:	2500      	movs	r5, #0
 800089e:	2600      	movs	r6, #0
 80008a0:	051b      	lsls	r3, r3, #20
 80008a2:	432b      	orrs	r3, r5
 80008a4:	07e4      	lsls	r4, r4, #31
 80008a6:	4323      	orrs	r3, r4
 80008a8:	0030      	movs	r0, r6
 80008aa:	0019      	movs	r1, r3
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	380b      	subs	r0, #11
 80008b0:	4085      	lsls	r5, r0
 80008b2:	032d      	lsls	r5, r5, #12
 80008b4:	2600      	movs	r6, #0
 80008b6:	0b2d      	lsrs	r5, r5, #12
 80008b8:	e7f2      	b.n	80008a0 <__aeabi_i2d+0x3c>
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	0000041e 	.word	0x0000041e

080008c0 <__aeabi_ui2d>:
 80008c0:	b510      	push	{r4, lr}
 80008c2:	1e04      	subs	r4, r0, #0
 80008c4:	d010      	beq.n	80008e8 <__aeabi_ui2d+0x28>
 80008c6:	f000 f81f 	bl	8000908 <__clzsi2>
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <__aeabi_ui2d+0x44>)
 80008cc:	1a1b      	subs	r3, r3, r0
 80008ce:	055b      	lsls	r3, r3, #21
 80008d0:	0d5b      	lsrs	r3, r3, #21
 80008d2:	280a      	cmp	r0, #10
 80008d4:	dc0f      	bgt.n	80008f6 <__aeabi_ui2d+0x36>
 80008d6:	220b      	movs	r2, #11
 80008d8:	0021      	movs	r1, r4
 80008da:	1a12      	subs	r2, r2, r0
 80008dc:	40d1      	lsrs	r1, r2
 80008de:	3015      	adds	r0, #21
 80008e0:	030a      	lsls	r2, r1, #12
 80008e2:	4084      	lsls	r4, r0
 80008e4:	0b12      	lsrs	r2, r2, #12
 80008e6:	e001      	b.n	80008ec <__aeabi_ui2d+0x2c>
 80008e8:	2300      	movs	r3, #0
 80008ea:	2200      	movs	r2, #0
 80008ec:	051b      	lsls	r3, r3, #20
 80008ee:	4313      	orrs	r3, r2
 80008f0:	0020      	movs	r0, r4
 80008f2:	0019      	movs	r1, r3
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	0022      	movs	r2, r4
 80008f8:	380b      	subs	r0, #11
 80008fa:	4082      	lsls	r2, r0
 80008fc:	0312      	lsls	r2, r2, #12
 80008fe:	2400      	movs	r4, #0
 8000900:	0b12      	lsrs	r2, r2, #12
 8000902:	e7f3      	b.n	80008ec <__aeabi_ui2d+0x2c>
 8000904:	0000041e 	.word	0x0000041e

08000908 <__clzsi2>:
 8000908:	211c      	movs	r1, #28
 800090a:	2301      	movs	r3, #1
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	4298      	cmp	r0, r3
 8000910:	d301      	bcc.n	8000916 <__clzsi2+0xe>
 8000912:	0c00      	lsrs	r0, r0, #16
 8000914:	3910      	subs	r1, #16
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	4298      	cmp	r0, r3
 800091a:	d301      	bcc.n	8000920 <__clzsi2+0x18>
 800091c:	0a00      	lsrs	r0, r0, #8
 800091e:	3908      	subs	r1, #8
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	4298      	cmp	r0, r3
 8000924:	d301      	bcc.n	800092a <__clzsi2+0x22>
 8000926:	0900      	lsrs	r0, r0, #4
 8000928:	3904      	subs	r1, #4
 800092a:	a202      	add	r2, pc, #8	@ (adr r2, 8000934 <__clzsi2+0x2c>)
 800092c:	5c10      	ldrb	r0, [r2, r0]
 800092e:	1840      	adds	r0, r0, r1
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	02020304 	.word	0x02020304
 8000938:	01010101 	.word	0x01010101
	...

08000944 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <bno055_assignI2C+0x18>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	20000094 	.word	0x20000094

08000960 <bno055_delay>:

void bno055_delay(int time) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fede 	bl	800172c <HAL_Delay>
#endif
}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af02      	add	r7, sp, #8
 800097e:	0002      	movs	r2, r0
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	1c0a      	adds	r2, r1, #0
 8000988:	701a      	strb	r2, [r3, #0]
  uint8_t txdata[2] = {reg, data};
 800098a:	210c      	movs	r1, #12
 800098c:	187b      	adds	r3, r7, r1
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	187b      	adds	r3, r7, r1
 8000996:	1dba      	adds	r2, r7, #6
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	705a      	strb	r2, [r3, #1]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800099c:	4b6c      	ldr	r3, [pc, #432]	@ (8000b50 <bno055_writeData+0x1d8>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	2517      	movs	r5, #23
 80009a2:	197c      	adds	r4, r7, r5
 80009a4:	187a      	adds	r2, r7, r1
 80009a6:	230a      	movs	r3, #10
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2302      	movs	r3, #2
 80009ac:	2150      	movs	r1, #80	@ 0x50
 80009ae:	f001 f9b3 	bl	8001d18 <HAL_I2C_Master_Transmit>
 80009b2:	0003      	movs	r3, r0
 80009b4:	7023      	strb	r3, [r4, #0]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80009b6:	197b      	adds	r3, r7, r5
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d100      	bne.n	80009c0 <bno055_writeData+0x48>
 80009be:	e0c0      	b.n	8000b42 <bno055_writeData+0x1ca>
    return;
  }

  if (status == HAL_ERROR) {
 80009c0:	197b      	adds	r3, r7, r5
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d104      	bne.n	80009d2 <bno055_writeData+0x5a>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80009c8:	4b62      	ldr	r3, [pc, #392]	@ (8000b54 <bno055_writeData+0x1dc>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f002 fe52 	bl	8003674 <puts>
 80009d0:	e01b      	b.n	8000a0a <bno055_writeData+0x92>
  } else if (status == HAL_TIMEOUT) {
 80009d2:	2317      	movs	r3, #23
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d104      	bne.n	80009e6 <bno055_writeData+0x6e>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80009dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000b58 <bno055_writeData+0x1e0>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f002 fe48 	bl	8003674 <puts>
 80009e4:	e011      	b.n	8000a0a <bno055_writeData+0x92>
  } else if (status == HAL_BUSY) {
 80009e6:	2317      	movs	r3, #23
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d104      	bne.n	80009fa <bno055_writeData+0x82>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80009f0:	4b5a      	ldr	r3, [pc, #360]	@ (8000b5c <bno055_writeData+0x1e4>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f002 fe3e 	bl	8003674 <puts>
 80009f8:	e007      	b.n	8000a0a <bno055_writeData+0x92>
  } else {
    printf("Unknown status data %d", status);
 80009fa:	2317      	movs	r3, #23
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b57      	ldr	r3, [pc, #348]	@ (8000b60 <bno055_writeData+0x1e8>)
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f002 fdcf 	bl	80035a8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000a0a:	4b51      	ldr	r3, [pc, #324]	@ (8000b50 <bno055_writeData+0x1d8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fbc0 	bl	8002194 <HAL_I2C_GetError>
 8000a14:	0003      	movs	r3, r0
 8000a16:	613b      	str	r3, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <bno055_writeData+0xa8>
 8000a1e:	e092      	b.n	8000b46 <bno055_writeData+0x1ce>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d104      	bne.n	8000a30 <bno055_writeData+0xb8>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000a26:	4b4f      	ldr	r3, [pc, #316]	@ (8000b64 <bno055_writeData+0x1ec>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 fe23 	bl	8003674 <puts>
 8000a2e:	e026      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d104      	bne.n	8000a40 <bno055_writeData+0xc8>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000a36:	4b4c      	ldr	r3, [pc, #304]	@ (8000b68 <bno055_writeData+0x1f0>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fe1b 	bl	8003674 <puts>
 8000a3e:	e01e      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d104      	bne.n	8000a50 <bno055_writeData+0xd8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000a46:	4b49      	ldr	r3, [pc, #292]	@ (8000b6c <bno055_writeData+0x1f4>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 fe13 	bl	8003674 <puts>
 8000a4e:	e016      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	2b08      	cmp	r3, #8
 8000a54:	d104      	bne.n	8000a60 <bno055_writeData+0xe8>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000a56:	4b46      	ldr	r3, [pc, #280]	@ (8000b70 <bno055_writeData+0x1f8>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fe0b 	bl	8003674 <puts>
 8000a5e:	e00e      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	2b10      	cmp	r3, #16
 8000a64:	d104      	bne.n	8000a70 <bno055_writeData+0xf8>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000a66:	4b43      	ldr	r3, [pc, #268]	@ (8000b74 <bno055_writeData+0x1fc>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 fe03 	bl	8003674 <puts>
 8000a6e:	e006      	b.n	8000a7e <bno055_writeData+0x106>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	2b20      	cmp	r3, #32
 8000a74:	d103      	bne.n	8000a7e <bno055_writeData+0x106>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000a76:	4b40      	ldr	r3, [pc, #256]	@ (8000b78 <bno055_writeData+0x200>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 fdfb 	bl	8003674 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000a7e:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <bno055_writeData+0x1d8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	250f      	movs	r5, #15
 8000a84:	197c      	adds	r4, r7, r5
 8000a86:	0018      	movs	r0, r3
 8000a88:	f001 fb78 	bl	800217c <HAL_I2C_GetState>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	7023      	strb	r3, [r4, #0]
  if (state == HAL_I2C_STATE_RESET) {
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d104      	bne.n	8000aa2 <bno055_writeData+0x12a>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000a98:	4b38      	ldr	r3, [pc, #224]	@ (8000b7c <bno055_writeData+0x204>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fdea 	bl	8003674 <puts>
 8000aa0:	e052      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_READY) {
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b20      	cmp	r3, #32
 8000aaa:	d104      	bne.n	8000ab6 <bno055_writeData+0x13e>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000aac:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <bno055_writeData+0x204>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 fde0 	bl	8003674 <puts>
 8000ab4:	e048      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b24      	cmp	r3, #36	@ 0x24
 8000abe:	d104      	bne.n	8000aca <bno055_writeData+0x152>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b80 <bno055_writeData+0x208>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 fdd6 	bl	8003674 <puts>
 8000ac8:	e03e      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000aca:	230f      	movs	r3, #15
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b21      	cmp	r3, #33	@ 0x21
 8000ad2:	d104      	bne.n	8000ade <bno055_writeData+0x166>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <bno055_writeData+0x20c>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 fdcc 	bl	8003674 <puts>
 8000adc:	e034      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000ade:	230f      	movs	r3, #15
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b22      	cmp	r3, #34	@ 0x22
 8000ae6:	d104      	bne.n	8000af2 <bno055_writeData+0x17a>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <bno055_writeData+0x210>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fdc2 	bl	8003674 <puts>
 8000af0:	e02a      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000af2:	230f      	movs	r3, #15
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b28      	cmp	r3, #40	@ 0x28
 8000afa:	d104      	bne.n	8000b06 <bno055_writeData+0x18e>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000afc:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <bno055_writeData+0x214>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fdb8 	bl	8003674 <puts>
 8000b04:	e020      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b29      	cmp	r3, #41	@ 0x29
 8000b0e:	d104      	bne.n	8000b1a <bno055_writeData+0x1a2>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <bno055_writeData+0x218>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 fdae 	bl	8003674 <puts>
 8000b18:	e016      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b22:	d104      	bne.n	8000b2e <bno055_writeData+0x1b6>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000b24:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <bno055_writeData+0x21c>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 fda4 	bl	8003674 <puts>
 8000b2c:	e00c      	b.n	8000b48 <bno055_writeData+0x1d0>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000b2e:	230f      	movs	r3, #15
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b60      	cmp	r3, #96	@ 0x60
 8000b36:	d107      	bne.n	8000b48 <bno055_writeData+0x1d0>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <bno055_writeData+0x220>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 fd9a 	bl	8003674 <puts>
 8000b40:	e002      	b.n	8000b48 <bno055_writeData+0x1d0>
    return;
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	e000      	b.n	8000b48 <bno055_writeData+0x1d0>
    return;
 8000b46:	46c0      	nop			@ (mov r8, r8)
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b006      	add	sp, #24
 8000b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	20000094 	.word	0x20000094
 8000b54:	080043c8 	.word	0x080043c8
 8000b58:	080043ec 	.word	0x080043ec
 8000b5c:	08004414 	.word	0x08004414
 8000b60:	08004438 	.word	0x08004438
 8000b64:	08004450 	.word	0x08004450
 8000b68:	08004464 	.word	0x08004464
 8000b6c:	08004478 	.word	0x08004478
 8000b70:	0800448c 	.word	0x0800448c
 8000b74:	080044a0 	.word	0x080044a0
 8000b78:	080044b4 	.word	0x080044b4
 8000b7c:	080044cc 	.word	0x080044cc
 8000b80:	080044e4 	.word	0x080044e4
 8000b84:	080044f8 	.word	0x080044f8
 8000b88:	08004510 	.word	0x08004510
 8000b8c:	08004528 	.word	0x08004528
 8000b90:	08004540 	.word	0x08004540
 8000b94:	08004560 	.word	0x08004560
 8000b98:	08004580 	.word	0x08004580

08000b9c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	6039      	str	r1, [r7, #0]
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	1c02      	adds	r2, r0, #0
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	1dbb      	adds	r3, r7, #6
 8000bae:	1c0a      	adds	r2, r1, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <bno055_readData+0x48>)
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2150      	movs	r1, #80	@ 0x50
 8000bc0:	f001 f8aa 	bl	8001d18 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <bno055_readData+0x48>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	1dbb      	adds	r3, r7, #6
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	2164      	movs	r1, #100	@ 0x64
 8000bd2:	9100      	str	r1, [sp, #0]
 8000bd4:	2150      	movs	r1, #80	@ 0x50
 8000bd6:	f001 f9c9 	bl	8001f6c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	20000094 	.word	0x20000094

08000be8 <IMU_Setup>:
#include "bno055.h"
#include "bno055_stm32.h"
//----------------------------------------------------------------------------

// ------------------------------- Functions ---------------------------
void IMU_Setup (I2C_HandleTypeDef* hi2c1){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	  // Assign the I2C handle to the bno055 driver
	  bno055_assignI2C(hi2c1);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fea6 	bl	8000944 <bno055_assignI2C>
	  // Setup the BNO055 sensor using your provided bno055.c functions
	  bno055_setup();
 8000bf8:	f000 f92a 	bl	8000e50 <bno055_setup>
	  // Set the BNO055 operation mode to NDOF (9-degrees-of-freedom).
	  bno055_setOperationModeNDOF();
 8000bfc:	f000 f8ff 	bl	8000dfe <bno055_setOperationModeNDOF>

}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <IMU_Operation>:

void IMU_Operation(IMU_INFO* imu){
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b0bb      	sub	sp, #236	@ 0xec
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

#if IMU_ReadEuler == YES
	// Read Euler angles (Yaw, Pitch, Roll)
    bno055_vector_t euler_vector = bno055_getVectorEuler();
 8000c10:	24c8      	movs	r4, #200	@ 0xc8
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 faa2 	bl	800115e <bno055_getVectorEuler>

    imu->Yaw = euler_vector.x;
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	183b      	adds	r3, r7, r0
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	600a      	str	r2, [r1, #0]
 8000c26:	604b      	str	r3, [r1, #4]
    imu->Pitch = euler_vector.y;
 8000c28:	183b      	adds	r3, r7, r0
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	608a      	str	r2, [r1, #8]
 8000c32:	60cb      	str	r3, [r1, #12]
    imu->Roll = euler_vector.z;
 8000c34:	183b      	adds	r3, r7, r0
 8000c36:	699a      	ldr	r2, [r3, #24]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	610a      	str	r2, [r1, #16]
 8000c3e:	614b      	str	r3, [r1, #20]
#endif

#if IMU_ReadAcceleration == YES
    // Read Accelerometer data (m/s^2)
    bno055_vector_t accel_vector = bno055_getVectorAccelerometer();
 8000c40:	24a8      	movs	r4, #168	@ 0xa8
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fa63 	bl	8001110 <bno055_getVectorAccelerometer>

    imu->AccX = accel_vector.x;
 8000c4a:	0020      	movs	r0, r4
 8000c4c:	183b      	adds	r3, r7, r0
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	618a      	str	r2, [r1, #24]
 8000c56:	61cb      	str	r3, [r1, #28]
    imu->AccY = accel_vector.y;
 8000c58:	183b      	adds	r3, r7, r0
 8000c5a:	691a      	ldr	r2, [r3, #16]
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	620a      	str	r2, [r1, #32]
 8000c62:	624b      	str	r3, [r1, #36]	@ 0x24
    imu->AccZ = accel_vector.z;
 8000c64:	183b      	adds	r3, r7, r0
 8000c66:	699a      	ldr	r2, [r3, #24]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	628a      	str	r2, [r1, #40]	@ 0x28
 8000c6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif

#if IMU_ReadLinearAcceleration == YES
    // Read Linear Acceleration data (m/s^2, with gravity removed)
    bno055_vector_t lin_acc_vector = bno055_getVectorLinearAccel();
 8000c70:	2488      	movs	r4, #136	@ 0x88
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 fa7f 	bl	8001178 <bno055_getVectorLinearAccel>

    imu->linAccX = lin_acc_vector.x;
 8000c7a:	0020      	movs	r0, r4
 8000c7c:	183b      	adds	r3, r7, r0
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	630a      	str	r2, [r1, #48]	@ 0x30
 8000c86:	634b      	str	r3, [r1, #52]	@ 0x34
    imu->linAccY = lin_acc_vector.y;
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	638a      	str	r2, [r1, #56]	@ 0x38
 8000c92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    imu->linAccZ = lin_acc_vector.z;
 8000c94:	183b      	adds	r3, r7, r0
 8000c96:	699a      	ldr	r2, [r3, #24]
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	640a      	str	r2, [r1, #64]	@ 0x40
 8000c9e:	644b      	str	r3, [r1, #68]	@ 0x44
#endif

#if IMU_ReadMagnetometer == YES
    // Read Magnetometer data (microTesla)
    bno055_vector_t mag_vector = bno055_getVectorMagnetometer();
 8000ca0:	2468      	movs	r4, #104	@ 0x68
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fa40 	bl	800112a <bno055_getVectorMagnetometer>

    imu->MagX = mag_vector.x;
 8000caa:	0020      	movs	r0, r4
 8000cac:	183b      	adds	r3, r7, r0
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	648a      	str	r2, [r1, #72]	@ 0x48
 8000cb6:	64cb      	str	r3, [r1, #76]	@ 0x4c
    imu->MagY = mag_vector.y;
 8000cb8:	183b      	adds	r3, r7, r0
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	650a      	str	r2, [r1, #80]	@ 0x50
 8000cc2:	654b      	str	r3, [r1, #84]	@ 0x54
    imu->MagZ = mag_vector.z;
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	658a      	str	r2, [r1, #88]	@ 0x58
 8000cce:	65cb      	str	r3, [r1, #92]	@ 0x5c
#endif

#if IMU_ReadGyroscope == YES
    // Read Gyroscope data (degrees/second)
    bno055_vector_t gyro_vector = bno055_getVectorGyroscope();
 8000cd0:	2448      	movs	r4, #72	@ 0x48
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fa35 	bl	8001144 <bno055_getVectorGyroscope>

    imu->GyroX = gyro_vector.x;
 8000cda:	0020      	movs	r0, r4
 8000cdc:	183b      	adds	r3, r7, r0
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	660a      	str	r2, [r1, #96]	@ 0x60
 8000ce6:	664b      	str	r3, [r1, #100]	@ 0x64
    imu->GyroY = gyro_vector.y;
 8000ce8:	183b      	adds	r3, r7, r0
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	668a      	str	r2, [r1, #104]	@ 0x68
 8000cf2:	66cb      	str	r3, [r1, #108]	@ 0x6c
    imu->GyroZ = gyro_vector.z;
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	670a      	str	r2, [r1, #112]	@ 0x70
 8000cfe:	674b      	str	r3, [r1, #116]	@ 0x74
#endif

#if IMU_ReadGravityVector == YES
    // Read Gravity vector (m/s^2)
    bno055_vector_t gravity_vector = bno055_getVectorGravity();
 8000d00:	2428      	movs	r4, #40	@ 0x28
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 fa44 	bl	8001192 <bno055_getVectorGravity>

    imu->GravityX = gravity_vector.x;
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	183b      	adds	r3, r7, r0
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	678a      	str	r2, [r1, #120]	@ 0x78
 8000d16:	67cb      	str	r3, [r1, #124]	@ 0x7c
    imu->GravityY = gravity_vector.y;
 8000d18:	183b      	adds	r3, r7, r0
 8000d1a:	691a      	ldr	r2, [r3, #16]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	3180      	adds	r1, #128	@ 0x80
 8000d22:	600a      	str	r2, [r1, #0]
 8000d24:	604b      	str	r3, [r1, #4]
    imu->GravityZ = gravity_vector.z;
 8000d26:	183b      	adds	r3, r7, r0
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	3188      	adds	r1, #136	@ 0x88
 8000d30:	600a      	str	r2, [r1, #0]
 8000d32:	604b      	str	r3, [r1, #4]
#endif

#if IMU_ReadQuanterion == YES
    // Read Quaternion data
    bno055_vector_t quat = bno055_getVectorQuaternion();
 8000d34:	2408      	movs	r4, #8
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fa37 	bl	80011ac <bno055_getVectorQuaternion>

    imu->QuatW = quat.w;
 8000d3e:	0020      	movs	r0, r4
 8000d40:	183b      	adds	r3, r7, r0
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	3190      	adds	r1, #144	@ 0x90
 8000d4a:	600a      	str	r2, [r1, #0]
 8000d4c:	604b      	str	r3, [r1, #4]
    imu->QuatX = quat.x;
 8000d4e:	183b      	adds	r3, r7, r0
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	3198      	adds	r1, #152	@ 0x98
 8000d58:	600a      	str	r2, [r1, #0]
 8000d5a:	604b      	str	r3, [r1, #4]
    imu->QuatY = quat.y;
 8000d5c:	183b      	adds	r3, r7, r0
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	31a0      	adds	r1, #160	@ 0xa0
 8000d66:	600a      	str	r2, [r1, #0]
 8000d68:	604b      	str	r3, [r1, #4]
    imu->QuatZ = quat.z;
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	699a      	ldr	r2, [r3, #24]
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	31a8      	adds	r1, #168	@ 0xa8
 8000d74:	600a      	str	r2, [r1, #0]
 8000d76:	604b      	str	r3, [r1, #4]
#endif

#if IMU_ReadTemperature == YES
    // Read Temperature (Celsius)
    imu->temperature = bno055_getTemp();
 8000d78:	f000 f857 	bl	8000e2a <bno055_getTemp>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fd70 	bl	8000864 <__aeabi_i2d>
 8000d84:	0002      	movs	r2, r0
 8000d86:	000b      	movs	r3, r1
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	31b0      	adds	r1, #176	@ 0xb0
 8000d8c:	600a      	str	r2, [r1, #0]
 8000d8e:	604b      	str	r3, [r1, #4]
#endif
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b03b      	add	sp, #236	@ 0xec
 8000d96:	bd90      	pop	{r4, r7, pc}

08000d98 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	0002      	movs	r2, r0
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0019      	movs	r1, r3
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff fde4 	bl	8000978 <bno055_writeData>
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	701a      	strb	r2, [r3, #0]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	0019      	movs	r1, r3
 8000dca:	203d      	movs	r0, #61	@ 0x3d
 8000dcc:	f7ff fdd4 	bl	8000978 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <bno055_setOperationMode+0x28>
    bno055_delay(19);
 8000dd8:	2013      	movs	r0, #19
 8000dda:	f7ff fdc1 	bl	8000960 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000dde:	e002      	b.n	8000de6 <bno055_setOperationMode+0x2e>
    bno055_delay(7);
 8000de0:	2007      	movs	r0, #7
 8000de2:	f7ff fdbd 	bl	8000960 <bno055_delay>
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}

08000dee <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff ffe0 	bl	8000db8 <bno055_setOperationMode>
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000e02:	200c      	movs	r0, #12
 8000e04:	f7ff ffd8 	bl	8000db8 <bno055_setOperationMode>
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000e12:	2120      	movs	r1, #32
 8000e14:	203f      	movs	r0, #63	@ 0x3f
 8000e16:	f7ff fdaf 	bl	8000978 <bno055_writeData>
  bno055_delay(700);
 8000e1a:	23af      	movs	r3, #175	@ 0xaf
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff fd9e 	bl	8000960 <bno055_delay>
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <bno055_getTemp>:

int8_t bno055_getTemp() {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff ffb1 	bl	8000d98 <bno055_setPage>
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	2201      	movs	r2, #1
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	2034      	movs	r0, #52	@ 0x34
 8000e3e:	f7ff fead 	bl	8000b9c <bno055_readData>
  return t;
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25b      	sxtb	r3, r3
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <bno055_setup>:

void bno055_setup() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  bno055_reset();
 8000e56:	f7ff ffda 	bl	8000e0e <bno055_reset>

  uint8_t id = 0;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	2201      	movs	r2, #1
 8000e64:	0019      	movs	r1, r3
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fe98 	bl	8000b9c <bno055_readData>
  if (id != BNO055_ID) {
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2ba0      	cmp	r3, #160	@ 0xa0
 8000e72:	d007      	beq.n	8000e84 <bno055_setup+0x34>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <bno055_setup+0x54>)
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f002 fb92 	bl	80035a8 <iprintf>
  }
  bno055_setPage(0);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff87 	bl	8000d98 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	203f      	movs	r0, #63	@ 0x3f
 8000e8e:	f7ff fd73 	bl	8000978 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000e92:	f7ff ffac 	bl	8000dee <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000e96:	200a      	movs	r0, #10
 8000e98:	f7ff fd62 	bl	8000960 <bno055_delay>
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	08004598 	.word	0x08004598

08000ea8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b08e      	sub	sp, #56	@ 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	1cfb      	adds	r3, r7, #3
 8000eb4:	701a      	strb	r2, [r3, #0]
  bno055_setPage(0);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff6e 	bl	8000d98 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000ebc:	1cfb      	adds	r3, r7, #3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b20      	cmp	r3, #32
 8000ec2:	d108      	bne.n	8000ed6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000ec4:	2328      	movs	r3, #40	@ 0x28
 8000ec6:	18f9      	adds	r1, r7, r3
 8000ec8:	1cfb      	adds	r3, r7, #3
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f7ff fe64 	bl	8000b9c <bno055_readData>
 8000ed4:	e007      	b.n	8000ee6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000ed6:	2328      	movs	r3, #40	@ 0x28
 8000ed8:	18f9      	adds	r1, r7, r3
 8000eda:	1cfb      	adds	r3, r7, #3
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2206      	movs	r2, #6
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fe5b 	bl	8000b9c <bno055_readData>

  double scale = 1;
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4b83      	ldr	r3, [pc, #524]	@ (80010f8 <bno055_getVector+0x250>)
 8000eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000eee:	1cfb      	adds	r3, r7, #3
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b0e      	cmp	r3, #14
 8000ef4:	d109      	bne.n	8000f0a <bno055_getVector+0x62>
    scale = magScale;
 8000ef6:	4b81      	ldr	r3, [pc, #516]	@ (80010fc <bno055_getVector+0x254>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff fce0 	bl	80008c0 <__aeabi_ui2d>
 8000f00:	0002      	movs	r2, r0
 8000f02:	000b      	movs	r3, r1
 8000f04:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f08:	e03e      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000f0a:	1cfb      	adds	r3, r7, #3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d007      	beq.n	8000f22 <bno055_getVector+0x7a>
 8000f12:	1cfb      	adds	r3, r7, #3
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b28      	cmp	r3, #40	@ 0x28
 8000f18:	d003      	beq.n	8000f22 <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000f1a:	1cfb      	adds	r3, r7, #3
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f20:	d109      	bne.n	8000f36 <bno055_getVector+0x8e>
    scale = accelScale;
 8000f22:	4b77      	ldr	r3, [pc, #476]	@ (8001100 <bno055_getVector+0x258>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff fcca 	bl	80008c0 <__aeabi_ui2d>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	000b      	movs	r3, r1
 8000f30:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f34:	e028      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000f36:	1cfb      	adds	r3, r7, #3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b14      	cmp	r3, #20
 8000f3c:	d109      	bne.n	8000f52 <bno055_getVector+0xaa>
    scale = angularRateScale;
 8000f3e:	4b71      	ldr	r3, [pc, #452]	@ (8001104 <bno055_getVector+0x25c>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff fcbc 	bl	80008c0 <__aeabi_ui2d>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	000b      	movs	r3, r1
 8000f4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f50:	e01a      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000f52:	1cfb      	adds	r3, r7, #3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b1a      	cmp	r3, #26
 8000f58:	d109      	bne.n	8000f6e <bno055_getVector+0xc6>
    scale = eulerScale;
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001108 <bno055_getVector+0x260>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fcae 	bl	80008c0 <__aeabi_ui2d>
 8000f64:	0002      	movs	r2, r0
 8000f66:	000b      	movs	r3, r1
 8000f68:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f6c:	e00c      	b.n	8000f88 <bno055_getVector+0xe0>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b20      	cmp	r3, #32
 8000f74:	d108      	bne.n	8000f88 <bno055_getVector+0xe0>
    scale = quaScale;
 8000f76:	4b65      	ldr	r3, [pc, #404]	@ (800110c <bno055_getVector+0x264>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff fca0 	bl	80008c0 <__aeabi_ui2d>
 8000f80:	0002      	movs	r2, r0
 8000f82:	000b      	movs	r3, r1
 8000f84:	633a      	str	r2, [r7, #48]	@ 0x30
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000f88:	2508      	movs	r5, #8
 8000f8a:	197b      	adds	r3, r7, r5
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2320      	movs	r3, #32
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f002 fc64 	bl	8003860 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000f98:	1cfb      	adds	r3, r7, #3
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	d159      	bne.n	8001054 <bno055_getVector+0x1ac>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000fa0:	2428      	movs	r4, #40	@ 0x28
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff fc54 	bl	8000864 <__aeabi_i2d>
 8000fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc0:	f7ff f938 	bl	8000234 <__aeabi_ddiv>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	000b      	movs	r3, r1
 8000fc8:	1979      	adds	r1, r7, r5
 8000fca:	600a      	str	r2, [r1, #0]
 8000fcc:	604b      	str	r3, [r1, #4]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fc3e 	bl	8000864 <__aeabi_i2d>
 8000fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fec:	f7ff f922 	bl	8000234 <__aeabi_ddiv>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	000b      	movs	r3, r1
 8000ff4:	1979      	adds	r1, r7, r5
 8000ff6:	608a      	str	r2, [r1, #8]
 8000ff8:	60cb      	str	r3, [r1, #12]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	795b      	ldrb	r3, [r3, #5]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	193b      	adds	r3, r7, r4
 8001006:	791b      	ldrb	r3, [r3, #4]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21b      	sxth	r3, r3
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff fc28 	bl	8000864 <__aeabi_i2d>
 8001014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001018:	f7ff f90c 	bl	8000234 <__aeabi_ddiv>
 800101c:	0002      	movs	r2, r0
 800101e:	000b      	movs	r3, r1
 8001020:	1979      	adds	r1, r7, r5
 8001022:	610a      	str	r2, [r1, #16]
 8001024:	614b      	str	r3, [r1, #20]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	79db      	ldrb	r3, [r3, #7]
 800102a:	b21b      	sxth	r3, r3
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	193b      	adds	r3, r7, r4
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff fc12 	bl	8000864 <__aeabi_i2d>
 8001040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001044:	f7ff f8f6 	bl	8000234 <__aeabi_ddiv>
 8001048:	0002      	movs	r2, r0
 800104a:	000b      	movs	r3, r1
 800104c:	1979      	adds	r1, r7, r5
 800104e:	618a      	str	r2, [r1, #24]
 8001050:	61cb      	str	r3, [r1, #28]
 8001052:	e043      	b.n	80010dc <bno055_getVector+0x234>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001054:	2428      	movs	r4, #40	@ 0x28
 8001056:	193b      	adds	r3, r7, r4
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	b21b      	sxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	193b      	adds	r3, r7, r4
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fbfa 	bl	8000864 <__aeabi_i2d>
 8001070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001074:	f7ff f8de 	bl	8000234 <__aeabi_ddiv>
 8001078:	0002      	movs	r2, r0
 800107a:	000b      	movs	r3, r1
 800107c:	2508      	movs	r5, #8
 800107e:	1979      	adds	r1, r7, r5
 8001080:	608a      	str	r2, [r1, #8]
 8001082:	60cb      	str	r3, [r1, #12]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	b21b      	sxth	r3, r3
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	193b      	adds	r3, r7, r4
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff fbe3 	bl	8000864 <__aeabi_i2d>
 800109e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a2:	f7ff f8c7 	bl	8000234 <__aeabi_ddiv>
 80010a6:	0002      	movs	r2, r0
 80010a8:	000b      	movs	r3, r1
 80010aa:	1979      	adds	r1, r7, r5
 80010ac:	610a      	str	r2, [r1, #16]
 80010ae:	614b      	str	r3, [r1, #20]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	795b      	ldrb	r3, [r3, #5]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fbcd 	bl	8000864 <__aeabi_i2d>
 80010ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ce:	f7ff f8b1 	bl	8000234 <__aeabi_ddiv>
 80010d2:	0002      	movs	r2, r0
 80010d4:	000b      	movs	r3, r1
 80010d6:	1979      	adds	r1, r7, r5
 80010d8:	618a      	str	r2, [r1, #24]
 80010da:	61cb      	str	r3, [r1, #28]
  }

  return xyz;
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	2308      	movs	r3, #8
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	0010      	movs	r0, r2
 80010e4:	0019      	movs	r1, r3
 80010e6:	2320      	movs	r3, #32
 80010e8:	001a      	movs	r2, r3
 80010ea:	f002 fc3c 	bl	8003966 <memcpy>
}
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b00e      	add	sp, #56	@ 0x38
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	3ff00000 	.word	0x3ff00000
 80010fc:	20000006 	.word	0x20000006
 8001100:	20000000 	.word	0x20000000
 8001104:	20000002 	.word	0x20000002
 8001108:	20000004 	.word	0x20000004
 800110c:	20000008 	.word	0x20000008

08001110 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2108      	movs	r1, #8
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fec3 	bl	8000ea8 <bno055_getVector>
}
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}

0800112a <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	210e      	movs	r1, #14
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff feb6 	bl	8000ea8 <bno055_getVector>
}
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2114      	movs	r1, #20
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fea9 	bl	8000ea8 <bno055_getVector>
}
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}

0800115e <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	211a      	movs	r1, #26
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fe9c 	bl	8000ea8 <bno055_getVector>
}
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2128      	movs	r1, #40	@ 0x28
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fe8f 	bl	8000ea8 <bno055_getVector>
}
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}

08001192 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorGravity() {
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	212e      	movs	r1, #46	@ 0x2e
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff fe82 	bl	8000ea8 <bno055_getVector>
}
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorQuaternion() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2120      	movs	r1, #32
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff fe75 	bl	8000ea8 <bno055_getVector>
}
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011cc:	f000 fa4a 	bl	8001664 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011d0:	f000 f812 	bl	80011f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011d4:	f000 f8b6 	bl	8001344 <MX_GPIO_Init>
	MX_I2C1_Init();
 80011d8:	f000 f874 	bl	80012c4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	// ---------------------Initialize IMU-----------------------
	IMU_Setup(&hi2c1);
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <main+0x28>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff fd02 	bl	8000be8 <IMU_Setup>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//------------------------  IMU Testing ------------------------------

		IMU_Operation(&imu);
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <main+0x2c>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff fd0e 	bl	8000c08 <IMU_Operation>
 80011ec:	e7fa      	b.n	80011e4 <main+0x1c>
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	20000098 	.word	0x20000098
 80011f4:	200000f0 	.word	0x200000f0

080011f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b099      	sub	sp, #100	@ 0x64
 80011fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011fe:	242c      	movs	r4, #44	@ 0x2c
 8001200:	193b      	adds	r3, r7, r4
 8001202:	0018      	movs	r0, r3
 8001204:	2334      	movs	r3, #52	@ 0x34
 8001206:	001a      	movs	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	f002 fb29 	bl	8003860 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800120e:	231c      	movs	r3, #28
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	0018      	movs	r0, r3
 8001214:	2310      	movs	r3, #16
 8001216:	001a      	movs	r2, r3
 8001218:	2100      	movs	r1, #0
 800121a:	f002 fb21 	bl	8003860 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800121e:	003b      	movs	r3, r7
 8001220:	0018      	movs	r0, r3
 8001222:	231c      	movs	r3, #28
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f002 fb1a 	bl	8003860 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800122c:	0021      	movs	r1, r4
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2203      	movs	r2, #3
 8001232:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2201      	movs	r2, #1
 8001238:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2210      	movs	r2, #16
 8001244:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2202      	movs	r2, #2
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	0252      	lsls	r2, r2, #9
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	0352      	lsls	r2, r2, #13
 800125a:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2200      	movs	r2, #0
 8001260:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001262:	187b      	adds	r3, r7, r1
 8001264:	0018      	movs	r0, r3
 8001266:	f001 fb0b 	bl	8002880 <HAL_RCC_OscConfig>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x7a>
		Error_Handler();
 800126e:	f000 f89d 	bl	80013ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001272:	211c      	movs	r1, #28
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2207      	movs	r2, #7
 8001278:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2202      	movs	r2, #2
 800127e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2101      	movs	r1, #1
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fe7b 	bl	8002f8c <HAL_RCC_ClockConfig>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xa6>
		Error_Handler();
 800129a:	f000 f887 	bl	80013ac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800129e:	003b      	movs	r3, r7
 80012a0:	2220      	movs	r2, #32
 80012a2:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012a4:	003b      	movs	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012aa:	003b      	movs	r3, r7
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 ffb9 	bl	8003224 <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc2>
		Error_Handler();
 80012b6:	f000 f879 	bl	80013ac <Error_Handler>
	}
}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b019      	add	sp, #100	@ 0x64
 80012c0:	bd90      	pop	{r4, r7, pc}
	...

080012c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012ca:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <MX_I2C1_Init+0x78>)
 80012cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <MX_I2C1_Init+0x7c>)
 80012d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012dc:	2201      	movs	r2, #1
 80012de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_I2C1_Init+0x74>)
 8001300:	0018      	movs	r0, r3
 8001302:	f000 fc63 	bl	8001bcc <HAL_I2C_Init>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800130a:	f000 f84f 	bl	80013ac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_I2C1_Init+0x74>)
 8001310:	2100      	movs	r1, #0
 8001312:	0018      	movs	r0, r3
 8001314:	f001 fa1c 	bl	8002750 <HAL_I2CEx_ConfigAnalogFilter>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800131c:	f000 f846 	bl	80013ac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <MX_I2C1_Init+0x74>)
 8001322:	2100      	movs	r1, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f001 fa5f 	bl	80027e8 <HAL_I2CEx_ConfigDigitalFilter>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800132e:	f000 f83d 	bl	80013ac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000098 	.word	0x20000098
 800133c:	40005400 	.word	0x40005400
 8001340:	00201d2b 	.word	0x00201d2b

08001344 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_GPIO_Init+0x64>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_GPIO_Init+0x64>)
 8001350:	2180      	movs	r1, #128	@ 0x80
 8001352:	03c9      	lsls	r1, r1, #15
 8001354:	430a      	orrs	r2, r1
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_GPIO_Init+0x64>)
 800135a:	695a      	ldr	r2, [r3, #20]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	03db      	lsls	r3, r3, #15
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_GPIO_Init+0x64>)
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_GPIO_Init+0x64>)
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	0289      	lsls	r1, r1, #10
 8001370:	430a      	orrs	r2, r1
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_GPIO_Init+0x64>)
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_GPIO_Init+0x64>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_GPIO_Init+0x64>)
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	02c9      	lsls	r1, r1, #11
 800138c:	430a      	orrs	r2, r1
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <MX_GPIO_Init+0x64>)
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	02db      	lsls	r3, r3, #11
 8001398:	4013      	ands	r3, r2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	40021000 	.word	0x40021000

080013ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013b4:	46c0      	nop			@ (mov r8, r8)
 80013b6:	e7fd      	b.n	80013b4 <Error_Handler+0x8>

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_MspInit+0x44>)
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_MspInit+0x44>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_MspInit+0x44>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_MspInit+0x44>)
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_MspInit+0x44>)
 80013dc:	2180      	movs	r1, #128	@ 0x80
 80013de:	0549      	lsls	r1, r1, #21
 80013e0:	430a      	orrs	r2, r1
 80013e2:	61da      	str	r2, [r3, #28]
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_MspInit+0x44>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	055b      	lsls	r3, r3, #21
 80013ec:	4013      	ands	r3, r2
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08b      	sub	sp, #44	@ 0x2c
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	2414      	movs	r4, #20
 800140a:	193b      	adds	r3, r7, r4
 800140c:	0018      	movs	r0, r3
 800140e:	2314      	movs	r3, #20
 8001410:	001a      	movs	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	f002 fa24 	bl	8003860 <memset>
  if(hi2c->Instance==I2C1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <HAL_I2C_MspInit+0x90>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d131      	bne.n	8001486 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <HAL_I2C_MspInit+0x94>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_I2C_MspInit+0x94>)
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	02c9      	lsls	r1, r1, #11
 800142c:	430a      	orrs	r2, r1
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_I2C_MspInit+0x94>)
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	02db      	lsls	r3, r3, #11
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143e:	0021      	movs	r1, r4
 8001440:	187b      	adds	r3, r7, r1
 8001442:	22c0      	movs	r2, #192	@ 0xc0
 8001444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2212      	movs	r2, #18
 800144a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2203      	movs	r2, #3
 8001456:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	187b      	adds	r3, r7, r1
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <HAL_I2C_MspInit+0x98>)
 8001462:	0019      	movs	r1, r3
 8001464:	0010      	movs	r0, r2
 8001466:	f000 fa39 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_I2C_MspInit+0x94>)
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_I2C_MspInit+0x94>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	0389      	lsls	r1, r1, #14
 8001474:	430a      	orrs	r2, r1
 8001476:	61da      	str	r2, [r3, #28]
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_I2C_MspInit+0x94>)
 800147a:	69da      	ldr	r2, [r3, #28]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b00b      	add	sp, #44	@ 0x2c
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	e7fd      	b.n	80014a0 <NMI_Handler+0x4>

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	e7fd      	b.n	80014a8 <HardFault_Handler+0x4>

080014ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f916 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00a      	b.n	80014f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e0:	e000      	b.n	80014e4 <_read+0x16>
 80014e2:	bf00      	nop
 80014e4:	0001      	movs	r1, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	60ba      	str	r2, [r7, #8]
 80014ec:	b2ca      	uxtb	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf0      	blt.n	80014e0 <_read+0x12>
  }

  return len;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b006      	add	sp, #24
 8001506:	bd80      	pop	{r7, pc}

08001508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e009      	b.n	800152e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	60ba      	str	r2, [r7, #8]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	0018      	movs	r0, r3
 8001524:	e000      	b.n	8001528 <_write+0x20>
 8001526:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbf1      	blt.n	800151a <_write+0x12>
  }
  return len;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b006      	add	sp, #24
 800153e:	bd80      	pop	{r7, pc}

08001540 <_close>:

int _close(int file)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001548:	2301      	movs	r3, #1
 800154a:	425b      	negs	r3, r3
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}

08001554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	0192      	lsls	r2, r2, #6
 8001564:	605a      	str	r2, [r3, #4]
  return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <_isatty>:

int _isatty(int file)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}

08001582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158e:	2300      	movs	r3, #0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	18d3      	adds	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f002 f9a0 	bl	800390c <__errno>
 80015cc:	0003      	movs	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	425b      	negs	r3, r3
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	18d2      	adds	r2, r2, r3
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <_sbrk+0x64>)
 80015e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b006      	add	sp, #24
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20004000 	.word	0x20004000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	200001a8 	.word	0x200001a8
 8001600:	20000300 	.word	0x20000300

08001604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001608:	46c0      	nop			@ (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001610:	480d      	ldr	r0, [pc, #52]	@ (8001648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001612:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001614:	f7ff fff6 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <LoopForever+0x6>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LoopForever+0xe>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	@ (800165c <LoopForever+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800163e:	f002 f96b 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff fdc1 	bl	80011c8 <main>

08001646 <LoopForever>:

LoopForever:
    b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   r0, =_estack
 8001648:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001654:	08004680 	.word	0x08004680
  ldr r2, =_sbss
 8001658:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800165c:	200002fc 	.word	0x200002fc

08001660 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_COMP_IRQHandler>
	...

08001664 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <HAL_Init+0x24>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_Init+0x24>)
 800166e:	2110      	movs	r1, #16
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 f809 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167a:	f7ff fe9d 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_InitTick+0x5c>)
 8001696:	681c      	ldr	r4, [r3, #0]
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_InitTick+0x60>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	0019      	movs	r1, r3
 800169e:	23fa      	movs	r3, #250	@ 0xfa
 80016a0:	0098      	lsls	r0, r3, #2
 80016a2:	f7fe fd3b 	bl	800011c <__udivsi3>
 80016a6:	0003      	movs	r3, r0
 80016a8:	0019      	movs	r1, r3
 80016aa:	0020      	movs	r0, r4
 80016ac:	f7fe fd36 	bl	800011c <__udivsi3>
 80016b0:	0003      	movs	r3, r0
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 f905 	bl	80018c2 <HAL_SYSTICK_Config>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e00f      	b.n	80016e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d80b      	bhi.n	80016de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	2301      	movs	r3, #1
 80016ca:	425b      	negs	r3, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 f8e2 	bl	8001898 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_InitTick+0x64>)
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b003      	add	sp, #12
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	2000000c 	.word	0x2000000c
 80016ec:	20000014 	.word	0x20000014
 80016f0:	20000010 	.word	0x20000010

080016f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_IncTick+0x1c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	001a      	movs	r2, r3
 80016fe:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_IncTick+0x20>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	18d2      	adds	r2, r2, r3
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_IncTick+0x20>)
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	20000014 	.word	0x20000014
 8001714:	200001ac 	.word	0x200001ac

08001718 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b02      	ldr	r3, [pc, #8]	@ (8001728 <HAL_GetTick+0x10>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	200001ac 	.word	0x200001ac

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff fff0 	bl	8001718 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3301      	adds	r3, #1
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_Delay+0x44>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	001a      	movs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	189b      	adds	r3, r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	f7ff ffe0 	bl	8001718 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	20000014 	.word	0x20000014

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	0002      	movs	r2, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b7f      	cmp	r3, #127	@ 0x7f
 8001788:	d828      	bhi.n	80017dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800178a:	4a2f      	ldr	r2, [pc, #188]	@ (8001848 <__NVIC_SetPriority+0xd4>)
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	33c0      	adds	r3, #192	@ 0xc0
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	589b      	ldr	r3, [r3, r2]
 800179a:	1dfa      	adds	r2, r7, #7
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	0011      	movs	r1, r2
 80017a0:	2203      	movs	r2, #3
 80017a2:	400a      	ands	r2, r1
 80017a4:	00d2      	lsls	r2, r2, #3
 80017a6:	21ff      	movs	r1, #255	@ 0xff
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	43d2      	mvns	r2, r2
 80017ae:	401a      	ands	r2, r3
 80017b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	22ff      	movs	r2, #255	@ 0xff
 80017b8:	401a      	ands	r2, r3
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	0018      	movs	r0, r3
 80017c0:	2303      	movs	r3, #3
 80017c2:	4003      	ands	r3, r0
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c8:	481f      	ldr	r0, [pc, #124]	@ (8001848 <__NVIC_SetPriority+0xd4>)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	430a      	orrs	r2, r1
 80017d4:	33c0      	adds	r3, #192	@ 0xc0
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017da:	e031      	b.n	8001840 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <__NVIC_SetPriority+0xd8>)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0019      	movs	r1, r3
 80017e4:	230f      	movs	r3, #15
 80017e6:	400b      	ands	r3, r1
 80017e8:	3b08      	subs	r3, #8
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3306      	adds	r3, #6
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	3304      	adds	r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1dfa      	adds	r2, r7, #7
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	0011      	movs	r1, r2
 80017fc:	2203      	movs	r2, #3
 80017fe:	400a      	ands	r2, r1
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	21ff      	movs	r1, #255	@ 0xff
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	43d2      	mvns	r2, r2
 800180a:	401a      	ands	r2, r3
 800180c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	401a      	ands	r2, r3
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	2303      	movs	r3, #3
 800181e:	4003      	ands	r3, r0
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	4809      	ldr	r0, [pc, #36]	@ (800184c <__NVIC_SetPriority+0xd8>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	001c      	movs	r4, r3
 800182c:	230f      	movs	r3, #15
 800182e:	4023      	ands	r3, r4
 8001830:	3b08      	subs	r3, #8
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	430a      	orrs	r2, r1
 8001836:	3306      	adds	r3, #6
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	18c3      	adds	r3, r0, r3
 800183c:	3304      	adds	r3, #4
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b003      	add	sp, #12
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1e5a      	subs	r2, r3, #1
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	045b      	lsls	r3, r3, #17
 8001860:	429a      	cmp	r2, r3
 8001862:	d301      	bcc.n	8001868 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001864:	2301      	movs	r3, #1
 8001866:	e010      	b.n	800188a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <SysTick_Config+0x44>)
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	3a01      	subs	r2, #1
 800186e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001870:	2301      	movs	r3, #1
 8001872:	425b      	negs	r3, r3
 8001874:	2103      	movs	r1, #3
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff ff7c 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <SysTick_Config+0x44>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <SysTick_Config+0x44>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	210f      	movs	r1, #15
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	1c02      	adds	r2, r0, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff ffbf 	bl	8001850 <SysTick_Config>
 80018d2:	0003      	movs	r3, r0
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ea:	e155      	b.n	8001b98 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d100      	bne.n	8001904 <HAL_GPIO_Init+0x28>
 8001902:	e146      	b.n	8001b92 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	4013      	ands	r3, r2
 800190c:	2b01      	cmp	r3, #1
 800190e:	d005      	beq.n	800191c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001918:	2b02      	cmp	r3, #2
 800191a:	d130      	bne.n	800197e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	409a      	lsls	r2, r3
 800192a:	0013      	movs	r3, r2
 800192c:	43da      	mvns	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	409a      	lsls	r2, r3
 800193e:	0013      	movs	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001952:	2201      	movs	r2, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	2201      	movs	r2, #1
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2203      	movs	r2, #3
 8001984:	4013      	ands	r3, r2
 8001986:	2b03      	cmp	r3, #3
 8001988:	d017      	beq.n	80019ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	43da      	mvns	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2203      	movs	r2, #3
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d123      	bne.n	8001a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	58d3      	ldr	r3, [r2, r3]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2207      	movs	r2, #7
 80019d8:	4013      	ands	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2107      	movs	r1, #7
 80019f2:	400b      	ands	r3, r1
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	6939      	ldr	r1, [r7, #16]
 8001a0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	0013      	movs	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	23c0      	movs	r3, #192	@ 0xc0
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d100      	bne.n	8001a50 <HAL_GPIO_Init+0x174>
 8001a4e:	e0a0      	b.n	8001b92 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a50:	4b57      	ldr	r3, [pc, #348]	@ (8001bb0 <HAL_GPIO_Init+0x2d4>)
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	4b56      	ldr	r3, [pc, #344]	@ (8001bb0 <HAL_GPIO_Init+0x2d4>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	619a      	str	r2, [r3, #24]
 8001a5c:	4b54      	ldr	r3, [pc, #336]	@ (8001bb0 <HAL_GPIO_Init+0x2d4>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a68:	4a52      	ldr	r2, [pc, #328]	@ (8001bb4 <HAL_GPIO_Init+0x2d8>)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	589b      	ldr	r3, [r3, r2]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	43da      	mvns	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	2390      	movs	r3, #144	@ 0x90
 8001a90:	05db      	lsls	r3, r3, #23
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x1ee>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a47      	ldr	r2, [pc, #284]	@ (8001bb8 <HAL_GPIO_Init+0x2dc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x1ea>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a46      	ldr	r2, [pc, #280]	@ (8001bbc <HAL_GPIO_Init+0x2e0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x1e6>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a45      	ldr	r2, [pc, #276]	@ (8001bc0 <HAL_GPIO_Init+0x2e4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x1e2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a44      	ldr	r2, [pc, #272]	@ (8001bc4 <HAL_GPIO_Init+0x2e8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x1de>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x1f0>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x1f0>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x1f0>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x1f0>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x1f0>
 8001aca:	2300      	movs	r3, #0
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	2103      	movs	r1, #3
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	@ (8001bb4 <HAL_GPIO_Init+0x2d8>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	035b      	lsls	r3, r3, #13
 8001b02:	4013      	ands	r3, r2
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b14:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	039b      	lsls	r3, r3, #14
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b38:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b3e:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	029b      	lsls	r3, r3, #10
 8001b56:	4013      	ands	r3, r2
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	4013      	ands	r3, r2
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	40da      	lsrs	r2, r3
 8001ba0:	1e13      	subs	r3, r2, #0
 8001ba2:	d000      	beq.n	8001ba6 <HAL_GPIO_Init+0x2ca>
 8001ba4:	e6a2      	b.n	80018ec <HAL_GPIO_Init+0x10>
  } 
}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b006      	add	sp, #24
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	48001000 	.word	0x48001000
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08f      	b.n	8001cfe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2241      	movs	r2, #65	@ 0x41
 8001be2:	5c9b      	ldrb	r3, [r3, r2]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2240      	movs	r2, #64	@ 0x40
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff fc03 	bl	8001400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2241      	movs	r2, #65	@ 0x41
 8001bfe:	2124      	movs	r1, #36	@ 0x24
 8001c00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	438a      	bics	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	493b      	ldr	r1, [pc, #236]	@ (8001d08 <HAL_I2C_Init+0x13c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4938      	ldr	r1, [pc, #224]	@ (8001d0c <HAL_I2C_Init+0x140>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d108      	bne.n	8001c4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	0209      	lsls	r1, r1, #8
 8001c44:	430a      	orrs	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	e007      	b.n	8001c5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2184      	movs	r1, #132	@ 0x84
 8001c54:	0209      	lsls	r1, r1, #8
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d109      	bne.n	8001c76 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	0109      	lsls	r1, r1, #4
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e007      	b.n	8001c86 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4923      	ldr	r1, [pc, #140]	@ (8001d10 <HAL_I2C_Init+0x144>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4920      	ldr	r1, [pc, #128]	@ (8001d14 <HAL_I2C_Init+0x148>)
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	491a      	ldr	r1, [pc, #104]	@ (8001d0c <HAL_I2C_Init+0x140>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69d9      	ldr	r1, [r3, #28]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2241      	movs	r2, #65	@ 0x41
 8001cea:	2120      	movs	r1, #32
 8001cec:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2242      	movs	r2, #66	@ 0x42
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	f0ffffff 	.word	0xf0ffffff
 8001d0c:	ffff7fff 	.word	0xffff7fff
 8001d10:	fffff7ff 	.word	0xfffff7ff
 8001d14:	02008000 	.word	0x02008000

08001d18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	0008      	movs	r0, r1
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	0019      	movs	r1, r3
 8001d26:	230a      	movs	r3, #10
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	1c02      	adds	r2, r0, #0
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	2308      	movs	r3, #8
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	1c0a      	adds	r2, r1, #0
 8001d34:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2241      	movs	r2, #65	@ 0x41
 8001d3a:	5c9b      	ldrb	r3, [r3, r2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d000      	beq.n	8001d44 <HAL_I2C_Master_Transmit+0x2c>
 8001d42:	e10a      	b.n	8001f5a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Master_Transmit+0x3a>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e104      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x244>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2240      	movs	r2, #64	@ 0x40
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d5a:	f7ff fcdd 	bl	8001718 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	0219      	lsls	r1, r3, #8
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2319      	movs	r3, #25
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f000 fa3c 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001d74:	1e03      	subs	r3, r0, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0ef      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2241      	movs	r2, #65	@ 0x41
 8001d80:	2121      	movs	r1, #33	@ 0x21
 8001d82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2242      	movs	r2, #66	@ 0x42
 8001d88:	2110      	movs	r1, #16
 8001d8a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	18ba      	adds	r2, r7, r2
 8001d9e:	8812      	ldrh	r2, [r2, #0]
 8001da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2bff      	cmp	r3, #255	@ 0xff
 8001db0:	d906      	bls.n	8001dc0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	22ff      	movs	r2, #255	@ 0xff
 8001db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	045b      	lsls	r3, r3, #17
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e007      	b.n	8001dd0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001dca:	2380      	movs	r3, #128	@ 0x80
 8001dcc:	049b      	lsls	r3, r3, #18
 8001dce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d027      	beq.n	8001e28 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	697c      	ldr	r4, [r7, #20]
 8001e14:	230a      	movs	r3, #10
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	8819      	ldrh	r1, [r3, #0]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	4b51      	ldr	r3, [pc, #324]	@ (8001f64 <HAL_I2C_Master_Transmit+0x24c>)
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	0023      	movs	r3, r4
 8001e22:	f000 fc5b 	bl	80026dc <I2C_TransferConfig>
 8001e26:	e06f      	b.n	8001f08 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	697c      	ldr	r4, [r7, #20]
 8001e30:	230a      	movs	r3, #10
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	8819      	ldrh	r1, [r3, #0]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <HAL_I2C_Master_Transmit+0x24c>)
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	0023      	movs	r3, r4
 8001e3e:	f000 fc4d 	bl	80026dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e42:	e061      	b.n	8001f08 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fa26 	bl	800229c <I2C_WaitOnTXISFlagUntilTimeout>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e081      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03a      	beq.n	8001f08 <HAL_I2C_Master_Transmit+0x1f0>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d136      	bne.n	8001f08 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	@ 0x80
 8001ea8:	f000 f9a0 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e053      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2bff      	cmp	r3, #255	@ 0xff
 8001ebc:	d911      	bls.n	8001ee2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	22ff      	movs	r2, #255	@ 0xff
 8001ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	045c      	lsls	r4, r3, #17
 8001ece:	230a      	movs	r3, #10
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	8819      	ldrh	r1, [r3, #0]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	0023      	movs	r3, r4
 8001edc:	f000 fbfe 	bl	80026dc <I2C_TransferConfig>
 8001ee0:	e012      	b.n	8001f08 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	049c      	lsls	r4, r3, #18
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	8819      	ldrh	r1, [r3, #0]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	0023      	movs	r3, r4
 8001f04:	f000 fbea 	bl	80026dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d198      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fa05 	bl	8002328 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e01a      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	490b      	ldr	r1, [pc, #44]	@ (8001f68 <HAL_I2C_Master_Transmit+0x250>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2241      	movs	r2, #65	@ 0x41
 8001f42:	2120      	movs	r1, #32
 8001f44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2242      	movs	r2, #66	@ 0x42
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2240      	movs	r2, #64	@ 0x40
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
  }
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b007      	add	sp, #28
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	80002000 	.word	0x80002000
 8001f68:	fe00e800 	.word	0xfe00e800

08001f6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	0008      	movs	r0, r1
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	0019      	movs	r1, r3
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	1c02      	adds	r2, r0, #0
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	2308      	movs	r3, #8
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	1c0a      	adds	r2, r1, #0
 8001f88:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2241      	movs	r2, #65	@ 0x41
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d000      	beq.n	8001f98 <HAL_I2C_Master_Receive+0x2c>
 8001f96:	e0e8      	b.n	800216a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2240      	movs	r2, #64	@ 0x40
 8001f9c:	5c9b      	ldrb	r3, [r3, r2]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Master_Receive+0x3a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0e2      	b.n	800216c <HAL_I2C_Master_Receive+0x200>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2240      	movs	r2, #64	@ 0x40
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fae:	f7ff fbb3 	bl	8001718 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	0219      	lsls	r1, r3, #8
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2319      	movs	r3, #25
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f000 f912 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	1e03      	subs	r3, r0, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cd      	b.n	800216c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2241      	movs	r2, #65	@ 0x41
 8001fd4:	2122      	movs	r1, #34	@ 0x22
 8001fd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2242      	movs	r2, #66	@ 0x42
 8001fdc:	2110      	movs	r1, #16
 8001fde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2208      	movs	r2, #8
 8001ff0:	18ba      	adds	r2, r7, r2
 8001ff2:	8812      	ldrh	r2, [r2, #0]
 8001ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2bff      	cmp	r3, #255	@ 0xff
 8002004:	d911      	bls.n	800202a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	b2da      	uxtb	r2, r3
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	045c      	lsls	r4, r3, #17
 8002016:	230a      	movs	r3, #10
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	8819      	ldrh	r1, [r3, #0]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	4b55      	ldr	r3, [pc, #340]	@ (8002174 <HAL_I2C_Master_Receive+0x208>)
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	0023      	movs	r3, r4
 8002024:	f000 fb5a 	bl	80026dc <I2C_TransferConfig>
 8002028:	e076      	b.n	8002118 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002038:	b2da      	uxtb	r2, r3
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	049c      	lsls	r4, r3, #18
 800203e:	230a      	movs	r3, #10
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	8819      	ldrh	r1, [r3, #0]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_I2C_Master_Receive+0x208>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	0023      	movs	r3, r4
 800204c:	f000 fb46 	bl	80026dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002050:	e062      	b.n	8002118 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 f9a9 	bl	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800205e:	1e03      	subs	r3, r0, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e082      	b.n	800216c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03a      	beq.n	8002118 <HAL_I2C_Master_Receive+0x1ac>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d136      	bne.n	8002118 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	0013      	movs	r3, r2
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	f000 f898 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e053      	b.n	800216c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2bff      	cmp	r3, #255	@ 0xff
 80020cc:	d911      	bls.n	80020f2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	22ff      	movs	r2, #255	@ 0xff
 80020d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	045c      	lsls	r4, r3, #17
 80020de:	230a      	movs	r3, #10
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	8819      	ldrh	r1, [r3, #0]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	2300      	movs	r3, #0
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	0023      	movs	r3, r4
 80020ec:	f000 faf6 	bl	80026dc <I2C_TransferConfig>
 80020f0:	e012      	b.n	8002118 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	049c      	lsls	r4, r3, #18
 8002106:	230a      	movs	r3, #10
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	8819      	ldrh	r1, [r3, #0]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	0023      	movs	r3, r4
 8002114:	f000 fae2 	bl	80026dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d197      	bne.n	8002052 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 f8fd 	bl	8002328 <I2C_WaitOnSTOPFlagUntilTimeout>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e01a      	b.n	800216c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2220      	movs	r2, #32
 800213c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	490b      	ldr	r1, [pc, #44]	@ (8002178 <HAL_I2C_Master_Receive+0x20c>)
 800214a:	400a      	ands	r2, r1
 800214c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2241      	movs	r2, #65	@ 0x41
 8002152:	2120      	movs	r1, #32
 8002154:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2242      	movs	r2, #66	@ 0x42
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2240      	movs	r2, #64	@ 0x40
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800216a:	2302      	movs	r3, #2
  }
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b007      	add	sp, #28
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	80002400 	.word	0x80002400
 8002178:	fe00e800 	.word	0xfe00e800

0800217c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2241      	movs	r2, #65	@ 0x41
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	b2db      	uxtb	r3, r3
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d103      	bne.n	80021c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d007      	beq.n	80021e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	430a      	orrs	r2, r1
 80021e2:	619a      	str	r2, [r3, #24]
  }
}
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	1dfb      	adds	r3, r7, #7
 80021fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fc:	e03a      	b.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f971 	bl	80024ec <I2C_IsErrorOccurred>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e040      	b.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	d02d      	beq.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002218:	f7ff fa7e 	bl	8001718 <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d122      	bne.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	4013      	ands	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	425a      	negs	r2, r3
 800223e:	4153      	adcs	r3, r2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	001a      	movs	r2, r3
 8002244:	1dfb      	adds	r3, r7, #7
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d113      	bne.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	2220      	movs	r2, #32
 8002252:	431a      	orrs	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2241      	movs	r2, #65	@ 0x41
 800225c:	2120      	movs	r1, #32
 800225e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2242      	movs	r2, #66	@ 0x42
 8002264:	2100      	movs	r1, #0
 8002266:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2240      	movs	r2, #64	@ 0x40
 800226c:	2100      	movs	r1, #0
 800226e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e00f      	b.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	425a      	negs	r2, r3
 8002284:	4153      	adcs	r3, r2
 8002286:	b2db      	uxtb	r3, r3
 8002288:	001a      	movs	r2, r3
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d0b5      	beq.n	80021fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}

0800229c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a8:	e032      	b.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 f91b 	bl	80024ec <I2C_IsErrorOccurred>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e030      	b.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3301      	adds	r3, #1
 80022c2:	d025      	beq.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7ff fa28 	bl	8001718 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d302      	bcc.n	80022da <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11a      	bne.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d013      	beq.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	2220      	movs	r2, #32
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2241      	movs	r2, #65	@ 0x41
 80022f8:	2120      	movs	r1, #32
 80022fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2242      	movs	r2, #66	@ 0x42
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e007      	b.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2202      	movs	r2, #2
 8002318:	4013      	ands	r3, r2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d1c5      	bne.n	80022aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002334:	e02f      	b.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	0018      	movs	r0, r3
 800233e:	f000 f8d5 	bl	80024ec <I2C_IsErrorOccurred>
 8002342:	1e03      	subs	r3, r0, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e02d      	b.n	80023a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff f9e5 	bl	8001718 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d11a      	bne.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2220      	movs	r2, #32
 8002368:	4013      	ands	r3, r2
 800236a:	2b20      	cmp	r3, #32
 800236c:	d013      	beq.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	2220      	movs	r2, #32
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2241      	movs	r2, #65	@ 0x41
 800237e:	2120      	movs	r1, #32
 8002380:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2242      	movs	r2, #66	@ 0x42
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2240      	movs	r2, #64	@ 0x40
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e007      	b.n	80023a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2220      	movs	r2, #32
 800239e:	4013      	ands	r3, r2
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d1c8      	bne.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b004      	add	sp, #16
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2317      	movs	r3, #23
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80023c4:	e07b      	b.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f88d 	bl	80024ec <I2C_IsErrorOccurred>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d003      	beq.n	80023de <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80023d6:	2317      	movs	r3, #23
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2220      	movs	r2, #32
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d140      	bne.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80023ec:	2117      	movs	r1, #23
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d13b      	bne.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2204      	movs	r2, #4
 80023fe:	4013      	ands	r3, r2
 8002400:	2b04      	cmp	r3, #4
 8002402:	d106      	bne.n	8002412 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800240c:	187b      	adds	r3, r7, r1
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	2b10      	cmp	r3, #16
 800241e:	d123      	bne.n	8002468 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2204      	movs	r2, #4
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2220      	movs	r2, #32
 8002434:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4929      	ldr	r1, [pc, #164]	@ (80024e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002442:	400a      	ands	r2, r1
 8002444:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2241      	movs	r2, #65	@ 0x41
 800244a:	2120      	movs	r1, #32
 800244c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2242      	movs	r2, #66	@ 0x42
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2240      	movs	r2, #64	@ 0x40
 800245a:	2100      	movs	r1, #0
 800245c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800245e:	2317      	movs	r3, #23
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e002      	b.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800246e:	f7ff f953 	bl	8001718 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	429a      	cmp	r2, r3
 800247c:	d302      	bcc.n	8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11c      	bne.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002484:	2017      	movs	r0, #23
 8002486:	183b      	adds	r3, r7, r0
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d117      	bne.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2204      	movs	r2, #4
 8002496:	4013      	ands	r3, r2
 8002498:	2b04      	cmp	r3, #4
 800249a:	d010      	beq.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	2220      	movs	r2, #32
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2241      	movs	r2, #65	@ 0x41
 80024ac:	2120      	movs	r1, #32
 80024ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2204      	movs	r2, #4
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d005      	beq.n	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80024cc:	2317      	movs	r3, #23
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d100      	bne.n	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80024d6:	e776      	b.n	80023c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80024d8:	2317      	movs	r3, #23
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b006      	add	sp, #24
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	fe00e800 	.word	0xfe00e800

080024ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2327      	movs	r3, #39	@ 0x27
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2210      	movs	r2, #16
 8002514:	4013      	ands	r3, r2
 8002516:	d100      	bne.n	800251a <I2C_IsErrorOccurred+0x2e>
 8002518:	e079      	b.n	800260e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2210      	movs	r2, #16
 8002520:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002522:	e057      	b.n	80025d4 <I2C_IsErrorOccurred+0xe8>
 8002524:	2227      	movs	r2, #39	@ 0x27
 8002526:	18bb      	adds	r3, r7, r2
 8002528:	18ba      	adds	r2, r7, r2
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	d04f      	beq.n	80025d4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002534:	f7ff f8f0 	bl	8001718 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	d302      	bcc.n	800254a <I2C_IsErrorOccurred+0x5e>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d144      	bne.n	80025d4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	2380      	movs	r3, #128	@ 0x80
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	4013      	ands	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002558:	2013      	movs	r0, #19
 800255a:	183b      	adds	r3, r7, r0
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	2142      	movs	r1, #66	@ 0x42
 8002560:	5c52      	ldrb	r2, [r2, r1]
 8002562:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	401a      	ands	r2, r3
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	429a      	cmp	r2, r3
 8002576:	d126      	bne.n	80025c6 <I2C_IsErrorOccurred+0xda>
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	01db      	lsls	r3, r3, #7
 800257e:	429a      	cmp	r2, r3
 8002580:	d021      	beq.n	80025c6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002582:	183b      	adds	r3, r7, r0
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b20      	cmp	r3, #32
 8002588:	d01d      	beq.n	80025c6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	@ 0x80
 8002596:	01c9      	lsls	r1, r1, #7
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800259c:	f7ff f8bc 	bl	8001718 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a4:	e00f      	b.n	80025c6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025a6:	f7ff f8b7 	bl	8001718 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b19      	cmp	r3, #25
 80025b2:	d908      	bls.n	80025c6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	2220      	movs	r2, #32
 80025b8:	4313      	orrs	r3, r2
 80025ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025bc:	2327      	movs	r3, #39	@ 0x27
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]

              break;
 80025c4:	e006      	b.n	80025d4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2220      	movs	r2, #32
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d1e8      	bne.n	80025a6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2220      	movs	r2, #32
 80025dc:	4013      	ands	r3, r2
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d004      	beq.n	80025ec <I2C_IsErrorOccurred+0x100>
 80025e2:	2327      	movs	r3, #39	@ 0x27
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d09b      	beq.n	8002524 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025ec:	2327      	movs	r3, #39	@ 0x27
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2220      	movs	r2, #32
 80025fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2204      	movs	r2, #4
 8002602:	4313      	orrs	r3, r2
 8002604:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002606:	2327      	movs	r3, #39	@ 0x27
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d00c      	beq.n	800263a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2201      	movs	r2, #1
 8002624:	4313      	orrs	r3, r2
 8002626:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2280      	movs	r2, #128	@ 0x80
 800262e:	0052      	lsls	r2, r2, #1
 8002630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002632:	2327      	movs	r3, #39	@ 0x27
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4013      	ands	r3, r2
 8002642:	d00c      	beq.n	800265e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	2208      	movs	r2, #8
 8002648:	4313      	orrs	r3, r2
 800264a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2280      	movs	r2, #128	@ 0x80
 8002652:	00d2      	lsls	r2, r2, #3
 8002654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002656:	2327      	movs	r3, #39	@ 0x27
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4013      	ands	r3, r2
 8002666:	d00c      	beq.n	8002682 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	2202      	movs	r2, #2
 800266c:	4313      	orrs	r3, r2
 800266e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800267a:	2327      	movs	r3, #39	@ 0x27
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002682:	2327      	movs	r3, #39	@ 0x27
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01d      	beq.n	80026c8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff fd8a 	bl	80021a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	490e      	ldr	r1, [pc, #56]	@ (80026d8 <I2C_IsErrorOccurred+0x1ec>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2241      	movs	r2, #65	@ 0x41
 80026b4:	2120      	movs	r1, #32
 80026b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2242      	movs	r2, #66	@ 0x42
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80026c8:	2327      	movs	r3, #39	@ 0x27
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b00a      	add	sp, #40	@ 0x28
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	fe00e800 	.word	0xfe00e800

080026dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	0008      	movs	r0, r1
 80026e6:	0011      	movs	r1, r2
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	240a      	movs	r4, #10
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	1c02      	adds	r2, r0, #0
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	2009      	movs	r0, #9
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	1c0a      	adds	r2, r1, #0
 80026f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	059b      	lsls	r3, r3, #22
 8002700:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002702:	183b      	adds	r3, r7, r0
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	0419      	lsls	r1, r3, #16
 8002708:	23ff      	movs	r3, #255	@ 0xff
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800270e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002716:	4313      	orrs	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002726:	0d51      	lsrs	r1, r2, #21
 8002728:	2280      	movs	r2, #128	@ 0x80
 800272a:	00d2      	lsls	r2, r2, #3
 800272c:	400a      	ands	r2, r1
 800272e:	4907      	ldr	r1, [pc, #28]	@ (800274c <I2C_TransferConfig+0x70>)
 8002730:	430a      	orrs	r2, r1
 8002732:	43d2      	mvns	r2, r2
 8002734:	401a      	ands	r2, r3
 8002736:	0011      	movs	r1, r2
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b007      	add	sp, #28
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	03ff63ff 	.word	0x03ff63ff

08002750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2241      	movs	r2, #65	@ 0x41
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d138      	bne.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2240      	movs	r2, #64	@ 0x40
 800276a:	5c9b      	ldrb	r3, [r3, r2]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002770:	2302      	movs	r3, #2
 8002772:	e032      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	@ 0x40
 8002778:	2101      	movs	r1, #1
 800277a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2241      	movs	r2, #65	@ 0x41
 8002780:	2124      	movs	r1, #36	@ 0x24
 8002782:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	438a      	bics	r2, r1
 8002792:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4911      	ldr	r1, [pc, #68]	@ (80027e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2101      	movs	r1, #1
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2241      	movs	r2, #65	@ 0x41
 80027c8:	2120      	movs	r1, #32
 80027ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	ffffefff 	.word	0xffffefff

080027e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2241      	movs	r2, #65	@ 0x41
 80027f6:	5c9b      	ldrb	r3, [r3, r2]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d139      	bne.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2240      	movs	r2, #64	@ 0x40
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002808:	2302      	movs	r3, #2
 800280a:	e033      	b.n	8002874 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2240      	movs	r2, #64	@ 0x40
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2241      	movs	r2, #65	@ 0x41
 8002818:	2124      	movs	r1, #36	@ 0x24
 800281a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2101      	movs	r1, #1
 8002828:	438a      	bics	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a11      	ldr	r2, [pc, #68]	@ (800287c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2241      	movs	r2, #65	@ 0x41
 8002862:	2120      	movs	r1, #32
 8002864:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2240      	movs	r2, #64	@ 0x40
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}
 800287c:	fffff0ff 	.word	0xfffff0ff

08002880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f000 fb76 	bl	8002f80 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	d100      	bne.n	80028a0 <HAL_RCC_OscConfig+0x20>
 800289e:	e08e      	b.n	80029be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028a0:	4bc5      	ldr	r3, [pc, #788]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	220c      	movs	r2, #12
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00e      	beq.n	80028ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ac:	4bc2      	ldr	r3, [pc, #776]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	220c      	movs	r2, #12
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d117      	bne.n	80028e8 <HAL_RCC_OscConfig+0x68>
 80028b8:	4bbf      	ldr	r3, [pc, #764]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	23c0      	movs	r3, #192	@ 0xc0
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	401a      	ands	r2, r3
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	025b      	lsls	r3, r3, #9
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d10e      	bne.n	80028e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4bbb      	ldr	r3, [pc, #748]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	4013      	ands	r3, r2
 80028d4:	d100      	bne.n	80028d8 <HAL_RCC_OscConfig+0x58>
 80028d6:	e071      	b.n	80029bc <HAL_RCC_OscConfig+0x13c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d000      	beq.n	80028e2 <HAL_RCC_OscConfig+0x62>
 80028e0:	e06c      	b.n	80029bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f000 fb4c 	bl	8002f80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x80>
 80028f0:	4bb1      	ldr	r3, [pc, #708]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4bb0      	ldr	r3, [pc, #704]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80028f6:	2180      	movs	r1, #128	@ 0x80
 80028f8:	0249      	lsls	r1, r1, #9
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e02f      	b.n	8002960 <HAL_RCC_OscConfig+0xe0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0xa2>
 8002908:	4bab      	ldr	r3, [pc, #684]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4baa      	ldr	r3, [pc, #680]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800290e:	49ab      	ldr	r1, [pc, #684]	@ (8002bbc <HAL_RCC_OscConfig+0x33c>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4ba8      	ldr	r3, [pc, #672]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4ba7      	ldr	r3, [pc, #668]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800291a:	49a9      	ldr	r1, [pc, #676]	@ (8002bc0 <HAL_RCC_OscConfig+0x340>)
 800291c:	400a      	ands	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e01e      	b.n	8002960 <HAL_RCC_OscConfig+0xe0>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d10e      	bne.n	8002948 <HAL_RCC_OscConfig+0xc8>
 800292a:	4ba3      	ldr	r3, [pc, #652]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4ba2      	ldr	r3, [pc, #648]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	02c9      	lsls	r1, r1, #11
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	4b9f      	ldr	r3, [pc, #636]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b9e      	ldr	r3, [pc, #632]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800293e:	2180      	movs	r1, #128	@ 0x80
 8002940:	0249      	lsls	r1, r1, #9
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0xe0>
 8002948:	4b9b      	ldr	r3, [pc, #620]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b9a      	ldr	r3, [pc, #616]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800294e:	499b      	ldr	r1, [pc, #620]	@ (8002bbc <HAL_RCC_OscConfig+0x33c>)
 8002950:	400a      	ands	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	4b98      	ldr	r3, [pc, #608]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b97      	ldr	r3, [pc, #604]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 800295a:	4999      	ldr	r1, [pc, #612]	@ (8002bc0 <HAL_RCC_OscConfig+0x340>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d014      	beq.n	8002992 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe fed6 	bl	8001718 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002972:	f7fe fed1 	bl	8001718 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b64      	cmp	r3, #100	@ 0x64
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e2fd      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002984:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	029b      	lsls	r3, r3, #10
 800298c:	4013      	ands	r3, r2
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0xf2>
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe fec1 	bl	8001718 <HAL_GetTick>
 8002996:	0003      	movs	r3, r0
 8002998:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe febc 	bl	8001718 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	@ 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e2e8      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	4b82      	ldr	r3, [pc, #520]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	4013      	ands	r3, r2
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x11c>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	d100      	bne.n	80029ca <HAL_RCC_OscConfig+0x14a>
 80029c8:	e06c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029ca:	4b7b      	ldr	r3, [pc, #492]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	220c      	movs	r2, #12
 80029d0:	4013      	ands	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029d4:	4b78      	ldr	r3, [pc, #480]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	220c      	movs	r2, #12
 80029da:	4013      	ands	r3, r2
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d11f      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1a0>
 80029e0:	4b75      	ldr	r3, [pc, #468]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	23c0      	movs	r3, #192	@ 0xc0
 80029e6:	025b      	lsls	r3, r3, #9
 80029e8:	401a      	ands	r2, r3
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b71      	ldr	r3, [pc, #452]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_OscConfig+0x188>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e2bb      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	22f8      	movs	r2, #248	@ 0xf8
 8002a0e:	4393      	bics	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00da      	lsls	r2, r3, #3
 8002a18:	4b67      	ldr	r3, [pc, #412]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e041      	b.n	8002aa4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d024      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b62      	ldr	r3, [pc, #392]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fe70 	bl	8001718 <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fe6b 	bl	8001718 <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e297      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2202      	movs	r2, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	d0f1      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b57      	ldr	r3, [pc, #348]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	22f8      	movs	r2, #248	@ 0xf8
 8002a60:	4393      	bics	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	00da      	lsls	r2, r3, #3
 8002a6a:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e018      	b.n	8002aa4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b51      	ldr	r3, [pc, #324]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	438a      	bics	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fe4b 	bl	8001718 <HAL_GetTick>
 8002a82:	0003      	movs	r3, r0
 8002a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fe46 	bl	8001718 <HAL_GetTick>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e272      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d1f1      	bne.n	8002a88 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d036      	beq.n	8002b1c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b40      	ldr	r3, [pc, #256]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aba:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fe29 	bl	8001718 <HAL_GetTick>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002acc:	f7fe fe24 	bl	8001718 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e250      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	4b36      	ldr	r3, [pc, #216]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d0f1      	beq.n	8002acc <HAL_RCC_OscConfig+0x24c>
 8002ae8:	e018      	b.n	8002b1c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aea:	4b33      	ldr	r3, [pc, #204]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aee:	4b32      	ldr	r3, [pc, #200]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	438a      	bics	r2, r1
 8002af4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7fe fe0f 	bl	8001718 <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe fe0a 	bl	8001718 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e236      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b12:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d1f1      	bne.n	8002b00 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2204      	movs	r2, #4
 8002b22:	4013      	ands	r3, r2
 8002b24:	d100      	bne.n	8002b28 <HAL_RCC_OscConfig+0x2a8>
 8002b26:	e0b5      	b.n	8002c94 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b28:	201f      	movs	r0, #31
 8002b2a:	183b      	adds	r3, r7, r0
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b30:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	055b      	lsls	r3, r3, #21
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d110      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002b42:	2180      	movs	r1, #128	@ 0x80
 8002b44:	0549      	lsls	r1, r1, #21
 8002b46:	430a      	orrs	r2, r1
 8002b48:	61da      	str	r2, [r3, #28]
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	055b      	lsls	r3, r3, #21
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b58:	183b      	adds	r3, r7, r0
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <HAL_RCC_OscConfig+0x344>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	d11a      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <HAL_RCC_OscConfig+0x344>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <HAL_RCC_OscConfig+0x344>)
 8002b70:	2180      	movs	r1, #128	@ 0x80
 8002b72:	0049      	lsls	r1, r1, #1
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fdce 	bl	8001718 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fe fdc9 	bl	8001718 <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	@ 0x64
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1f5      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCC_OscConfig+0x344>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x348>
 8002ba8:	4b03      	ldr	r3, [pc, #12]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	4b02      	ldr	r3, [pc, #8]	@ (8002bb8 <HAL_RCC_OscConfig+0x338>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	e036      	b.n	8002c24 <HAL_RCC_OscConfig+0x3a4>
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	fffeffff 	.word	0xfffeffff
 8002bc0:	fffbffff 	.word	0xfffbffff
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x36a>
 8002bd0:	4bca      	ldr	r3, [pc, #808]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	4bc9      	ldr	r3, [pc, #804]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	438a      	bics	r2, r1
 8002bda:	621a      	str	r2, [r3, #32]
 8002bdc:	4bc7      	ldr	r3, [pc, #796]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	4bc6      	ldr	r3, [pc, #792]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002be2:	2104      	movs	r1, #4
 8002be4:	438a      	bics	r2, r1
 8002be6:	621a      	str	r2, [r3, #32]
 8002be8:	e01c      	b.n	8002c24 <HAL_RCC_OscConfig+0x3a4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x38c>
 8002bf2:	4bc2      	ldr	r3, [pc, #776]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	4bc1      	ldr	r3, [pc, #772]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	621a      	str	r2, [r3, #32]
 8002bfe:	4bbf      	ldr	r3, [pc, #764]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	4bbe      	ldr	r3, [pc, #760]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	621a      	str	r2, [r3, #32]
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0x3a4>
 8002c0c:	4bbb      	ldr	r3, [pc, #748]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c0e:	6a1a      	ldr	r2, [r3, #32]
 8002c10:	4bba      	ldr	r3, [pc, #744]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	438a      	bics	r2, r1
 8002c16:	621a      	str	r2, [r3, #32]
 8002c18:	4bb8      	ldr	r3, [pc, #736]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	4bb7      	ldr	r3, [pc, #732]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c1e:	2104      	movs	r1, #4
 8002c20:	438a      	bics	r2, r1
 8002c22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d014      	beq.n	8002c56 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fd74 	bl	8001718 <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	e009      	b.n	8002c4a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fd6f 	bl	8001718 <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	4aaf      	ldr	r2, [pc, #700]	@ (8002f00 <HAL_RCC_OscConfig+0x680>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e19a      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4a:	4bac      	ldr	r3, [pc, #688]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3b6>
 8002c54:	e013      	b.n	8002c7e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fd5f 	bl	8001718 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe fd5a 	bl	8001718 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	4aa5      	ldr	r2, [pc, #660]	@ (8002f00 <HAL_RCC_OscConfig+0x680>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e185      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c74:	4ba1      	ldr	r3, [pc, #644]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c7e:	231f      	movs	r3, #31
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b9c      	ldr	r3, [pc, #624]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	4b9b      	ldr	r3, [pc, #620]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002c8e:	499d      	ldr	r1, [pc, #628]	@ (8002f04 <HAL_RCC_OscConfig+0x684>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d12a      	bne.n	8002cfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ca6:	4b95      	ldr	r3, [pc, #596]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002caa:	4b94      	ldr	r3, [pc, #592]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002cac:	2104      	movs	r1, #4
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cb2:	4b92      	ldr	r3, [pc, #584]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb6:	4b91      	ldr	r3, [pc, #580]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fd2b 	bl	8001718 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cc8:	f7fe fd26 	bl	8001718 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e152      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cda:	4b88      	ldr	r3, [pc, #544]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d0f1      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ce4:	4b85      	ldr	r3, [pc, #532]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	22f8      	movs	r2, #248	@ 0xf8
 8002cea:	4393      	bics	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	00da      	lsls	r2, r3, #3
 8002cf4:	4b81      	ldr	r3, [pc, #516]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cfa:	e034      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	3305      	adds	r3, #5
 8002d02:	d111      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d04:	4b7d      	ldr	r3, [pc, #500]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d08:	4b7c      	ldr	r3, [pc, #496]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d10:	4b7a      	ldr	r3, [pc, #488]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d14:	22f8      	movs	r2, #248	@ 0xf8
 8002d16:	4393      	bics	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	00da      	lsls	r2, r3, #3
 8002d20:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d26:	e01e      	b.n	8002d66 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d28:	4b74      	ldr	r3, [pc, #464]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d2c:	4b73      	ldr	r3, [pc, #460]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d2e:	2104      	movs	r1, #4
 8002d30:	430a      	orrs	r2, r1
 8002d32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d34:	4b71      	ldr	r3, [pc, #452]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d38:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7fe fcea 	bl	8001718 <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d4a:	f7fe fce5 	bl	8001718 <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e111      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d5c:	4b67      	ldr	r3, [pc, #412]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d1f1      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d05c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d70:	4b62      	ldr	r3, [pc, #392]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	220c      	movs	r2, #12
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d00e      	beq.n	8002d9a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	220c      	movs	r2, #12
 8002d82:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d114      	bne.n	8002db2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d88:	4b5c      	ldr	r3, [pc, #368]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	23c0      	movs	r3, #192	@ 0xc0
 8002d8e:	025b      	lsls	r3, r3, #9
 8002d90:	401a      	ands	r2, r3
 8002d92:	23c0      	movs	r3, #192	@ 0xc0
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d10b      	bne.n	8002db2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d9a:	4b58      	ldr	r3, [pc, #352]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	4013      	ands	r3, r2
 8002da4:	d040      	beq.n	8002e28 <HAL_RCC_OscConfig+0x5a8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d03c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0e6      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01b      	beq.n	8002df2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002dba:	4b50      	ldr	r3, [pc, #320]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	0249      	lsls	r1, r1, #9
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fca6 	bl	8001718 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd2:	f7fe fca1 	bl	8001718 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0cd      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002de4:	4b45      	ldr	r3, [pc, #276]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	4013      	ands	r3, r2
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x552>
 8002df0:	e01b      	b.n	8002e2a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002df2:	4b42      	ldr	r3, [pc, #264]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df6:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002df8:	4943      	ldr	r1, [pc, #268]	@ (8002f08 <HAL_RCC_OscConfig+0x688>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fc8b 	bl	8001718 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e08:	f7fe fc86 	bl	8001718 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e0b2      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e1a:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	029b      	lsls	r3, r3, #10
 8002e22:	4013      	ands	r3, r2
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x588>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e28:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d100      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5b4>
 8002e32:	e0a4      	b.n	8002f7e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e34:	4b31      	ldr	r3, [pc, #196]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	220c      	movs	r2, #12
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d100      	bne.n	8002e42 <HAL_RCC_OscConfig+0x5c2>
 8002e40:	e078      	b.n	8002f34 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d14c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e50:	492e      	ldr	r1, [pc, #184]	@ (8002f0c <HAL_RCC_OscConfig+0x68c>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe fc5f 	bl	8001718 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fc5a 	bl	8001718 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e086      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	049b      	lsls	r3, r3, #18
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	220f      	movs	r2, #15
 8002e84:	4393      	bics	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e92:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <HAL_RCC_OscConfig+0x690>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002eb2:	2180      	movs	r1, #128	@ 0x80
 8002eb4:	0449      	lsls	r1, r1, #17
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fc2d 	bl	8001718 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe fc28 	bl	8001718 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e054      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed6:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	049b      	lsls	r3, r3, #18
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x644>
 8002ee2:	e04c      	b.n	8002f7e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <HAL_RCC_OscConfig+0x67c>)
 8002eea:	4908      	ldr	r1, [pc, #32]	@ (8002f0c <HAL_RCC_OscConfig+0x68c>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fc12 	bl	8001718 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef8:	e015      	b.n	8002f26 <HAL_RCC_OscConfig+0x6a6>
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	40021000 	.word	0x40021000
 8002f00:	00001388 	.word	0x00001388
 8002f04:	efffffff 	.word	0xefffffff
 8002f08:	fffeffff 	.word	0xfffeffff
 8002f0c:	feffffff 	.word	0xfeffffff
 8002f10:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe fc00 	bl	8001718 <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e02c      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f26:	4b18      	ldr	r3, [pc, #96]	@ (8002f88 <HAL_RCC_OscConfig+0x708>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	049b      	lsls	r3, r3, #18
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x694>
 8002f32:	e024      	b.n	8002f7e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e01f      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_RCC_OscConfig+0x708>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <HAL_RCC_OscConfig+0x708>)
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	23c0      	movs	r3, #192	@ 0xc0
 8002f50:	025b      	lsls	r3, r3, #9
 8002f52:	401a      	ands	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d10e      	bne.n	8002f7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	220f      	movs	r2, #15
 8002f60:	401a      	ands	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	23f0      	movs	r3, #240	@ 0xf0
 8002f6e:	039b      	lsls	r3, r3, #14
 8002f70:	401a      	ands	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b008      	add	sp, #32
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0bf      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b61      	ldr	r3, [pc, #388]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d911      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b5e      	ldr	r3, [pc, #376]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc0:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0a6      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d015      	beq.n	8003008 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d006      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fe6:	4b51      	ldr	r3, [pc, #324]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4b50      	ldr	r3, [pc, #320]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 8002fec:	21e0      	movs	r1, #224	@ 0xe0
 8002fee:	00c9      	lsls	r1, r1, #3
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	22f0      	movs	r2, #240	@ 0xf0
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	4b4a      	ldr	r3, [pc, #296]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d04c      	beq.n	80030ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b44      	ldr	r3, [pc, #272]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	029b      	lsls	r3, r3, #10
 8003022:	4013      	ands	r3, r2
 8003024:	d120      	bne.n	8003068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07a      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b3e      	ldr	r3, [pc, #248]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	049b      	lsls	r3, r3, #18
 800303a:	4013      	ands	r3, r2
 800303c:	d114      	bne.n	8003068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06e      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800304a:	4b38      	ldr	r3, [pc, #224]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 800304c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800304e:	2380      	movs	r3, #128	@ 0x80
 8003050:	029b      	lsls	r3, r3, #10
 8003052:	4013      	ands	r3, r2
 8003054:	d108      	bne.n	8003068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e062      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b34      	ldr	r3, [pc, #208]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2202      	movs	r2, #2
 8003060:	4013      	ands	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e05b      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003068:	4b30      	ldr	r3, [pc, #192]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	4393      	bics	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800307c:	f7fe fb4c 	bl	8001718 <HAL_GetTick>
 8003080:	0003      	movs	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	e009      	b.n	800309a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003086:	f7fe fb47 	bl	8001718 <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	4a27      	ldr	r2, [pc, #156]	@ (8003130 <HAL_RCC_ClockConfig+0x1a4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e042      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b24      	ldr	r3, [pc, #144]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	220c      	movs	r2, #12
 80030a0:	401a      	ands	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1ec      	bne.n	8003086 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4013      	ands	r3, r2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d211      	bcs.n	80030de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	4393      	bics	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030cc:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <HAL_RCC_ClockConfig+0x19c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e020      	b.n	8003120 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2204      	movs	r2, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	4b10      	ldr	r3, [pc, #64]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a11      	ldr	r2, [pc, #68]	@ (8003134 <HAL_RCC_ClockConfig+0x1a8>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 80030f8:	430a      	orrs	r2, r1
 80030fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030fc:	f000 f820 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 8003100:	0001      	movs	r1, r0
 8003102:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x1a0>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	220f      	movs	r2, #15
 800310a:	4013      	ands	r3, r2
 800310c:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <HAL_RCC_ClockConfig+0x1ac>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	000a      	movs	r2, r1
 8003112:	40da      	lsrs	r2, r3
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_RCC_ClockConfig+0x1b0>)
 8003116:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003118:	2003      	movs	r0, #3
 800311a:	f7fe fab7 	bl	800168c <HAL_InitTick>
  
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	00001388 	.word	0x00001388
 8003134:	fffff8ff 	.word	0xfffff8ff
 8003138:	08004614 	.word	0x08004614
 800313c:	2000000c 	.word	0x2000000c

08003140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800315a:	4b2d      	ldr	r3, [pc, #180]	@ (8003210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	220c      	movs	r2, #12
 8003164:	4013      	ands	r3, r2
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d046      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xb8>
 800316a:	d848      	bhi.n	80031fe <HAL_RCC_GetSysClockFreq+0xbe>
 800316c:	2b04      	cmp	r3, #4
 800316e:	d002      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x36>
 8003170:	2b08      	cmp	r3, #8
 8003172:	d003      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x3c>
 8003174:	e043      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003176:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003178:	613b      	str	r3, [r7, #16]
      break;
 800317a:	e043      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	0c9b      	lsrs	r3, r3, #18
 8003180:	220f      	movs	r2, #15
 8003182:	4013      	ands	r3, r2
 8003184:	4a24      	ldr	r2, [pc, #144]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003186:	5cd3      	ldrb	r3, [r2, r3]
 8003188:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800318a:	4b21      	ldr	r3, [pc, #132]	@ (8003210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	220f      	movs	r2, #15
 8003190:	4013      	ands	r3, r2
 8003192:	4a22      	ldr	r2, [pc, #136]	@ (800321c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	23c0      	movs	r3, #192	@ 0xc0
 800319c:	025b      	lsls	r3, r3, #9
 800319e:	401a      	ands	r2, r3
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	025b      	lsls	r3, r3, #9
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d109      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	481a      	ldr	r0, [pc, #104]	@ (8003214 <HAL_RCC_GetSysClockFreq+0xd4>)
 80031ac:	f7fc ffb6 	bl	800011c <__udivsi3>
 80031b0:	0003      	movs	r3, r0
 80031b2:	001a      	movs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4353      	muls	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e01a      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	23c0      	movs	r3, #192	@ 0xc0
 80031c0:	025b      	lsls	r3, r3, #9
 80031c2:	401a      	ands	r2, r3
 80031c4:	23c0      	movs	r3, #192	@ 0xc0
 80031c6:	025b      	lsls	r3, r3, #9
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d109      	bne.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4814      	ldr	r0, [pc, #80]	@ (8003220 <HAL_RCC_GetSysClockFreq+0xe0>)
 80031d0:	f7fc ffa4 	bl	800011c <__udivsi3>
 80031d4:	0003      	movs	r3, r0
 80031d6:	001a      	movs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4353      	muls	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e008      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	480c      	ldr	r0, [pc, #48]	@ (8003214 <HAL_RCC_GetSysClockFreq+0xd4>)
 80031e4:	f7fc ff9a 	bl	800011c <__udivsi3>
 80031e8:	0003      	movs	r3, r0
 80031ea:	001a      	movs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4353      	muls	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	613b      	str	r3, [r7, #16]
      break;
 80031f6:	e005      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031f8:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <HAL_RCC_GetSysClockFreq+0xe0>)
 80031fa:	613b      	str	r3, [r7, #16]
      break;
 80031fc:	e002      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031fe:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003200:	613b      	str	r3, [r7, #16]
      break;
 8003202:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003204:	693b      	ldr	r3, [r7, #16]
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b006      	add	sp, #24
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	40021000 	.word	0x40021000
 8003214:	007a1200 	.word	0x007a1200
 8003218:	08004624 	.word	0x08004624
 800321c:	08004634 	.word	0x08004634
 8003220:	02dc6c00 	.word	0x02dc6c00

08003224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	025b      	lsls	r3, r3, #9
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003240:	e08e      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2017      	movs	r0, #23
 8003244:	183b      	adds	r3, r7, r0
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324a:	4b6e      	ldr	r3, [pc, #440]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	055b      	lsls	r3, r3, #21
 8003252:	4013      	ands	r3, r2
 8003254:	d110      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	4b6b      	ldr	r3, [pc, #428]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	4b6a      	ldr	r3, [pc, #424]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	0549      	lsls	r1, r1, #21
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
 8003264:	4b67      	ldr	r3, [pc, #412]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	055b      	lsls	r3, r3, #21
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003272:	183b      	adds	r3, r7, r0
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4013      	ands	r3, r2
 8003282:	d11a      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003284:	4b60      	ldr	r3, [pc, #384]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b5f      	ldr	r3, [pc, #380]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800328a:	2180      	movs	r1, #128	@ 0x80
 800328c:	0049      	lsls	r1, r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fe fa41 	bl	8001718 <HAL_GetTick>
 8003296:	0003      	movs	r3, r0
 8003298:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	e008      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fe fa3c 	bl	8001718 <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	@ 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0a6      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b56      	ldr	r3, [pc, #344]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	d0f0      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ba:	4b52      	ldr	r3, [pc, #328]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	23c0      	movs	r3, #192	@ 0xc0
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d034      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	23c0      	movs	r3, #192	@ 0xc0
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d02c      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032dc:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4a4a      	ldr	r2, [pc, #296]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	0249      	lsls	r1, r1, #9
 80032f0:	430a      	orrs	r2, r1
 80032f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f4:	4b43      	ldr	r3, [pc, #268]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	4b42      	ldr	r3, [pc, #264]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032fa:	4945      	ldr	r1, [pc, #276]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003300:	4b40      	ldr	r3, [pc, #256]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe fa03 	bl	8001718 <HAL_GetTick>
 8003312:	0003      	movs	r3, r0
 8003314:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	e009      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fe f9fe 	bl	8001718 <HAL_GetTick>
 800331c:	0002      	movs	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	4a3c      	ldr	r2, [pc, #240]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e067      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b35      	ldr	r3, [pc, #212]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d0f0      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003336:	4b33      	ldr	r3, [pc, #204]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4a34      	ldr	r2, [pc, #208]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800333c:	4013      	ands	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4b2f      	ldr	r3, [pc, #188]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003346:	430a      	orrs	r2, r1
 8003348:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800334a:	2317      	movs	r3, #23
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b2b      	ldr	r3, [pc, #172]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	4b2a      	ldr	r3, [pc, #168]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800335a:	492f      	ldr	r1, [pc, #188]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800335c:	400a      	ands	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2201      	movs	r2, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336a:	4b26      	ldr	r3, [pc, #152]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	2203      	movs	r2, #3
 8003370:	4393      	bics	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800337a:	430a      	orrs	r2, r1
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003388:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	4a23      	ldr	r2, [pc, #140]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003398:	430a      	orrs	r2, r1
 800339a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2220      	movs	r2, #32
 80033a2:	4013      	ands	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a6:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	2210      	movs	r2, #16
 80033ac:	4393      	bics	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033b6:	430a      	orrs	r2, r1
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	029b      	lsls	r3, r3, #10
 80033c2:	4013      	ands	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	2280      	movs	r2, #128	@ 0x80
 80033cc:	4393      	bics	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4013      	ands	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	2240      	movs	r2, #64	@ 0x40
 80033ec:	4393      	bics	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b006      	add	sp, #24
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	fffffcff 	.word	0xfffffcff
 8003410:	fffeffff 	.word	0xfffeffff
 8003414:	00001388 	.word	0x00001388
 8003418:	efffffff 	.word	0xefffffff
 800341c:	fffcffff 	.word	0xfffcffff

08003420 <std>:
 8003420:	2300      	movs	r3, #0
 8003422:	b510      	push	{r4, lr}
 8003424:	0004      	movs	r4, r0
 8003426:	6003      	str	r3, [r0, #0]
 8003428:	6043      	str	r3, [r0, #4]
 800342a:	6083      	str	r3, [r0, #8]
 800342c:	8181      	strh	r1, [r0, #12]
 800342e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003430:	81c2      	strh	r2, [r0, #14]
 8003432:	6103      	str	r3, [r0, #16]
 8003434:	6143      	str	r3, [r0, #20]
 8003436:	6183      	str	r3, [r0, #24]
 8003438:	0019      	movs	r1, r3
 800343a:	2208      	movs	r2, #8
 800343c:	305c      	adds	r0, #92	@ 0x5c
 800343e:	f000 fa0f 	bl	8003860 <memset>
 8003442:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <std+0x50>)
 8003444:	6224      	str	r4, [r4, #32]
 8003446:	6263      	str	r3, [r4, #36]	@ 0x24
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <std+0x54>)
 800344a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800344c:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <std+0x58>)
 800344e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003450:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <std+0x5c>)
 8003452:	6323      	str	r3, [r4, #48]	@ 0x30
 8003454:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <std+0x60>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d005      	beq.n	8003466 <std+0x46>
 800345a:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <std+0x64>)
 800345c:	429c      	cmp	r4, r3
 800345e:	d002      	beq.n	8003466 <std+0x46>
 8003460:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <std+0x68>)
 8003462:	429c      	cmp	r4, r3
 8003464:	d103      	bne.n	800346e <std+0x4e>
 8003466:	0020      	movs	r0, r4
 8003468:	3058      	adds	r0, #88	@ 0x58
 800346a:	f000 fa79 	bl	8003960 <__retarget_lock_init_recursive>
 800346e:	bd10      	pop	{r4, pc}
 8003470:	08003689 	.word	0x08003689
 8003474:	080036b1 	.word	0x080036b1
 8003478:	080036e9 	.word	0x080036e9
 800347c:	08003715 	.word	0x08003715
 8003480:	200001b0 	.word	0x200001b0
 8003484:	20000218 	.word	0x20000218
 8003488:	20000280 	.word	0x20000280

0800348c <stdio_exit_handler>:
 800348c:	b510      	push	{r4, lr}
 800348e:	4a03      	ldr	r2, [pc, #12]	@ (800349c <stdio_exit_handler+0x10>)
 8003490:	4903      	ldr	r1, [pc, #12]	@ (80034a0 <stdio_exit_handler+0x14>)
 8003492:	4804      	ldr	r0, [pc, #16]	@ (80034a4 <stdio_exit_handler+0x18>)
 8003494:	f000 f86c 	bl	8003570 <_fwalk_sglue>
 8003498:	bd10      	pop	{r4, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	20000018 	.word	0x20000018
 80034a0:	080041fd 	.word	0x080041fd
 80034a4:	20000028 	.word	0x20000028

080034a8 <cleanup_stdio>:
 80034a8:	6841      	ldr	r1, [r0, #4]
 80034aa:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <cleanup_stdio+0x30>)
 80034ac:	b510      	push	{r4, lr}
 80034ae:	0004      	movs	r4, r0
 80034b0:	4299      	cmp	r1, r3
 80034b2:	d001      	beq.n	80034b8 <cleanup_stdio+0x10>
 80034b4:	f000 fea2 	bl	80041fc <_fflush_r>
 80034b8:	68a1      	ldr	r1, [r4, #8]
 80034ba:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <cleanup_stdio+0x34>)
 80034bc:	4299      	cmp	r1, r3
 80034be:	d002      	beq.n	80034c6 <cleanup_stdio+0x1e>
 80034c0:	0020      	movs	r0, r4
 80034c2:	f000 fe9b 	bl	80041fc <_fflush_r>
 80034c6:	68e1      	ldr	r1, [r4, #12]
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <cleanup_stdio+0x38>)
 80034ca:	4299      	cmp	r1, r3
 80034cc:	d002      	beq.n	80034d4 <cleanup_stdio+0x2c>
 80034ce:	0020      	movs	r0, r4
 80034d0:	f000 fe94 	bl	80041fc <_fflush_r>
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	200001b0 	.word	0x200001b0
 80034dc:	20000218 	.word	0x20000218
 80034e0:	20000280 	.word	0x20000280

080034e4 <global_stdio_init.part.0>:
 80034e4:	b510      	push	{r4, lr}
 80034e6:	4b09      	ldr	r3, [pc, #36]	@ (800350c <global_stdio_init.part.0+0x28>)
 80034e8:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <global_stdio_init.part.0+0x2c>)
 80034ea:	2104      	movs	r1, #4
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	4809      	ldr	r0, [pc, #36]	@ (8003514 <global_stdio_init.part.0+0x30>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	f7ff ff95 	bl	8003420 <std>
 80034f6:	2201      	movs	r2, #1
 80034f8:	2109      	movs	r1, #9
 80034fa:	4807      	ldr	r0, [pc, #28]	@ (8003518 <global_stdio_init.part.0+0x34>)
 80034fc:	f7ff ff90 	bl	8003420 <std>
 8003500:	2202      	movs	r2, #2
 8003502:	2112      	movs	r1, #18
 8003504:	4805      	ldr	r0, [pc, #20]	@ (800351c <global_stdio_init.part.0+0x38>)
 8003506:	f7ff ff8b 	bl	8003420 <std>
 800350a:	bd10      	pop	{r4, pc}
 800350c:	200002e8 	.word	0x200002e8
 8003510:	0800348d 	.word	0x0800348d
 8003514:	200001b0 	.word	0x200001b0
 8003518:	20000218 	.word	0x20000218
 800351c:	20000280 	.word	0x20000280

08003520 <__sfp_lock_acquire>:
 8003520:	b510      	push	{r4, lr}
 8003522:	4802      	ldr	r0, [pc, #8]	@ (800352c <__sfp_lock_acquire+0xc>)
 8003524:	f000 fa1d 	bl	8003962 <__retarget_lock_acquire_recursive>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	200002f1 	.word	0x200002f1

08003530 <__sfp_lock_release>:
 8003530:	b510      	push	{r4, lr}
 8003532:	4802      	ldr	r0, [pc, #8]	@ (800353c <__sfp_lock_release+0xc>)
 8003534:	f000 fa16 	bl	8003964 <__retarget_lock_release_recursive>
 8003538:	bd10      	pop	{r4, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	200002f1 	.word	0x200002f1

08003540 <__sinit>:
 8003540:	b510      	push	{r4, lr}
 8003542:	0004      	movs	r4, r0
 8003544:	f7ff ffec 	bl	8003520 <__sfp_lock_acquire>
 8003548:	6a23      	ldr	r3, [r4, #32]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <__sinit+0x14>
 800354e:	f7ff ffef 	bl	8003530 <__sfp_lock_release>
 8003552:	bd10      	pop	{r4, pc}
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <__sinit+0x28>)
 8003556:	6223      	str	r3, [r4, #32]
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <__sinit+0x2c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f6      	bne.n	800354e <__sinit+0xe>
 8003560:	f7ff ffc0 	bl	80034e4 <global_stdio_init.part.0>
 8003564:	e7f3      	b.n	800354e <__sinit+0xe>
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	080034a9 	.word	0x080034a9
 800356c:	200002e8 	.word	0x200002e8

08003570 <_fwalk_sglue>:
 8003570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003572:	0014      	movs	r4, r2
 8003574:	2600      	movs	r6, #0
 8003576:	9000      	str	r0, [sp, #0]
 8003578:	9101      	str	r1, [sp, #4]
 800357a:	68a5      	ldr	r5, [r4, #8]
 800357c:	6867      	ldr	r7, [r4, #4]
 800357e:	3f01      	subs	r7, #1
 8003580:	d504      	bpl.n	800358c <_fwalk_sglue+0x1c>
 8003582:	6824      	ldr	r4, [r4, #0]
 8003584:	2c00      	cmp	r4, #0
 8003586:	d1f8      	bne.n	800357a <_fwalk_sglue+0xa>
 8003588:	0030      	movs	r0, r6
 800358a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800358c:	89ab      	ldrh	r3, [r5, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d908      	bls.n	80035a4 <_fwalk_sglue+0x34>
 8003592:	220e      	movs	r2, #14
 8003594:	5eab      	ldrsh	r3, [r5, r2]
 8003596:	3301      	adds	r3, #1
 8003598:	d004      	beq.n	80035a4 <_fwalk_sglue+0x34>
 800359a:	0029      	movs	r1, r5
 800359c:	9800      	ldr	r0, [sp, #0]
 800359e:	9b01      	ldr	r3, [sp, #4]
 80035a0:	4798      	blx	r3
 80035a2:	4306      	orrs	r6, r0
 80035a4:	3568      	adds	r5, #104	@ 0x68
 80035a6:	e7ea      	b.n	800357e <_fwalk_sglue+0xe>

080035a8 <iprintf>:
 80035a8:	b40f      	push	{r0, r1, r2, r3}
 80035aa:	b507      	push	{r0, r1, r2, lr}
 80035ac:	4905      	ldr	r1, [pc, #20]	@ (80035c4 <iprintf+0x1c>)
 80035ae:	ab04      	add	r3, sp, #16
 80035b0:	6808      	ldr	r0, [r1, #0]
 80035b2:	cb04      	ldmia	r3!, {r2}
 80035b4:	6881      	ldr	r1, [r0, #8]
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	f000 fb02 	bl	8003bc0 <_vfiprintf_r>
 80035bc:	b003      	add	sp, #12
 80035be:	bc08      	pop	{r3}
 80035c0:	b004      	add	sp, #16
 80035c2:	4718      	bx	r3
 80035c4:	20000024 	.word	0x20000024

080035c8 <_puts_r>:
 80035c8:	6a03      	ldr	r3, [r0, #32]
 80035ca:	b570      	push	{r4, r5, r6, lr}
 80035cc:	0005      	movs	r5, r0
 80035ce:	000e      	movs	r6, r1
 80035d0:	6884      	ldr	r4, [r0, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <_puts_r+0x12>
 80035d6:	f7ff ffb3 	bl	8003540 <__sinit>
 80035da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035dc:	07db      	lsls	r3, r3, #31
 80035de:	d405      	bmi.n	80035ec <_puts_r+0x24>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	059b      	lsls	r3, r3, #22
 80035e4:	d402      	bmi.n	80035ec <_puts_r+0x24>
 80035e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035e8:	f000 f9bb 	bl	8003962 <__retarget_lock_acquire_recursive>
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	071b      	lsls	r3, r3, #28
 80035f0:	d502      	bpl.n	80035f8 <_puts_r+0x30>
 80035f2:	6923      	ldr	r3, [r4, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11f      	bne.n	8003638 <_puts_r+0x70>
 80035f8:	0021      	movs	r1, r4
 80035fa:	0028      	movs	r0, r5
 80035fc:	f000 f8d2 	bl	80037a4 <__swsetup_r>
 8003600:	2800      	cmp	r0, #0
 8003602:	d019      	beq.n	8003638 <_puts_r+0x70>
 8003604:	2501      	movs	r5, #1
 8003606:	426d      	negs	r5, r5
 8003608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800360a:	07db      	lsls	r3, r3, #31
 800360c:	d405      	bmi.n	800361a <_puts_r+0x52>
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	059b      	lsls	r3, r3, #22
 8003612:	d402      	bmi.n	800361a <_puts_r+0x52>
 8003614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003616:	f000 f9a5 	bl	8003964 <__retarget_lock_release_recursive>
 800361a:	0028      	movs	r0, r5
 800361c:	bd70      	pop	{r4, r5, r6, pc}
 800361e:	3601      	adds	r6, #1
 8003620:	60a3      	str	r3, [r4, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	da04      	bge.n	8003630 <_puts_r+0x68>
 8003626:	69a2      	ldr	r2, [r4, #24]
 8003628:	429a      	cmp	r2, r3
 800362a:	dc16      	bgt.n	800365a <_puts_r+0x92>
 800362c:	290a      	cmp	r1, #10
 800362e:	d014      	beq.n	800365a <_puts_r+0x92>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	6022      	str	r2, [r4, #0]
 8003636:	7019      	strb	r1, [r3, #0]
 8003638:	68a3      	ldr	r3, [r4, #8]
 800363a:	7831      	ldrb	r1, [r6, #0]
 800363c:	3b01      	subs	r3, #1
 800363e:	2900      	cmp	r1, #0
 8003640:	d1ed      	bne.n	800361e <_puts_r+0x56>
 8003642:	60a3      	str	r3, [r4, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	da0f      	bge.n	8003668 <_puts_r+0xa0>
 8003648:	0022      	movs	r2, r4
 800364a:	0028      	movs	r0, r5
 800364c:	310a      	adds	r1, #10
 800364e:	f000 f867 	bl	8003720 <__swbuf_r>
 8003652:	3001      	adds	r0, #1
 8003654:	d0d6      	beq.n	8003604 <_puts_r+0x3c>
 8003656:	250a      	movs	r5, #10
 8003658:	e7d6      	b.n	8003608 <_puts_r+0x40>
 800365a:	0022      	movs	r2, r4
 800365c:	0028      	movs	r0, r5
 800365e:	f000 f85f 	bl	8003720 <__swbuf_r>
 8003662:	3001      	adds	r0, #1
 8003664:	d1e8      	bne.n	8003638 <_puts_r+0x70>
 8003666:	e7cd      	b.n	8003604 <_puts_r+0x3c>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	6022      	str	r2, [r4, #0]
 800366e:	220a      	movs	r2, #10
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e7f0      	b.n	8003656 <_puts_r+0x8e>

08003674 <puts>:
 8003674:	b510      	push	{r4, lr}
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <puts+0x10>)
 8003678:	0001      	movs	r1, r0
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	f7ff ffa4 	bl	80035c8 <_puts_r>
 8003680:	bd10      	pop	{r4, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000024 	.word	0x20000024

08003688 <__sread>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	000c      	movs	r4, r1
 800368c:	250e      	movs	r5, #14
 800368e:	5f49      	ldrsh	r1, [r1, r5]
 8003690:	f000 f914 	bl	80038bc <_read_r>
 8003694:	2800      	cmp	r0, #0
 8003696:	db03      	blt.n	80036a0 <__sread+0x18>
 8003698:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800369a:	181b      	adds	r3, r3, r0
 800369c:	6563      	str	r3, [r4, #84]	@ 0x54
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	4a02      	ldr	r2, [pc, #8]	@ (80036ac <__sread+0x24>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	e7f9      	b.n	800369e <__sread+0x16>
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	ffffefff 	.word	0xffffefff

080036b0 <__swrite>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	001f      	movs	r7, r3
 80036b4:	898b      	ldrh	r3, [r1, #12]
 80036b6:	0005      	movs	r5, r0
 80036b8:	000c      	movs	r4, r1
 80036ba:	0016      	movs	r6, r2
 80036bc:	05db      	lsls	r3, r3, #23
 80036be:	d505      	bpl.n	80036cc <__swrite+0x1c>
 80036c0:	230e      	movs	r3, #14
 80036c2:	5ec9      	ldrsh	r1, [r1, r3]
 80036c4:	2200      	movs	r2, #0
 80036c6:	2302      	movs	r3, #2
 80036c8:	f000 f8e4 	bl	8003894 <_lseek_r>
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <__swrite+0x34>)
 80036d0:	0028      	movs	r0, r5
 80036d2:	4013      	ands	r3, r2
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	0032      	movs	r2, r6
 80036d8:	230e      	movs	r3, #14
 80036da:	5ee1      	ldrsh	r1, [r4, r3]
 80036dc:	003b      	movs	r3, r7
 80036de:	f000 f901 	bl	80038e4 <_write_r>
 80036e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e4:	ffffefff 	.word	0xffffefff

080036e8 <__sseek>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	000c      	movs	r4, r1
 80036ec:	250e      	movs	r5, #14
 80036ee:	5f49      	ldrsh	r1, [r1, r5]
 80036f0:	f000 f8d0 	bl	8003894 <_lseek_r>
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	1c42      	adds	r2, r0, #1
 80036f8:	d103      	bne.n	8003702 <__sseek+0x1a>
 80036fa:	4a05      	ldr	r2, [pc, #20]	@ (8003710 <__sseek+0x28>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	81a3      	strh	r3, [r4, #12]
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	2280      	movs	r2, #128	@ 0x80
 8003704:	0152      	lsls	r2, r2, #5
 8003706:	4313      	orrs	r3, r2
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	6560      	str	r0, [r4, #84]	@ 0x54
 800370c:	e7f8      	b.n	8003700 <__sseek+0x18>
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	ffffefff 	.word	0xffffefff

08003714 <__sclose>:
 8003714:	b510      	push	{r4, lr}
 8003716:	230e      	movs	r3, #14
 8003718:	5ec9      	ldrsh	r1, [r1, r3]
 800371a:	f000 f8a9 	bl	8003870 <_close_r>
 800371e:	bd10      	pop	{r4, pc}

08003720 <__swbuf_r>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	0006      	movs	r6, r0
 8003724:	000d      	movs	r5, r1
 8003726:	0014      	movs	r4, r2
 8003728:	2800      	cmp	r0, #0
 800372a:	d004      	beq.n	8003736 <__swbuf_r+0x16>
 800372c:	6a03      	ldr	r3, [r0, #32]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <__swbuf_r+0x16>
 8003732:	f7ff ff05 	bl	8003540 <__sinit>
 8003736:	69a3      	ldr	r3, [r4, #24]
 8003738:	60a3      	str	r3, [r4, #8]
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	071b      	lsls	r3, r3, #28
 800373e:	d502      	bpl.n	8003746 <__swbuf_r+0x26>
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <__swbuf_r+0x3a>
 8003746:	0021      	movs	r1, r4
 8003748:	0030      	movs	r0, r6
 800374a:	f000 f82b 	bl	80037a4 <__swsetup_r>
 800374e:	2800      	cmp	r0, #0
 8003750:	d003      	beq.n	800375a <__swbuf_r+0x3a>
 8003752:	2501      	movs	r5, #1
 8003754:	426d      	negs	r5, r5
 8003756:	0028      	movs	r0, r5
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	b2ef      	uxtb	r7, r5
 8003760:	1ac0      	subs	r0, r0, r3
 8003762:	6963      	ldr	r3, [r4, #20]
 8003764:	b2ed      	uxtb	r5, r5
 8003766:	4283      	cmp	r3, r0
 8003768:	dc05      	bgt.n	8003776 <__swbuf_r+0x56>
 800376a:	0021      	movs	r1, r4
 800376c:	0030      	movs	r0, r6
 800376e:	f000 fd45 	bl	80041fc <_fflush_r>
 8003772:	2800      	cmp	r0, #0
 8003774:	d1ed      	bne.n	8003752 <__swbuf_r+0x32>
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	3001      	adds	r0, #1
 800377a:	3b01      	subs	r3, #1
 800377c:	60a3      	str	r3, [r4, #8]
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	6022      	str	r2, [r4, #0]
 8003784:	701f      	strb	r7, [r3, #0]
 8003786:	6963      	ldr	r3, [r4, #20]
 8003788:	4283      	cmp	r3, r0
 800378a:	d004      	beq.n	8003796 <__swbuf_r+0x76>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	07db      	lsls	r3, r3, #31
 8003790:	d5e1      	bpl.n	8003756 <__swbuf_r+0x36>
 8003792:	2d0a      	cmp	r5, #10
 8003794:	d1df      	bne.n	8003756 <__swbuf_r+0x36>
 8003796:	0021      	movs	r1, r4
 8003798:	0030      	movs	r0, r6
 800379a:	f000 fd2f 	bl	80041fc <_fflush_r>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d0d9      	beq.n	8003756 <__swbuf_r+0x36>
 80037a2:	e7d6      	b.n	8003752 <__swbuf_r+0x32>

080037a4 <__swsetup_r>:
 80037a4:	4b2d      	ldr	r3, [pc, #180]	@ (800385c <__swsetup_r+0xb8>)
 80037a6:	b570      	push	{r4, r5, r6, lr}
 80037a8:	0005      	movs	r5, r0
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	000c      	movs	r4, r1
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d004      	beq.n	80037bc <__swsetup_r+0x18>
 80037b2:	6a03      	ldr	r3, [r0, #32]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <__swsetup_r+0x18>
 80037b8:	f7ff fec2 	bl	8003540 <__sinit>
 80037bc:	220c      	movs	r2, #12
 80037be:	5ea3      	ldrsh	r3, [r4, r2]
 80037c0:	071a      	lsls	r2, r3, #28
 80037c2:	d423      	bmi.n	800380c <__swsetup_r+0x68>
 80037c4:	06da      	lsls	r2, r3, #27
 80037c6:	d407      	bmi.n	80037d8 <__swsetup_r+0x34>
 80037c8:	2209      	movs	r2, #9
 80037ca:	602a      	str	r2, [r5, #0]
 80037cc:	2240      	movs	r2, #64	@ 0x40
 80037ce:	2001      	movs	r0, #1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	4240      	negs	r0, r0
 80037d6:	e03a      	b.n	800384e <__swsetup_r+0xaa>
 80037d8:	075b      	lsls	r3, r3, #29
 80037da:	d513      	bpl.n	8003804 <__swsetup_r+0x60>
 80037dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037de:	2900      	cmp	r1, #0
 80037e0:	d008      	beq.n	80037f4 <__swsetup_r+0x50>
 80037e2:	0023      	movs	r3, r4
 80037e4:	3344      	adds	r3, #68	@ 0x44
 80037e6:	4299      	cmp	r1, r3
 80037e8:	d002      	beq.n	80037f0 <__swsetup_r+0x4c>
 80037ea:	0028      	movs	r0, r5
 80037ec:	f000 f8c4 	bl	8003978 <_free_r>
 80037f0:	2300      	movs	r3, #0
 80037f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80037f4:	2224      	movs	r2, #36	@ 0x24
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	4393      	bics	r3, r2
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	2300      	movs	r3, #0
 80037fe:	6063      	str	r3, [r4, #4]
 8003800:	6923      	ldr	r3, [r4, #16]
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	2308      	movs	r3, #8
 8003806:	89a2      	ldrh	r2, [r4, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	6923      	ldr	r3, [r4, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <__swsetup_r+0x86>
 8003812:	21a0      	movs	r1, #160	@ 0xa0
 8003814:	2280      	movs	r2, #128	@ 0x80
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	0089      	lsls	r1, r1, #2
 800381a:	0092      	lsls	r2, r2, #2
 800381c:	400b      	ands	r3, r1
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <__swsetup_r+0x86>
 8003822:	0021      	movs	r1, r4
 8003824:	0028      	movs	r0, r5
 8003826:	f000 fd3f 	bl	80042a8 <__smakebuf_r>
 800382a:	220c      	movs	r2, #12
 800382c:	5ea3      	ldrsh	r3, [r4, r2]
 800382e:	2101      	movs	r1, #1
 8003830:	001a      	movs	r2, r3
 8003832:	400a      	ands	r2, r1
 8003834:	420b      	tst	r3, r1
 8003836:	d00b      	beq.n	8003850 <__swsetup_r+0xac>
 8003838:	2200      	movs	r2, #0
 800383a:	60a2      	str	r2, [r4, #8]
 800383c:	6962      	ldr	r2, [r4, #20]
 800383e:	4252      	negs	r2, r2
 8003840:	61a2      	str	r2, [r4, #24]
 8003842:	2000      	movs	r0, #0
 8003844:	6922      	ldr	r2, [r4, #16]
 8003846:	4282      	cmp	r2, r0
 8003848:	d101      	bne.n	800384e <__swsetup_r+0xaa>
 800384a:	061a      	lsls	r2, r3, #24
 800384c:	d4be      	bmi.n	80037cc <__swsetup_r+0x28>
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	0799      	lsls	r1, r3, #30
 8003852:	d400      	bmi.n	8003856 <__swsetup_r+0xb2>
 8003854:	6962      	ldr	r2, [r4, #20]
 8003856:	60a2      	str	r2, [r4, #8]
 8003858:	e7f3      	b.n	8003842 <__swsetup_r+0x9e>
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	20000024 	.word	0x20000024

08003860 <memset>:
 8003860:	0003      	movs	r3, r0
 8003862:	1882      	adds	r2, r0, r2
 8003864:	4293      	cmp	r3, r2
 8003866:	d100      	bne.n	800386a <memset+0xa>
 8003868:	4770      	bx	lr
 800386a:	7019      	strb	r1, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	e7f9      	b.n	8003864 <memset+0x4>

08003870 <_close_r>:
 8003870:	2300      	movs	r3, #0
 8003872:	b570      	push	{r4, r5, r6, lr}
 8003874:	4d06      	ldr	r5, [pc, #24]	@ (8003890 <_close_r+0x20>)
 8003876:	0004      	movs	r4, r0
 8003878:	0008      	movs	r0, r1
 800387a:	602b      	str	r3, [r5, #0]
 800387c:	f7fd fe60 	bl	8001540 <_close>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d103      	bne.n	800388c <_close_r+0x1c>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d000      	beq.n	800388c <_close_r+0x1c>
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	bd70      	pop	{r4, r5, r6, pc}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	200002ec 	.word	0x200002ec

08003894 <_lseek_r>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0004      	movs	r4, r0
 8003898:	0008      	movs	r0, r1
 800389a:	0011      	movs	r1, r2
 800389c:	001a      	movs	r2, r3
 800389e:	2300      	movs	r3, #0
 80038a0:	4d05      	ldr	r5, [pc, #20]	@ (80038b8 <_lseek_r+0x24>)
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	f7fd fe6d 	bl	8001582 <_lseek>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d103      	bne.n	80038b4 <_lseek_r+0x20>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d000      	beq.n	80038b4 <_lseek_r+0x20>
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	bd70      	pop	{r4, r5, r6, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	200002ec 	.word	0x200002ec

080038bc <_read_r>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	0004      	movs	r4, r0
 80038c0:	0008      	movs	r0, r1
 80038c2:	0011      	movs	r1, r2
 80038c4:	001a      	movs	r2, r3
 80038c6:	2300      	movs	r3, #0
 80038c8:	4d05      	ldr	r5, [pc, #20]	@ (80038e0 <_read_r+0x24>)
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fd fdff 	bl	80014ce <_read>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d103      	bne.n	80038dc <_read_r+0x20>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d000      	beq.n	80038dc <_read_r+0x20>
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	200002ec 	.word	0x200002ec

080038e4 <_write_r>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	0004      	movs	r4, r0
 80038e8:	0008      	movs	r0, r1
 80038ea:	0011      	movs	r1, r2
 80038ec:	001a      	movs	r2, r3
 80038ee:	2300      	movs	r3, #0
 80038f0:	4d05      	ldr	r5, [pc, #20]	@ (8003908 <_write_r+0x24>)
 80038f2:	602b      	str	r3, [r5, #0]
 80038f4:	f7fd fe08 	bl	8001508 <_write>
 80038f8:	1c43      	adds	r3, r0, #1
 80038fa:	d103      	bne.n	8003904 <_write_r+0x20>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d000      	beq.n	8003904 <_write_r+0x20>
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	200002ec 	.word	0x200002ec

0800390c <__errno>:
 800390c:	4b01      	ldr	r3, [pc, #4]	@ (8003914 <__errno+0x8>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4770      	bx	lr
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000024 	.word	0x20000024

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	2600      	movs	r6, #0
 800391c:	4c0c      	ldr	r4, [pc, #48]	@ (8003950 <__libc_init_array+0x38>)
 800391e:	4d0d      	ldr	r5, [pc, #52]	@ (8003954 <__libc_init_array+0x3c>)
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	2600      	movs	r6, #0
 800392a:	f000 fd41 	bl	80043b0 <_init>
 800392e:	4c0a      	ldr	r4, [pc, #40]	@ (8003958 <__libc_init_array+0x40>)
 8003930:	4d0a      	ldr	r5, [pc, #40]	@ (800395c <__libc_init_array+0x44>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	00b3      	lsls	r3, r6, #2
 800393e:	58eb      	ldr	r3, [r5, r3]
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	00b3      	lsls	r3, r6, #2
 8003948:	58eb      	ldr	r3, [r5, r3]
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	08004678 	.word	0x08004678
 8003954:	08004678 	.word	0x08004678
 8003958:	0800467c 	.word	0x0800467c
 800395c:	08004678 	.word	0x08004678

08003960 <__retarget_lock_init_recursive>:
 8003960:	4770      	bx	lr

08003962 <__retarget_lock_acquire_recursive>:
 8003962:	4770      	bx	lr

08003964 <__retarget_lock_release_recursive>:
 8003964:	4770      	bx	lr

08003966 <memcpy>:
 8003966:	2300      	movs	r3, #0
 8003968:	b510      	push	{r4, lr}
 800396a:	429a      	cmp	r2, r3
 800396c:	d100      	bne.n	8003970 <memcpy+0xa>
 800396e:	bd10      	pop	{r4, pc}
 8003970:	5ccc      	ldrb	r4, [r1, r3]
 8003972:	54c4      	strb	r4, [r0, r3]
 8003974:	3301      	adds	r3, #1
 8003976:	e7f8      	b.n	800396a <memcpy+0x4>

08003978 <_free_r>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	0005      	movs	r5, r0
 800397c:	1e0c      	subs	r4, r1, #0
 800397e:	d010      	beq.n	80039a2 <_free_r+0x2a>
 8003980:	3c04      	subs	r4, #4
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	da00      	bge.n	800398a <_free_r+0x12>
 8003988:	18e4      	adds	r4, r4, r3
 800398a:	0028      	movs	r0, r5
 800398c:	f000 f8e0 	bl	8003b50 <__malloc_lock>
 8003990:	4a1d      	ldr	r2, [pc, #116]	@ (8003a08 <_free_r+0x90>)
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <_free_r+0x2c>
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	6014      	str	r4, [r2, #0]
 800399c:	0028      	movs	r0, r5
 800399e:	f000 f8df 	bl	8003b60 <__malloc_unlock>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	42a3      	cmp	r3, r4
 80039a6:	d908      	bls.n	80039ba <_free_r+0x42>
 80039a8:	6820      	ldr	r0, [r4, #0]
 80039aa:	1821      	adds	r1, r4, r0
 80039ac:	428b      	cmp	r3, r1
 80039ae:	d1f3      	bne.n	8003998 <_free_r+0x20>
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	1809      	adds	r1, r1, r0
 80039b6:	6021      	str	r1, [r4, #0]
 80039b8:	e7ee      	b.n	8003998 <_free_r+0x20>
 80039ba:	001a      	movs	r2, r3
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <_free_r+0x4e>
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	d9f9      	bls.n	80039ba <_free_r+0x42>
 80039c6:	6811      	ldr	r1, [r2, #0]
 80039c8:	1850      	adds	r0, r2, r1
 80039ca:	42a0      	cmp	r0, r4
 80039cc:	d10b      	bne.n	80039e6 <_free_r+0x6e>
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	1809      	adds	r1, r1, r0
 80039d2:	1850      	adds	r0, r2, r1
 80039d4:	6011      	str	r1, [r2, #0]
 80039d6:	4283      	cmp	r3, r0
 80039d8:	d1e0      	bne.n	800399c <_free_r+0x24>
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	1841      	adds	r1, r0, r1
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	6053      	str	r3, [r2, #4]
 80039e4:	e7da      	b.n	800399c <_free_r+0x24>
 80039e6:	42a0      	cmp	r0, r4
 80039e8:	d902      	bls.n	80039f0 <_free_r+0x78>
 80039ea:	230c      	movs	r3, #12
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	e7d5      	b.n	800399c <_free_r+0x24>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	1821      	adds	r1, r4, r0
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d103      	bne.n	8003a00 <_free_r+0x88>
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	1809      	adds	r1, r1, r0
 80039fe:	6021      	str	r1, [r4, #0]
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	6054      	str	r4, [r2, #4]
 8003a04:	e7ca      	b.n	800399c <_free_r+0x24>
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	200002f8 	.word	0x200002f8

08003a0c <sbrk_aligned>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8003a4c <sbrk_aligned+0x40>)
 8003a10:	000d      	movs	r5, r1
 8003a12:	6831      	ldr	r1, [r6, #0]
 8003a14:	0004      	movs	r4, r0
 8003a16:	2900      	cmp	r1, #0
 8003a18:	d102      	bne.n	8003a20 <sbrk_aligned+0x14>
 8003a1a:	f000 fcab 	bl	8004374 <_sbrk_r>
 8003a1e:	6030      	str	r0, [r6, #0]
 8003a20:	0029      	movs	r1, r5
 8003a22:	0020      	movs	r0, r4
 8003a24:	f000 fca6 	bl	8004374 <_sbrk_r>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d103      	bne.n	8003a34 <sbrk_aligned+0x28>
 8003a2c:	2501      	movs	r5, #1
 8003a2e:	426d      	negs	r5, r5
 8003a30:	0028      	movs	r0, r5
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	2303      	movs	r3, #3
 8003a36:	1cc5      	adds	r5, r0, #3
 8003a38:	439d      	bics	r5, r3
 8003a3a:	42a8      	cmp	r0, r5
 8003a3c:	d0f8      	beq.n	8003a30 <sbrk_aligned+0x24>
 8003a3e:	1a29      	subs	r1, r5, r0
 8003a40:	0020      	movs	r0, r4
 8003a42:	f000 fc97 	bl	8004374 <_sbrk_r>
 8003a46:	3001      	adds	r0, #1
 8003a48:	d1f2      	bne.n	8003a30 <sbrk_aligned+0x24>
 8003a4a:	e7ef      	b.n	8003a2c <sbrk_aligned+0x20>
 8003a4c:	200002f4 	.word	0x200002f4

08003a50 <_malloc_r>:
 8003a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a52:	2203      	movs	r2, #3
 8003a54:	1ccb      	adds	r3, r1, #3
 8003a56:	4393      	bics	r3, r2
 8003a58:	3308      	adds	r3, #8
 8003a5a:	0005      	movs	r5, r0
 8003a5c:	001f      	movs	r7, r3
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d234      	bcs.n	8003acc <_malloc_r+0x7c>
 8003a62:	270c      	movs	r7, #12
 8003a64:	42b9      	cmp	r1, r7
 8003a66:	d833      	bhi.n	8003ad0 <_malloc_r+0x80>
 8003a68:	0028      	movs	r0, r5
 8003a6a:	f000 f871 	bl	8003b50 <__malloc_lock>
 8003a6e:	4e37      	ldr	r6, [pc, #220]	@ (8003b4c <_malloc_r+0xfc>)
 8003a70:	6833      	ldr	r3, [r6, #0]
 8003a72:	001c      	movs	r4, r3
 8003a74:	2c00      	cmp	r4, #0
 8003a76:	d12f      	bne.n	8003ad8 <_malloc_r+0x88>
 8003a78:	0039      	movs	r1, r7
 8003a7a:	0028      	movs	r0, r5
 8003a7c:	f7ff ffc6 	bl	8003a0c <sbrk_aligned>
 8003a80:	0004      	movs	r4, r0
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	d15f      	bne.n	8003b46 <_malloc_r+0xf6>
 8003a86:	6834      	ldr	r4, [r6, #0]
 8003a88:	9400      	str	r4, [sp, #0]
 8003a8a:	9b00      	ldr	r3, [sp, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d14a      	bne.n	8003b26 <_malloc_r+0xd6>
 8003a90:	2c00      	cmp	r4, #0
 8003a92:	d052      	beq.n	8003b3a <_malloc_r+0xea>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	0028      	movs	r0, r5
 8003a98:	18e3      	adds	r3, r4, r3
 8003a9a:	9900      	ldr	r1, [sp, #0]
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	f000 fc69 	bl	8004374 <_sbrk_r>
 8003aa2:	9b01      	ldr	r3, [sp, #4]
 8003aa4:	4283      	cmp	r3, r0
 8003aa6:	d148      	bne.n	8003b3a <_malloc_r+0xea>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	0028      	movs	r0, r5
 8003aac:	1aff      	subs	r7, r7, r3
 8003aae:	0039      	movs	r1, r7
 8003ab0:	f7ff ffac 	bl	8003a0c <sbrk_aligned>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d040      	beq.n	8003b3a <_malloc_r+0xea>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	6833      	ldr	r3, [r6, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d133      	bne.n	8003b2e <_malloc_r+0xde>
 8003ac6:	9b00      	ldr	r3, [sp, #0]
 8003ac8:	6033      	str	r3, [r6, #0]
 8003aca:	e019      	b.n	8003b00 <_malloc_r+0xb0>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dac9      	bge.n	8003a64 <_malloc_r+0x14>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ad8:	6821      	ldr	r1, [r4, #0]
 8003ada:	1bc9      	subs	r1, r1, r7
 8003adc:	d420      	bmi.n	8003b20 <_malloc_r+0xd0>
 8003ade:	290b      	cmp	r1, #11
 8003ae0:	d90a      	bls.n	8003af8 <_malloc_r+0xa8>
 8003ae2:	19e2      	adds	r2, r4, r7
 8003ae4:	6027      	str	r7, [r4, #0]
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	d104      	bne.n	8003af4 <_malloc_r+0xa4>
 8003aea:	6032      	str	r2, [r6, #0]
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	6011      	str	r1, [r2, #0]
 8003af0:	6053      	str	r3, [r2, #4]
 8003af2:	e005      	b.n	8003b00 <_malloc_r+0xb0>
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	e7f9      	b.n	8003aec <_malloc_r+0x9c>
 8003af8:	6862      	ldr	r2, [r4, #4]
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	d10e      	bne.n	8003b1c <_malloc_r+0xcc>
 8003afe:	6032      	str	r2, [r6, #0]
 8003b00:	0028      	movs	r0, r5
 8003b02:	f000 f82d 	bl	8003b60 <__malloc_unlock>
 8003b06:	0020      	movs	r0, r4
 8003b08:	2207      	movs	r2, #7
 8003b0a:	300b      	adds	r0, #11
 8003b0c:	1d23      	adds	r3, r4, #4
 8003b0e:	4390      	bics	r0, r2
 8003b10:	1ac2      	subs	r2, r0, r3
 8003b12:	4298      	cmp	r0, r3
 8003b14:	d0df      	beq.n	8003ad6 <_malloc_r+0x86>
 8003b16:	1a1b      	subs	r3, r3, r0
 8003b18:	50a3      	str	r3, [r4, r2]
 8003b1a:	e7dc      	b.n	8003ad6 <_malloc_r+0x86>
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	e7ef      	b.n	8003b00 <_malloc_r+0xb0>
 8003b20:	0023      	movs	r3, r4
 8003b22:	6864      	ldr	r4, [r4, #4]
 8003b24:	e7a6      	b.n	8003a74 <_malloc_r+0x24>
 8003b26:	9c00      	ldr	r4, [sp, #0]
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	e7ad      	b.n	8003a8a <_malloc_r+0x3a>
 8003b2e:	001a      	movs	r2, r3
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	42a3      	cmp	r3, r4
 8003b34:	d1fb      	bne.n	8003b2e <_malloc_r+0xde>
 8003b36:	2300      	movs	r3, #0
 8003b38:	e7da      	b.n	8003af0 <_malloc_r+0xa0>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	602b      	str	r3, [r5, #0]
 8003b40:	f000 f80e 	bl	8003b60 <__malloc_unlock>
 8003b44:	e7c6      	b.n	8003ad4 <_malloc_r+0x84>
 8003b46:	6007      	str	r7, [r0, #0]
 8003b48:	e7da      	b.n	8003b00 <_malloc_r+0xb0>
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	200002f8 	.word	0x200002f8

08003b50 <__malloc_lock>:
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <__malloc_lock+0xc>)
 8003b54:	f7ff ff05 	bl	8003962 <__retarget_lock_acquire_recursive>
 8003b58:	bd10      	pop	{r4, pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	200002f0 	.word	0x200002f0

08003b60 <__malloc_unlock>:
 8003b60:	b510      	push	{r4, lr}
 8003b62:	4802      	ldr	r0, [pc, #8]	@ (8003b6c <__malloc_unlock+0xc>)
 8003b64:	f7ff fefe 	bl	8003964 <__retarget_lock_release_recursive>
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	200002f0 	.word	0x200002f0

08003b70 <__sfputc_r>:
 8003b70:	6893      	ldr	r3, [r2, #8]
 8003b72:	b510      	push	{r4, lr}
 8003b74:	3b01      	subs	r3, #1
 8003b76:	6093      	str	r3, [r2, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da04      	bge.n	8003b86 <__sfputc_r+0x16>
 8003b7c:	6994      	ldr	r4, [r2, #24]
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	db07      	blt.n	8003b92 <__sfputc_r+0x22>
 8003b82:	290a      	cmp	r1, #10
 8003b84:	d005      	beq.n	8003b92 <__sfputc_r+0x22>
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	1c58      	adds	r0, r3, #1
 8003b8a:	6010      	str	r0, [r2, #0]
 8003b8c:	7019      	strb	r1, [r3, #0]
 8003b8e:	0008      	movs	r0, r1
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	f7ff fdc5 	bl	8003720 <__swbuf_r>
 8003b96:	0001      	movs	r1, r0
 8003b98:	e7f9      	b.n	8003b8e <__sfputc_r+0x1e>

08003b9a <__sfputs_r>:
 8003b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9c:	0006      	movs	r6, r0
 8003b9e:	000f      	movs	r7, r1
 8003ba0:	0014      	movs	r4, r2
 8003ba2:	18d5      	adds	r5, r2, r3
 8003ba4:	42ac      	cmp	r4, r5
 8003ba6:	d101      	bne.n	8003bac <__sfputs_r+0x12>
 8003ba8:	2000      	movs	r0, #0
 8003baa:	e007      	b.n	8003bbc <__sfputs_r+0x22>
 8003bac:	7821      	ldrb	r1, [r4, #0]
 8003bae:	003a      	movs	r2, r7
 8003bb0:	0030      	movs	r0, r6
 8003bb2:	f7ff ffdd 	bl	8003b70 <__sfputc_r>
 8003bb6:	3401      	adds	r4, #1
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d1f3      	bne.n	8003ba4 <__sfputs_r+0xa>
 8003bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bc0 <_vfiprintf_r>:
 8003bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc2:	b0a1      	sub	sp, #132	@ 0x84
 8003bc4:	000f      	movs	r7, r1
 8003bc6:	0015      	movs	r5, r2
 8003bc8:	001e      	movs	r6, r3
 8003bca:	9003      	str	r0, [sp, #12]
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d004      	beq.n	8003bda <_vfiprintf_r+0x1a>
 8003bd0:	6a03      	ldr	r3, [r0, #32]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <_vfiprintf_r+0x1a>
 8003bd6:	f7ff fcb3 	bl	8003540 <__sinit>
 8003bda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bdc:	07db      	lsls	r3, r3, #31
 8003bde:	d405      	bmi.n	8003bec <_vfiprintf_r+0x2c>
 8003be0:	89bb      	ldrh	r3, [r7, #12]
 8003be2:	059b      	lsls	r3, r3, #22
 8003be4:	d402      	bmi.n	8003bec <_vfiprintf_r+0x2c>
 8003be6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003be8:	f7ff febb 	bl	8003962 <__retarget_lock_acquire_recursive>
 8003bec:	89bb      	ldrh	r3, [r7, #12]
 8003bee:	071b      	lsls	r3, r3, #28
 8003bf0:	d502      	bpl.n	8003bf8 <_vfiprintf_r+0x38>
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <_vfiprintf_r+0x60>
 8003bf8:	0039      	movs	r1, r7
 8003bfa:	9803      	ldr	r0, [sp, #12]
 8003bfc:	f7ff fdd2 	bl	80037a4 <__swsetup_r>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d00d      	beq.n	8003c20 <_vfiprintf_r+0x60>
 8003c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c06:	07db      	lsls	r3, r3, #31
 8003c08:	d503      	bpl.n	8003c12 <_vfiprintf_r+0x52>
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	4240      	negs	r0, r0
 8003c0e:	b021      	add	sp, #132	@ 0x84
 8003c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c12:	89bb      	ldrh	r3, [r7, #12]
 8003c14:	059b      	lsls	r3, r3, #22
 8003c16:	d4f8      	bmi.n	8003c0a <_vfiprintf_r+0x4a>
 8003c18:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003c1a:	f7ff fea3 	bl	8003964 <__retarget_lock_release_recursive>
 8003c1e:	e7f4      	b.n	8003c0a <_vfiprintf_r+0x4a>
 8003c20:	2300      	movs	r3, #0
 8003c22:	ac08      	add	r4, sp, #32
 8003c24:	6163      	str	r3, [r4, #20]
 8003c26:	3320      	adds	r3, #32
 8003c28:	7663      	strb	r3, [r4, #25]
 8003c2a:	3310      	adds	r3, #16
 8003c2c:	76a3      	strb	r3, [r4, #26]
 8003c2e:	9607      	str	r6, [sp, #28]
 8003c30:	002e      	movs	r6, r5
 8003c32:	7833      	ldrb	r3, [r6, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <_vfiprintf_r+0x7c>
 8003c38:	2b25      	cmp	r3, #37	@ 0x25
 8003c3a:	d148      	bne.n	8003cce <_vfiprintf_r+0x10e>
 8003c3c:	1b73      	subs	r3, r6, r5
 8003c3e:	9305      	str	r3, [sp, #20]
 8003c40:	42ae      	cmp	r6, r5
 8003c42:	d00b      	beq.n	8003c5c <_vfiprintf_r+0x9c>
 8003c44:	002a      	movs	r2, r5
 8003c46:	0039      	movs	r1, r7
 8003c48:	9803      	ldr	r0, [sp, #12]
 8003c4a:	f7ff ffa6 	bl	8003b9a <__sfputs_r>
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d100      	bne.n	8003c54 <_vfiprintf_r+0x94>
 8003c52:	e0ae      	b.n	8003db2 <_vfiprintf_r+0x1f2>
 8003c54:	6963      	ldr	r3, [r4, #20]
 8003c56:	9a05      	ldr	r2, [sp, #20]
 8003c58:	189b      	adds	r3, r3, r2
 8003c5a:	6163      	str	r3, [r4, #20]
 8003c5c:	7833      	ldrb	r3, [r6, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d100      	bne.n	8003c64 <_vfiprintf_r+0xa4>
 8003c62:	e0a6      	b.n	8003db2 <_vfiprintf_r+0x1f2>
 8003c64:	2201      	movs	r2, #1
 8003c66:	2300      	movs	r3, #0
 8003c68:	4252      	negs	r2, r2
 8003c6a:	6062      	str	r2, [r4, #4]
 8003c6c:	a904      	add	r1, sp, #16
 8003c6e:	3254      	adds	r2, #84	@ 0x54
 8003c70:	1852      	adds	r2, r2, r1
 8003c72:	1c75      	adds	r5, r6, #1
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	60e3      	str	r3, [r4, #12]
 8003c78:	60a3      	str	r3, [r4, #8]
 8003c7a:	7013      	strb	r3, [r2, #0]
 8003c7c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003c7e:	4b59      	ldr	r3, [pc, #356]	@ (8003de4 <_vfiprintf_r+0x224>)
 8003c80:	2205      	movs	r2, #5
 8003c82:	0018      	movs	r0, r3
 8003c84:	7829      	ldrb	r1, [r5, #0]
 8003c86:	9305      	str	r3, [sp, #20]
 8003c88:	f000 fb86 	bl	8004398 <memchr>
 8003c8c:	1c6e      	adds	r6, r5, #1
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d11f      	bne.n	8003cd2 <_vfiprintf_r+0x112>
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	06d3      	lsls	r3, r2, #27
 8003c96:	d504      	bpl.n	8003ca2 <_vfiprintf_r+0xe2>
 8003c98:	2353      	movs	r3, #83	@ 0x53
 8003c9a:	a904      	add	r1, sp, #16
 8003c9c:	185b      	adds	r3, r3, r1
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	7019      	strb	r1, [r3, #0]
 8003ca2:	0713      	lsls	r3, r2, #28
 8003ca4:	d504      	bpl.n	8003cb0 <_vfiprintf_r+0xf0>
 8003ca6:	2353      	movs	r3, #83	@ 0x53
 8003ca8:	a904      	add	r1, sp, #16
 8003caa:	185b      	adds	r3, r3, r1
 8003cac:	212b      	movs	r1, #43	@ 0x2b
 8003cae:	7019      	strb	r1, [r3, #0]
 8003cb0:	782b      	ldrb	r3, [r5, #0]
 8003cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cb4:	d016      	beq.n	8003ce4 <_vfiprintf_r+0x124>
 8003cb6:	002e      	movs	r6, r5
 8003cb8:	2100      	movs	r1, #0
 8003cba:	200a      	movs	r0, #10
 8003cbc:	68e3      	ldr	r3, [r4, #12]
 8003cbe:	7832      	ldrb	r2, [r6, #0]
 8003cc0:	1c75      	adds	r5, r6, #1
 8003cc2:	3a30      	subs	r2, #48	@ 0x30
 8003cc4:	2a09      	cmp	r2, #9
 8003cc6:	d950      	bls.n	8003d6a <_vfiprintf_r+0x1aa>
 8003cc8:	2900      	cmp	r1, #0
 8003cca:	d111      	bne.n	8003cf0 <_vfiprintf_r+0x130>
 8003ccc:	e017      	b.n	8003cfe <_vfiprintf_r+0x13e>
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7af      	b.n	8003c32 <_vfiprintf_r+0x72>
 8003cd2:	9b05      	ldr	r3, [sp, #20]
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	1ac0      	subs	r0, r0, r3
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4083      	lsls	r3, r0
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	0035      	movs	r5, r6
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	e7cc      	b.n	8003c7e <_vfiprintf_r+0xbe>
 8003ce4:	9b07      	ldr	r3, [sp, #28]
 8003ce6:	1d19      	adds	r1, r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	9107      	str	r1, [sp, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db01      	blt.n	8003cf4 <_vfiprintf_r+0x134>
 8003cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cf2:	e004      	b.n	8003cfe <_vfiprintf_r+0x13e>
 8003cf4:	425b      	negs	r3, r3
 8003cf6:	60e3      	str	r3, [r4, #12]
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	7833      	ldrb	r3, [r6, #0]
 8003d00:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d02:	d10c      	bne.n	8003d1e <_vfiprintf_r+0x15e>
 8003d04:	7873      	ldrb	r3, [r6, #1]
 8003d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d08:	d134      	bne.n	8003d74 <_vfiprintf_r+0x1b4>
 8003d0a:	9b07      	ldr	r3, [sp, #28]
 8003d0c:	3602      	adds	r6, #2
 8003d0e:	1d1a      	adds	r2, r3, #4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	9207      	str	r2, [sp, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	da01      	bge.n	8003d1c <_vfiprintf_r+0x15c>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	425b      	negs	r3, r3
 8003d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d1e:	4d32      	ldr	r5, [pc, #200]	@ (8003de8 <_vfiprintf_r+0x228>)
 8003d20:	2203      	movs	r2, #3
 8003d22:	0028      	movs	r0, r5
 8003d24:	7831      	ldrb	r1, [r6, #0]
 8003d26:	f000 fb37 	bl	8004398 <memchr>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d006      	beq.n	8003d3c <_vfiprintf_r+0x17c>
 8003d2e:	2340      	movs	r3, #64	@ 0x40
 8003d30:	1b40      	subs	r0, r0, r5
 8003d32:	4083      	lsls	r3, r0
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	3601      	adds	r6, #1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	7831      	ldrb	r1, [r6, #0]
 8003d3e:	2206      	movs	r2, #6
 8003d40:	482a      	ldr	r0, [pc, #168]	@ (8003dec <_vfiprintf_r+0x22c>)
 8003d42:	1c75      	adds	r5, r6, #1
 8003d44:	7621      	strb	r1, [r4, #24]
 8003d46:	f000 fb27 	bl	8004398 <memchr>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d040      	beq.n	8003dd0 <_vfiprintf_r+0x210>
 8003d4e:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <_vfiprintf_r+0x230>)
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d122      	bne.n	8003d9a <_vfiprintf_r+0x1da>
 8003d54:	2207      	movs	r2, #7
 8003d56:	9b07      	ldr	r3, [sp, #28]
 8003d58:	3307      	adds	r3, #7
 8003d5a:	4393      	bics	r3, r2
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	9307      	str	r3, [sp, #28]
 8003d60:	6963      	ldr	r3, [r4, #20]
 8003d62:	9a04      	ldr	r2, [sp, #16]
 8003d64:	189b      	adds	r3, r3, r2
 8003d66:	6163      	str	r3, [r4, #20]
 8003d68:	e762      	b.n	8003c30 <_vfiprintf_r+0x70>
 8003d6a:	4343      	muls	r3, r0
 8003d6c:	002e      	movs	r6, r5
 8003d6e:	2101      	movs	r1, #1
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	e7a4      	b.n	8003cbe <_vfiprintf_r+0xfe>
 8003d74:	2300      	movs	r3, #0
 8003d76:	200a      	movs	r0, #10
 8003d78:	0019      	movs	r1, r3
 8003d7a:	3601      	adds	r6, #1
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	7832      	ldrb	r2, [r6, #0]
 8003d80:	1c75      	adds	r5, r6, #1
 8003d82:	3a30      	subs	r2, #48	@ 0x30
 8003d84:	2a09      	cmp	r2, #9
 8003d86:	d903      	bls.n	8003d90 <_vfiprintf_r+0x1d0>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0c8      	beq.n	8003d1e <_vfiprintf_r+0x15e>
 8003d8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d8e:	e7c6      	b.n	8003d1e <_vfiprintf_r+0x15e>
 8003d90:	4341      	muls	r1, r0
 8003d92:	002e      	movs	r6, r5
 8003d94:	2301      	movs	r3, #1
 8003d96:	1889      	adds	r1, r1, r2
 8003d98:	e7f1      	b.n	8003d7e <_vfiprintf_r+0x1be>
 8003d9a:	aa07      	add	r2, sp, #28
 8003d9c:	9200      	str	r2, [sp, #0]
 8003d9e:	0021      	movs	r1, r4
 8003da0:	003a      	movs	r2, r7
 8003da2:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <_vfiprintf_r+0x234>)
 8003da4:	9803      	ldr	r0, [sp, #12]
 8003da6:	e000      	b.n	8003daa <_vfiprintf_r+0x1ea>
 8003da8:	bf00      	nop
 8003daa:	9004      	str	r0, [sp, #16]
 8003dac:	9b04      	ldr	r3, [sp, #16]
 8003dae:	3301      	adds	r3, #1
 8003db0:	d1d6      	bne.n	8003d60 <_vfiprintf_r+0x1a0>
 8003db2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003db4:	07db      	lsls	r3, r3, #31
 8003db6:	d405      	bmi.n	8003dc4 <_vfiprintf_r+0x204>
 8003db8:	89bb      	ldrh	r3, [r7, #12]
 8003dba:	059b      	lsls	r3, r3, #22
 8003dbc:	d402      	bmi.n	8003dc4 <_vfiprintf_r+0x204>
 8003dbe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003dc0:	f7ff fdd0 	bl	8003964 <__retarget_lock_release_recursive>
 8003dc4:	89bb      	ldrh	r3, [r7, #12]
 8003dc6:	065b      	lsls	r3, r3, #25
 8003dc8:	d500      	bpl.n	8003dcc <_vfiprintf_r+0x20c>
 8003dca:	e71e      	b.n	8003c0a <_vfiprintf_r+0x4a>
 8003dcc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003dce:	e71e      	b.n	8003c0e <_vfiprintf_r+0x4e>
 8003dd0:	aa07      	add	r2, sp, #28
 8003dd2:	9200      	str	r2, [sp, #0]
 8003dd4:	0021      	movs	r1, r4
 8003dd6:	003a      	movs	r2, r7
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <_vfiprintf_r+0x234>)
 8003dda:	9803      	ldr	r0, [sp, #12]
 8003ddc:	f000 f87c 	bl	8003ed8 <_printf_i>
 8003de0:	e7e3      	b.n	8003daa <_vfiprintf_r+0x1ea>
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	08004644 	.word	0x08004644
 8003de8:	0800464a 	.word	0x0800464a
 8003dec:	0800464e 	.word	0x0800464e
 8003df0:	00000000 	.word	0x00000000
 8003df4:	08003b9b 	.word	0x08003b9b

08003df8 <_printf_common>:
 8003df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dfa:	0016      	movs	r6, r2
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	688a      	ldr	r2, [r1, #8]
 8003e00:	690b      	ldr	r3, [r1, #16]
 8003e02:	000c      	movs	r4, r1
 8003e04:	9000      	str	r0, [sp, #0]
 8003e06:	4293      	cmp	r3, r2
 8003e08:	da00      	bge.n	8003e0c <_printf_common+0x14>
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	0022      	movs	r2, r4
 8003e0e:	6033      	str	r3, [r6, #0]
 8003e10:	3243      	adds	r2, #67	@ 0x43
 8003e12:	7812      	ldrb	r2, [r2, #0]
 8003e14:	2a00      	cmp	r2, #0
 8003e16:	d001      	beq.n	8003e1c <_printf_common+0x24>
 8003e18:	3301      	adds	r3, #1
 8003e1a:	6033      	str	r3, [r6, #0]
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	069b      	lsls	r3, r3, #26
 8003e20:	d502      	bpl.n	8003e28 <_printf_common+0x30>
 8003e22:	6833      	ldr	r3, [r6, #0]
 8003e24:	3302      	adds	r3, #2
 8003e26:	6033      	str	r3, [r6, #0]
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	2306      	movs	r3, #6
 8003e2c:	0015      	movs	r5, r2
 8003e2e:	401d      	ands	r5, r3
 8003e30:	421a      	tst	r2, r3
 8003e32:	d027      	beq.n	8003e84 <_printf_common+0x8c>
 8003e34:	0023      	movs	r3, r4
 8003e36:	3343      	adds	r3, #67	@ 0x43
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	1e5a      	subs	r2, r3, #1
 8003e3c:	4193      	sbcs	r3, r2
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	0692      	lsls	r2, r2, #26
 8003e42:	d430      	bmi.n	8003ea6 <_printf_common+0xae>
 8003e44:	0022      	movs	r2, r4
 8003e46:	9901      	ldr	r1, [sp, #4]
 8003e48:	9800      	ldr	r0, [sp, #0]
 8003e4a:	9d08      	ldr	r5, [sp, #32]
 8003e4c:	3243      	adds	r2, #67	@ 0x43
 8003e4e:	47a8      	blx	r5
 8003e50:	3001      	adds	r0, #1
 8003e52:	d025      	beq.n	8003ea0 <_printf_common+0xa8>
 8003e54:	2206      	movs	r2, #6
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	2500      	movs	r5, #0
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d105      	bne.n	8003e6c <_printf_common+0x74>
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	68e5      	ldr	r5, [r4, #12]
 8003e64:	1aed      	subs	r5, r5, r3
 8003e66:	43eb      	mvns	r3, r5
 8003e68:	17db      	asrs	r3, r3, #31
 8003e6a:	401d      	ands	r5, r3
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	6922      	ldr	r2, [r4, #16]
 8003e70:	4293      	cmp	r3, r2
 8003e72:	dd01      	ble.n	8003e78 <_printf_common+0x80>
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	18ed      	adds	r5, r5, r3
 8003e78:	2600      	movs	r6, #0
 8003e7a:	42b5      	cmp	r5, r6
 8003e7c:	d120      	bne.n	8003ec0 <_printf_common+0xc8>
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e010      	b.n	8003ea4 <_printf_common+0xac>
 8003e82:	3501      	adds	r5, #1
 8003e84:	68e3      	ldr	r3, [r4, #12]
 8003e86:	6832      	ldr	r2, [r6, #0]
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	42ab      	cmp	r3, r5
 8003e8c:	ddd2      	ble.n	8003e34 <_printf_common+0x3c>
 8003e8e:	0022      	movs	r2, r4
 8003e90:	2301      	movs	r3, #1
 8003e92:	9901      	ldr	r1, [sp, #4]
 8003e94:	9800      	ldr	r0, [sp, #0]
 8003e96:	9f08      	ldr	r7, [sp, #32]
 8003e98:	3219      	adds	r2, #25
 8003e9a:	47b8      	blx	r7
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d1f0      	bne.n	8003e82 <_printf_common+0x8a>
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	4240      	negs	r0, r0
 8003ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ea6:	2030      	movs	r0, #48	@ 0x30
 8003ea8:	18e1      	adds	r1, r4, r3
 8003eaa:	3143      	adds	r1, #67	@ 0x43
 8003eac:	7008      	strb	r0, [r1, #0]
 8003eae:	0021      	movs	r1, r4
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	3145      	adds	r1, #69	@ 0x45
 8003eb4:	7809      	ldrb	r1, [r1, #0]
 8003eb6:	18a2      	adds	r2, r4, r2
 8003eb8:	3243      	adds	r2, #67	@ 0x43
 8003eba:	3302      	adds	r3, #2
 8003ebc:	7011      	strb	r1, [r2, #0]
 8003ebe:	e7c1      	b.n	8003e44 <_printf_common+0x4c>
 8003ec0:	0022      	movs	r2, r4
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	9901      	ldr	r1, [sp, #4]
 8003ec6:	9800      	ldr	r0, [sp, #0]
 8003ec8:	9f08      	ldr	r7, [sp, #32]
 8003eca:	321a      	adds	r2, #26
 8003ecc:	47b8      	blx	r7
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d0e6      	beq.n	8003ea0 <_printf_common+0xa8>
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7d1      	b.n	8003e7a <_printf_common+0x82>
	...

08003ed8 <_printf_i>:
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	b08b      	sub	sp, #44	@ 0x2c
 8003edc:	9206      	str	r2, [sp, #24]
 8003ede:	000a      	movs	r2, r1
 8003ee0:	3243      	adds	r2, #67	@ 0x43
 8003ee2:	9307      	str	r3, [sp, #28]
 8003ee4:	9005      	str	r0, [sp, #20]
 8003ee6:	9203      	str	r2, [sp, #12]
 8003ee8:	7e0a      	ldrb	r2, [r1, #24]
 8003eea:	000c      	movs	r4, r1
 8003eec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003eee:	2a78      	cmp	r2, #120	@ 0x78
 8003ef0:	d809      	bhi.n	8003f06 <_printf_i+0x2e>
 8003ef2:	2a62      	cmp	r2, #98	@ 0x62
 8003ef4:	d80b      	bhi.n	8003f0e <_printf_i+0x36>
 8003ef6:	2a00      	cmp	r2, #0
 8003ef8:	d100      	bne.n	8003efc <_printf_i+0x24>
 8003efa:	e0ba      	b.n	8004072 <_printf_i+0x19a>
 8003efc:	497a      	ldr	r1, [pc, #488]	@ (80040e8 <_printf_i+0x210>)
 8003efe:	9104      	str	r1, [sp, #16]
 8003f00:	2a58      	cmp	r2, #88	@ 0x58
 8003f02:	d100      	bne.n	8003f06 <_printf_i+0x2e>
 8003f04:	e08e      	b.n	8004024 <_printf_i+0x14c>
 8003f06:	0025      	movs	r5, r4
 8003f08:	3542      	adds	r5, #66	@ 0x42
 8003f0a:	702a      	strb	r2, [r5, #0]
 8003f0c:	e022      	b.n	8003f54 <_printf_i+0x7c>
 8003f0e:	0010      	movs	r0, r2
 8003f10:	3863      	subs	r0, #99	@ 0x63
 8003f12:	2815      	cmp	r0, #21
 8003f14:	d8f7      	bhi.n	8003f06 <_printf_i+0x2e>
 8003f16:	f7fc f8f7 	bl	8000108 <__gnu_thumb1_case_shi>
 8003f1a:	0016      	.short	0x0016
 8003f1c:	fff6001f 	.word	0xfff6001f
 8003f20:	fff6fff6 	.word	0xfff6fff6
 8003f24:	001ffff6 	.word	0x001ffff6
 8003f28:	fff6fff6 	.word	0xfff6fff6
 8003f2c:	fff6fff6 	.word	0xfff6fff6
 8003f30:	0036009f 	.word	0x0036009f
 8003f34:	fff6007e 	.word	0xfff6007e
 8003f38:	00b0fff6 	.word	0x00b0fff6
 8003f3c:	0036fff6 	.word	0x0036fff6
 8003f40:	fff6fff6 	.word	0xfff6fff6
 8003f44:	0082      	.short	0x0082
 8003f46:	0025      	movs	r5, r4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	3542      	adds	r5, #66	@ 0x42
 8003f4c:	1d11      	adds	r1, r2, #4
 8003f4e:	6019      	str	r1, [r3, #0]
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	702b      	strb	r3, [r5, #0]
 8003f54:	2301      	movs	r3, #1
 8003f56:	e09e      	b.n	8004096 <_printf_i+0x1be>
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	6809      	ldr	r1, [r1, #0]
 8003f5c:	1d02      	adds	r2, r0, #4
 8003f5e:	060d      	lsls	r5, r1, #24
 8003f60:	d50b      	bpl.n	8003f7a <_printf_i+0xa2>
 8003f62:	6806      	ldr	r6, [r0, #0]
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	2e00      	cmp	r6, #0
 8003f68:	da03      	bge.n	8003f72 <_printf_i+0x9a>
 8003f6a:	232d      	movs	r3, #45	@ 0x2d
 8003f6c:	9a03      	ldr	r2, [sp, #12]
 8003f6e:	4276      	negs	r6, r6
 8003f70:	7013      	strb	r3, [r2, #0]
 8003f72:	4b5d      	ldr	r3, [pc, #372]	@ (80040e8 <_printf_i+0x210>)
 8003f74:	270a      	movs	r7, #10
 8003f76:	9304      	str	r3, [sp, #16]
 8003f78:	e018      	b.n	8003fac <_printf_i+0xd4>
 8003f7a:	6806      	ldr	r6, [r0, #0]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	0649      	lsls	r1, r1, #25
 8003f80:	d5f1      	bpl.n	8003f66 <_printf_i+0x8e>
 8003f82:	b236      	sxth	r6, r6
 8003f84:	e7ef      	b.n	8003f66 <_printf_i+0x8e>
 8003f86:	6808      	ldr	r0, [r1, #0]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	c940      	ldmia	r1!, {r6}
 8003f8c:	0605      	lsls	r5, r0, #24
 8003f8e:	d402      	bmi.n	8003f96 <_printf_i+0xbe>
 8003f90:	0640      	lsls	r0, r0, #25
 8003f92:	d500      	bpl.n	8003f96 <_printf_i+0xbe>
 8003f94:	b2b6      	uxth	r6, r6
 8003f96:	6019      	str	r1, [r3, #0]
 8003f98:	4b53      	ldr	r3, [pc, #332]	@ (80040e8 <_printf_i+0x210>)
 8003f9a:	270a      	movs	r7, #10
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003fa0:	d100      	bne.n	8003fa4 <_printf_i+0xcc>
 8003fa2:	3f02      	subs	r7, #2
 8003fa4:	0023      	movs	r3, r4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	3343      	adds	r3, #67	@ 0x43
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	60a3      	str	r3, [r4, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	db06      	blt.n	8003fc2 <_printf_i+0xea>
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	6822      	ldr	r2, [r4, #0]
 8003fb8:	9d03      	ldr	r5, [sp, #12]
 8003fba:	438a      	bics	r2, r1
 8003fbc:	6022      	str	r2, [r4, #0]
 8003fbe:	4333      	orrs	r3, r6
 8003fc0:	d00c      	beq.n	8003fdc <_printf_i+0x104>
 8003fc2:	9d03      	ldr	r5, [sp, #12]
 8003fc4:	0030      	movs	r0, r6
 8003fc6:	0039      	movs	r1, r7
 8003fc8:	f7fc f92e 	bl	8000228 <__aeabi_uidivmod>
 8003fcc:	9b04      	ldr	r3, [sp, #16]
 8003fce:	3d01      	subs	r5, #1
 8003fd0:	5c5b      	ldrb	r3, [r3, r1]
 8003fd2:	702b      	strb	r3, [r5, #0]
 8003fd4:	0033      	movs	r3, r6
 8003fd6:	0006      	movs	r6, r0
 8003fd8:	429f      	cmp	r7, r3
 8003fda:	d9f3      	bls.n	8003fc4 <_printf_i+0xec>
 8003fdc:	2f08      	cmp	r7, #8
 8003fde:	d109      	bne.n	8003ff4 <_printf_i+0x11c>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	07db      	lsls	r3, r3, #31
 8003fe4:	d506      	bpl.n	8003ff4 <_printf_i+0x11c>
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	dc02      	bgt.n	8003ff4 <_printf_i+0x11c>
 8003fee:	2330      	movs	r3, #48	@ 0x30
 8003ff0:	3d01      	subs	r5, #1
 8003ff2:	702b      	strb	r3, [r5, #0]
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	1b5b      	subs	r3, r3, r5
 8003ff8:	6123      	str	r3, [r4, #16]
 8003ffa:	9b07      	ldr	r3, [sp, #28]
 8003ffc:	0021      	movs	r1, r4
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	9805      	ldr	r0, [sp, #20]
 8004002:	9b06      	ldr	r3, [sp, #24]
 8004004:	aa09      	add	r2, sp, #36	@ 0x24
 8004006:	f7ff fef7 	bl	8003df8 <_printf_common>
 800400a:	3001      	adds	r0, #1
 800400c:	d148      	bne.n	80040a0 <_printf_i+0x1c8>
 800400e:	2001      	movs	r0, #1
 8004010:	4240      	negs	r0, r0
 8004012:	b00b      	add	sp, #44	@ 0x2c
 8004014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004016:	2220      	movs	r2, #32
 8004018:	6809      	ldr	r1, [r1, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	6022      	str	r2, [r4, #0]
 800401e:	2278      	movs	r2, #120	@ 0x78
 8004020:	4932      	ldr	r1, [pc, #200]	@ (80040ec <_printf_i+0x214>)
 8004022:	9104      	str	r1, [sp, #16]
 8004024:	0021      	movs	r1, r4
 8004026:	3145      	adds	r1, #69	@ 0x45
 8004028:	700a      	strb	r2, [r1, #0]
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	c940      	ldmia	r1!, {r6}
 8004030:	0610      	lsls	r0, r2, #24
 8004032:	d402      	bmi.n	800403a <_printf_i+0x162>
 8004034:	0650      	lsls	r0, r2, #25
 8004036:	d500      	bpl.n	800403a <_printf_i+0x162>
 8004038:	b2b6      	uxth	r6, r6
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	07d3      	lsls	r3, r2, #31
 800403e:	d502      	bpl.n	8004046 <_printf_i+0x16e>
 8004040:	2320      	movs	r3, #32
 8004042:	4313      	orrs	r3, r2
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	2e00      	cmp	r6, #0
 8004048:	d001      	beq.n	800404e <_printf_i+0x176>
 800404a:	2710      	movs	r7, #16
 800404c:	e7aa      	b.n	8003fa4 <_printf_i+0xcc>
 800404e:	2220      	movs	r2, #32
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	4393      	bics	r3, r2
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	e7f8      	b.n	800404a <_printf_i+0x172>
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	680d      	ldr	r5, [r1, #0]
 800405c:	1d10      	adds	r0, r2, #4
 800405e:	6949      	ldr	r1, [r1, #20]
 8004060:	6018      	str	r0, [r3, #0]
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	062e      	lsls	r6, r5, #24
 8004066:	d501      	bpl.n	800406c <_printf_i+0x194>
 8004068:	6019      	str	r1, [r3, #0]
 800406a:	e002      	b.n	8004072 <_printf_i+0x19a>
 800406c:	066d      	lsls	r5, r5, #25
 800406e:	d5fb      	bpl.n	8004068 <_printf_i+0x190>
 8004070:	8019      	strh	r1, [r3, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	9d03      	ldr	r5, [sp, #12]
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	e7bf      	b.n	8003ffa <_printf_i+0x122>
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	1d11      	adds	r1, r2, #4
 800407e:	6019      	str	r1, [r3, #0]
 8004080:	6815      	ldr	r5, [r2, #0]
 8004082:	2100      	movs	r1, #0
 8004084:	0028      	movs	r0, r5
 8004086:	6862      	ldr	r2, [r4, #4]
 8004088:	f000 f986 	bl	8004398 <memchr>
 800408c:	2800      	cmp	r0, #0
 800408e:	d001      	beq.n	8004094 <_printf_i+0x1bc>
 8004090:	1b40      	subs	r0, r0, r5
 8004092:	6060      	str	r0, [r4, #4]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	2300      	movs	r3, #0
 800409a:	9a03      	ldr	r2, [sp, #12]
 800409c:	7013      	strb	r3, [r2, #0]
 800409e:	e7ac      	b.n	8003ffa <_printf_i+0x122>
 80040a0:	002a      	movs	r2, r5
 80040a2:	6923      	ldr	r3, [r4, #16]
 80040a4:	9906      	ldr	r1, [sp, #24]
 80040a6:	9805      	ldr	r0, [sp, #20]
 80040a8:	9d07      	ldr	r5, [sp, #28]
 80040aa:	47a8      	blx	r5
 80040ac:	3001      	adds	r0, #1
 80040ae:	d0ae      	beq.n	800400e <_printf_i+0x136>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	079b      	lsls	r3, r3, #30
 80040b4:	d415      	bmi.n	80040e2 <_printf_i+0x20a>
 80040b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b8:	68e0      	ldr	r0, [r4, #12]
 80040ba:	4298      	cmp	r0, r3
 80040bc:	daa9      	bge.n	8004012 <_printf_i+0x13a>
 80040be:	0018      	movs	r0, r3
 80040c0:	e7a7      	b.n	8004012 <_printf_i+0x13a>
 80040c2:	0022      	movs	r2, r4
 80040c4:	2301      	movs	r3, #1
 80040c6:	9906      	ldr	r1, [sp, #24]
 80040c8:	9805      	ldr	r0, [sp, #20]
 80040ca:	9e07      	ldr	r6, [sp, #28]
 80040cc:	3219      	adds	r2, #25
 80040ce:	47b0      	blx	r6
 80040d0:	3001      	adds	r0, #1
 80040d2:	d09c      	beq.n	800400e <_printf_i+0x136>
 80040d4:	3501      	adds	r5, #1
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	42ab      	cmp	r3, r5
 80040de:	dcf0      	bgt.n	80040c2 <_printf_i+0x1ea>
 80040e0:	e7e9      	b.n	80040b6 <_printf_i+0x1de>
 80040e2:	2500      	movs	r5, #0
 80040e4:	e7f7      	b.n	80040d6 <_printf_i+0x1fe>
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	08004655 	.word	0x08004655
 80040ec:	08004666 	.word	0x08004666

080040f0 <__sflush_r>:
 80040f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040f2:	220c      	movs	r2, #12
 80040f4:	5e8b      	ldrsh	r3, [r1, r2]
 80040f6:	0005      	movs	r5, r0
 80040f8:	000c      	movs	r4, r1
 80040fa:	071a      	lsls	r2, r3, #28
 80040fc:	d456      	bmi.n	80041ac <__sflush_r+0xbc>
 80040fe:	684a      	ldr	r2, [r1, #4]
 8004100:	2a00      	cmp	r2, #0
 8004102:	dc02      	bgt.n	800410a <__sflush_r+0x1a>
 8004104:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004106:	2a00      	cmp	r2, #0
 8004108:	dd4e      	ble.n	80041a8 <__sflush_r+0xb8>
 800410a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800410c:	2f00      	cmp	r7, #0
 800410e:	d04b      	beq.n	80041a8 <__sflush_r+0xb8>
 8004110:	2200      	movs	r2, #0
 8004112:	2080      	movs	r0, #128	@ 0x80
 8004114:	682e      	ldr	r6, [r5, #0]
 8004116:	602a      	str	r2, [r5, #0]
 8004118:	001a      	movs	r2, r3
 800411a:	0140      	lsls	r0, r0, #5
 800411c:	6a21      	ldr	r1, [r4, #32]
 800411e:	4002      	ands	r2, r0
 8004120:	4203      	tst	r3, r0
 8004122:	d033      	beq.n	800418c <__sflush_r+0x9c>
 8004124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	075b      	lsls	r3, r3, #29
 800412a:	d506      	bpl.n	800413a <__sflush_r+0x4a>
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	1ad2      	subs	r2, r2, r3
 8004130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <__sflush_r+0x4a>
 8004136:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	0028      	movs	r0, r5
 800413e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004140:	6a21      	ldr	r1, [r4, #32]
 8004142:	47b8      	blx	r7
 8004144:	89a2      	ldrh	r2, [r4, #12]
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	d106      	bne.n	8004158 <__sflush_r+0x68>
 800414a:	6829      	ldr	r1, [r5, #0]
 800414c:	291d      	cmp	r1, #29
 800414e:	d846      	bhi.n	80041de <__sflush_r+0xee>
 8004150:	4b29      	ldr	r3, [pc, #164]	@ (80041f8 <__sflush_r+0x108>)
 8004152:	40cb      	lsrs	r3, r1
 8004154:	07db      	lsls	r3, r3, #31
 8004156:	d542      	bpl.n	80041de <__sflush_r+0xee>
 8004158:	2300      	movs	r3, #0
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	04d2      	lsls	r2, r2, #19
 8004162:	d505      	bpl.n	8004170 <__sflush_r+0x80>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <__sflush_r+0x7e>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d100      	bne.n	8004170 <__sflush_r+0x80>
 800416e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004172:	602e      	str	r6, [r5, #0]
 8004174:	2900      	cmp	r1, #0
 8004176:	d017      	beq.n	80041a8 <__sflush_r+0xb8>
 8004178:	0023      	movs	r3, r4
 800417a:	3344      	adds	r3, #68	@ 0x44
 800417c:	4299      	cmp	r1, r3
 800417e:	d002      	beq.n	8004186 <__sflush_r+0x96>
 8004180:	0028      	movs	r0, r5
 8004182:	f7ff fbf9 	bl	8003978 <_free_r>
 8004186:	2300      	movs	r3, #0
 8004188:	6363      	str	r3, [r4, #52]	@ 0x34
 800418a:	e00d      	b.n	80041a8 <__sflush_r+0xb8>
 800418c:	2301      	movs	r3, #1
 800418e:	0028      	movs	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	0002      	movs	r2, r0
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d1c6      	bne.n	8004126 <__sflush_r+0x36>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0c3      	beq.n	8004126 <__sflush_r+0x36>
 800419e:	2b1d      	cmp	r3, #29
 80041a0:	d001      	beq.n	80041a6 <__sflush_r+0xb6>
 80041a2:	2b16      	cmp	r3, #22
 80041a4:	d11a      	bne.n	80041dc <__sflush_r+0xec>
 80041a6:	602e      	str	r6, [r5, #0]
 80041a8:	2000      	movs	r0, #0
 80041aa:	e01e      	b.n	80041ea <__sflush_r+0xfa>
 80041ac:	690e      	ldr	r6, [r1, #16]
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	d0fa      	beq.n	80041a8 <__sflush_r+0xb8>
 80041b2:	680f      	ldr	r7, [r1, #0]
 80041b4:	600e      	str	r6, [r1, #0]
 80041b6:	1bba      	subs	r2, r7, r6
 80041b8:	9201      	str	r2, [sp, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d100      	bne.n	80041c2 <__sflush_r+0xd2>
 80041c0:	694a      	ldr	r2, [r1, #20]
 80041c2:	60a2      	str	r2, [r4, #8]
 80041c4:	9b01      	ldr	r3, [sp, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	ddee      	ble.n	80041a8 <__sflush_r+0xb8>
 80041ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80041cc:	0032      	movs	r2, r6
 80041ce:	001f      	movs	r7, r3
 80041d0:	0028      	movs	r0, r5
 80041d2:	9b01      	ldr	r3, [sp, #4]
 80041d4:	6a21      	ldr	r1, [r4, #32]
 80041d6:	47b8      	blx	r7
 80041d8:	2800      	cmp	r0, #0
 80041da:	dc07      	bgt.n	80041ec <__sflush_r+0xfc>
 80041dc:	89a2      	ldrh	r2, [r4, #12]
 80041de:	2340      	movs	r3, #64	@ 0x40
 80041e0:	2001      	movs	r0, #1
 80041e2:	4313      	orrs	r3, r2
 80041e4:	b21b      	sxth	r3, r3
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	4240      	negs	r0, r0
 80041ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041ec:	9b01      	ldr	r3, [sp, #4]
 80041ee:	1836      	adds	r6, r6, r0
 80041f0:	1a1b      	subs	r3, r3, r0
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	e7e6      	b.n	80041c4 <__sflush_r+0xd4>
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	20400001 	.word	0x20400001

080041fc <_fflush_r>:
 80041fc:	690b      	ldr	r3, [r1, #16]
 80041fe:	b570      	push	{r4, r5, r6, lr}
 8004200:	0005      	movs	r5, r0
 8004202:	000c      	movs	r4, r1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <_fflush_r+0x12>
 8004208:	2500      	movs	r5, #0
 800420a:	0028      	movs	r0, r5
 800420c:	bd70      	pop	{r4, r5, r6, pc}
 800420e:	2800      	cmp	r0, #0
 8004210:	d004      	beq.n	800421c <_fflush_r+0x20>
 8004212:	6a03      	ldr	r3, [r0, #32]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <_fflush_r+0x20>
 8004218:	f7ff f992 	bl	8003540 <__sinit>
 800421c:	220c      	movs	r2, #12
 800421e:	5ea3      	ldrsh	r3, [r4, r2]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f1      	beq.n	8004208 <_fflush_r+0xc>
 8004224:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004226:	07d2      	lsls	r2, r2, #31
 8004228:	d404      	bmi.n	8004234 <_fflush_r+0x38>
 800422a:	059b      	lsls	r3, r3, #22
 800422c:	d402      	bmi.n	8004234 <_fflush_r+0x38>
 800422e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004230:	f7ff fb97 	bl	8003962 <__retarget_lock_acquire_recursive>
 8004234:	0028      	movs	r0, r5
 8004236:	0021      	movs	r1, r4
 8004238:	f7ff ff5a 	bl	80040f0 <__sflush_r>
 800423c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800423e:	0005      	movs	r5, r0
 8004240:	07db      	lsls	r3, r3, #31
 8004242:	d4e2      	bmi.n	800420a <_fflush_r+0xe>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	059b      	lsls	r3, r3, #22
 8004248:	d4df      	bmi.n	800420a <_fflush_r+0xe>
 800424a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800424c:	f7ff fb8a 	bl	8003964 <__retarget_lock_release_recursive>
 8004250:	e7db      	b.n	800420a <_fflush_r+0xe>
	...

08004254 <__swhatbuf_r>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	000e      	movs	r6, r1
 8004258:	001d      	movs	r5, r3
 800425a:	230e      	movs	r3, #14
 800425c:	5ec9      	ldrsh	r1, [r1, r3]
 800425e:	0014      	movs	r4, r2
 8004260:	b096      	sub	sp, #88	@ 0x58
 8004262:	2900      	cmp	r1, #0
 8004264:	da0c      	bge.n	8004280 <__swhatbuf_r+0x2c>
 8004266:	89b2      	ldrh	r2, [r6, #12]
 8004268:	2380      	movs	r3, #128	@ 0x80
 800426a:	0011      	movs	r1, r2
 800426c:	4019      	ands	r1, r3
 800426e:	421a      	tst	r2, r3
 8004270:	d114      	bne.n	800429c <__swhatbuf_r+0x48>
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	2000      	movs	r0, #0
 8004278:	6029      	str	r1, [r5, #0]
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	b016      	add	sp, #88	@ 0x58
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	466a      	mov	r2, sp
 8004282:	f000 f853 	bl	800432c <_fstat_r>
 8004286:	2800      	cmp	r0, #0
 8004288:	dbed      	blt.n	8004266 <__swhatbuf_r+0x12>
 800428a:	23f0      	movs	r3, #240	@ 0xf0
 800428c:	9901      	ldr	r1, [sp, #4]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	4019      	ands	r1, r3
 8004292:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <__swhatbuf_r+0x50>)
 8004294:	18c9      	adds	r1, r1, r3
 8004296:	424b      	negs	r3, r1
 8004298:	4159      	adcs	r1, r3
 800429a:	e7ea      	b.n	8004272 <__swhatbuf_r+0x1e>
 800429c:	2100      	movs	r1, #0
 800429e:	2340      	movs	r3, #64	@ 0x40
 80042a0:	e7e9      	b.n	8004276 <__swhatbuf_r+0x22>
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	ffffe000 	.word	0xffffe000

080042a8 <__smakebuf_r>:
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042aa:	2602      	movs	r6, #2
 80042ac:	898b      	ldrh	r3, [r1, #12]
 80042ae:	0005      	movs	r5, r0
 80042b0:	000c      	movs	r4, r1
 80042b2:	b085      	sub	sp, #20
 80042b4:	4233      	tst	r3, r6
 80042b6:	d007      	beq.n	80042c8 <__smakebuf_r+0x20>
 80042b8:	0023      	movs	r3, r4
 80042ba:	3347      	adds	r3, #71	@ 0x47
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	2301      	movs	r3, #1
 80042c2:	6163      	str	r3, [r4, #20]
 80042c4:	b005      	add	sp, #20
 80042c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c8:	ab03      	add	r3, sp, #12
 80042ca:	aa02      	add	r2, sp, #8
 80042cc:	f7ff ffc2 	bl	8004254 <__swhatbuf_r>
 80042d0:	9f02      	ldr	r7, [sp, #8]
 80042d2:	9001      	str	r0, [sp, #4]
 80042d4:	0039      	movs	r1, r7
 80042d6:	0028      	movs	r0, r5
 80042d8:	f7ff fbba 	bl	8003a50 <_malloc_r>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d108      	bne.n	80042f2 <__smakebuf_r+0x4a>
 80042e0:	220c      	movs	r2, #12
 80042e2:	5ea3      	ldrsh	r3, [r4, r2]
 80042e4:	059a      	lsls	r2, r3, #22
 80042e6:	d4ed      	bmi.n	80042c4 <__smakebuf_r+0x1c>
 80042e8:	2203      	movs	r2, #3
 80042ea:	4393      	bics	r3, r2
 80042ec:	431e      	orrs	r6, r3
 80042ee:	81a6      	strh	r6, [r4, #12]
 80042f0:	e7e2      	b.n	80042b8 <__smakebuf_r+0x10>
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	89a2      	ldrh	r2, [r4, #12]
 80042f6:	6020      	str	r0, [r4, #0]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	9b03      	ldr	r3, [sp, #12]
 80042fe:	6120      	str	r0, [r4, #16]
 8004300:	6167      	str	r7, [r4, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <__smakebuf_r+0x78>
 8004306:	0028      	movs	r0, r5
 8004308:	230e      	movs	r3, #14
 800430a:	5ee1      	ldrsh	r1, [r4, r3]
 800430c:	f000 f820 	bl	8004350 <_isatty_r>
 8004310:	2800      	cmp	r0, #0
 8004312:	d005      	beq.n	8004320 <__smakebuf_r+0x78>
 8004314:	2303      	movs	r3, #3
 8004316:	89a2      	ldrh	r2, [r4, #12]
 8004318:	439a      	bics	r2, r3
 800431a:	3b02      	subs	r3, #2
 800431c:	4313      	orrs	r3, r2
 800431e:	81a3      	strh	r3, [r4, #12]
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	9a01      	ldr	r2, [sp, #4]
 8004324:	4313      	orrs	r3, r2
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	e7cc      	b.n	80042c4 <__smakebuf_r+0x1c>
	...

0800432c <_fstat_r>:
 800432c:	2300      	movs	r3, #0
 800432e:	b570      	push	{r4, r5, r6, lr}
 8004330:	4d06      	ldr	r5, [pc, #24]	@ (800434c <_fstat_r+0x20>)
 8004332:	0004      	movs	r4, r0
 8004334:	0008      	movs	r0, r1
 8004336:	0011      	movs	r1, r2
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	f7fd f90b 	bl	8001554 <_fstat>
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d103      	bne.n	800434a <_fstat_r+0x1e>
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d000      	beq.n	800434a <_fstat_r+0x1e>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	200002ec 	.word	0x200002ec

08004350 <_isatty_r>:
 8004350:	2300      	movs	r3, #0
 8004352:	b570      	push	{r4, r5, r6, lr}
 8004354:	4d06      	ldr	r5, [pc, #24]	@ (8004370 <_isatty_r+0x20>)
 8004356:	0004      	movs	r4, r0
 8004358:	0008      	movs	r0, r1
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	f7fd f908 	bl	8001570 <_isatty>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d103      	bne.n	800436c <_isatty_r+0x1c>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d000      	beq.n	800436c <_isatty_r+0x1c>
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	200002ec 	.word	0x200002ec

08004374 <_sbrk_r>:
 8004374:	2300      	movs	r3, #0
 8004376:	b570      	push	{r4, r5, r6, lr}
 8004378:	4d06      	ldr	r5, [pc, #24]	@ (8004394 <_sbrk_r+0x20>)
 800437a:	0004      	movs	r4, r0
 800437c:	0008      	movs	r0, r1
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	f7fd f90a 	bl	8001598 <_sbrk>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d103      	bne.n	8004390 <_sbrk_r+0x1c>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d000      	beq.n	8004390 <_sbrk_r+0x1c>
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	bd70      	pop	{r4, r5, r6, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	200002ec 	.word	0x200002ec

08004398 <memchr>:
 8004398:	b2c9      	uxtb	r1, r1
 800439a:	1882      	adds	r2, r0, r2
 800439c:	4290      	cmp	r0, r2
 800439e:	d101      	bne.n	80043a4 <memchr+0xc>
 80043a0:	2000      	movs	r0, #0
 80043a2:	4770      	bx	lr
 80043a4:	7803      	ldrb	r3, [r0, #0]
 80043a6:	428b      	cmp	r3, r1
 80043a8:	d0fb      	beq.n	80043a2 <memchr+0xa>
 80043aa:	3001      	adds	r0, #1
 80043ac:	e7f6      	b.n	800439c <memchr+0x4>
	...

080043b0 <_init>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr

080043bc <_fini>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr
