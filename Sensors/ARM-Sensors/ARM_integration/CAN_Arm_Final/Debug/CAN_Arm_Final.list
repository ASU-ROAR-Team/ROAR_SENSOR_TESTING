
CAN_Arm_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080065e0  080065e0  000075e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d8  080066d8  0000808c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080066d8  080066d8  0000808c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080066d8  080066d8  0000808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d8  080066d8  000076d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080066e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001510  20000090  0800676c  00008090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015a0  0800676c  000085a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105dc  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a5  00000000  00000000  00018690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001ae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a25  00000000  00000000  0001bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae62  00000000  00000000  0001c58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001063d  00000000  00000000  000373ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098bde  00000000  00000000  00047a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e060a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  000e0650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e37e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065c8 	.word	0x080065c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	080065c8 	.word	0x080065c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fdcc 	bl	8000dc4 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fce1 	bl	8000bf8 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa77 	bl	8000730 <__aeabi_fsub>
 8000242:	f000 fcd9 	bl	8000bf8 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	4646      	mov	r6, r8
 8000254:	464f      	mov	r7, r9
 8000256:	46d6      	mov	lr, sl
 8000258:	0245      	lsls	r5, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0fc3      	lsrs	r3, r0, #31
 800025e:	0047      	lsls	r7, r0, #1
 8000260:	4698      	mov	r8, r3
 8000262:	1c0e      	adds	r6, r1, #0
 8000264:	0a6d      	lsrs	r5, r5, #9
 8000266:	0e3f      	lsrs	r7, r7, #24
 8000268:	d05b      	beq.n	8000322 <__aeabi_fdiv+0xd2>
 800026a:	2fff      	cmp	r7, #255	@ 0xff
 800026c:	d021      	beq.n	80002b2 <__aeabi_fdiv+0x62>
 800026e:	2380      	movs	r3, #128	@ 0x80
 8000270:	00ed      	lsls	r5, r5, #3
 8000272:	04db      	lsls	r3, r3, #19
 8000274:	431d      	orrs	r5, r3
 8000276:	2300      	movs	r3, #0
 8000278:	4699      	mov	r9, r3
 800027a:	469a      	mov	sl, r3
 800027c:	3f7f      	subs	r7, #127	@ 0x7f
 800027e:	0274      	lsls	r4, r6, #9
 8000280:	0073      	lsls	r3, r6, #1
 8000282:	0a64      	lsrs	r4, r4, #9
 8000284:	0e1b      	lsrs	r3, r3, #24
 8000286:	0ff6      	lsrs	r6, r6, #31
 8000288:	2b00      	cmp	r3, #0
 800028a:	d020      	beq.n	80002ce <__aeabi_fdiv+0x7e>
 800028c:	2bff      	cmp	r3, #255	@ 0xff
 800028e:	d043      	beq.n	8000318 <__aeabi_fdiv+0xc8>
 8000290:	2280      	movs	r2, #128	@ 0x80
 8000292:	2000      	movs	r0, #0
 8000294:	00e4      	lsls	r4, r4, #3
 8000296:	04d2      	lsls	r2, r2, #19
 8000298:	4314      	orrs	r4, r2
 800029a:	3b7f      	subs	r3, #127	@ 0x7f
 800029c:	4642      	mov	r2, r8
 800029e:	1aff      	subs	r7, r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4072      	eors	r2, r6
 80002a4:	2b0f      	cmp	r3, #15
 80002a6:	d900      	bls.n	80002aa <__aeabi_fdiv+0x5a>
 80002a8:	e09d      	b.n	80003e6 <__aeabi_fdiv+0x196>
 80002aa:	4971      	ldr	r1, [pc, #452]	@ (8000470 <__aeabi_fdiv+0x220>)
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	58cb      	ldr	r3, [r1, r3]
 80002b0:	469f      	mov	pc, r3
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	d15a      	bne.n	800036c <__aeabi_fdiv+0x11c>
 80002b6:	2308      	movs	r3, #8
 80002b8:	4699      	mov	r9, r3
 80002ba:	3b06      	subs	r3, #6
 80002bc:	0274      	lsls	r4, r6, #9
 80002be:	469a      	mov	sl, r3
 80002c0:	0073      	lsls	r3, r6, #1
 80002c2:	27ff      	movs	r7, #255	@ 0xff
 80002c4:	0a64      	lsrs	r4, r4, #9
 80002c6:	0e1b      	lsrs	r3, r3, #24
 80002c8:	0ff6      	lsrs	r6, r6, #31
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1de      	bne.n	800028c <__aeabi_fdiv+0x3c>
 80002ce:	2c00      	cmp	r4, #0
 80002d0:	d13b      	bne.n	800034a <__aeabi_fdiv+0xfa>
 80002d2:	2301      	movs	r3, #1
 80002d4:	4642      	mov	r2, r8
 80002d6:	4649      	mov	r1, r9
 80002d8:	4072      	eors	r2, r6
 80002da:	4319      	orrs	r1, r3
 80002dc:	290e      	cmp	r1, #14
 80002de:	d818      	bhi.n	8000312 <__aeabi_fdiv+0xc2>
 80002e0:	4864      	ldr	r0, [pc, #400]	@ (8000474 <__aeabi_fdiv+0x224>)
 80002e2:	0089      	lsls	r1, r1, #2
 80002e4:	5841      	ldr	r1, [r0, r1]
 80002e6:	468f      	mov	pc, r1
 80002e8:	4653      	mov	r3, sl
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fdiv+0xa0>
 80002ee:	e0b8      	b.n	8000462 <__aeabi_fdiv+0x212>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d06e      	beq.n	80003d2 <__aeabi_fdiv+0x182>
 80002f4:	4642      	mov	r2, r8
 80002f6:	002c      	movs	r4, r5
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d140      	bne.n	800037e <__aeabi_fdiv+0x12e>
 80002fc:	2000      	movs	r0, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	05c0      	lsls	r0, r0, #23
 8000302:	4320      	orrs	r0, r4
 8000304:	07d2      	lsls	r2, r2, #31
 8000306:	4310      	orrs	r0, r2
 8000308:	bce0      	pop	{r5, r6, r7}
 800030a:	46ba      	mov	sl, r7
 800030c:	46b1      	mov	r9, r6
 800030e:	46a8      	mov	r8, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	20ff      	movs	r0, #255	@ 0xff
 8000314:	2400      	movs	r4, #0
 8000316:	e7f3      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000318:	2c00      	cmp	r4, #0
 800031a:	d120      	bne.n	800035e <__aeabi_fdiv+0x10e>
 800031c:	2302      	movs	r3, #2
 800031e:	3fff      	subs	r7, #255	@ 0xff
 8000320:	e7d8      	b.n	80002d4 <__aeabi_fdiv+0x84>
 8000322:	2d00      	cmp	r5, #0
 8000324:	d105      	bne.n	8000332 <__aeabi_fdiv+0xe2>
 8000326:	2304      	movs	r3, #4
 8000328:	4699      	mov	r9, r3
 800032a:	3b03      	subs	r3, #3
 800032c:	2700      	movs	r7, #0
 800032e:	469a      	mov	sl, r3
 8000330:	e7a5      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000332:	0028      	movs	r0, r5
 8000334:	f000 fd50 	bl	8000dd8 <__clzsi2>
 8000338:	2776      	movs	r7, #118	@ 0x76
 800033a:	1f43      	subs	r3, r0, #5
 800033c:	409d      	lsls	r5, r3
 800033e:	2300      	movs	r3, #0
 8000340:	427f      	negs	r7, r7
 8000342:	4699      	mov	r9, r3
 8000344:	469a      	mov	sl, r3
 8000346:	1a3f      	subs	r7, r7, r0
 8000348:	e799      	b.n	800027e <__aeabi_fdiv+0x2e>
 800034a:	0020      	movs	r0, r4
 800034c:	f000 fd44 	bl	8000dd8 <__clzsi2>
 8000350:	1f43      	subs	r3, r0, #5
 8000352:	409c      	lsls	r4, r3
 8000354:	2376      	movs	r3, #118	@ 0x76
 8000356:	425b      	negs	r3, r3
 8000358:	1a1b      	subs	r3, r3, r0
 800035a:	2000      	movs	r0, #0
 800035c:	e79e      	b.n	800029c <__aeabi_fdiv+0x4c>
 800035e:	2303      	movs	r3, #3
 8000360:	464a      	mov	r2, r9
 8000362:	431a      	orrs	r2, r3
 8000364:	4691      	mov	r9, r2
 8000366:	2003      	movs	r0, #3
 8000368:	33fc      	adds	r3, #252	@ 0xfc
 800036a:	e797      	b.n	800029c <__aeabi_fdiv+0x4c>
 800036c:	230c      	movs	r3, #12
 800036e:	4699      	mov	r9, r3
 8000370:	3b09      	subs	r3, #9
 8000372:	27ff      	movs	r7, #255	@ 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e782      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000378:	2803      	cmp	r0, #3
 800037a:	d02c      	beq.n	80003d6 <__aeabi_fdiv+0x186>
 800037c:	0032      	movs	r2, r6
 800037e:	0038      	movs	r0, r7
 8000380:	307f      	adds	r0, #127	@ 0x7f
 8000382:	2800      	cmp	r0, #0
 8000384:	dd47      	ble.n	8000416 <__aeabi_fdiv+0x1c6>
 8000386:	0763      	lsls	r3, r4, #29
 8000388:	d004      	beq.n	8000394 <__aeabi_fdiv+0x144>
 800038a:	230f      	movs	r3, #15
 800038c:	4023      	ands	r3, r4
 800038e:	2b04      	cmp	r3, #4
 8000390:	d000      	beq.n	8000394 <__aeabi_fdiv+0x144>
 8000392:	3404      	adds	r4, #4
 8000394:	0123      	lsls	r3, r4, #4
 8000396:	d503      	bpl.n	80003a0 <__aeabi_fdiv+0x150>
 8000398:	0038      	movs	r0, r7
 800039a:	4b37      	ldr	r3, [pc, #220]	@ (8000478 <__aeabi_fdiv+0x228>)
 800039c:	3080      	adds	r0, #128	@ 0x80
 800039e:	401c      	ands	r4, r3
 80003a0:	28fe      	cmp	r0, #254	@ 0xfe
 80003a2:	dcb6      	bgt.n	8000312 <__aeabi_fdiv+0xc2>
 80003a4:	01a4      	lsls	r4, r4, #6
 80003a6:	0a64      	lsrs	r4, r4, #9
 80003a8:	b2c0      	uxtb	r0, r0
 80003aa:	e7a9      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003ac:	2480      	movs	r4, #128	@ 0x80
 80003ae:	2200      	movs	r2, #0
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	03e4      	lsls	r4, r4, #15
 80003b4:	e7a4      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003b6:	2380      	movs	r3, #128	@ 0x80
 80003b8:	03db      	lsls	r3, r3, #15
 80003ba:	421d      	tst	r5, r3
 80003bc:	d001      	beq.n	80003c2 <__aeabi_fdiv+0x172>
 80003be:	421c      	tst	r4, r3
 80003c0:	d00b      	beq.n	80003da <__aeabi_fdiv+0x18a>
 80003c2:	2480      	movs	r4, #128	@ 0x80
 80003c4:	03e4      	lsls	r4, r4, #15
 80003c6:	432c      	orrs	r4, r5
 80003c8:	0264      	lsls	r4, r4, #9
 80003ca:	4642      	mov	r2, r8
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	0a64      	lsrs	r4, r4, #9
 80003d0:	e796      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003d2:	4646      	mov	r6, r8
 80003d4:	002c      	movs	r4, r5
 80003d6:	2380      	movs	r3, #128	@ 0x80
 80003d8:	03db      	lsls	r3, r3, #15
 80003da:	431c      	orrs	r4, r3
 80003dc:	0264      	lsls	r4, r4, #9
 80003de:	0032      	movs	r2, r6
 80003e0:	20ff      	movs	r0, #255	@ 0xff
 80003e2:	0a64      	lsrs	r4, r4, #9
 80003e4:	e78c      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003e6:	016d      	lsls	r5, r5, #5
 80003e8:	0160      	lsls	r0, r4, #5
 80003ea:	4285      	cmp	r5, r0
 80003ec:	d22d      	bcs.n	800044a <__aeabi_fdiv+0x1fa>
 80003ee:	231b      	movs	r3, #27
 80003f0:	2400      	movs	r4, #0
 80003f2:	3f01      	subs	r7, #1
 80003f4:	2601      	movs	r6, #1
 80003f6:	0029      	movs	r1, r5
 80003f8:	0064      	lsls	r4, r4, #1
 80003fa:	006d      	lsls	r5, r5, #1
 80003fc:	2900      	cmp	r1, #0
 80003fe:	db01      	blt.n	8000404 <__aeabi_fdiv+0x1b4>
 8000400:	4285      	cmp	r5, r0
 8000402:	d301      	bcc.n	8000408 <__aeabi_fdiv+0x1b8>
 8000404:	1a2d      	subs	r5, r5, r0
 8000406:	4334      	orrs	r4, r6
 8000408:	3b01      	subs	r3, #1
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f3      	bne.n	80003f6 <__aeabi_fdiv+0x1a6>
 800040e:	1e6b      	subs	r3, r5, #1
 8000410:	419d      	sbcs	r5, r3
 8000412:	432c      	orrs	r4, r5
 8000414:	e7b3      	b.n	800037e <__aeabi_fdiv+0x12e>
 8000416:	2301      	movs	r3, #1
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	2b1b      	cmp	r3, #27
 800041c:	dd00      	ble.n	8000420 <__aeabi_fdiv+0x1d0>
 800041e:	e76d      	b.n	80002fc <__aeabi_fdiv+0xac>
 8000420:	0021      	movs	r1, r4
 8000422:	379e      	adds	r7, #158	@ 0x9e
 8000424:	40d9      	lsrs	r1, r3
 8000426:	40bc      	lsls	r4, r7
 8000428:	000b      	movs	r3, r1
 800042a:	1e61      	subs	r1, r4, #1
 800042c:	418c      	sbcs	r4, r1
 800042e:	4323      	orrs	r3, r4
 8000430:	0759      	lsls	r1, r3, #29
 8000432:	d004      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 8000434:	210f      	movs	r1, #15
 8000436:	4019      	ands	r1, r3
 8000438:	2904      	cmp	r1, #4
 800043a:	d000      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 800043c:	3304      	adds	r3, #4
 800043e:	0159      	lsls	r1, r3, #5
 8000440:	d413      	bmi.n	800046a <__aeabi_fdiv+0x21a>
 8000442:	019b      	lsls	r3, r3, #6
 8000444:	2000      	movs	r0, #0
 8000446:	0a5c      	lsrs	r4, r3, #9
 8000448:	e75a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800044a:	231a      	movs	r3, #26
 800044c:	2401      	movs	r4, #1
 800044e:	1a2d      	subs	r5, r5, r0
 8000450:	e7d0      	b.n	80003f4 <__aeabi_fdiv+0x1a4>
 8000452:	1e98      	subs	r0, r3, #2
 8000454:	4243      	negs	r3, r0
 8000456:	4158      	adcs	r0, r3
 8000458:	4240      	negs	r0, r0
 800045a:	0032      	movs	r2, r6
 800045c:	2400      	movs	r4, #0
 800045e:	b2c0      	uxtb	r0, r0
 8000460:	e74e      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000462:	4642      	mov	r2, r8
 8000464:	20ff      	movs	r0, #255	@ 0xff
 8000466:	2400      	movs	r4, #0
 8000468:	e74a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800046a:	2001      	movs	r0, #1
 800046c:	2400      	movs	r4, #0
 800046e:	e747      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000470:	080065e8 	.word	0x080065e8
 8000474:	08006628 	.word	0x08006628
 8000478:	f7ffffff 	.word	0xf7ffffff

0800047c <__aeabi_fmul>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	464f      	mov	r7, r9
 8000480:	4646      	mov	r6, r8
 8000482:	46d6      	mov	lr, sl
 8000484:	0044      	lsls	r4, r0, #1
 8000486:	b5c0      	push	{r6, r7, lr}
 8000488:	0246      	lsls	r6, r0, #9
 800048a:	1c0f      	adds	r7, r1, #0
 800048c:	0a76      	lsrs	r6, r6, #9
 800048e:	0e24      	lsrs	r4, r4, #24
 8000490:	0fc5      	lsrs	r5, r0, #31
 8000492:	2c00      	cmp	r4, #0
 8000494:	d100      	bne.n	8000498 <__aeabi_fmul+0x1c>
 8000496:	e0da      	b.n	800064e <__aeabi_fmul+0x1d2>
 8000498:	2cff      	cmp	r4, #255	@ 0xff
 800049a:	d074      	beq.n	8000586 <__aeabi_fmul+0x10a>
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	00f6      	lsls	r6, r6, #3
 80004a0:	04db      	lsls	r3, r3, #19
 80004a2:	431e      	orrs	r6, r3
 80004a4:	2300      	movs	r3, #0
 80004a6:	4699      	mov	r9, r3
 80004a8:	469a      	mov	sl, r3
 80004aa:	3c7f      	subs	r4, #127	@ 0x7f
 80004ac:	027b      	lsls	r3, r7, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	4698      	mov	r8, r3
 80004b2:	007b      	lsls	r3, r7, #1
 80004b4:	0e1b      	lsrs	r3, r3, #24
 80004b6:	0fff      	lsrs	r7, r7, #31
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d074      	beq.n	80005a6 <__aeabi_fmul+0x12a>
 80004bc:	2bff      	cmp	r3, #255	@ 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fmul+0x46>
 80004c0:	e08e      	b.n	80005e0 <__aeabi_fmul+0x164>
 80004c2:	4642      	mov	r2, r8
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	00d2      	lsls	r2, r2, #3
 80004c8:	04c9      	lsls	r1, r1, #19
 80004ca:	4311      	orrs	r1, r2
 80004cc:	3b7f      	subs	r3, #127	@ 0x7f
 80004ce:	002a      	movs	r2, r5
 80004d0:	18e4      	adds	r4, r4, r3
 80004d2:	464b      	mov	r3, r9
 80004d4:	407a      	eors	r2, r7
 80004d6:	4688      	mov	r8, r1
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	2b0a      	cmp	r3, #10
 80004dc:	dc75      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80004de:	464b      	mov	r3, r9
 80004e0:	2000      	movs	r0, #0
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	dd0f      	ble.n	8000506 <__aeabi_fmul+0x8a>
 80004e6:	4649      	mov	r1, r9
 80004e8:	2301      	movs	r3, #1
 80004ea:	408b      	lsls	r3, r1
 80004ec:	21a6      	movs	r1, #166	@ 0xa6
 80004ee:	00c9      	lsls	r1, r1, #3
 80004f0:	420b      	tst	r3, r1
 80004f2:	d169      	bne.n	80005c8 <__aeabi_fmul+0x14c>
 80004f4:	2190      	movs	r1, #144	@ 0x90
 80004f6:	0089      	lsls	r1, r1, #2
 80004f8:	420b      	tst	r3, r1
 80004fa:	d000      	beq.n	80004fe <__aeabi_fmul+0x82>
 80004fc:	e100      	b.n	8000700 <__aeabi_fmul+0x284>
 80004fe:	2188      	movs	r1, #136	@ 0x88
 8000500:	4219      	tst	r1, r3
 8000502:	d000      	beq.n	8000506 <__aeabi_fmul+0x8a>
 8000504:	e0f5      	b.n	80006f2 <__aeabi_fmul+0x276>
 8000506:	4641      	mov	r1, r8
 8000508:	0409      	lsls	r1, r1, #16
 800050a:	0c09      	lsrs	r1, r1, #16
 800050c:	4643      	mov	r3, r8
 800050e:	0008      	movs	r0, r1
 8000510:	0c35      	lsrs	r5, r6, #16
 8000512:	0436      	lsls	r6, r6, #16
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	0c36      	lsrs	r6, r6, #16
 8000518:	4370      	muls	r0, r6
 800051a:	4369      	muls	r1, r5
 800051c:	435e      	muls	r6, r3
 800051e:	435d      	muls	r5, r3
 8000520:	1876      	adds	r6, r6, r1
 8000522:	0c03      	lsrs	r3, r0, #16
 8000524:	199b      	adds	r3, r3, r6
 8000526:	4299      	cmp	r1, r3
 8000528:	d903      	bls.n	8000532 <__aeabi_fmul+0xb6>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	468c      	mov	ip, r1
 8000530:	4465      	add	r5, ip
 8000532:	0400      	lsls	r0, r0, #16
 8000534:	0419      	lsls	r1, r3, #16
 8000536:	0c00      	lsrs	r0, r0, #16
 8000538:	1809      	adds	r1, r1, r0
 800053a:	018e      	lsls	r6, r1, #6
 800053c:	1e70      	subs	r0, r6, #1
 800053e:	4186      	sbcs	r6, r0
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	0e89      	lsrs	r1, r1, #26
 8000544:	195b      	adds	r3, r3, r5
 8000546:	430e      	orrs	r6, r1
 8000548:	019b      	lsls	r3, r3, #6
 800054a:	431e      	orrs	r6, r3
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	d46c      	bmi.n	800062a <__aeabi_fmul+0x1ae>
 8000550:	0023      	movs	r3, r4
 8000552:	337f      	adds	r3, #127	@ 0x7f
 8000554:	2b00      	cmp	r3, #0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fmul+0xde>
 8000558:	e0b1      	b.n	80006be <__aeabi_fmul+0x242>
 800055a:	0015      	movs	r5, r2
 800055c:	0771      	lsls	r1, r6, #29
 800055e:	d00b      	beq.n	8000578 <__aeabi_fmul+0xfc>
 8000560:	200f      	movs	r0, #15
 8000562:	0021      	movs	r1, r4
 8000564:	4030      	ands	r0, r6
 8000566:	2804      	cmp	r0, #4
 8000568:	d006      	beq.n	8000578 <__aeabi_fmul+0xfc>
 800056a:	3604      	adds	r6, #4
 800056c:	0132      	lsls	r2, r6, #4
 800056e:	d503      	bpl.n	8000578 <__aeabi_fmul+0xfc>
 8000570:	4b6e      	ldr	r3, [pc, #440]	@ (800072c <__aeabi_fmul+0x2b0>)
 8000572:	401e      	ands	r6, r3
 8000574:	000b      	movs	r3, r1
 8000576:	3380      	adds	r3, #128	@ 0x80
 8000578:	2bfe      	cmp	r3, #254	@ 0xfe
 800057a:	dd00      	ble.n	800057e <__aeabi_fmul+0x102>
 800057c:	e0bd      	b.n	80006fa <__aeabi_fmul+0x27e>
 800057e:	01b2      	lsls	r2, r6, #6
 8000580:	0a52      	lsrs	r2, r2, #9
 8000582:	b2db      	uxtb	r3, r3
 8000584:	e048      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d000      	beq.n	800058c <__aeabi_fmul+0x110>
 800058a:	e092      	b.n	80006b2 <__aeabi_fmul+0x236>
 800058c:	2308      	movs	r3, #8
 800058e:	4699      	mov	r9, r3
 8000590:	3b06      	subs	r3, #6
 8000592:	469a      	mov	sl, r3
 8000594:	027b      	lsls	r3, r7, #9
 8000596:	0a5b      	lsrs	r3, r3, #9
 8000598:	4698      	mov	r8, r3
 800059a:	007b      	lsls	r3, r7, #1
 800059c:	24ff      	movs	r4, #255	@ 0xff
 800059e:	0e1b      	lsrs	r3, r3, #24
 80005a0:	0fff      	lsrs	r7, r7, #31
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d18a      	bne.n	80004bc <__aeabi_fmul+0x40>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d164      	bne.n	8000676 <__aeabi_fmul+0x1fa>
 80005ac:	4649      	mov	r1, r9
 80005ae:	3201      	adds	r2, #1
 80005b0:	4311      	orrs	r1, r2
 80005b2:	4689      	mov	r9, r1
 80005b4:	290a      	cmp	r1, #10
 80005b6:	dc08      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80005b8:	407d      	eors	r5, r7
 80005ba:	2001      	movs	r0, #1
 80005bc:	b2ea      	uxtb	r2, r5
 80005be:	2902      	cmp	r1, #2
 80005c0:	dc91      	bgt.n	80004e6 <__aeabi_fmul+0x6a>
 80005c2:	0015      	movs	r5, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	e027      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005c8:	0015      	movs	r5, r2
 80005ca:	4653      	mov	r3, sl
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fmul+0x156>
 80005d0:	e093      	b.n	80006fa <__aeabi_fmul+0x27e>
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d01a      	beq.n	800060c <__aeabi_fmul+0x190>
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d12c      	bne.n	8000634 <__aeabi_fmul+0x1b8>
 80005da:	2300      	movs	r3, #0
 80005dc:	2200      	movs	r2, #0
 80005de:	e01b      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005e0:	4643      	mov	r3, r8
 80005e2:	34ff      	adds	r4, #255	@ 0xff
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d055      	beq.n	8000694 <__aeabi_fmul+0x218>
 80005e8:	2103      	movs	r1, #3
 80005ea:	464b      	mov	r3, r9
 80005ec:	430b      	orrs	r3, r1
 80005ee:	0019      	movs	r1, r3
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fmul+0x17a>
 80005f4:	e092      	b.n	800071c <__aeabi_fmul+0x2a0>
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d000      	beq.n	80005fc <__aeabi_fmul+0x180>
 80005fa:	e08c      	b.n	8000716 <__aeabi_fmul+0x29a>
 80005fc:	2280      	movs	r2, #128	@ 0x80
 80005fe:	03d2      	lsls	r2, r2, #15
 8000600:	4216      	tst	r6, r2
 8000602:	d003      	beq.n	800060c <__aeabi_fmul+0x190>
 8000604:	4643      	mov	r3, r8
 8000606:	4213      	tst	r3, r2
 8000608:	d100      	bne.n	800060c <__aeabi_fmul+0x190>
 800060a:	e07d      	b.n	8000708 <__aeabi_fmul+0x28c>
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	03d2      	lsls	r2, r2, #15
 8000610:	4332      	orrs	r2, r6
 8000612:	0252      	lsls	r2, r2, #9
 8000614:	0a52      	lsrs	r2, r2, #9
 8000616:	23ff      	movs	r3, #255	@ 0xff
 8000618:	05d8      	lsls	r0, r3, #23
 800061a:	07ed      	lsls	r5, r5, #31
 800061c:	4310      	orrs	r0, r2
 800061e:	4328      	orrs	r0, r5
 8000620:	bce0      	pop	{r5, r6, r7}
 8000622:	46ba      	mov	sl, r7
 8000624:	46b1      	mov	r9, r6
 8000626:	46a8      	mov	r8, r5
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	2301      	movs	r3, #1
 800062c:	0015      	movs	r5, r2
 800062e:	0871      	lsrs	r1, r6, #1
 8000630:	401e      	ands	r6, r3
 8000632:	430e      	orrs	r6, r1
 8000634:	0023      	movs	r3, r4
 8000636:	3380      	adds	r3, #128	@ 0x80
 8000638:	1c61      	adds	r1, r4, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	dd41      	ble.n	80006c2 <__aeabi_fmul+0x246>
 800063e:	0772      	lsls	r2, r6, #29
 8000640:	d094      	beq.n	800056c <__aeabi_fmul+0xf0>
 8000642:	220f      	movs	r2, #15
 8000644:	4032      	ands	r2, r6
 8000646:	2a04      	cmp	r2, #4
 8000648:	d000      	beq.n	800064c <__aeabi_fmul+0x1d0>
 800064a:	e78e      	b.n	800056a <__aeabi_fmul+0xee>
 800064c:	e78e      	b.n	800056c <__aeabi_fmul+0xf0>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d105      	bne.n	800065e <__aeabi_fmul+0x1e2>
 8000652:	2304      	movs	r3, #4
 8000654:	4699      	mov	r9, r3
 8000656:	3b03      	subs	r3, #3
 8000658:	2400      	movs	r4, #0
 800065a:	469a      	mov	sl, r3
 800065c:	e726      	b.n	80004ac <__aeabi_fmul+0x30>
 800065e:	0030      	movs	r0, r6
 8000660:	f000 fbba 	bl	8000dd8 <__clzsi2>
 8000664:	2476      	movs	r4, #118	@ 0x76
 8000666:	1f43      	subs	r3, r0, #5
 8000668:	409e      	lsls	r6, r3
 800066a:	2300      	movs	r3, #0
 800066c:	4264      	negs	r4, r4
 800066e:	4699      	mov	r9, r3
 8000670:	469a      	mov	sl, r3
 8000672:	1a24      	subs	r4, r4, r0
 8000674:	e71a      	b.n	80004ac <__aeabi_fmul+0x30>
 8000676:	4640      	mov	r0, r8
 8000678:	f000 fbae 	bl	8000dd8 <__clzsi2>
 800067c:	464b      	mov	r3, r9
 800067e:	1a24      	subs	r4, r4, r0
 8000680:	3c76      	subs	r4, #118	@ 0x76
 8000682:	2b0a      	cmp	r3, #10
 8000684:	dca1      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 8000686:	4643      	mov	r3, r8
 8000688:	3805      	subs	r0, #5
 800068a:	4083      	lsls	r3, r0
 800068c:	407d      	eors	r5, r7
 800068e:	4698      	mov	r8, r3
 8000690:	b2ea      	uxtb	r2, r5
 8000692:	e724      	b.n	80004de <__aeabi_fmul+0x62>
 8000694:	464a      	mov	r2, r9
 8000696:	3302      	adds	r3, #2
 8000698:	4313      	orrs	r3, r2
 800069a:	002a      	movs	r2, r5
 800069c:	407a      	eors	r2, r7
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	2b0a      	cmp	r3, #10
 80006a2:	dc92      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	0015      	movs	r5, r2
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d026      	beq.n	80006fa <__aeabi_fmul+0x27e>
 80006ac:	4699      	mov	r9, r3
 80006ae:	2002      	movs	r0, #2
 80006b0:	e719      	b.n	80004e6 <__aeabi_fmul+0x6a>
 80006b2:	230c      	movs	r3, #12
 80006b4:	4699      	mov	r9, r3
 80006b6:	3b09      	subs	r3, #9
 80006b8:	24ff      	movs	r4, #255	@ 0xff
 80006ba:	469a      	mov	sl, r3
 80006bc:	e6f6      	b.n	80004ac <__aeabi_fmul+0x30>
 80006be:	0015      	movs	r5, r2
 80006c0:	0021      	movs	r1, r4
 80006c2:	2201      	movs	r2, #1
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dd00      	ble.n	80006cc <__aeabi_fmul+0x250>
 80006ca:	e786      	b.n	80005da <__aeabi_fmul+0x15e>
 80006cc:	319e      	adds	r1, #158	@ 0x9e
 80006ce:	0032      	movs	r2, r6
 80006d0:	408e      	lsls	r6, r1
 80006d2:	40da      	lsrs	r2, r3
 80006d4:	1e73      	subs	r3, r6, #1
 80006d6:	419e      	sbcs	r6, r3
 80006d8:	4332      	orrs	r2, r6
 80006da:	0753      	lsls	r3, r2, #29
 80006dc:	d004      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006de:	230f      	movs	r3, #15
 80006e0:	4013      	ands	r3, r2
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006e6:	3204      	adds	r2, #4
 80006e8:	0153      	lsls	r3, r2, #5
 80006ea:	d510      	bpl.n	800070e <__aeabi_fmul+0x292>
 80006ec:	2301      	movs	r3, #1
 80006ee:	2200      	movs	r2, #0
 80006f0:	e792      	b.n	8000618 <__aeabi_fmul+0x19c>
 80006f2:	003d      	movs	r5, r7
 80006f4:	4646      	mov	r6, r8
 80006f6:	4682      	mov	sl, r0
 80006f8:	e767      	b.n	80005ca <__aeabi_fmul+0x14e>
 80006fa:	23ff      	movs	r3, #255	@ 0xff
 80006fc:	2200      	movs	r2, #0
 80006fe:	e78b      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	2500      	movs	r5, #0
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	e786      	b.n	8000616 <__aeabi_fmul+0x19a>
 8000708:	003d      	movs	r5, r7
 800070a:	431a      	orrs	r2, r3
 800070c:	e783      	b.n	8000616 <__aeabi_fmul+0x19a>
 800070e:	0192      	lsls	r2, r2, #6
 8000710:	2300      	movs	r3, #0
 8000712:	0a52      	lsrs	r2, r2, #9
 8000714:	e780      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000716:	003d      	movs	r5, r7
 8000718:	4646      	mov	r6, r8
 800071a:	e777      	b.n	800060c <__aeabi_fmul+0x190>
 800071c:	002a      	movs	r2, r5
 800071e:	2301      	movs	r3, #1
 8000720:	407a      	eors	r2, r7
 8000722:	408b      	lsls	r3, r1
 8000724:	2003      	movs	r0, #3
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	e6e9      	b.n	80004fe <__aeabi_fmul+0x82>
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	f7ffffff 	.word	0xf7ffffff

08000730 <__aeabi_fsub>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4647      	mov	r7, r8
 8000734:	46ce      	mov	lr, r9
 8000736:	0243      	lsls	r3, r0, #9
 8000738:	b580      	push	{r7, lr}
 800073a:	0a5f      	lsrs	r7, r3, #9
 800073c:	099b      	lsrs	r3, r3, #6
 800073e:	0045      	lsls	r5, r0, #1
 8000740:	004a      	lsls	r2, r1, #1
 8000742:	469c      	mov	ip, r3
 8000744:	024b      	lsls	r3, r1, #9
 8000746:	0fc4      	lsrs	r4, r0, #31
 8000748:	0fce      	lsrs	r6, r1, #31
 800074a:	0e2d      	lsrs	r5, r5, #24
 800074c:	0a58      	lsrs	r0, r3, #9
 800074e:	0e12      	lsrs	r2, r2, #24
 8000750:	0999      	lsrs	r1, r3, #6
 8000752:	2aff      	cmp	r2, #255	@ 0xff
 8000754:	d06b      	beq.n	800082e <__aeabi_fsub+0xfe>
 8000756:	2301      	movs	r3, #1
 8000758:	405e      	eors	r6, r3
 800075a:	1aab      	subs	r3, r5, r2
 800075c:	42b4      	cmp	r4, r6
 800075e:	d04b      	beq.n	80007f8 <__aeabi_fsub+0xc8>
 8000760:	2b00      	cmp	r3, #0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fsub+0x36>
 8000764:	e0ff      	b.n	8000966 <__aeabi_fsub+0x236>
 8000766:	2a00      	cmp	r2, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x3c>
 800076a:	e088      	b.n	800087e <__aeabi_fsub+0x14e>
 800076c:	2dff      	cmp	r5, #255	@ 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x42>
 8000770:	e0ef      	b.n	8000952 <__aeabi_fsub+0x222>
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	04d2      	lsls	r2, r2, #19
 8000776:	4311      	orrs	r1, r2
 8000778:	2001      	movs	r0, #1
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dc08      	bgt.n	8000790 <__aeabi_fsub+0x60>
 800077e:	0008      	movs	r0, r1
 8000780:	2220      	movs	r2, #32
 8000782:	40d8      	lsrs	r0, r3
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4099      	lsls	r1, r3
 8000788:	000b      	movs	r3, r1
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	4318      	orrs	r0, r3
 8000790:	4663      	mov	r3, ip
 8000792:	1a1b      	subs	r3, r3, r0
 8000794:	469c      	mov	ip, r3
 8000796:	4663      	mov	r3, ip
 8000798:	015b      	lsls	r3, r3, #5
 800079a:	d400      	bmi.n	800079e <__aeabi_fsub+0x6e>
 800079c:	e0cd      	b.n	800093a <__aeabi_fsub+0x20a>
 800079e:	4663      	mov	r3, ip
 80007a0:	019f      	lsls	r7, r3, #6
 80007a2:	09bf      	lsrs	r7, r7, #6
 80007a4:	0038      	movs	r0, r7
 80007a6:	f000 fb17 	bl	8000dd8 <__clzsi2>
 80007aa:	003b      	movs	r3, r7
 80007ac:	3805      	subs	r0, #5
 80007ae:	4083      	lsls	r3, r0
 80007b0:	4285      	cmp	r5, r0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_fsub+0x86>
 80007b4:	e0a2      	b.n	80008fc <__aeabi_fsub+0x1cc>
 80007b6:	4ab7      	ldr	r2, [pc, #732]	@ (8000a94 <__aeabi_fsub+0x364>)
 80007b8:	1a2d      	subs	r5, r5, r0
 80007ba:	401a      	ands	r2, r3
 80007bc:	4694      	mov	ip, r2
 80007be:	075a      	lsls	r2, r3, #29
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x94>
 80007c2:	e0c3      	b.n	800094c <__aeabi_fsub+0x21c>
 80007c4:	220f      	movs	r2, #15
 80007c6:	4013      	ands	r3, r2
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0x9e>
 80007cc:	e0be      	b.n	800094c <__aeabi_fsub+0x21c>
 80007ce:	2304      	movs	r3, #4
 80007d0:	4698      	mov	r8, r3
 80007d2:	44c4      	add	ip, r8
 80007d4:	4663      	mov	r3, ip
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	d400      	bmi.n	80007dc <__aeabi_fsub+0xac>
 80007da:	e0b7      	b.n	800094c <__aeabi_fsub+0x21c>
 80007dc:	1c68      	adds	r0, r5, #1
 80007de:	2dfe      	cmp	r5, #254	@ 0xfe
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0xb4>
 80007e2:	e0a5      	b.n	8000930 <__aeabi_fsub+0x200>
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	2200      	movs	r2, #0
 80007e8:	05c0      	lsls	r0, r0, #23
 80007ea:	4310      	orrs	r0, r2
 80007ec:	07e4      	lsls	r4, r4, #31
 80007ee:	4320      	orrs	r0, r4
 80007f0:	bcc0      	pop	{r6, r7}
 80007f2:	46b9      	mov	r9, r7
 80007f4:	46b0      	mov	r8, r6
 80007f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fsub+0xce>
 80007fc:	e1eb      	b.n	8000bd6 <__aeabi_fsub+0x4a6>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d046      	beq.n	8000890 <__aeabi_fsub+0x160>
 8000802:	2dff      	cmp	r5, #255	@ 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0xd8>
 8000806:	e0a4      	b.n	8000952 <__aeabi_fsub+0x222>
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	04d2      	lsls	r2, r2, #19
 800080c:	4311      	orrs	r1, r2
 800080e:	2b1b      	cmp	r3, #27
 8000810:	dc00      	bgt.n	8000814 <__aeabi_fsub+0xe4>
 8000812:	e0fb      	b.n	8000a0c <__aeabi_fsub+0x2dc>
 8000814:	2305      	movs	r3, #5
 8000816:	4698      	mov	r8, r3
 8000818:	002b      	movs	r3, r5
 800081a:	44c4      	add	ip, r8
 800081c:	4662      	mov	r2, ip
 800081e:	08d7      	lsrs	r7, r2, #3
 8000820:	2bff      	cmp	r3, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fsub+0xf6>
 8000824:	e095      	b.n	8000952 <__aeabi_fsub+0x222>
 8000826:	027a      	lsls	r2, r7, #9
 8000828:	0a52      	lsrs	r2, r2, #9
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	e7dc      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800082e:	002b      	movs	r3, r5
 8000830:	3bff      	subs	r3, #255	@ 0xff
 8000832:	4699      	mov	r9, r3
 8000834:	2900      	cmp	r1, #0
 8000836:	d118      	bne.n	800086a <__aeabi_fsub+0x13a>
 8000838:	2301      	movs	r3, #1
 800083a:	405e      	eors	r6, r3
 800083c:	42b4      	cmp	r4, r6
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x112>
 8000840:	e0ca      	b.n	80009d8 <__aeabi_fsub+0x2a8>
 8000842:	464b      	mov	r3, r9
 8000844:	2b00      	cmp	r3, #0
 8000846:	d02d      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x11e>
 800084c:	e13c      	b.n	8000ac8 <__aeabi_fsub+0x398>
 800084e:	23ff      	movs	r3, #255	@ 0xff
 8000850:	4664      	mov	r4, ip
 8000852:	2c00      	cmp	r4, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x128>
 8000856:	e15f      	b.n	8000b18 <__aeabi_fsub+0x3e8>
 8000858:	1e5d      	subs	r5, r3, #1
 800085a:	2b01      	cmp	r3, #1
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x130>
 800085e:	e174      	b.n	8000b4a <__aeabi_fsub+0x41a>
 8000860:	0034      	movs	r4, r6
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d074      	beq.n	8000950 <__aeabi_fsub+0x220>
 8000866:	002b      	movs	r3, r5
 8000868:	e103      	b.n	8000a72 <__aeabi_fsub+0x342>
 800086a:	42b4      	cmp	r4, r6
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x140>
 800086e:	e09c      	b.n	80009aa <__aeabi_fsub+0x27a>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d017      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000874:	2d00      	cmp	r5, #0
 8000876:	d0ea      	beq.n	800084e <__aeabi_fsub+0x11e>
 8000878:	0007      	movs	r7, r0
 800087a:	0034      	movs	r4, r6
 800087c:	e06c      	b.n	8000958 <__aeabi_fsub+0x228>
 800087e:	2900      	cmp	r1, #0
 8000880:	d0cc      	beq.n	800081c <__aeabi_fsub+0xec>
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d02b      	beq.n	80008e0 <__aeabi_fsub+0x1b0>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d062      	beq.n	8000952 <__aeabi_fsub+0x222>
 800088c:	0013      	movs	r3, r2
 800088e:	e773      	b.n	8000778 <__aeabi_fsub+0x48>
 8000890:	2900      	cmp	r1, #0
 8000892:	d0c3      	beq.n	800081c <__aeabi_fsub+0xec>
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	2b01      	cmp	r3, #1
 8000898:	d100      	bne.n	800089c <__aeabi_fsub+0x16c>
 800089a:	e11e      	b.n	8000ada <__aeabi_fsub+0x3aa>
 800089c:	2bff      	cmp	r3, #255	@ 0xff
 800089e:	d058      	beq.n	8000952 <__aeabi_fsub+0x222>
 80008a0:	0013      	movs	r3, r2
 80008a2:	e7b4      	b.n	800080e <__aeabi_fsub+0xde>
 80008a4:	22fe      	movs	r2, #254	@ 0xfe
 80008a6:	1c6b      	adds	r3, r5, #1
 80008a8:	421a      	tst	r2, r3
 80008aa:	d10d      	bne.n	80008c8 <__aeabi_fsub+0x198>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d060      	beq.n	8000972 <__aeabi_fsub+0x242>
 80008b0:	4663      	mov	r3, ip
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fsub+0x188>
 80008b6:	e120      	b.n	8000afa <__aeabi_fsub+0x3ca>
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d000      	beq.n	80008be <__aeabi_fsub+0x18e>
 80008bc:	e128      	b.n	8000b10 <__aeabi_fsub+0x3e0>
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	2400      	movs	r4, #0
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	03d2      	lsls	r2, r2, #15
 80008c6:	e78f      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008c8:	4663      	mov	r3, ip
 80008ca:	1a5f      	subs	r7, r3, r1
 80008cc:	017b      	lsls	r3, r7, #5
 80008ce:	d500      	bpl.n	80008d2 <__aeabi_fsub+0x1a2>
 80008d0:	e0fe      	b.n	8000ad0 <__aeabi_fsub+0x3a0>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fsub+0x1a8>
 80008d6:	e765      	b.n	80007a4 <__aeabi_fsub+0x74>
 80008d8:	2400      	movs	r4, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e783      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008e0:	4663      	mov	r3, ip
 80008e2:	1a59      	subs	r1, r3, r1
 80008e4:	014b      	lsls	r3, r1, #5
 80008e6:	d400      	bmi.n	80008ea <__aeabi_fsub+0x1ba>
 80008e8:	e119      	b.n	8000b1e <__aeabi_fsub+0x3ee>
 80008ea:	018f      	lsls	r7, r1, #6
 80008ec:	09bf      	lsrs	r7, r7, #6
 80008ee:	0038      	movs	r0, r7
 80008f0:	f000 fa72 	bl	8000dd8 <__clzsi2>
 80008f4:	003b      	movs	r3, r7
 80008f6:	3805      	subs	r0, #5
 80008f8:	4083      	lsls	r3, r0
 80008fa:	2501      	movs	r5, #1
 80008fc:	2220      	movs	r2, #32
 80008fe:	1b40      	subs	r0, r0, r5
 8000900:	3001      	adds	r0, #1
 8000902:	1a12      	subs	r2, r2, r0
 8000904:	0019      	movs	r1, r3
 8000906:	4093      	lsls	r3, r2
 8000908:	40c1      	lsrs	r1, r0
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	4193      	sbcs	r3, r2
 800090e:	4319      	orrs	r1, r3
 8000910:	468c      	mov	ip, r1
 8000912:	1e0b      	subs	r3, r1, #0
 8000914:	d0e1      	beq.n	80008da <__aeabi_fsub+0x1aa>
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x1ec>
 800091a:	e152      	b.n	8000bc2 <__aeabi_fsub+0x492>
 800091c:	230f      	movs	r3, #15
 800091e:	2500      	movs	r5, #0
 8000920:	400b      	ands	r3, r1
 8000922:	2b04      	cmp	r3, #4
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x1f8>
 8000926:	e752      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000928:	2001      	movs	r0, #1
 800092a:	014a      	lsls	r2, r1, #5
 800092c:	d400      	bmi.n	8000930 <__aeabi_fsub+0x200>
 800092e:	e092      	b.n	8000a56 <__aeabi_fsub+0x326>
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	4663      	mov	r3, ip
 8000934:	019a      	lsls	r2, r3, #6
 8000936:	0a52      	lsrs	r2, r2, #9
 8000938:	e756      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800093a:	4663      	mov	r3, ip
 800093c:	075b      	lsls	r3, r3, #29
 800093e:	d005      	beq.n	800094c <__aeabi_fsub+0x21c>
 8000940:	230f      	movs	r3, #15
 8000942:	4662      	mov	r2, ip
 8000944:	4013      	ands	r3, r2
 8000946:	2b04      	cmp	r3, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fsub+0x21c>
 800094a:	e740      	b.n	80007ce <__aeabi_fsub+0x9e>
 800094c:	002b      	movs	r3, r5
 800094e:	e765      	b.n	800081c <__aeabi_fsub+0xec>
 8000950:	0007      	movs	r7, r0
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x228>
 8000956:	e745      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	433a      	orrs	r2, r7
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	0a52      	lsrs	r2, r2, #9
 8000964:	e740      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d179      	bne.n	8000a5e <__aeabi_fsub+0x32e>
 800096a:	22fe      	movs	r2, #254	@ 0xfe
 800096c:	1c6b      	adds	r3, r5, #1
 800096e:	421a      	tst	r2, r3
 8000970:	d1aa      	bne.n	80008c8 <__aeabi_fsub+0x198>
 8000972:	4663      	mov	r3, ip
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x24a>
 8000978:	e0f5      	b.n	8000b66 <__aeabi_fsub+0x436>
 800097a:	2900      	cmp	r1, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x250>
 800097e:	e0d1      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 8000980:	1a5f      	subs	r7, r3, r1
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	04db      	lsls	r3, r3, #19
 8000986:	421f      	tst	r7, r3
 8000988:	d100      	bne.n	800098c <__aeabi_fsub+0x25c>
 800098a:	e10e      	b.n	8000baa <__aeabi_fsub+0x47a>
 800098c:	4662      	mov	r2, ip
 800098e:	2401      	movs	r4, #1
 8000990:	1a8a      	subs	r2, r1, r2
 8000992:	4694      	mov	ip, r2
 8000994:	2000      	movs	r0, #0
 8000996:	4034      	ands	r4, r6
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fsub+0x26e>
 800099c:	e724      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800099e:	2001      	movs	r0, #1
 80009a0:	421a      	tst	r2, r3
 80009a2:	d1c6      	bne.n	8000932 <__aeabi_fsub+0x202>
 80009a4:	2300      	movs	r3, #0
 80009a6:	08d7      	lsrs	r7, r2, #3
 80009a8:	e73d      	b.n	8000826 <__aeabi_fsub+0xf6>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d017      	beq.n	80009de <__aeabi_fsub+0x2ae>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fsub+0x284>
 80009b2:	e0af      	b.n	8000b14 <__aeabi_fsub+0x3e4>
 80009b4:	23ff      	movs	r3, #255	@ 0xff
 80009b6:	4665      	mov	r5, ip
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x28e>
 80009bc:	e0ad      	b.n	8000b1a <__aeabi_fsub+0x3ea>
 80009be:	1e5e      	subs	r6, r3, #1
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fsub+0x296>
 80009c4:	e089      	b.n	8000ada <__aeabi_fsub+0x3aa>
 80009c6:	2bff      	cmp	r3, #255	@ 0xff
 80009c8:	d0c2      	beq.n	8000950 <__aeabi_fsub+0x220>
 80009ca:	2e1b      	cmp	r6, #27
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_fsub+0x2a0>
 80009ce:	e0ab      	b.n	8000b28 <__aeabi_fsub+0x3f8>
 80009d0:	1d4b      	adds	r3, r1, #5
 80009d2:	469c      	mov	ip, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	e721      	b.n	800081c <__aeabi_fsub+0xec>
 80009d8:	464b      	mov	r3, r9
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d170      	bne.n	8000ac0 <__aeabi_fsub+0x390>
 80009de:	22fe      	movs	r2, #254	@ 0xfe
 80009e0:	1c6b      	adds	r3, r5, #1
 80009e2:	421a      	tst	r2, r3
 80009e4:	d15e      	bne.n	8000aa4 <__aeabi_fsub+0x374>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 80009ea:	e0c3      	b.n	8000b74 <__aeabi_fsub+0x444>
 80009ec:	4663      	mov	r3, ip
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x2c4>
 80009f2:	e0d0      	b.n	8000b96 <__aeabi_fsub+0x466>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0x2ca>
 80009f8:	e094      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 80009fa:	000a      	movs	r2, r1
 80009fc:	4462      	add	r2, ip
 80009fe:	0153      	lsls	r3, r2, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fsub+0x2d4>
 8000a02:	e0d8      	b.n	8000bb6 <__aeabi_fsub+0x486>
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	2001      	movs	r0, #1
 8000a08:	0a52      	lsrs	r2, r2, #9
 8000a0a:	e6ed      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000a0c:	0008      	movs	r0, r1
 8000a0e:	2220      	movs	r2, #32
 8000a10:	40d8      	lsrs	r0, r3
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4099      	lsls	r1, r3
 8000a16:	000b      	movs	r3, r1
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4193      	sbcs	r3, r2
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	449c      	add	ip, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	015b      	lsls	r3, r3, #5
 8000a24:	d589      	bpl.n	800093a <__aeabi_fsub+0x20a>
 8000a26:	3501      	adds	r5, #1
 8000a28:	2dff      	cmp	r5, #255	@ 0xff
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x2fe>
 8000a2c:	e6da      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000a2e:	4662      	mov	r2, ip
 8000a30:	2301      	movs	r3, #1
 8000a32:	4919      	ldr	r1, [pc, #100]	@ (8000a98 <__aeabi_fsub+0x368>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	0852      	lsrs	r2, r2, #1
 8000a38:	400a      	ands	r2, r1
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	4694      	mov	ip, r2
 8000a40:	075b      	lsls	r3, r3, #29
 8000a42:	d004      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a44:	230f      	movs	r3, #15
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a4c:	e6bf      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	015b      	lsls	r3, r3, #5
 8000a52:	d500      	bpl.n	8000a56 <__aeabi_fsub+0x326>
 8000a54:	e6c2      	b.n	80007dc <__aeabi_fsub+0xac>
 8000a56:	4663      	mov	r3, ip
 8000a58:	08df      	lsrs	r7, r3, #3
 8000a5a:	002b      	movs	r3, r5
 8000a5c:	e6e3      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000a5e:	1b53      	subs	r3, r2, r5
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x336>
 8000a64:	e6f4      	b.n	8000850 <__aeabi_fsub+0x120>
 8000a66:	2080      	movs	r0, #128	@ 0x80
 8000a68:	4664      	mov	r4, ip
 8000a6a:	04c0      	lsls	r0, r0, #19
 8000a6c:	4304      	orrs	r4, r0
 8000a6e:	46a4      	mov	ip, r4
 8000a70:	0034      	movs	r4, r6
 8000a72:	2001      	movs	r0, #1
 8000a74:	2b1b      	cmp	r3, #27
 8000a76:	dc09      	bgt.n	8000a8c <__aeabi_fsub+0x35c>
 8000a78:	2520      	movs	r5, #32
 8000a7a:	4660      	mov	r0, ip
 8000a7c:	40d8      	lsrs	r0, r3
 8000a7e:	1aeb      	subs	r3, r5, r3
 8000a80:	4665      	mov	r5, ip
 8000a82:	409d      	lsls	r5, r3
 8000a84:	002b      	movs	r3, r5
 8000a86:	1e5d      	subs	r5, r3, #1
 8000a88:	41ab      	sbcs	r3, r5
 8000a8a:	4318      	orrs	r0, r3
 8000a8c:	1a0b      	subs	r3, r1, r0
 8000a8e:	469c      	mov	ip, r3
 8000a90:	0015      	movs	r5, r2
 8000a92:	e680      	b.n	8000796 <__aeabi_fsub+0x66>
 8000a94:	fbffffff 	.word	0xfbffffff
 8000a98:	7dffffff 	.word	0x7dffffff
 8000a9c:	22fe      	movs	r2, #254	@ 0xfe
 8000a9e:	1c6b      	adds	r3, r5, #1
 8000aa0:	4213      	tst	r3, r2
 8000aa2:	d0a3      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 8000aa4:	2bff      	cmp	r3, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x37a>
 8000aa8:	e69c      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000aaa:	4461      	add	r1, ip
 8000aac:	0849      	lsrs	r1, r1, #1
 8000aae:	074a      	lsls	r2, r1, #29
 8000ab0:	d049      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	2a04      	cmp	r2, #4
 8000ab8:	d045      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000aba:	1d0a      	adds	r2, r1, #4
 8000abc:	4694      	mov	ip, r2
 8000abe:	e6ad      	b.n	800081c <__aeabi_fsub+0xec>
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x396>
 8000ac4:	e776      	b.n	80009b4 <__aeabi_fsub+0x284>
 8000ac6:	e68d      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000ac8:	0034      	movs	r4, r6
 8000aca:	20ff      	movs	r0, #255	@ 0xff
 8000acc:	2200      	movs	r2, #0
 8000ace:	e68b      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000ad0:	4663      	mov	r3, ip
 8000ad2:	2401      	movs	r4, #1
 8000ad4:	1acf      	subs	r7, r1, r3
 8000ad6:	4034      	ands	r4, r6
 8000ad8:	e664      	b.n	80007a4 <__aeabi_fsub+0x74>
 8000ada:	4461      	add	r1, ip
 8000adc:	014b      	lsls	r3, r1, #5
 8000ade:	d56d      	bpl.n	8000bbc <__aeabi_fsub+0x48c>
 8000ae0:	0848      	lsrs	r0, r1, #1
 8000ae2:	4944      	ldr	r1, [pc, #272]	@ (8000bf4 <__aeabi_fsub+0x4c4>)
 8000ae4:	4001      	ands	r1, r0
 8000ae6:	0743      	lsls	r3, r0, #29
 8000ae8:	d02c      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000aea:	230f      	movs	r3, #15
 8000aec:	4003      	ands	r3, r0
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d028      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000af2:	1d0b      	adds	r3, r1, #4
 8000af4:	469c      	mov	ip, r3
 8000af6:	2302      	movs	r3, #2
 8000af8:	e690      	b.n	800081c <__aeabi_fsub+0xec>
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x3d0>
 8000afe:	e72b      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	03db      	lsls	r3, r3, #15
 8000b04:	429f      	cmp	r7, r3
 8000b06:	d200      	bcs.n	8000b0a <__aeabi_fsub+0x3da>
 8000b08:	e726      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d300      	bcc.n	8000b10 <__aeabi_fsub+0x3e0>
 8000b0e:	e723      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b10:	2401      	movs	r4, #1
 8000b12:	4034      	ands	r4, r6
 8000b14:	0007      	movs	r7, r0
 8000b16:	e71f      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b18:	0034      	movs	r4, r6
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	e67e      	b.n	800081c <__aeabi_fsub+0xec>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	08cf      	lsrs	r7, r1, #3
 8000b22:	e680      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b24:	2300      	movs	r3, #0
 8000b26:	e67e      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b28:	2020      	movs	r0, #32
 8000b2a:	4665      	mov	r5, ip
 8000b2c:	1b80      	subs	r0, r0, r6
 8000b2e:	4085      	lsls	r5, r0
 8000b30:	4663      	mov	r3, ip
 8000b32:	0028      	movs	r0, r5
 8000b34:	40f3      	lsrs	r3, r6
 8000b36:	1e45      	subs	r5, r0, #1
 8000b38:	41a8      	sbcs	r0, r5
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	0015      	movs	r5, r2
 8000b40:	448c      	add	ip, r1
 8000b42:	e76d      	b.n	8000a20 <__aeabi_fsub+0x2f0>
 8000b44:	2302      	movs	r3, #2
 8000b46:	08cf      	lsrs	r7, r1, #3
 8000b48:	e66d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b4a:	1b0f      	subs	r7, r1, r4
 8000b4c:	017b      	lsls	r3, r7, #5
 8000b4e:	d528      	bpl.n	8000ba2 <__aeabi_fsub+0x472>
 8000b50:	01bf      	lsls	r7, r7, #6
 8000b52:	09bf      	lsrs	r7, r7, #6
 8000b54:	0038      	movs	r0, r7
 8000b56:	f000 f93f 	bl	8000dd8 <__clzsi2>
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	0034      	movs	r4, r6
 8000b62:	2501      	movs	r5, #1
 8000b64:	e6ca      	b.n	80008fc <__aeabi_fsub+0x1cc>
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x43c>
 8000b6a:	e6b5      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000b6c:	2401      	movs	r4, #1
 8000b6e:	0007      	movs	r7, r0
 8000b70:	4034      	ands	r4, r6
 8000b72:	e658      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b74:	4663      	mov	r3, ip
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x44c>
 8000b7a:	e6e9      	b.n	8000950 <__aeabi_fsub+0x220>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fsub+0x452>
 8000b80:	e6ea      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	03db      	lsls	r3, r3, #15
 8000b86:	429f      	cmp	r7, r3
 8000b88:	d200      	bcs.n	8000b8c <__aeabi_fsub+0x45c>
 8000b8a:	e6e5      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b8c:	4298      	cmp	r0, r3
 8000b8e:	d300      	bcc.n	8000b92 <__aeabi_fsub+0x462>
 8000b90:	e6e2      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b92:	0007      	movs	r7, r0
 8000b94:	e6e0      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x46c>
 8000b9a:	e69e      	b.n	80008da <__aeabi_fsub+0x1aa>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	08cf      	lsrs	r7, r1, #3
 8000ba0:	e641      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000ba2:	0034      	movs	r4, r6
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	08ff      	lsrs	r7, r7, #3
 8000ba8:	e63d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000baa:	2f00      	cmp	r7, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x480>
 8000bae:	e693      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e637      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	08d7      	lsrs	r7, r2, #3
 8000bba:	e634      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	08cf      	lsrs	r7, r1, #3
 8000bc0:	e631      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	000b      	movs	r3, r1
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	4211      	tst	r1, r2
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fsub+0x4a2>
 8000bd0:	e6ae      	b.n	8000930 <__aeabi_fsub+0x200>
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e627      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_fsub+0x4ac>
 8000bda:	e75f      	b.n	8000a9c <__aeabi_fsub+0x36c>
 8000bdc:	1b56      	subs	r6, r2, r5
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d101      	bne.n	8000be6 <__aeabi_fsub+0x4b6>
 8000be2:	0033      	movs	r3, r6
 8000be4:	e6e7      	b.n	80009b6 <__aeabi_fsub+0x286>
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	4660      	mov	r0, ip
 8000bea:	04db      	lsls	r3, r3, #19
 8000bec:	4318      	orrs	r0, r3
 8000bee:	4684      	mov	ip, r0
 8000bf0:	e6eb      	b.n	80009ca <__aeabi_fsub+0x29a>
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	7dffffff 	.word	0x7dffffff

08000bf8 <__aeabi_f2iz>:
 8000bf8:	0241      	lsls	r1, r0, #9
 8000bfa:	0042      	lsls	r2, r0, #1
 8000bfc:	0fc3      	lsrs	r3, r0, #31
 8000bfe:	0a49      	lsrs	r1, r1, #9
 8000c00:	2000      	movs	r0, #0
 8000c02:	0e12      	lsrs	r2, r2, #24
 8000c04:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c06:	dd03      	ble.n	8000c10 <__aeabi_f2iz+0x18>
 8000c08:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c0a:	dd02      	ble.n	8000c12 <__aeabi_f2iz+0x1a>
 8000c0c:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <__aeabi_f2iz+0x3c>)
 8000c0e:	1898      	adds	r0, r3, r2
 8000c10:	4770      	bx	lr
 8000c12:	2080      	movs	r0, #128	@ 0x80
 8000c14:	0400      	lsls	r0, r0, #16
 8000c16:	4301      	orrs	r1, r0
 8000c18:	2a95      	cmp	r2, #149	@ 0x95
 8000c1a:	dc07      	bgt.n	8000c2c <__aeabi_f2iz+0x34>
 8000c1c:	2096      	movs	r0, #150	@ 0x96
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	40d1      	lsrs	r1, r2
 8000c22:	4248      	negs	r0, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f3      	bne.n	8000c10 <__aeabi_f2iz+0x18>
 8000c28:	0008      	movs	r0, r1
 8000c2a:	e7f1      	b.n	8000c10 <__aeabi_f2iz+0x18>
 8000c2c:	3a96      	subs	r2, #150	@ 0x96
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	e7f7      	b.n	8000c22 <__aeabi_f2iz+0x2a>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	7fffffff 	.word	0x7fffffff

08000c38 <__aeabi_i2f>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d012      	beq.n	8000c64 <__aeabi_i2f+0x2c>
 8000c3e:	17c3      	asrs	r3, r0, #31
 8000c40:	18c5      	adds	r5, r0, r3
 8000c42:	405d      	eors	r5, r3
 8000c44:	0fc4      	lsrs	r4, r0, #31
 8000c46:	0028      	movs	r0, r5
 8000c48:	f000 f8c6 	bl	8000dd8 <__clzsi2>
 8000c4c:	239e      	movs	r3, #158	@ 0x9e
 8000c4e:	1a1b      	subs	r3, r3, r0
 8000c50:	2b96      	cmp	r3, #150	@ 0x96
 8000c52:	dc0f      	bgt.n	8000c74 <__aeabi_i2f+0x3c>
 8000c54:	2808      	cmp	r0, #8
 8000c56:	d038      	beq.n	8000cca <__aeabi_i2f+0x92>
 8000c58:	3808      	subs	r0, #8
 8000c5a:	4085      	lsls	r5, r0
 8000c5c:	026d      	lsls	r5, r5, #9
 8000c5e:	0a6d      	lsrs	r5, r5, #9
 8000c60:	b2d8      	uxtb	r0, r3
 8000c62:	e002      	b.n	8000c6a <__aeabi_i2f+0x32>
 8000c64:	2400      	movs	r4, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	2500      	movs	r5, #0
 8000c6a:	05c0      	lsls	r0, r0, #23
 8000c6c:	4328      	orrs	r0, r5
 8000c6e:	07e4      	lsls	r4, r4, #31
 8000c70:	4320      	orrs	r0, r4
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	2b99      	cmp	r3, #153	@ 0x99
 8000c76:	dc14      	bgt.n	8000ca2 <__aeabi_i2f+0x6a>
 8000c78:	1f42      	subs	r2, r0, #5
 8000c7a:	4095      	lsls	r5, r2
 8000c7c:	002a      	movs	r2, r5
 8000c7e:	4915      	ldr	r1, [pc, #84]	@ (8000cd4 <__aeabi_i2f+0x9c>)
 8000c80:	4011      	ands	r1, r2
 8000c82:	0755      	lsls	r5, r2, #29
 8000c84:	d01c      	beq.n	8000cc0 <__aeabi_i2f+0x88>
 8000c86:	250f      	movs	r5, #15
 8000c88:	402a      	ands	r2, r5
 8000c8a:	2a04      	cmp	r2, #4
 8000c8c:	d018      	beq.n	8000cc0 <__aeabi_i2f+0x88>
 8000c8e:	3104      	adds	r1, #4
 8000c90:	08ca      	lsrs	r2, r1, #3
 8000c92:	0149      	lsls	r1, r1, #5
 8000c94:	d515      	bpl.n	8000cc2 <__aeabi_i2f+0x8a>
 8000c96:	239f      	movs	r3, #159	@ 0x9f
 8000c98:	0252      	lsls	r2, r2, #9
 8000c9a:	1a18      	subs	r0, r3, r0
 8000c9c:	0a55      	lsrs	r5, r2, #9
 8000c9e:	b2c0      	uxtb	r0, r0
 8000ca0:	e7e3      	b.n	8000c6a <__aeabi_i2f+0x32>
 8000ca2:	2205      	movs	r2, #5
 8000ca4:	0029      	movs	r1, r5
 8000ca6:	1a12      	subs	r2, r2, r0
 8000ca8:	40d1      	lsrs	r1, r2
 8000caa:	0002      	movs	r2, r0
 8000cac:	321b      	adds	r2, #27
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	002a      	movs	r2, r5
 8000cb2:	1e55      	subs	r5, r2, #1
 8000cb4:	41aa      	sbcs	r2, r5
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	4906      	ldr	r1, [pc, #24]	@ (8000cd4 <__aeabi_i2f+0x9c>)
 8000cba:	4011      	ands	r1, r2
 8000cbc:	0755      	lsls	r5, r2, #29
 8000cbe:	d1e2      	bne.n	8000c86 <__aeabi_i2f+0x4e>
 8000cc0:	08ca      	lsrs	r2, r1, #3
 8000cc2:	0252      	lsls	r2, r2, #9
 8000cc4:	0a55      	lsrs	r5, r2, #9
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	e7cf      	b.n	8000c6a <__aeabi_i2f+0x32>
 8000cca:	026d      	lsls	r5, r5, #9
 8000ccc:	0a6d      	lsrs	r5, r5, #9
 8000cce:	308e      	adds	r0, #142	@ 0x8e
 8000cd0:	e7cb      	b.n	8000c6a <__aeabi_i2f+0x32>
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	fbffffff 	.word	0xfbffffff

08000cd8 <__aeabi_ui2f>:
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	1e04      	subs	r4, r0, #0
 8000cdc:	d00d      	beq.n	8000cfa <__aeabi_ui2f+0x22>
 8000cde:	f000 f87b 	bl	8000dd8 <__clzsi2>
 8000ce2:	239e      	movs	r3, #158	@ 0x9e
 8000ce4:	1a1b      	subs	r3, r3, r0
 8000ce6:	2b96      	cmp	r3, #150	@ 0x96
 8000ce8:	dc0c      	bgt.n	8000d04 <__aeabi_ui2f+0x2c>
 8000cea:	2808      	cmp	r0, #8
 8000cec:	d034      	beq.n	8000d58 <__aeabi_ui2f+0x80>
 8000cee:	3808      	subs	r0, #8
 8000cf0:	4084      	lsls	r4, r0
 8000cf2:	0264      	lsls	r4, r4, #9
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	b2d8      	uxtb	r0, r3
 8000cf8:	e001      	b.n	8000cfe <__aeabi_ui2f+0x26>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	05c0      	lsls	r0, r0, #23
 8000d00:	4320      	orrs	r0, r4
 8000d02:	bd10      	pop	{r4, pc}
 8000d04:	2b99      	cmp	r3, #153	@ 0x99
 8000d06:	dc13      	bgt.n	8000d30 <__aeabi_ui2f+0x58>
 8000d08:	1f42      	subs	r2, r0, #5
 8000d0a:	4094      	lsls	r4, r2
 8000d0c:	4a14      	ldr	r2, [pc, #80]	@ (8000d60 <__aeabi_ui2f+0x88>)
 8000d0e:	4022      	ands	r2, r4
 8000d10:	0761      	lsls	r1, r4, #29
 8000d12:	d01c      	beq.n	8000d4e <__aeabi_ui2f+0x76>
 8000d14:	210f      	movs	r1, #15
 8000d16:	4021      	ands	r1, r4
 8000d18:	2904      	cmp	r1, #4
 8000d1a:	d018      	beq.n	8000d4e <__aeabi_ui2f+0x76>
 8000d1c:	3204      	adds	r2, #4
 8000d1e:	08d4      	lsrs	r4, r2, #3
 8000d20:	0152      	lsls	r2, r2, #5
 8000d22:	d515      	bpl.n	8000d50 <__aeabi_ui2f+0x78>
 8000d24:	239f      	movs	r3, #159	@ 0x9f
 8000d26:	0264      	lsls	r4, r4, #9
 8000d28:	1a18      	subs	r0, r3, r0
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	b2c0      	uxtb	r0, r0
 8000d2e:	e7e6      	b.n	8000cfe <__aeabi_ui2f+0x26>
 8000d30:	0002      	movs	r2, r0
 8000d32:	0021      	movs	r1, r4
 8000d34:	321b      	adds	r2, #27
 8000d36:	4091      	lsls	r1, r2
 8000d38:	000a      	movs	r2, r1
 8000d3a:	1e51      	subs	r1, r2, #1
 8000d3c:	418a      	sbcs	r2, r1
 8000d3e:	2105      	movs	r1, #5
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	40cc      	lsrs	r4, r1
 8000d44:	4314      	orrs	r4, r2
 8000d46:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <__aeabi_ui2f+0x88>)
 8000d48:	4022      	ands	r2, r4
 8000d4a:	0761      	lsls	r1, r4, #29
 8000d4c:	d1e2      	bne.n	8000d14 <__aeabi_ui2f+0x3c>
 8000d4e:	08d4      	lsrs	r4, r2, #3
 8000d50:	0264      	lsls	r4, r4, #9
 8000d52:	0a64      	lsrs	r4, r4, #9
 8000d54:	b2d8      	uxtb	r0, r3
 8000d56:	e7d2      	b.n	8000cfe <__aeabi_ui2f+0x26>
 8000d58:	0264      	lsls	r4, r4, #9
 8000d5a:	0a64      	lsrs	r4, r4, #9
 8000d5c:	308e      	adds	r0, #142	@ 0x8e
 8000d5e:	e7ce      	b.n	8000cfe <__aeabi_ui2f+0x26>
 8000d60:	fbffffff 	.word	0xfbffffff

08000d64 <__aeabi_cfrcmple>:
 8000d64:	4684      	mov	ip, r0
 8000d66:	0008      	movs	r0, r1
 8000d68:	4661      	mov	r1, ip
 8000d6a:	e7ff      	b.n	8000d6c <__aeabi_cfcmpeq>

08000d6c <__aeabi_cfcmpeq>:
 8000d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d6e:	f000 f8c1 	bl	8000ef4 <__lesf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d401      	bmi.n	8000d7a <__aeabi_cfcmpeq+0xe>
 8000d76:	2100      	movs	r1, #0
 8000d78:	42c8      	cmn	r0, r1
 8000d7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d7c <__aeabi_fcmpeq>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	f000 f849 	bl	8000e14 <__eqsf2>
 8000d82:	4240      	negs	r0, r0
 8000d84:	3001      	adds	r0, #1
 8000d86:	bd10      	pop	{r4, pc}

08000d88 <__aeabi_fcmplt>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f8b3 	bl	8000ef4 <__lesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	db01      	blt.n	8000d96 <__aeabi_fcmplt+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)

08000d9c <__aeabi_fcmple>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	f000 f8a9 	bl	8000ef4 <__lesf2>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	dd01      	ble.n	8000daa <__aeabi_fcmple+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2001      	movs	r0, #1
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)

08000db0 <__aeabi_fcmpgt>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	f000 f857 	bl	8000e64 <__gesf2>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	dc01      	bgt.n	8000dbe <__aeabi_fcmpgt+0xe>
 8000dba:	2000      	movs	r0, #0
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	bd10      	pop	{r4, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)

08000dc4 <__aeabi_fcmpge>:
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	f000 f84d 	bl	8000e64 <__gesf2>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	da01      	bge.n	8000dd2 <__aeabi_fcmpge+0xe>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)

08000dd8 <__clzsi2>:
 8000dd8:	211c      	movs	r1, #28
 8000dda:	2301      	movs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d301      	bcc.n	8000de6 <__clzsi2+0xe>
 8000de2:	0c00      	lsrs	r0, r0, #16
 8000de4:	3910      	subs	r1, #16
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d301      	bcc.n	8000df0 <__clzsi2+0x18>
 8000dec:	0a00      	lsrs	r0, r0, #8
 8000dee:	3908      	subs	r1, #8
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d301      	bcc.n	8000dfa <__clzsi2+0x22>
 8000df6:	0900      	lsrs	r0, r0, #4
 8000df8:	3904      	subs	r1, #4
 8000dfa:	a202      	add	r2, pc, #8	@ (adr r2, 8000e04 <__clzsi2+0x2c>)
 8000dfc:	5c10      	ldrb	r0, [r2, r0]
 8000dfe:	1840      	adds	r0, r0, r1
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	02020304 	.word	0x02020304
 8000e08:	01010101 	.word	0x01010101
	...

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d018      	beq.n	8000eb0 <__gesf2+0x4c>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00a      	beq.n	8000e98 <__gesf2+0x34>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10a      	bne.n	8000ea0 <__gesf2+0x3c>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d029      	beq.n	8000ee2 <__gesf2+0x7e>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d12d      	bne.n	8000eee <__gesf2+0x8a>
 8000e92:	0048      	lsls	r0, r1, #1
 8000e94:	3801      	subs	r0, #1
 8000e96:	bd30      	pop	{r4, r5, pc}
 8000e98:	2d00      	cmp	r5, #0
 8000e9a:	d125      	bne.n	8000ee8 <__gesf2+0x84>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d101      	bne.n	8000ea4 <__gesf2+0x40>
 8000ea0:	2c00      	cmp	r4, #0
 8000ea2:	d0f6      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d019      	beq.n	8000edc <__gesf2+0x78>
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	425b      	negs	r3, r3
 8000eac:	4318      	orrs	r0, r3
 8000eae:	e7f2      	b.n	8000e96 <__gesf2+0x32>
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d119      	bne.n	8000ee8 <__gesf2+0x84>
 8000eb4:	28ff      	cmp	r0, #255	@ 0xff
 8000eb6:	d1f7      	bne.n	8000ea8 <__gesf2+0x44>
 8000eb8:	2d00      	cmp	r5, #0
 8000eba:	d115      	bne.n	8000ee8 <__gesf2+0x84>
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d1f2      	bne.n	8000ea8 <__gesf2+0x44>
 8000ec2:	e7e8      	b.n	8000e96 <__gesf2+0x32>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0ef      	beq.n	8000ea8 <__gesf2+0x44>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1ed      	bne.n	8000ea8 <__gesf2+0x44>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dceb      	bgt.n	8000ea8 <__gesf2+0x44>
 8000ed0:	db04      	blt.n	8000edc <__gesf2+0x78>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8e8      	bhi.n	8000ea8 <__gesf2+0x44>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dc      	bcs.n	8000e96 <__gesf2+0x32>
 8000edc:	0058      	lsls	r0, r3, #1
 8000ede:	3801      	subs	r0, #1
 8000ee0:	e7d9      	b.n	8000e96 <__gesf2+0x32>
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d0d7      	beq.n	8000e96 <__gesf2+0x32>
 8000ee6:	e7df      	b.n	8000ea8 <__gesf2+0x44>
 8000ee8:	2002      	movs	r0, #2
 8000eea:	4240      	negs	r0, r0
 8000eec:	e7d3      	b.n	8000e96 <__gesf2+0x32>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d1da      	bne.n	8000ea8 <__gesf2+0x44>
 8000ef2:	e7ee      	b.n	8000ed2 <__gesf2+0x6e>

08000ef4 <__lesf2>:
 8000ef4:	b530      	push	{r4, r5, lr}
 8000ef6:	0042      	lsls	r2, r0, #1
 8000ef8:	0244      	lsls	r4, r0, #9
 8000efa:	024d      	lsls	r5, r1, #9
 8000efc:	0fc3      	lsrs	r3, r0, #31
 8000efe:	0048      	lsls	r0, r1, #1
 8000f00:	0a64      	lsrs	r4, r4, #9
 8000f02:	0e12      	lsrs	r2, r2, #24
 8000f04:	0a6d      	lsrs	r5, r5, #9
 8000f06:	0e00      	lsrs	r0, r0, #24
 8000f08:	0fc9      	lsrs	r1, r1, #31
 8000f0a:	2aff      	cmp	r2, #255	@ 0xff
 8000f0c:	d017      	beq.n	8000f3e <__lesf2+0x4a>
 8000f0e:	28ff      	cmp	r0, #255	@ 0xff
 8000f10:	d00a      	beq.n	8000f28 <__lesf2+0x34>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d11b      	bne.n	8000f4e <__lesf2+0x5a>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d10a      	bne.n	8000f30 <__lesf2+0x3c>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d01d      	beq.n	8000f5a <__lesf2+0x66>
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	d12d      	bne.n	8000f7e <__lesf2+0x8a>
 8000f22:	0048      	lsls	r0, r1, #1
 8000f24:	3801      	subs	r0, #1
 8000f26:	e011      	b.n	8000f4c <__lesf2+0x58>
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	d10e      	bne.n	8000f4a <__lesf2+0x56>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d101      	bne.n	8000f34 <__lesf2+0x40>
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d0f6      	beq.n	8000f22 <__lesf2+0x2e>
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d10c      	bne.n	8000f52 <__lesf2+0x5e>
 8000f38:	0058      	lsls	r0, r3, #1
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e006      	b.n	8000f4c <__lesf2+0x58>
 8000f3e:	2c00      	cmp	r4, #0
 8000f40:	d103      	bne.n	8000f4a <__lesf2+0x56>
 8000f42:	28ff      	cmp	r0, #255	@ 0xff
 8000f44:	d105      	bne.n	8000f52 <__lesf2+0x5e>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d015      	beq.n	8000f76 <__lesf2+0x82>
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	bd30      	pop	{r4, r5, pc}
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d106      	bne.n	8000f60 <__lesf2+0x6c>
 8000f52:	2001      	movs	r0, #1
 8000f54:	425b      	negs	r3, r3
 8000f56:	4318      	orrs	r0, r3
 8000f58:	e7f8      	b.n	8000f4c <__lesf2+0x58>
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d0f6      	beq.n	8000f4c <__lesf2+0x58>
 8000f5e:	e7f8      	b.n	8000f52 <__lesf2+0x5e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d1f6      	bne.n	8000f52 <__lesf2+0x5e>
 8000f64:	4282      	cmp	r2, r0
 8000f66:	dcf4      	bgt.n	8000f52 <__lesf2+0x5e>
 8000f68:	dbe6      	blt.n	8000f38 <__lesf2+0x44>
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	d8f1      	bhi.n	8000f52 <__lesf2+0x5e>
 8000f6e:	2000      	movs	r0, #0
 8000f70:	42ac      	cmp	r4, r5
 8000f72:	d2eb      	bcs.n	8000f4c <__lesf2+0x58>
 8000f74:	e7e0      	b.n	8000f38 <__lesf2+0x44>
 8000f76:	2000      	movs	r0, #0
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	d1ea      	bne.n	8000f52 <__lesf2+0x5e>
 8000f7c:	e7e6      	b.n	8000f4c <__lesf2+0x58>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d1e7      	bne.n	8000f52 <__lesf2+0x5e>
 8000f82:	e7f2      	b.n	8000f6a <__lesf2+0x76>

08000f84 <can_irq>:
void SendEncoderFeedback(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void can_irq(CAN_HandleTypeDef *pcan) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/* Simply receive whatever message comes in */
	if (HAL_CAN_GetRxMessage(pcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <can_irq+0x28>)
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <can_irq+0x2c>)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	2100      	movs	r1, #0
 8000f94:	f001 fd34 	bl	8002a00 <HAL_CAN_GetRxMessage>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d102      	bne.n	8000fa2 <can_irq+0x1e>
		messageReceived = 1;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <can_irq+0x30>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
		// Check if the message is for Arm Control
//		if (rxHeader.StdId == angles_id) {
//			messageReceived = 1;
//		}
	}
}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	200000cc 	.word	0x200000cc
 8000fb0:	200000b0 	.word	0x200000b0
 8000fb4:	200000ac 	.word	0x200000ac

08000fb8 <GoToAngle>:
			+ output_min;

	return mapped_value;
}

int32_t GoToAngle(float angle, RoboClaw_HandleTypeDef *hroboClaw) {
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	uint8_t status;
	bool valid;

	encoder = ReadEncM2(hroboClaw, &status, &valid);
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	18fa      	adds	r2, r7, r3
 8000fc6:	210b      	movs	r1, #11
 8000fc8:	1879      	adds	r1, r7, r1
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f005 f823 	bl	8006018 <ReadEncM2>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <GoToAngle+0x88>)
 8000fd8:	601a      	str	r2, [r3, #0]
	float no_of_ticks = (angle / 360) * output_max;
 8000fda:	491a      	ldr	r1, [pc, #104]	@ (8001044 <GoToAngle+0x8c>)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f937 	bl	8000250 <__aeabi_fdiv>
 8000fe2:	1c03      	adds	r3, r0, #0
 8000fe4:	1c1c      	adds	r4, r3, #0
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <GoToAngle+0x90>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fe24 	bl	8000c38 <__aeabi_i2f>
 8000ff0:	1c03      	adds	r3, r0, #0
 8000ff2:	1c19      	adds	r1, r3, #0
 8000ff4:	1c20      	adds	r0, r4, #0
 8000ff6:	f7ff fa41 	bl	800047c <__aeabi_fmul>
 8000ffa:	1c03      	adds	r3, r0, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	SpeedAccelDeccelPositionM2(hroboClaw, accel, speed, deccel, no_of_ticks,
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <GoToAngle+0x94>)
 8001000:	681c      	ldr	r4, [r3, #0]
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <GoToAngle+0x98>)
 8001004:	681d      	ldr	r5, [r3, #0]
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <GoToAngle+0x9c>)
 8001008:	681e      	ldr	r6, [r3, #0]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff f908 	bl	8000220 <__aeabi_f2uiz>
 8001010:	0002      	movs	r2, r0
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <GoToAngle+0xa0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	9200      	str	r2, [sp, #0]
 800101c:	0033      	movs	r3, r6
 800101e:	002a      	movs	r2, r5
 8001020:	0021      	movs	r1, r4
 8001022:	f004 ff7d 	bl	8005f20 <SpeedAccelDeccelPositionM2>
			flag);

	return ReadEncM2(hroboClaw, &status, &valid);
 8001026:	230a      	movs	r3, #10
 8001028:	18fa      	adds	r2, r7, r3
 800102a:	210b      	movs	r1, #11
 800102c:	1879      	adds	r1, r7, r1
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	0018      	movs	r0, r3
 8001032:	f004 fff1 	bl	8006018 <ReadEncM2>
 8001036:	0003      	movs	r3, r0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b005      	add	sp, #20
 800103e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001040:	20000110 	.word	0x20000110
 8001044:	43b40000 	.word	0x43b40000
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20000000 	.word	0x20000000
 8001050:	20000004 	.word	0x20000004
 8001054:	20000008 	.word	0x20000008
 8001058:	20000114 	.word	0x20000114

0800105c <processArmControlData>:

void processArmControlData(uint8_t *data) {
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b08f      	sub	sp, #60	@ 0x3c
 8001060:	af00      	add	r7, sp, #0
 8001062:	62f8      	str	r0, [r7, #44]	@ 0x2c
	packed = 0;
 8001064:	4951      	ldr	r1, [pc, #324]	@ (80011ac <processArmControlData+0x150>)
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	600a      	str	r2, [r1, #0]
 800106c:	604b      	str	r3, [r1, #4]
	// Combine all 8 bytes into a 64-bit integer

	for (int i = 0; i < 8; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
 8001072:	e02d      	b.n	80010d0 <processArmControlData+0x74>
		packed |= ((uint64_t) data[i]) << (8 * i);
 8001074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001078:	189b      	adds	r3, r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001084:	00da      	lsls	r2, r3, #3
 8001086:	0013      	movs	r3, r2
 8001088:	3b20      	subs	r3, #32
 800108a:	2b00      	cmp	r3, #0
 800108c:	db03      	blt.n	8001096 <processArmControlData+0x3a>
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	4099      	lsls	r1, r3
 8001092:	000d      	movs	r5, r1
 8001094:	e009      	b.n	80010aa <processArmControlData+0x4e>
 8001096:	2320      	movs	r3, #32
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	69b8      	ldr	r0, [r7, #24]
 800109c:	69f9      	ldr	r1, [r7, #28]
 800109e:	0006      	movs	r6, r0
 80010a0:	40de      	lsrs	r6, r3
 80010a2:	0033      	movs	r3, r6
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000d      	movs	r5, r1
 80010a8:	431d      	orrs	r5, r3
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4093      	lsls	r3, r2
 80010ae:	001c      	movs	r4, r3
 80010b0:	4b3e      	ldr	r3, [pc, #248]	@ (80011ac <processArmControlData+0x150>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	0021      	movs	r1, r4
 80010b8:	4311      	orrs	r1, r2
 80010ba:	6139      	str	r1, [r7, #16]
 80010bc:	432b      	orrs	r3, r5
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <processArmControlData+0x150>)
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	6019      	str	r1, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 8; i++) {
 80010ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010cc:	3301      	adds	r3, #1
 80010ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80010d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	ddce      	ble.n	8001074 <processArmControlData+0x18>
	}

	// Extract each 10-bit joint value
	for (int j = 0; j < 6; j++) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80010da:	e03e      	b.n	800115a <processArmControlData+0xfe>
		joint[j] = (packed >> (j * 10)) & 0x3FF; // 0x3FF = 10-bit mask
 80010dc:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <processArmControlData+0x150>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010e4:	0001      	movs	r1, r0
 80010e6:	0089      	lsls	r1, r1, #2
 80010e8:	1809      	adds	r1, r1, r0
 80010ea:	0049      	lsls	r1, r1, #1
 80010ec:	0008      	movs	r0, r1
 80010ee:	3820      	subs	r0, #32
 80010f0:	2800      	cmp	r0, #0
 80010f2:	db03      	blt.n	80010fc <processArmControlData+0xa0>
 80010f4:	001c      	movs	r4, r3
 80010f6:	40c4      	lsrs	r4, r0
 80010f8:	623c      	str	r4, [r7, #32]
 80010fa:	e00a      	b.n	8001112 <processArmControlData+0xb6>
 80010fc:	2020      	movs	r0, #32
 80010fe:	1a40      	subs	r0, r0, r1
 8001100:	001c      	movs	r4, r3
 8001102:	4084      	lsls	r4, r0
 8001104:	0020      	movs	r0, r4
 8001106:	0014      	movs	r4, r2
 8001108:	40cc      	lsrs	r4, r1
 800110a:	623c      	str	r4, [r7, #32]
 800110c:	6a3c      	ldr	r4, [r7, #32]
 800110e:	4304      	orrs	r4, r0
 8001110:	623c      	str	r4, [r7, #32]
 8001112:	40cb      	lsrs	r3, r1
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
 8001116:	8c3b      	ldrh	r3, [r7, #32]
 8001118:	059b      	lsls	r3, r3, #22
 800111a:	0d9b      	lsrs	r3, r3, #22
 800111c:	b299      	uxth	r1, r3
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <processArmControlData+0x154>)
 8001120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001122:	0052      	lsls	r2, r2, #1
 8001124:	52d1      	strh	r1, [r2, r3]
		// Now you have joint[0]..joint[5] as raw values (0–1023)
		angle_deg[j] = ((float) joint[j] / 1023.0f) * 360.0f; // Example: map to 0–360°
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <processArmControlData+0x154>)
 8001128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800112a:	0052      	lsls	r2, r2, #1
 800112c:	5ad3      	ldrh	r3, [r2, r3]
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff fdd2 	bl	8000cd8 <__aeabi_ui2f>
 8001134:	1c03      	adds	r3, r0, #0
 8001136:	491f      	ldr	r1, [pc, #124]	@ (80011b4 <processArmControlData+0x158>)
 8001138:	1c18      	adds	r0, r3, #0
 800113a:	f7ff f889 	bl	8000250 <__aeabi_fdiv>
 800113e:	1c03      	adds	r3, r0, #0
 8001140:	491d      	ldr	r1, [pc, #116]	@ (80011b8 <processArmControlData+0x15c>)
 8001142:	1c18      	adds	r0, r3, #0
 8001144:	f7ff f99a 	bl	800047c <__aeabi_fmul>
 8001148:	1c03      	adds	r3, r0, #0
 800114a:	1c19      	adds	r1, r3, #0
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <processArmControlData+0x160>)
 800114e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	50d1      	str	r1, [r2, r3]
	for (int j = 0; j < 6; j++) {
 8001154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001156:	3301      	adds	r3, #1
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
 800115a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800115c:	2b05      	cmp	r3, #5
 800115e:	ddbd      	ble.n	80010dc <processArmControlData+0x80>
	}
	storage1 = (packed >> 61) & 0x1 ;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <processArmControlData+0x150>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	0f5b      	lsrs	r3, r3, #29
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	7a3b      	ldrb	r3, [r7, #8]
 8001170:	2201      	movs	r2, #1
 8001172:	4013      	ands	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <processArmControlData+0x164>)
 8001178:	701a      	strb	r2, [r3, #0]
	storage2 = (packed >> 62) & 0x1 ;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <processArmControlData+0x150>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	0f9b      	lsrs	r3, r3, #30
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	783b      	ldrb	r3, [r7, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	4013      	ands	r3, r2
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <processArmControlData+0x168>)
 8001192:	701a      	strb	r2, [r3, #0]
	GoToAngle(angle_deg[0],&hroboclaw_mc2);
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <processArmControlData+0x160>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <processArmControlData+0x16c>)
 800119a:	0011      	movs	r1, r2
 800119c:	1c18      	adds	r0, r3, #0
 800119e:	f7ff ff0b 	bl	8000fb8 <GoToAngle>




	return;
 80011a2:	46c0      	nop			@ (mov r8, r8)
}
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b00f      	add	sp, #60	@ 0x3c
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	20000118 	.word	0x20000118
 80011b0:	20000120 	.word	0x20000120
 80011b4:	447fc000 	.word	0x447fc000
 80011b8:	43b40000 	.word	0x43b40000
 80011bc:	2000012c 	.word	0x2000012c
 80011c0:	20000144 	.word	0x20000144
 80011c4:	20000145 	.word	0x20000145
 80011c8:	200000f0 	.word	0x200000f0

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
		uint8_t txData[] = "FuckCAN"; // Example data to send
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4a33      	ldr	r2, [pc, #204]	@ (80012a4 <main+0xd8>)
 80011d6:	ca03      	ldmia	r2!, {r0, r1}
 80011d8:	c303      	stmia	r3!, {r0, r1}
		uint32_t lastSendTime = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f000 fe0f 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f87b 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 fa73 	bl	80016d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ea:	f000 fa4b 	bl	8001684 <MX_DMA_Init>
  MX_CAN_Init();
 80011ee:	f000 f931 	bl	8001454 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80011f2:	f000 f9b7 	bl	8001564 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011f6:	f000 f9e5 	bl	80015c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80011fa:	f000 fa13 	bl	8001624 <MX_USART3_UART_Init>
  MX_ADC_Init();
 80011fe:	f000 f8cd 	bl	800139c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
	// MOTOR 1&2 -> ROBOCLAW 1
	hserial_uart1 = serial_init(&huart1);
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <main+0xdc>)
 8001204:	0018      	movs	r0, r3
 8001206:	f004 ff19 	bl	800603c <serial_init>
 800120a:	0002      	movs	r2, r0
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <main+0xe0>)
 800120e:	601a      	str	r2, [r3, #0]
	hroboclaw_mc1.hserial = hserial_uart1;
 8001210:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <main+0xe0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <main+0xe4>)
 8001216:	609a      	str	r2, [r3, #8]
	hroboclaw_mc1.packetserial_address = 0x80;
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <main+0xe4>)
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	731a      	strb	r2, [r3, #12]

	////MOTOR 3&4 -> ROBOCLAW 2
	hserial_uart2 = serial_init(&huart2);
 800121e:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <main+0xe8>)
 8001220:	0018      	movs	r0, r3
 8001222:	f004 ff0b 	bl	800603c <serial_init>
 8001226:	0002      	movs	r2, r0
 8001228:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <main+0xec>)
 800122a:	601a      	str	r2, [r3, #0]
	hroboclaw_mc2.hserial = hserial_uart2;
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <main+0xec>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <main+0xf0>)
 8001232:	609a      	str	r2, [r3, #8]
	hroboclaw_mc2.packetserial_address = 0x80;
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <main+0xf0>)
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	731a      	strb	r2, [r3, #12]
	//
	////MOTOR 5&6 -> ROBOCLAW 3
	hserial_uart3 = serial_init(&huart3);
 800123a:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <main+0xf4>)
 800123c:	0018      	movs	r0, r3
 800123e:	f004 fefd 	bl	800603c <serial_init>
 8001242:	0002      	movs	r2, r0
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <main+0xf8>)
 8001246:	601a      	str	r2, [r3, #0]
	hroboclaw_mc3.hserial = hserial_uart3;
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <main+0xf8>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <main+0xfc>)
 800124e:	609a      	str	r2, [r3, #8]
	hroboclaw_mc3.packetserial_address = 0x80;
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <main+0xfc>)
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // LED off
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	481c      	ldr	r0, [pc, #112]	@ (80012cc <main+0x100>)
 800125c:	2201      	movs	r2, #1
 800125e:	0019      	movs	r1, r3
 8001260:	f002 fbb8 	bl	80039d4 <HAL_GPIO_WritePin>
	//Homing position
	SpeedM1(&hroboclaw_mc2, 12000);	//Start
 8001264:	4a1a      	ldr	r2, [pc, #104]	@ (80012d0 <main+0x104>)
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <main+0xf0>)
 8001268:	0011      	movs	r1, r2
 800126a:	0018      	movs	r0, r3
 800126c:	f004 fe33 	bl	8005ed6 <SpeedM1>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// CAN message from High level

		if (messageReceived) {
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <main+0x108>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <main+0xca>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 800127a:	2380      	movs	r3, #128	@ 0x80
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <main+0x100>)
 8001280:	0019      	movs	r1, r3
 8001282:	0010      	movs	r0, r2
 8001284:	f002 fbc3 	bl	8003a0e <HAL_GPIO_TogglePin>
			messageReceived = 0;		// Clear flag
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <main+0x108>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
			processArmControlData(rxData);
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <main+0x10c>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fee3 	bl	800105c <processArmControlData>

//		if (HAL_GetTick() - lastS
		/* If message received, toggle LED */


		HAL_Delay(500);
 8001296:	23fa      	movs	r3, #250	@ 0xfa
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	0018      	movs	r0, r3
 800129c:	f000 fe14 	bl	8001ec8 <HAL_Delay>
	while (1) {
 80012a0:	e7e6      	b.n	8001270 <main+0xa4>
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	080065e0 	.word	0x080065e0
 80012a8:	200001ec 	.word	0x200001ec
 80012ac:	200000d4 	.word	0x200000d4
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	20000274 	.word	0x20000274
 80012b8:	200000d8 	.word	0x200000d8
 80012bc:	200000f0 	.word	0x200000f0
 80012c0:	200002fc 	.word	0x200002fc
 80012c4:	200000dc 	.word	0x200000dc
 80012c8:	20000100 	.word	0x20000100
 80012cc:	48000400 	.word	0x48000400
 80012d0:	00002ee0 	.word	0x00002ee0
 80012d4:	200000ac 	.word	0x200000ac
 80012d8:	200000cc 	.word	0x200000cc

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b099      	sub	sp, #100	@ 0x64
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	242c      	movs	r4, #44	@ 0x2c
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	0018      	movs	r0, r3
 80012e8:	2334      	movs	r3, #52	@ 0x34
 80012ea:	001a      	movs	r2, r3
 80012ec:	2100      	movs	r1, #0
 80012ee:	f005 f93e 	bl	800656e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f2:	231c      	movs	r3, #28
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	0018      	movs	r0, r3
 80012f8:	2310      	movs	r3, #16
 80012fa:	001a      	movs	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f005 f936 	bl	800656e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001302:	003b      	movs	r3, r7
 8001304:	0018      	movs	r0, r3
 8001306:	231c      	movs	r3, #28
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f005 f92f 	bl	800656e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001310:	0021      	movs	r1, r4
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2212      	movs	r2, #18
 8001316:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2201      	movs	r2, #1
 800131c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2201      	movs	r2, #1
 8001322:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2210      	movs	r2, #16
 8001328:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2210      	movs	r2, #16
 800132e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	187b      	adds	r3, r7, r1
 8001338:	0018      	movs	r0, r3
 800133a:	f002 fb83 	bl	8003a44 <HAL_RCC_OscConfig>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001342:	f000 fa11 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001346:	211c      	movs	r1, #28
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2207      	movs	r2, #7
 800134c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2100      	movs	r1, #0
 8001364:	0018      	movs	r0, r3
 8001366:	f002 fef3 	bl	8004150 <HAL_RCC_ClockConfig>
 800136a:	1e03      	subs	r3, r0, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800136e:	f000 f9fb 	bl	8001768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001372:	003b      	movs	r3, r7
 8001374:	2203      	movs	r2, #3
 8001376:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001378:	003b      	movs	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800137e:	003b      	movs	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	003b      	movs	r3, r7
 8001386:	0018      	movs	r0, r3
 8001388:	f003 f84e 	bl	8004428 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001390:	f000 f9ea 	bl	8001768 <Error_Handler>
  }
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b019      	add	sp, #100	@ 0x64
 800139a:	bd90      	pop	{r4, r7, pc}

0800139c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	0018      	movs	r0, r3
 80013a6:	230c      	movs	r3, #12
 80013a8:	001a      	movs	r2, r3
 80013aa:	2100      	movs	r1, #0
 80013ac:	f005 f8df 	bl	800656e <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013b0:	4b26      	ldr	r3, [pc, #152]	@ (800144c <MX_ADC_Init+0xb0>)
 80013b2:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <MX_ADC_Init+0xb4>)
 80013b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013b6:	4b25      	ldr	r3, [pc, #148]	@ (800144c <MX_ADC_Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013bc:	4b23      	ldr	r3, [pc, #140]	@ (800144c <MX_ADC_Init+0xb0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c2:	4b22      	ldr	r3, [pc, #136]	@ (800144c <MX_ADC_Init+0xb0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013c8:	4b20      	ldr	r3, [pc, #128]	@ (800144c <MX_ADC_Init+0xb0>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <MX_ADC_Init+0xb0>)
 80013d0:	2204      	movs	r2, #4
 80013d2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_ADC_Init+0xb0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <MX_ADC_Init+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_ADC_Init+0xb0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <MX_ADC_Init+0xb0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_ADC_Init+0xb0>)
 80013ee:	22c2      	movs	r2, #194	@ 0xc2
 80013f0:	32ff      	adds	r2, #255	@ 0xff
 80013f2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_ADC_Init+0xb0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_ADC_Init+0xb0>)
 80013fc:	2224      	movs	r2, #36	@ 0x24
 80013fe:	2100      	movs	r1, #0
 8001400:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_ADC_Init+0xb0>)
 8001404:	2201      	movs	r2, #1
 8001406:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <MX_ADC_Init+0xb0>)
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fd80 	bl	8001f10 <HAL_ADC_Init>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001414:	f000 f9a8 	bl	8001768 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2207      	movs	r2, #7
 800141c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	0152      	lsls	r2, r2, #5
 8001424:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	0552      	lsls	r2, r2, #21
 800142c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800142e:	1d3a      	adds	r2, r7, #4
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_ADC_Init+0xb0>)
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f000 feab 	bl	8002190 <HAL_ADC_ConfigChannel>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800143e:	f000 f993 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b004      	add	sp, #16
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	20000148 	.word	0x20000148
 8001450:	40012400 	.word	0x40012400

08001454 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800145a:	4b3e      	ldr	r3, [pc, #248]	@ (8001554 <MX_CAN_Init+0x100>)
 800145c:	4a3e      	ldr	r2, [pc, #248]	@ (8001558 <MX_CAN_Init+0x104>)
 800145e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8001460:	4b3c      	ldr	r3, [pc, #240]	@ (8001554 <MX_CAN_Init+0x100>)
 8001462:	2201      	movs	r2, #1
 8001464:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001466:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <MX_CAN_Init+0x100>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800146c:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <MX_CAN_Init+0x100>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001472:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <MX_CAN_Init+0x100>)
 8001474:	22c0      	movs	r2, #192	@ 0xc0
 8001476:	0312      	lsls	r2, r2, #12
 8001478:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800147a:	4b36      	ldr	r3, [pc, #216]	@ (8001554 <MX_CAN_Init+0x100>)
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	0352      	lsls	r2, r2, #13
 8001480:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <MX_CAN_Init+0x100>)
 8001484:	2200      	movs	r2, #0
 8001486:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <MX_CAN_Init+0x100>)
 800148a:	2200      	movs	r2, #0
 800148c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800148e:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <MX_CAN_Init+0x100>)
 8001490:	2200      	movs	r2, #0
 8001492:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001494:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <MX_CAN_Init+0x100>)
 8001496:	2200      	movs	r2, #0
 8001498:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800149a:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <MX_CAN_Init+0x100>)
 800149c:	2200      	movs	r2, #0
 800149e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80014a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <MX_CAN_Init+0x100>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80014a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <MX_CAN_Init+0x100>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 ff7f 	bl	80023ac <HAL_CAN_Init>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80014b2:	f000 f959 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef sf;
	sf.FilterMaskIdHigh = 0x0000;
 80014b6:	003b      	movs	r3, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
	sf.FilterMaskIdLow = 0x0000;
 80014bc:	003b      	movs	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
	sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014c2:	003b      	movs	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
	sf.FilterBank = 0;
 80014c8:	003b      	movs	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
	sf.FilterMode = CAN_FILTERMODE_IDMASK;
 80014ce:	003b      	movs	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
	sf.FilterScale = CAN_FILTERSCALE_32BIT;
 80014d4:	003b      	movs	r3, r7
 80014d6:	2201      	movs	r2, #1
 80014d8:	61da      	str	r2, [r3, #28]
	sf.FilterActivation = CAN_FILTER_ENABLE;
 80014da:	003b      	movs	r3, r7
 80014dc:	2201      	movs	r2, #1
 80014de:	621a      	str	r2, [r3, #32]
	if (HAL_CAN_ConfigFilter(&hcan, &sf) != HAL_OK) {
 80014e0:	003a      	movs	r2, r7
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_CAN_Init+0x100>)
 80014e4:	0011      	movs	r1, r2
 80014e6:	0018      	movs	r0, r3
 80014e8:	f001 f952 	bl	8002790 <HAL_CAN_ConfigFilter>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <MX_CAN_Init+0xa0>
		Error_Handler();
 80014f0:	f000 f93a 	bl	8001768 <Error_Handler>
	}

	if (HAL_CAN_RegisterCallback(&hcan, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID,
 80014f4:	4a19      	ldr	r2, [pc, #100]	@ (800155c <MX_CAN_Init+0x108>)
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_CAN_Init+0x100>)
 80014f8:	2106      	movs	r1, #6
 80014fa:	0018      	movs	r0, r3
 80014fc:	f001 f8a0 	bl	8002640 <HAL_CAN_RegisterCallback>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <MX_CAN_Init+0xb4>
			can_irq) != HAL_OK) {
		Error_Handler();
 8001504:	f000 f930 	bl	8001768 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <MX_CAN_Init+0x100>)
 800150a:	0018      	movs	r0, r3
 800150c:	f001 fa32 	bl	8002974 <HAL_CAN_Start>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <MX_CAN_Init+0xc4>
		Error_Handler();
 8001514:	f000 f928 	bl	8001768 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001518:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_CAN_Init+0x100>)
 800151a:	2102      	movs	r1, #2
 800151c:	0018      	movs	r0, r3
 800151e:	f001 fb9a 	bl	8002c56 <HAL_CAN_ActivateNotification>
 8001522:	1e03      	subs	r3, r0, #0
 8001524:	d001      	beq.n	800152a <MX_CAN_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8001526:	f000 f91f 	bl	8001768 <Error_Handler>
	}

	/* Enable interrupts for CAN: FIFO0 message pending, transmit mailbox empty, error */
	__HAL_CAN_ENABLE_IT(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | // RX FIFO0 message
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <MX_CAN_Init+0x100>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <MX_CAN_Init+0x100>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	490a      	ldr	r1, [pc, #40]	@ (8001560 <MX_CAN_Init+0x10c>)
 8001536:	430a      	orrs	r2, r1
 8001538:	615a      	str	r2, [r3, #20]
			CAN_IT_BUSOFF |// Bus-off
			CAN_IT_LAST_ERROR_CODE |// Last error code
			CAN_IT_ERROR);// General error

	/* Configure NVIC for CAN interrupts */
	HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	201e      	movs	r0, #30
 8001540:	f001 fe88 	bl	8003254 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001544:	201e      	movs	r0, #30
 8001546:	f001 fe9a 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN_Init 2 */

}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b00a      	add	sp, #40	@ 0x28
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	20000188 	.word	0x20000188
 8001558:	40006400 	.word	0x40006400
 800155c:	08000f85 	.word	0x08000f85
 8001560:	00008f03 	.word	0x00008f03

08001564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 800156a:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <MX_USART1_UART_Init+0x5c>)
 800156c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 8001570:	22e1      	movs	r2, #225	@ 0xe1
 8001572:	0252      	lsls	r2, r2, #9
 8001574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <MX_USART1_UART_Init+0x58>)
 80015a8:	0018      	movs	r0, r3
 80015aa:	f003 f83b 	bl	8004624 <HAL_UART_Init>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015b2:	f000 f8d9 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200001ec 	.word	0x200001ec
 80015c0:	40013800 	.word	0x40013800

080015c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015ca:	4a15      	ldr	r2, [pc, #84]	@ (8001620 <MX_USART2_UART_Init+0x5c>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ce:	4b13      	ldr	r3, [pc, #76]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015d0:	22e1      	movs	r2, #225	@ 0xe1
 80015d2:	0252      	lsls	r2, r2, #9
 80015d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <MX_USART2_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_USART2_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001606:	4b05      	ldr	r3, [pc, #20]	@ (800161c <MX_USART2_UART_Init+0x58>)
 8001608:	0018      	movs	r0, r3
 800160a:	f003 f80b 	bl	8004624 <HAL_UART_Init>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001612:	f000 f8a9 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000274 	.word	0x20000274
 8001620:	40004400 	.word	0x40004400

08001624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <MX_USART3_UART_Init+0x58>)
 800162a:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <MX_USART3_UART_Init+0x5c>)
 800162c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <MX_USART3_UART_Init+0x58>)
 8001630:	22e1      	movs	r2, #225	@ 0xe1
 8001632:	0252      	lsls	r2, r2, #9
 8001634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_USART3_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <MX_USART3_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_USART3_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_USART3_UART_Init+0x58>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <MX_USART3_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_USART3_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MX_USART3_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_USART3_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <MX_USART3_UART_Init+0x58>)
 8001668:	0018      	movs	r0, r3
 800166a:	f002 ffdb 	bl	8004624 <HAL_UART_Init>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001672:	f000 f879 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200002fc 	.word	0x200002fc
 8001680:	40004800 	.word	0x40004800

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_DMA_Init+0x48>)
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_DMA_Init+0x48>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <MX_DMA_Init+0x48>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	200a      	movs	r0, #10
 80016a8:	f001 fdd4 	bl	8003254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f001 fde6 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	200b      	movs	r0, #11
 80016b8:	f001 fdcc 	bl	8003254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80016bc:	200b      	movs	r0, #11
 80016be:	f001 fdde 	bl	800327e <HAL_NVIC_EnableIRQ>

}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	240c      	movs	r4, #12
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	0018      	movs	r0, r3
 80016dc:	2314      	movs	r3, #20
 80016de:	001a      	movs	r2, r3
 80016e0:	2100      	movs	r1, #0
 80016e2:	f004 ff44 	bl	800656e <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_GPIO_Init+0x94>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <MX_GPIO_Init+0x94>)
 80016ec:	2180      	movs	r1, #128	@ 0x80
 80016ee:	03c9      	lsls	r1, r1, #15
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <MX_GPIO_Init+0x94>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	03db      	lsls	r3, r3, #15
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <MX_GPIO_Init+0x94>)
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_GPIO_Init+0x94>)
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	0289      	lsls	r1, r1, #10
 800170c:	430a      	orrs	r2, r1
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_GPIO_Init+0x94>)
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_GPIO_Init+0x94>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_GPIO_Init+0x94>)
 8001724:	2180      	movs	r1, #128	@ 0x80
 8001726:	02c9      	lsls	r1, r1, #11
 8001728:	430a      	orrs	r2, r1
 800172a:	615a      	str	r2, [r3, #20]
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <MX_GPIO_Init+0x94>)
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	02db      	lsls	r3, r3, #11
 8001734:	4013      	ands	r3, r2
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800173a:	193b      	adds	r3, r7, r4
 800173c:	2220      	movs	r2, #32
 800173e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001740:	193b      	adds	r3, r7, r4
 8001742:	2284      	movs	r2, #132	@ 0x84
 8001744:	0392      	lsls	r2, r2, #14
 8001746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001748:	193b      	adds	r3, r7, r4
 800174a:	2201      	movs	r2, #1
 800174c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	193a      	adds	r2, r7, r4
 8001750:	2390      	movs	r3, #144	@ 0x90
 8001752:	05db      	lsls	r3, r3, #23
 8001754:	0011      	movs	r1, r2
 8001756:	0018      	movs	r0, r3
 8001758:	f001 ffc4 	bl	80036e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b009      	add	sp, #36	@ 0x24
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	e7fd      	b.n	8001770 <Error_Handler+0x8>

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_MspInit+0x44>)
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_MspInit+0x44>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	619a      	str	r2, [r3, #24]
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_MspInit+0x44>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_MspInit+0x44>)
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_MspInit+0x44>)
 8001798:	2180      	movs	r1, #128	@ 0x80
 800179a:	0549      	lsls	r1, r1, #21
 800179c:	430a      	orrs	r2, r1
 800179e:	61da      	str	r2, [r3, #28]
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_MspInit+0x44>)
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b08b      	sub	sp, #44	@ 0x2c
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	2414      	movs	r4, #20
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	0018      	movs	r0, r3
 80017ca:	2314      	movs	r3, #20
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	f004 fecd 	bl	800656e <memset>
  if(hadc->Instance==ADC1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <HAL_ADC_MspInit+0x84>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12b      	bne.n	8001836 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <HAL_ADC_MspInit+0x88>)
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <HAL_ADC_MspInit+0x88>)
 80017e4:	2180      	movs	r1, #128	@ 0x80
 80017e6:	0089      	lsls	r1, r1, #2
 80017e8:	430a      	orrs	r2, r1
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <HAL_ADC_MspInit+0x88>)
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_ADC_MspInit+0x88>)
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_ADC_MspInit+0x88>)
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	0289      	lsls	r1, r1, #10
 8001804:	430a      	orrs	r2, r1
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_ADC_MspInit+0x88>)
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001816:	193b      	adds	r3, r7, r4
 8001818:	2280      	movs	r2, #128	@ 0x80
 800181a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181c:	193b      	adds	r3, r7, r4
 800181e:	2203      	movs	r2, #3
 8001820:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	193b      	adds	r3, r7, r4
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	193a      	adds	r2, r7, r4
 800182a:	2390      	movs	r3, #144	@ 0x90
 800182c:	05db      	lsls	r3, r3, #23
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f001 ff57 	bl	80036e4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b00b      	add	sp, #44	@ 0x2c
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	40012400 	.word	0x40012400
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b08b      	sub	sp, #44	@ 0x2c
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	2414      	movs	r4, #20
 8001852:	193b      	adds	r3, r7, r4
 8001854:	0018      	movs	r0, r3
 8001856:	2314      	movs	r3, #20
 8001858:	001a      	movs	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f004 fe87 	bl	800656e <memset>
  if(hcan->Instance==CAN)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a21      	ldr	r2, [pc, #132]	@ (80018ec <HAL_CAN_MspInit+0xa4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d13b      	bne.n	80018e2 <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <HAL_CAN_MspInit+0xa8>)
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <HAL_CAN_MspInit+0xa8>)
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	0489      	lsls	r1, r1, #18
 8001874:	430a      	orrs	r2, r1
 8001876:	61da      	str	r2, [r3, #28]
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <HAL_CAN_MspInit+0xa8>)
 800187a:	69da      	ldr	r2, [r3, #28]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	049b      	lsls	r3, r3, #18
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <HAL_CAN_MspInit+0xa8>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_CAN_MspInit+0xa8>)
 800188c:	2180      	movs	r1, #128	@ 0x80
 800188e:	0289      	lsls	r1, r1, #10
 8001890:	430a      	orrs	r2, r1
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_CAN_MspInit+0xa8>)
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	22c0      	movs	r2, #192	@ 0xc0
 80018a6:	0152      	lsls	r2, r2, #5
 80018a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	0021      	movs	r1, r4
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2202      	movs	r2, #2
 80018b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2203      	movs	r2, #3
 80018bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2204      	movs	r2, #4
 80018c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	187a      	adds	r2, r7, r1
 80018c6:	2390      	movs	r3, #144	@ 0x90
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	0011      	movs	r1, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f001 ff09 	bl	80036e4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	201e      	movs	r0, #30
 80018d8:	f001 fcbc 	bl	8003254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80018dc:	201e      	movs	r0, #30
 80018de:	f001 fcce 	bl	800327e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b00b      	add	sp, #44	@ 0x2c
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	40006400 	.word	0x40006400
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b08f      	sub	sp, #60	@ 0x3c
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	2424      	movs	r4, #36	@ 0x24
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	0018      	movs	r0, r3
 8001902:	2314      	movs	r3, #20
 8001904:	001a      	movs	r2, r3
 8001906:	2100      	movs	r1, #0
 8001908:	f004 fe31 	bl	800656e <memset>
  if(huart->Instance==USART1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4ad5      	ldr	r2, [pc, #852]	@ (8001c68 <HAL_UART_MspInit+0x374>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d000      	beq.n	8001918 <HAL_UART_MspInit+0x24>
 8001916:	e088      	b.n	8001a2a <HAL_UART_MspInit+0x136>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001918:	4bd4      	ldr	r3, [pc, #848]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	4bd3      	ldr	r3, [pc, #844]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 800191e:	2180      	movs	r1, #128	@ 0x80
 8001920:	01c9      	lsls	r1, r1, #7
 8001922:	430a      	orrs	r2, r1
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	4bd1      	ldr	r3, [pc, #836]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	01db      	lsls	r3, r3, #7
 800192e:	4013      	ands	r3, r2
 8001930:	623b      	str	r3, [r7, #32]
 8001932:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4bcd      	ldr	r3, [pc, #820]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	4bcc      	ldr	r3, [pc, #816]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	0289      	lsls	r1, r1, #10
 800193e:	430a      	orrs	r2, r1
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	4bca      	ldr	r3, [pc, #808]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	029b      	lsls	r3, r3, #10
 800194a:	4013      	ands	r3, r2
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001950:	193b      	adds	r3, r7, r4
 8001952:	22c0      	movs	r2, #192	@ 0xc0
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	0021      	movs	r1, r4
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2202      	movs	r2, #2
 800195e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2203      	movs	r2, #3
 800196a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2201      	movs	r2, #1
 8001970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	187a      	adds	r2, r7, r1
 8001974:	2390      	movs	r3, #144	@ 0x90
 8001976:	05db      	lsls	r3, r3, #23
 8001978:	0011      	movs	r1, r2
 800197a:	0018      	movs	r0, r3
 800197c:	f001 feb2 	bl	80036e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001980:	4bbb      	ldr	r3, [pc, #748]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 8001982:	4abc      	ldr	r2, [pc, #752]	@ (8001c74 <HAL_UART_MspInit+0x380>)
 8001984:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001986:	4bba      	ldr	r3, [pc, #744]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 8001988:	2210      	movs	r2, #16
 800198a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	4bb8      	ldr	r3, [pc, #736]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001992:	4bb7      	ldr	r3, [pc, #732]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001998:	4bb5      	ldr	r3, [pc, #724]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199e:	4bb4      	ldr	r3, [pc, #720]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80019a4:	4bb2      	ldr	r3, [pc, #712]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019aa:	4bb1      	ldr	r3, [pc, #708]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019b0:	4baf      	ldr	r3, [pc, #700]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f001 fc80 	bl	80032b8 <HAL_DMA_Init>
 80019b8:	1e03      	subs	r3, r0, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80019bc:	f7ff fed4 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4aab      	ldr	r2, [pc, #684]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 80019c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80019c6:	4baa      	ldr	r3, [pc, #680]	@ (8001c70 <HAL_UART_MspInit+0x37c>)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80019cc:	4baa      	ldr	r3, [pc, #680]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019ce:	4aab      	ldr	r2, [pc, #684]	@ (8001c7c <HAL_UART_MspInit+0x388>)
 80019d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d2:	4ba9      	ldr	r3, [pc, #676]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d8:	4ba7      	ldr	r3, [pc, #668]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019de:	4ba6      	ldr	r3, [pc, #664]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019e0:	2280      	movs	r2, #128	@ 0x80
 80019e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e4:	4ba4      	ldr	r3, [pc, #656]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ea:	4ba3      	ldr	r3, [pc, #652]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80019f0:	4ba1      	ldr	r3, [pc, #644]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019f6:	4ba0      	ldr	r3, [pc, #640]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019fc:	4b9e      	ldr	r3, [pc, #632]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f001 fc5a 	bl	80032b8 <HAL_DMA_Init>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8001a08:	f7ff feae 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a9a      	ldr	r2, [pc, #616]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 8001a10:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a12:	4b99      	ldr	r3, [pc, #612]	@ (8001c78 <HAL_UART_MspInit+0x384>)
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	201b      	movs	r0, #27
 8001a1e:	f001 fc19 	bl	8003254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a22:	201b      	movs	r0, #27
 8001a24:	f001 fc2b 	bl	800327e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a28:	e11a      	b.n	8001c60 <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a94      	ldr	r2, [pc, #592]	@ (8001c80 <HAL_UART_MspInit+0x38c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d000      	beq.n	8001a36 <HAL_UART_MspInit+0x142>
 8001a34:	e087      	b.n	8001b46 <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a36:	4b8d      	ldr	r3, [pc, #564]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	4b8c      	ldr	r3, [pc, #560]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	0289      	lsls	r1, r1, #10
 8001a40:	430a      	orrs	r2, r1
 8001a42:	61da      	str	r2, [r3, #28]
 8001a44:	4b89      	ldr	r3, [pc, #548]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b86      	ldr	r3, [pc, #536]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001a58:	2180      	movs	r1, #128	@ 0x80
 8001a5a:	0289      	lsls	r1, r1, #10
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	4b82      	ldr	r3, [pc, #520]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	029b      	lsls	r3, r3, #10
 8001a68:	4013      	ands	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a6e:	2124      	movs	r1, #36	@ 0x24
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2202      	movs	r2, #2
 8001a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2203      	movs	r2, #3
 8001a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	187a      	adds	r2, r7, r1
 8001a90:	2390      	movs	r3, #144	@ 0x90
 8001a92:	05db      	lsls	r3, r3, #23
 8001a94:	0011      	movs	r1, r2
 8001a96:	0018      	movs	r0, r3
 8001a98:	f001 fe24 	bl	80036e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001a9c:	4b79      	ldr	r3, [pc, #484]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001a9e:	4a7a      	ldr	r2, [pc, #488]	@ (8001c88 <HAL_UART_MspInit+0x394>)
 8001aa0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa2:	4b78      	ldr	r3, [pc, #480]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa8:	4b76      	ldr	r3, [pc, #472]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aae:	4b75      	ldr	r3, [pc, #468]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab4:	4b73      	ldr	r3, [pc, #460]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aba:	4b72      	ldr	r3, [pc, #456]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ac0:	4b70      	ldr	r3, [pc, #448]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001acc:	4b6d      	ldr	r3, [pc, #436]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f001 fbf2 	bl	80032b8 <HAL_DMA_Init>
 8001ad4:	1e03      	subs	r3, r0, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8001ad8:	f7ff fe46 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a69      	ldr	r2, [pc, #420]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001ae0:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ae2:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <HAL_UART_MspInit+0x390>)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001ae8:	4b68      	ldr	r3, [pc, #416]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001aea:	4a69      	ldr	r2, [pc, #420]	@ (8001c90 <HAL_UART_MspInit+0x39c>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aee:	4b67      	ldr	r3, [pc, #412]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001af0:	2210      	movs	r2, #16
 8001af2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b65      	ldr	r3, [pc, #404]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b64      	ldr	r3, [pc, #400]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b00:	4b62      	ldr	r3, [pc, #392]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b06:	4b61      	ldr	r3, [pc, #388]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b5e      	ldr	r3, [pc, #376]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b18:	4b5c      	ldr	r3, [pc, #368]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f001 fbcc 	bl	80032b8 <HAL_DMA_Init>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8001b24:	f7ff fe20 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001b2c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b2e:	4b57      	ldr	r3, [pc, #348]	@ (8001c8c <HAL_UART_MspInit+0x398>)
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	201c      	movs	r0, #28
 8001b3a:	f001 fb8b 	bl	8003254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b3e:	201c      	movs	r0, #28
 8001b40:	f001 fb9d 	bl	800327e <HAL_NVIC_EnableIRQ>
}
 8001b44:	e08c      	b.n	8001c60 <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART3)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a52      	ldr	r2, [pc, #328]	@ (8001c94 <HAL_UART_MspInit+0x3a0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d000      	beq.n	8001b52 <HAL_UART_MspInit+0x25e>
 8001b50:	e086      	b.n	8001c60 <HAL_UART_MspInit+0x36c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b52:	4b46      	ldr	r3, [pc, #280]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	4b45      	ldr	r3, [pc, #276]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	02c9      	lsls	r1, r1, #11
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	61da      	str	r2, [r3, #28]
 8001b60:	4b42      	ldr	r3, [pc, #264]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	02db      	lsls	r3, r3, #11
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	4b3e      	ldr	r3, [pc, #248]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001b74:	2180      	movs	r1, #128	@ 0x80
 8001b76:	02c9      	lsls	r1, r1, #11
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <HAL_UART_MspInit+0x378>)
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	02db      	lsls	r3, r3, #11
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b8a:	2124      	movs	r1, #36	@ 0x24
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	22c0      	movs	r2, #192	@ 0xc0
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	2202      	movs	r2, #2
 8001b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2204      	movs	r2, #4
 8001baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	4a3a      	ldr	r2, [pc, #232]	@ (8001c98 <HAL_UART_MspInit+0x3a4>)
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	f001 fd96 	bl	80036e4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel7;
 8001bb8:	4b38      	ldr	r3, [pc, #224]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bba:	4a39      	ldr	r2, [pc, #228]	@ (8001ca0 <HAL_UART_MspInit+0x3ac>)
 8001bbc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bbe:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc4:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bca:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bcc:	2280      	movs	r2, #128	@ 0x80
 8001bce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd6:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001be8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bea:	0018      	movs	r0, r3
 8001bec:	f001 fb64 	bl	80032b8 <HAL_DMA_Init>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x304>
      Error_Handler();
 8001bf4:	f7ff fdb8 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a28      	ldr	r2, [pc, #160]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001bfc:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_UART_MspInit+0x3a8>)
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel6;
 8001c04:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c06:	4a28      	ldr	r2, [pc, #160]	@ (8001ca8 <HAL_UART_MspInit+0x3b4>)
 8001c08:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c16:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c18:	2280      	movs	r2, #128	@ 0x80
 8001c1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c22:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f001 fb3e 	bl	80032b8 <HAL_DMA_Init>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x350>
      Error_Handler();
 8001c40:	f7ff fd92 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a17      	ldr	r2, [pc, #92]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c48:	675a      	str	r2, [r3, #116]	@ 0x74
 8001c4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <HAL_UART_MspInit+0x3b0>)
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	201d      	movs	r0, #29
 8001c56:	f001 fafd 	bl	8003254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001c5a:	201d      	movs	r0, #29
 8001c5c:	f001 fb0f 	bl	800327e <HAL_NVIC_EnableIRQ>
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b00f      	add	sp, #60	@ 0x3c
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	20000384 	.word	0x20000384
 8001c74:	4002001c 	.word	0x4002001c
 8001c78:	200003c8 	.word	0x200003c8
 8001c7c:	40020030 	.word	0x40020030
 8001c80:	40004400 	.word	0x40004400
 8001c84:	2000040c 	.word	0x2000040c
 8001c88:	40020058 	.word	0x40020058
 8001c8c:	20000450 	.word	0x20000450
 8001c90:	40020044 	.word	0x40020044
 8001c94:	40004800 	.word	0x40004800
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	20000494 	.word	0x20000494
 8001ca0:	40020080 	.word	0x40020080
 8001ca4:	200004d8 	.word	0x200004d8
 8001ca8:	4002006c 	.word	0x4002006c

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	e7fd      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	e7fd      	b.n	8001cb8 <HardFault_Handler+0x4>

08001cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f000 f8dc 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f001 fc11 	bl	800350e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f001 fc0d 	bl	800350e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	20000384 	.word	0x20000384
 8001d00:	200003c8 	.word	0x200003c8

08001d04 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f001 fbff 	bl	800350e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <DMA1_Channel4_5_6_7_IRQHandler+0x30>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f001 fbfb 	bl	800350e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <DMA1_Channel4_5_6_7_IRQHandler+0x34>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f001 fbf7 	bl	800350e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <DMA1_Channel4_5_6_7_IRQHandler+0x38>)
 8001d22:	0018      	movs	r0, r3
 8001d24:	f001 fbf3 	bl	800350e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001d28:	46c0      	nop			@ (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	20000450 	.word	0x20000450
 8001d34:	2000040c 	.word	0x2000040c
 8001d38:	200004d8 	.word	0x200004d8
 8001d3c:	20000494 	.word	0x20000494

08001d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <USART1_IRQHandler+0x14>)
 8001d46:	0018      	movs	r0, r3
 8001d48:	f002 fda8 	bl	800489c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	200001ec 	.word	0x200001ec

08001d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <USART2_IRQHandler+0x14>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f002 fd9c 	bl	800489c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	20000274 	.word	0x20000274

08001d70 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <USART3_4_IRQHandler+0x14>)
 8001d76:	0018      	movs	r0, r3
 8001d78:	f002 fd90 	bl	800489c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	200002fc 	.word	0x200002fc

08001d88 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <CEC_CAN_IRQHandler+0x14>)
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 ff8b 	bl	8002caa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	20000188 	.word	0x20000188

08001da0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dac:	480d      	ldr	r0, [pc, #52]	@ (8001de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db0:	f7ff fff6 	bl	8001da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001db6:	490d      	ldr	r1, [pc, #52]	@ (8001dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <LoopForever+0xe>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001df8 <LoopForever+0x16>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dda:	f004 fbd1 	bl	8006580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dde:	f7ff f9f5 	bl	80011cc <main>

08001de2 <LoopForever>:

LoopForever:
    b LoopForever
 8001de2:	e7fe      	b.n	8001de2 <LoopForever>
  ldr   r0, =_estack
 8001de4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001df0:	080066e0 	.word	0x080066e0
  ldr r2, =_sbss
 8001df4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001df8:	200015a0 	.word	0x200015a0

08001dfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC1_COMP_IRQHandler>
	...

08001e00 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <HAL_Init+0x24>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_Init+0x24>)
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f809 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e16:	f7ff fcad 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_InitTick+0x5c>)
 8001e32:	681c      	ldr	r4, [r3, #0]
 8001e34:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <HAL_InitTick+0x60>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	0019      	movs	r1, r3
 8001e3a:	23fa      	movs	r3, #250	@ 0xfa
 8001e3c:	0098      	lsls	r0, r3, #2
 8001e3e:	f7fe f963 	bl	8000108 <__udivsi3>
 8001e42:	0003      	movs	r3, r0
 8001e44:	0019      	movs	r1, r3
 8001e46:	0020      	movs	r0, r4
 8001e48:	f7fe f95e 	bl	8000108 <__udivsi3>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f001 fa25 	bl	800329e <HAL_SYSTICK_Config>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00f      	b.n	8001e7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d80b      	bhi.n	8001e7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	2301      	movs	r3, #1
 8001e66:	425b      	negs	r3, r3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f001 f9f2 	bl	8003254 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_InitTick+0x64>)
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b003      	add	sp, #12
 8001e82:	bd90      	pop	{r4, r7, pc}
 8001e84:	20000010 	.word	0x20000010
 8001e88:	20000018 	.word	0x20000018
 8001e8c:	20000014 	.word	0x20000014

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	001a      	movs	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	18d2      	adds	r2, r2, r3
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	20000018 	.word	0x20000018
 8001eb0:	2000051c 	.word	0x2000051c

08001eb4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	2000051c 	.word	0x2000051c

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	189b      	adds	r3, r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	f7ff ffe0 	bl	8001eb4 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	46c0      	nop			@ (mov r8, r8)
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	20000018 	.word	0x20000018

08001f10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	230f      	movs	r3, #15
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e125      	b.n	800217a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2234      	movs	r2, #52	@ 0x34
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7ff fc38 	bl	80017bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f50:	2210      	movs	r2, #16
 8001f52:	4013      	ands	r3, r2
 8001f54:	d000      	beq.n	8001f58 <HAL_ADC_Init+0x48>
 8001f56:	e103      	b.n	8002160 <HAL_ADC_Init+0x250>
 8001f58:	230f      	movs	r3, #15
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d000      	beq.n	8001f64 <HAL_ADC_Init+0x54>
 8001f62:	e0fd      	b.n	8002160 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001f6e:	d000      	beq.n	8001f72 <HAL_ADC_Init+0x62>
 8001f70:	e0f6      	b.n	8002160 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	4a83      	ldr	r2, [pc, #524]	@ (8002184 <HAL_ADC_Init+0x274>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d112      	bne.n	8001fb6 <HAL_ADC_Init+0xa6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d009      	beq.n	8001fb2 <HAL_ADC_Init+0xa2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	401a      	ands	r2, r3
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Init+0xa6>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_Init+0xa8>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d116      	bne.n	8001fea <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2218      	movs	r2, #24
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	0899      	lsrs	r1, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4964      	ldr	r1, [pc, #400]	@ (8002188 <HAL_ADC_Init+0x278>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7e1b      	ldrb	r3, [r3, #24]
 8001ffe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7e5b      	ldrb	r3, [r3, #25]
 8002004:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002006:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e9b      	ldrb	r3, [r3, #26]
 800200c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800200e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	2b01      	cmp	r3, #1
 8002016:	d002      	beq.n	800201e <HAL_ADC_Init+0x10e>
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	015b      	lsls	r3, r3, #5
 800201c:	e000      	b.n	8002020 <HAL_ADC_Init+0x110>
 800201e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002020:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002026:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d101      	bne.n	8002034 <HAL_ADC_Init+0x124>
 8002030:	2304      	movs	r3, #4
 8002032:	e000      	b.n	8002036 <HAL_ADC_Init+0x126>
 8002034:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002036:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2124      	movs	r1, #36	@ 0x24
 800203c:	5c5b      	ldrb	r3, [r3, r1]
 800203e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002040:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4313      	orrs	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7edb      	ldrb	r3, [r3, #27]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d115      	bne.n	800207c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7e9b      	ldrb	r3, [r3, #26]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2280      	movs	r2, #128	@ 0x80
 800205c:	0252      	lsls	r2, r2, #9
 800205e:	4313      	orrs	r3, r2
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	e00b      	b.n	800207c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002068:	2220      	movs	r2, #32
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002074:	2201      	movs	r2, #1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	23c2      	movs	r3, #194	@ 0xc2
 8002082:	33ff      	adds	r3, #255	@ 0xff
 8002084:	429a      	cmp	r2, r3
 8002086:	d007      	beq.n	8002098 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002090:	4313      	orrs	r3, r2
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4313      	orrs	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68d9      	ldr	r1, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	055b      	lsls	r3, r3, #21
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d01b      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d017      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d013      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d00f      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00b      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d007      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d003      	beq.n	80020ec <HAL_ADC_Init+0x1dc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d112      	bne.n	8002112 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2107      	movs	r1, #7
 80020f8:	438a      	bics	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6959      	ldr	r1, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	2207      	movs	r2, #7
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <HAL_ADC_Init+0x27c>)
 800211a:	4013      	ands	r3, r2
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d10b      	bne.n	800213a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212c:	2203      	movs	r2, #3
 800212e:	4393      	bics	r3, r2
 8002130:	2201      	movs	r2, #1
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002138:	e01c      	b.n	8002174 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	2212      	movs	r2, #18
 8002140:	4393      	bics	r3, r2
 8002142:	2210      	movs	r2, #16
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214e:	2201      	movs	r2, #1
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002156:	230f      	movs	r3, #15
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800215e:	e009      	b.n	8002174 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	2210      	movs	r2, #16
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002174:	230f      	movs	r3, #15
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	781b      	ldrb	r3, [r3, #0]
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	fffffefd 	.word	0xfffffefd
 8002188:	fffe0219 	.word	0xfffe0219
 800218c:	833fffe7 	.word	0x833fffe7

08002190 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	230f      	movs	r3, #15
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	055b      	lsls	r3, r3, #21
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d011      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x46>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d00d      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x46>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d009      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x46>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d005      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x46>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d001      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x46>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2234      	movs	r2, #52	@ 0x34
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x54>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0d0      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1f6>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2234      	movs	r2, #52	@ 0x34
 80021e8:	2101      	movs	r1, #1
 80021ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2204      	movs	r2, #4
 80021f4:	4013      	ands	r3, r2
 80021f6:	d000      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x6a>
 80021f8:	e0b4      	b.n	8002364 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a64      	ldr	r2, [pc, #400]	@ (8002390 <HAL_ADC_ConfigChannel+0x200>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d100      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x76>
 8002204:	e082      	b.n	800230c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	055b      	lsls	r3, r3, #21
 8002224:	429a      	cmp	r2, r3
 8002226:	d037      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d033      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	2b02      	cmp	r3, #2
 8002236:	d02f      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	2b03      	cmp	r3, #3
 800223e:	d02b      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	2b04      	cmp	r3, #4
 8002246:	d027      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	2b05      	cmp	r3, #5
 800224e:	d023      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	2b06      	cmp	r3, #6
 8002256:	d01f      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	2b07      	cmp	r3, #7
 800225e:	d01b      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2107      	movs	r1, #7
 800226c:	400b      	ands	r3, r1
 800226e:	429a      	cmp	r2, r3
 8002270:	d012      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2107      	movs	r1, #7
 800227e:	438a      	bics	r2, r1
 8002280:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6959      	ldr	r1, [r3, #20]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2207      	movs	r2, #7
 800228e:	401a      	ands	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b10      	cmp	r3, #16
 800229e:	d007      	beq.n	80022b0 <HAL_ADC_ConfigChannel+0x120>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b11      	cmp	r3, #17
 80022a6:	d003      	beq.n	80022b0 <HAL_ADC_ConfigChannel+0x120>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b12      	cmp	r3, #18
 80022ae:	d163      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022b0:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <HAL_ADC_ConfigChannel+0x204>)
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d009      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0x140>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b11      	cmp	r3, #17
 80022c2:	d102      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x13a>
 80022c4:	2380      	movs	r3, #128	@ 0x80
 80022c6:	03db      	lsls	r3, r3, #15
 80022c8:	e004      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x144>
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	045b      	lsls	r3, r3, #17
 80022ce:	e001      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x144>
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002394 <HAL_ADC_ConfigChannel+0x204>)
 80022d6:	430b      	orrs	r3, r1
 80022d8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d14a      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <HAL_ADC_ConfigChannel+0x208>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	492d      	ldr	r1, [pc, #180]	@ (800239c <HAL_ADC_ConfigChannel+0x20c>)
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7fd ff0d 	bl	8000108 <__udivsi3>
 80022ee:	0003      	movs	r3, r0
 80022f0:	001a      	movs	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	189b      	adds	r3, r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022fc:	e002      	b.n	8002304 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3b01      	subs	r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f9      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x16e>
 800230a:	e035      	b.n	8002378 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	4099      	lsls	r1, r3
 800231a:	000b      	movs	r3, r1
 800231c:	43d9      	mvns	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	400a      	ands	r2, r1
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b10      	cmp	r3, #16
 800232c:	d007      	beq.n	800233e <HAL_ADC_ConfigChannel+0x1ae>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b11      	cmp	r3, #17
 8002334:	d003      	beq.n	800233e <HAL_ADC_ConfigChannel+0x1ae>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b12      	cmp	r3, #18
 800233c:	d11c      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <HAL_ADC_ConfigChannel+0x204>)
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d007      	beq.n	800235a <HAL_ADC_ConfigChannel+0x1ca>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b11      	cmp	r3, #17
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x1c6>
 8002352:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <HAL_ADC_ConfigChannel+0x210>)
 8002354:	e002      	b.n	800235c <HAL_ADC_ConfigChannel+0x1cc>
 8002356:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_ADC_ConfigChannel+0x214>)
 8002358:	e000      	b.n	800235c <HAL_ADC_ConfigChannel+0x1cc>
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_ADC_ConfigChannel+0x218>)
 800235c:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <HAL_ADC_ConfigChannel+0x204>)
 800235e:	400b      	ands	r3, r1
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e009      	b.n	8002378 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002368:	2220      	movs	r2, #32
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002370:	230f      	movs	r3, #15
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2234      	movs	r2, #52	@ 0x34
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002380:	230f      	movs	r3, #15
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	781b      	ldrb	r3, [r3, #0]
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b004      	add	sp, #16
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	00001001 	.word	0x00001001
 8002394:	40012708 	.word	0x40012708
 8002398:	20000010 	.word	0x20000010
 800239c:	000f4240 	.word	0x000f4240
 80023a0:	ffbfffff 	.word	0xffbfffff
 80023a4:	feffffff 	.word	0xfeffffff
 80023a8:	ff7fffff 	.word	0xff7fffff

080023ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e11f      	b.n	80025fe <HAL_CAN_Init+0x252>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	5c9b      	ldrb	r3, [r3, r2]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d132      	bne.n	8002430 <HAL_CAN_Init+0x84>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a8e      	ldr	r2, [pc, #568]	@ (8002608 <HAL_CAN_Init+0x25c>)
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a8e      	ldr	r2, [pc, #568]	@ (800260c <HAL_CAN_Init+0x260>)
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002610 <HAL_CAN_Init+0x264>)
 80023da:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a8d      	ldr	r2, [pc, #564]	@ (8002614 <HAL_CAN_Init+0x268>)
 80023e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a8c      	ldr	r2, [pc, #560]	@ (8002618 <HAL_CAN_Init+0x26c>)
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a8c      	ldr	r2, [pc, #560]	@ (800261c <HAL_CAN_Init+0x270>)
 80023ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a8b      	ldr	r2, [pc, #556]	@ (8002620 <HAL_CAN_Init+0x274>)
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a8b      	ldr	r2, [pc, #556]	@ (8002624 <HAL_CAN_Init+0x278>)
 80023f8:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a8a      	ldr	r2, [pc, #552]	@ (8002628 <HAL_CAN_Init+0x27c>)
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a8a      	ldr	r2, [pc, #552]	@ (800262c <HAL_CAN_Init+0x280>)
 8002404:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a89      	ldr	r2, [pc, #548]	@ (8002630 <HAL_CAN_Init+0x284>)
 800240a:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a89      	ldr	r2, [pc, #548]	@ (8002634 <HAL_CAN_Init+0x288>)
 8002410:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a88      	ldr	r2, [pc, #544]	@ (8002638 <HAL_CAN_Init+0x28c>)
 8002416:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a86      	ldr	r2, [pc, #536]	@ (800263c <HAL_CAN_Init+0x290>)
 8002424:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	0010      	movs	r0, r2
 800242e:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2101      	movs	r1, #1
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff fd38 	bl	8001eb4 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002448:	e013      	b.n	8002472 <HAL_CAN_Init+0xc6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800244a:	f7ff fd33 	bl	8001eb4 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b0a      	cmp	r3, #10
 8002456:	d90c      	bls.n	8002472 <HAL_CAN_Init+0xc6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	2280      	movs	r2, #128	@ 0x80
 800245e:	0292      	lsls	r2, r2, #10
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	2105      	movs	r1, #5
 800246c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0c5      	b.n	80025fe <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	d0e5      	beq.n	800244a <HAL_CAN_Init+0x9e>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2102      	movs	r1, #2
 800248a:	438a      	bics	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248e:	f7ff fd11 	bl	8001eb4 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002496:	e013      	b.n	80024c0 <HAL_CAN_Init+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002498:	f7ff fd0c 	bl	8001eb4 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b0a      	cmp	r3, #10
 80024a4:	d90c      	bls.n	80024c0 <HAL_CAN_Init+0x114>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	2280      	movs	r2, #128	@ 0x80
 80024ac:	0292      	lsls	r2, r2, #10
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	2105      	movs	r1, #5
 80024ba:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e09e      	b.n	80025fe <HAL_CAN_Init+0x252>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d1e5      	bne.n	8002498 <HAL_CAN_Init+0xec>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2180      	movs	r1, #128	@ 0x80
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e007      	b.n	80024f6 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2180      	movs	r1, #128	@ 0x80
 80024f2:	438a      	bics	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7e5b      	ldrb	r3, [r3, #25]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <HAL_CAN_Init+0x164>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e007      	b.n	8002520 <HAL_CAN_Init+0x174>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2140      	movs	r1, #64	@ 0x40
 800251c:	438a      	bics	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7e9b      	ldrb	r3, [r3, #26]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d108      	bne.n	800253a <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2120      	movs	r1, #32
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e007      	b.n	800254a <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2120      	movs	r1, #32
 8002546:	438a      	bics	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7edb      	ldrb	r3, [r3, #27]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <HAL_CAN_Init+0x1b8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2110      	movs	r1, #16
 800255e:	438a      	bics	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e007      	b.n	8002574 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2110      	movs	r1, #16
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7f1b      	ldrb	r3, [r3, #28]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_CAN_Init+0x1e2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2108      	movs	r1, #8
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e007      	b.n	800259e <HAL_CAN_Init+0x1f2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2108      	movs	r1, #8
 800259a:	438a      	bics	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7f5b      	ldrb	r3, [r3, #29]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <HAL_CAN_Init+0x20c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2104      	movs	r1, #4
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_CAN_Init+0x21c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2104      	movs	r1, #4
 80025c4:	438a      	bics	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	431a      	orrs	r2, r3
 80025de:	0011      	movs	r1, r2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	2101      	movs	r1, #1
 80025fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b004      	add	sp, #16
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	0800308d 	.word	0x0800308d
 800260c:	0800309d 	.word	0x0800309d
 8002610:	080030ad 	.word	0x080030ad
 8002614:	080030bd 	.word	0x080030bd
 8002618:	0800302d 	.word	0x0800302d
 800261c:	0800303d 	.word	0x0800303d
 8002620:	0800304d 	.word	0x0800304d
 8002624:	0800305d 	.word	0x0800305d
 8002628:	0800306d 	.word	0x0800306d
 800262c:	0800307d 	.word	0x0800307d
 8002630:	080030cd 	.word	0x080030cd
 8002634:	080030dd 	.word	0x080030dd
 8002638:	080030ed 	.word	0x080030ed
 800263c:	08001849 	.word	0x08001849

08002640 <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	230b      	movs	r3, #11
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	1c0a      	adds	r2, r1, #0
 8002650:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2317      	movs	r3, #23
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <HAL_CAN_RegisterCallback+0x32>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	2280      	movs	r2, #128	@ 0x80
 8002666:	03d2      	lsls	r2, r2, #15
 8002668:	431a      	orrs	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e087      	b.n	8002782 <HAL_CAN_RegisterCallback+0x142>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	5c9b      	ldrb	r3, [r3, r2]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d151      	bne.n	8002722 <HAL_CAN_RegisterCallback+0xe2>
  {
    switch (CallbackID)
 800267e:	230b      	movs	r3, #11
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b0e      	cmp	r3, #14
 8002686:	d840      	bhi.n	800270a <HAL_CAN_RegisterCallback+0xca>
 8002688:	009a      	lsls	r2, r3, #2
 800268a:	4b40      	ldr	r3, [pc, #256]	@ (800278c <HAL_CAN_RegisterCallback+0x14c>)
 800268c:	18d3      	adds	r3, r2, r3
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	469f      	mov	pc, r3
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8002698:	e070      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80026a0:	e06c      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 80026a8:	e068      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80026b0:	e064      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80026b8:	e060      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80026c0:	e05c      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80026c8:	e058      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80026d0:	e054      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80026d8:	e050      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80026e0:	e04c      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80026e8:	e048      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80026f0:	e044      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80026f8:	e040      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8002700:	e03c      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8002708:	e038      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	2280      	movs	r2, #128	@ 0x80
 8002710:	03d2      	lsls	r2, r2, #15
 8002712:	431a      	orrs	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8002718:	2317      	movs	r3, #23
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
        break;
 8002720:	e02c      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	5c9b      	ldrb	r3, [r3, r2]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11b      	bne.n	8002766 <HAL_CAN_RegisterCallback+0x126>
  {
    switch (CallbackID)
 800272e:	230b      	movs	r3, #11
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b0d      	cmp	r3, #13
 8002736:	d002      	beq.n	800273e <HAL_CAN_RegisterCallback+0xfe>
 8002738:	2b0e      	cmp	r3, #14
 800273a:	d004      	beq.n	8002746 <HAL_CAN_RegisterCallback+0x106>
 800273c:	e007      	b.n	800274e <HAL_CAN_RegisterCallback+0x10e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8002744:	e01a      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800274c:	e016      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	03d2      	lsls	r2, r2, #15
 8002756:	431a      	orrs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 800275c:	2317      	movs	r3, #23
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
        break;
 8002764:	e00a      	b.n	800277c <HAL_CAN_RegisterCallback+0x13c>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	03d2      	lsls	r2, r2, #15
 800276e:	431a      	orrs	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800277c:	2317      	movs	r3, #23
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	781b      	ldrb	r3, [r3, #0]
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b006      	add	sp, #24
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	0800667c 	.word	0x0800667c

08002790 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027a0:	2013      	movs	r0, #19
 80027a2:	183b      	adds	r3, r7, r0
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	2120      	movs	r1, #32
 80027a8:	5c52      	ldrb	r2, [r2, r1]
 80027aa:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80027ac:	0002      	movs	r2, r0
 80027ae:	18bb      	adds	r3, r7, r2
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d004      	beq.n	80027c0 <HAL_CAN_ConfigFilter+0x30>
 80027b6:	18bb      	adds	r3, r7, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d000      	beq.n	80027c0 <HAL_CAN_ConfigFilter+0x30>
 80027be:	e0cd      	b.n	800295c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	58d3      	ldr	r3, [r2, r3]
 80027c8:	2201      	movs	r2, #1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	0011      	movs	r1, r2
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	221f      	movs	r2, #31
 80027dc:	4013      	ands	r3, r2
 80027de:	2201      	movs	r2, #1
 80027e0:	409a      	lsls	r2, r3
 80027e2:	0013      	movs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	2387      	movs	r3, #135	@ 0x87
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	58d3      	ldr	r3, [r2, r3]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	43d2      	mvns	r2, r2
 80027f2:	401a      	ands	r2, r3
 80027f4:	0011      	movs	r1, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	2387      	movs	r3, #135	@ 0x87
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d129      	bne.n	800285a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	2383      	movs	r3, #131	@ 0x83
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	58d3      	ldr	r3, [r2, r3]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	43d2      	mvns	r2, r2
 8002812:	401a      	ands	r2, r3
 8002814:	0011      	movs	r1, r2
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	2383      	movs	r3, #131	@ 0x83
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002830:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3248      	adds	r2, #72	@ 0x48
 8002836:	00d2      	lsls	r2, r2, #3
 8002838:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800284c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800284e:	6979      	ldr	r1, [r7, #20]
 8002850:	3348      	adds	r3, #72	@ 0x48
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	18cb      	adds	r3, r1, r3
 8002856:	3304      	adds	r3, #4
 8002858:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d128      	bne.n	80028b4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	2383      	movs	r3, #131	@ 0x83
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	58d2      	ldr	r2, [r2, r3]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	431a      	orrs	r2, r3
 800286e:	0011      	movs	r1, r2
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	2383      	movs	r3, #131	@ 0x83
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800288a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3248      	adds	r2, #72	@ 0x48
 8002890:	00d2      	lsls	r2, r2, #3
 8002892:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	3348      	adds	r3, #72	@ 0x48
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	18cb      	adds	r3, r1, r3
 80028b0:	3304      	adds	r3, #4
 80028b2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	2381      	movs	r3, #129	@ 0x81
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	58d3      	ldr	r3, [r2, r3]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	43d2      	mvns	r2, r2
 80028c8:	401a      	ands	r2, r3
 80028ca:	0011      	movs	r1, r2
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	2381      	movs	r3, #129	@ 0x81
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	50d1      	str	r1, [r2, r3]
 80028d4:	e00a      	b.n	80028ec <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	2381      	movs	r3, #129	@ 0x81
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	58d2      	ldr	r2, [r2, r3]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	0011      	movs	r1, r2
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	2381      	movs	r3, #129	@ 0x81
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	2385      	movs	r3, #133	@ 0x85
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	58d3      	ldr	r3, [r2, r3]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	43d2      	mvns	r2, r2
 8002900:	401a      	ands	r2, r3
 8002902:	0011      	movs	r1, r2
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	2385      	movs	r3, #133	@ 0x85
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	50d1      	str	r1, [r2, r3]
 800290c:	e00a      	b.n	8002924 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	2385      	movs	r3, #133	@ 0x85
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	58d2      	ldr	r2, [r2, r3]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	431a      	orrs	r2, r3
 800291a:	0011      	movs	r1, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	2385      	movs	r3, #133	@ 0x85
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10a      	bne.n	8002942 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	2387      	movs	r3, #135	@ 0x87
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	58d2      	ldr	r2, [r2, r3]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	431a      	orrs	r2, r3
 8002938:	0011      	movs	r1, r2
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	2387      	movs	r3, #135	@ 0x87
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	58d3      	ldr	r3, [r2, r3]
 800294a:	2201      	movs	r2, #1
 800294c:	4393      	bics	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e007      	b.n	800296c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	2280      	movs	r2, #128	@ 0x80
 8002962:	02d2      	lsls	r2, r2, #11
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
  }
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b006      	add	sp, #24
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d12f      	bne.n	80029e8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	2102      	movs	r1, #2
 800298e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029a0:	f7ff fa88 	bl	8001eb4 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029a8:	e013      	b.n	80029d2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029aa:	f7ff fa83 	bl	8001eb4 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b0a      	cmp	r3, #10
 80029b6:	d90c      	bls.n	80029d2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	0292      	lsls	r2, r2, #10
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	2105      	movs	r1, #5
 80029cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e012      	b.n	80029f8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d1e5      	bne.n	80029aa <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e007      	b.n	80029f8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	0312      	lsls	r2, r2, #12
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
  }
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a0e:	2017      	movs	r0, #23
 8002a10:	183b      	adds	r3, r7, r0
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	2120      	movs	r1, #32
 8002a16:	5c52      	ldrb	r2, [r2, r1]
 8002a18:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	18bb      	adds	r3, r7, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d004      	beq.n	8002a2e <HAL_CAN_GetRxMessage+0x2e>
 8002a24:	18bb      	adds	r3, r7, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d000      	beq.n	8002a2e <HAL_CAN_GetRxMessage+0x2e>
 8002a2c:	e107      	b.n	8002c3e <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10e      	bne.n	8002a52 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d117      	bne.n	8002a70 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	2280      	movs	r2, #128	@ 0x80
 8002a46:	0392      	lsls	r2, r2, #14
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0fd      	b.n	8002c4e <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	2280      	movs	r2, #128	@ 0x80
 8002a64:	0392      	lsls	r2, r2, #14
 8002a66:	431a      	orrs	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0ee      	b.n	8002c4e <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	321b      	adds	r2, #27
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	58d3      	ldr	r3, [r2, r3]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	401a      	ands	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	321b      	adds	r2, #27
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	58d3      	ldr	r3, [r2, r3]
 8002a98:	0d5b      	lsrs	r3, r3, #21
 8002a9a:	055b      	lsls	r3, r3, #21
 8002a9c:	0d5a      	lsrs	r2, r3, #21
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e00a      	b.n	8002aba <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	321b      	adds	r2, #27
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	58d3      	ldr	r3, [r2, r3]
 8002ab0:	08db      	lsrs	r3, r3, #3
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	321b      	adds	r2, #27
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	58d3      	ldr	r3, [r2, r3]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	401a      	ands	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	18d3      	adds	r3, r2, r3
 8002ada:	3304      	adds	r3, #4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d003      	beq.n	8002aec <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	611a      	str	r2, [r3, #16]
 8002aea:	e00b      	b.n	8002b04 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	331b      	adds	r3, #27
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	18d3      	adds	r3, r2, r3
 8002af8:	3304      	adds	r3, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	220f      	movs	r2, #15
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	331b      	adds	r3, #27
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	18d3      	adds	r3, r2, r3
 8002b10:	3304      	adds	r3, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	22ff      	movs	r2, #255	@ 0xff
 8002b18:	401a      	ands	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	331b      	adds	r3, #27
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	18d3      	adds	r3, r2, r3
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	0c1a      	lsrs	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	23dc      	movs	r3, #220	@ 0xdc
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	188a      	adds	r2, r1, r2
 8002b46:	18d3      	adds	r3, r2, r3
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	23dc      	movs	r3, #220	@ 0xdc
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	188a      	adds	r2, r1, r2
 8002b5e:	18d3      	adds	r3, r2, r3
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0a1a      	lsrs	r2, r3, #8
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	23dc      	movs	r3, #220	@ 0xdc
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	188a      	adds	r2, r1, r2
 8002b7a:	18d3      	adds	r3, r2, r3
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0c1a      	lsrs	r2, r3, #16
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	3302      	adds	r3, #2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	23dc      	movs	r3, #220	@ 0xdc
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	188a      	adds	r2, r1, r2
 8002b96:	18d3      	adds	r3, r2, r3
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e1a      	lsrs	r2, r3, #24
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	3303      	adds	r3, #3
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	23de      	movs	r3, #222	@ 0xde
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	188a      	adds	r2, r1, r2
 8002bb2:	18d3      	adds	r3, r2, r3
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	23de      	movs	r3, #222	@ 0xde
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	188a      	adds	r2, r1, r2
 8002bcc:	18d3      	adds	r3, r2, r3
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0a1a      	lsrs	r2, r3, #8
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	3305      	adds	r3, #5
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	23de      	movs	r3, #222	@ 0xde
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	188a      	adds	r2, r1, r2
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0c1a      	lsrs	r2, r3, #16
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	3306      	adds	r3, #6
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	23de      	movs	r3, #222	@ 0xde
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	188a      	adds	r2, r1, r2
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e1a      	lsrs	r2, r3, #24
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3307      	adds	r3, #7
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d108      	bne.n	8002c2a <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2120      	movs	r1, #32
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]
 8002c28:	e007      	b.n	8002c3a <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2120      	movs	r1, #32
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e007      	b.n	8002c4e <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	02d2      	lsls	r2, r2, #11
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
  }
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b006      	add	sp, #24
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c60:	200f      	movs	r0, #15
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	2120      	movs	r1, #32
 8002c68:	5c52      	ldrb	r2, [r2, r1]
 8002c6a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	18bb      	adds	r3, r7, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d003      	beq.n	8002c7e <HAL_CAN_ActivateNotification+0x28>
 8002c76:	18bb      	adds	r3, r7, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d109      	bne.n	8002c92 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6959      	ldr	r1, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e007      	b.n	8002ca2 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	2280      	movs	r2, #128	@ 0x80
 8002c98:	02d2      	lsls	r2, r2, #11
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
  }
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b08a      	sub	sp, #40	@ 0x28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4013      	ands	r3, r2
 8002cec:	d100      	bne.n	8002cf0 <HAL_CAN_IRQHandler+0x46>
 8002cee:	e08a      	b.n	8002e06 <HAL_CAN_IRQHandler+0x15c>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d026      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x9c>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d005      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	0010      	movs	r0, r2
 8002d10:	4798      	blx	r3
 8002d12:	e018      	b.n	8002d46 <HAL_CAN_IRQHandler+0x9c>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2204      	movs	r2, #4
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d005      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	2280      	movs	r2, #128	@ 0x80
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	4313      	orrs	r3, r2
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d26:	e00e      	b.n	8002d46 <HAL_CAN_IRQHandler+0x9c>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d005      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	2280      	movs	r2, #128	@ 0x80
 8002d34:	0152      	lsls	r2, r2, #5
 8002d36:	4313      	orrs	r3, r2
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3a:	e004      	b.n	8002d46 <HAL_CAN_IRQHandler+0x9c>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	0010      	movs	r0, r2
 8002d44:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d02a      	beq.n	8002da6 <HAL_CAN_IRQHandler+0xfc>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	0052      	lsls	r2, r2, #1
 8002d58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d005      	beq.n	8002d70 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	0010      	movs	r0, r2
 8002d6c:	4798      	blx	r3
 8002d6e:	e01a      	b.n	8002da6 <HAL_CAN_IRQHandler+0xfc>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	2380      	movs	r3, #128	@ 0x80
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4013      	ands	r3, r2
 8002d78:	d005      	beq.n	8002d86 <HAL_CAN_IRQHandler+0xdc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	2280      	movs	r2, #128	@ 0x80
 8002d7e:	0192      	lsls	r2, r2, #6
 8002d80:	4313      	orrs	r3, r2
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	e00f      	b.n	8002da6 <HAL_CAN_IRQHandler+0xfc>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d005      	beq.n	8002d9c <HAL_CAN_IRQHandler+0xf2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	2280      	movs	r2, #128	@ 0x80
 8002d94:	01d2      	lsls	r2, r2, #7
 8002d96:	4313      	orrs	r3, r2
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9a:	e004      	b.n	8002da6 <HAL_CAN_IRQHandler+0xfc>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	0010      	movs	r0, r2
 8002da4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	4013      	ands	r3, r2
 8002dae:	d02a      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x15c>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	0252      	lsls	r2, r2, #9
 8002db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	029b      	lsls	r3, r3, #10
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d005      	beq.n	8002dd0 <HAL_CAN_IRQHandler+0x126>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	0010      	movs	r0, r2
 8002dcc:	4798      	blx	r3
 8002dce:	e01a      	b.n	8002e06 <HAL_CAN_IRQHandler+0x15c>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	02db      	lsls	r3, r3, #11
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d005      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x13c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	0212      	lsls	r2, r2, #8
 8002de0:	4313      	orrs	r3, r2
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de4:	e00f      	b.n	8002e06 <HAL_CAN_IRQHandler+0x15c>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	031b      	lsls	r3, r3, #12
 8002dec:	4013      	ands	r3, r2
 8002dee:	d005      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x152>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	0252      	lsls	r2, r2, #9
 8002df6:	4313      	orrs	r3, r2
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfa:	e004      	b.n	8002e06 <HAL_CAN_IRQHandler+0x15c>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	0010      	movs	r0, r2
 8002e04:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d00c      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x17e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2210      	movs	r2, #16
 8002e12:	4013      	ands	r3, r2
 8002e14:	d008      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x17e>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2210      	movs	r2, #16
 8002e26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d00c      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x1a0>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2208      	movs	r2, #8
 8002e34:	4013      	ands	r3, r2
 8002e36:	d008      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x1a0>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	0010      	movs	r0, r2
 8002e48:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d00a      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x1be>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x1be>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	0010      	movs	r0, r2
 8002e66:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	2240      	movs	r2, #64	@ 0x40
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d00c      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x1e0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2210      	movs	r2, #16
 8002e74:	4013      	ands	r3, r2
 8002e76:	d008      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x1e0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	2280      	movs	r2, #128	@ 0x80
 8002e7c:	00d2      	lsls	r2, r2, #3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2210      	movs	r2, #16
 8002e88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d00c      	beq.n	8002eac <HAL_CAN_IRQHandler+0x202>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2208      	movs	r2, #8
 8002e96:	4013      	ands	r3, r2
 8002e98:	d008      	beq.n	8002eac <HAL_CAN_IRQHandler+0x202>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d00a      	beq.n	8002eca <HAL_CAN_IRQHandler+0x220>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_CAN_IRQHandler+0x220>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	0010      	movs	r0, r2
 8002ec8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002eca:	6a3a      	ldr	r2, [r7, #32]
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00c      	beq.n	8002eee <HAL_CAN_IRQHandler+0x244>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d008      	beq.n	8002eee <HAL_CAN_IRQHandler+0x244>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	0010      	movs	r0, r2
 8002eec:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002eee:	6a3a      	ldr	r2, [r7, #32]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	025b      	lsls	r3, r3, #9
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00c      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x268>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2208      	movs	r2, #8
 8002efc:	4013      	ands	r3, r2
 8002efe:	d008      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x268>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2208      	movs	r2, #8
 8002f06:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	0010      	movs	r0, r2
 8002f10:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f12:	6a3a      	ldr	r2, [r7, #32]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_CAN_IRQHandler+0x274>
 8002f1c:	e074      	b.n	8003008 <HAL_CAN_IRQHandler+0x35e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2204      	movs	r2, #4
 8002f22:	4013      	ands	r3, r2
 8002f24:	d100      	bne.n	8002f28 <HAL_CAN_IRQHandler+0x27e>
 8002f26:	e06b      	b.n	8003000 <HAL_CAN_IRQHandler+0x356>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d007      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f38:	d003      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f52:	d003      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	2202      	movs	r2, #2
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	2380      	movs	r3, #128	@ 0x80
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4013      	ands	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x2cc>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2204      	movs	r2, #4
 8002f6a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f6c:	d003      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x2cc>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	2204      	movs	r2, #4
 8002f72:	4313      	orrs	r3, r2
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f76:	6a3a      	ldr	r2, [r7, #32]
 8002f78:	2380      	movs	r3, #128	@ 0x80
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d03f      	beq.n	8003000 <HAL_CAN_IRQHandler+0x356>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2270      	movs	r2, #112	@ 0x70
 8002f84:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f86:	d03b      	beq.n	8003000 <HAL_CAN_IRQHandler+0x356>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2270      	movs	r2, #112	@ 0x70
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b60      	cmp	r3, #96	@ 0x60
 8002f90:	d027      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x338>
 8002f92:	d82c      	bhi.n	8002fee <HAL_CAN_IRQHandler+0x344>
 8002f94:	2b50      	cmp	r3, #80	@ 0x50
 8002f96:	d01f      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x32e>
 8002f98:	d829      	bhi.n	8002fee <HAL_CAN_IRQHandler+0x344>
 8002f9a:	2b40      	cmp	r3, #64	@ 0x40
 8002f9c:	d017      	beq.n	8002fce <HAL_CAN_IRQHandler+0x324>
 8002f9e:	d826      	bhi.n	8002fee <HAL_CAN_IRQHandler+0x344>
 8002fa0:	2b30      	cmp	r3, #48	@ 0x30
 8002fa2:	d00f      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x31a>
 8002fa4:	d823      	bhi.n	8002fee <HAL_CAN_IRQHandler+0x344>
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d002      	beq.n	8002fb0 <HAL_CAN_IRQHandler+0x306>
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d005      	beq.n	8002fba <HAL_CAN_IRQHandler+0x310>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fae:	e01e      	b.n	8002fee <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fb8:	e01a      	b.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fc2:	e015      	b.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fcc:	e010      	b.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	2240      	movs	r2, #64	@ 0x40
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fd6:	e00b      	b.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	2280      	movs	r2, #128	@ 0x80
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fe0:	e006      	b.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	0052      	lsls	r2, r2, #1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fec:	e000      	b.n	8002ff0 <HAL_CAN_IRQHandler+0x346>
            break;
 8002fee:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2170      	movs	r1, #112	@ 0x70
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2204      	movs	r2, #4
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_CAN_IRQHandler+0x37a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	0010      	movs	r0, r2
 8003022:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b00a      	add	sp, #40	@ 0x28
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003044:	46c0      	nop			@ (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003094:	46c0      	nop			@ (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030b4:	46c0      	nop			@ (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030c4:	46c0      	nop			@ (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030e4:	46c0      	nop			@ (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}

080030fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	0002      	movs	r2, r0
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b7f      	cmp	r3, #127	@ 0x7f
 800310e:	d809      	bhi.n	8003124 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	001a      	movs	r2, r3
 8003116:	231f      	movs	r3, #31
 8003118:	401a      	ands	r2, r3
 800311a:	4b04      	ldr	r3, [pc, #16]	@ (800312c <__NVIC_EnableIRQ+0x30>)
 800311c:	2101      	movs	r1, #1
 800311e:	4091      	lsls	r1, r2
 8003120:	000a      	movs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
  }
}
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}
 800312c:	e000e100 	.word	0xe000e100

08003130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	0002      	movs	r2, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b7f      	cmp	r3, #127	@ 0x7f
 8003144:	d828      	bhi.n	8003198 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003146:	4a2f      	ldr	r2, [pc, #188]	@ (8003204 <__NVIC_SetPriority+0xd4>)
 8003148:	1dfb      	adds	r3, r7, #7
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b25b      	sxtb	r3, r3
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	33c0      	adds	r3, #192	@ 0xc0
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	589b      	ldr	r3, [r3, r2]
 8003156:	1dfa      	adds	r2, r7, #7
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	0011      	movs	r1, r2
 800315c:	2203      	movs	r2, #3
 800315e:	400a      	ands	r2, r1
 8003160:	00d2      	lsls	r2, r2, #3
 8003162:	21ff      	movs	r1, #255	@ 0xff
 8003164:	4091      	lsls	r1, r2
 8003166:	000a      	movs	r2, r1
 8003168:	43d2      	mvns	r2, r2
 800316a:	401a      	ands	r2, r3
 800316c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	22ff      	movs	r2, #255	@ 0xff
 8003174:	401a      	ands	r2, r3
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	0018      	movs	r0, r3
 800317c:	2303      	movs	r3, #3
 800317e:	4003      	ands	r3, r0
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003184:	481f      	ldr	r0, [pc, #124]	@ (8003204 <__NVIC_SetPriority+0xd4>)
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b25b      	sxtb	r3, r3
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	430a      	orrs	r2, r1
 8003190:	33c0      	adds	r3, #192	@ 0xc0
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003196:	e031      	b.n	80031fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003198:	4a1b      	ldr	r2, [pc, #108]	@ (8003208 <__NVIC_SetPriority+0xd8>)
 800319a:	1dfb      	adds	r3, r7, #7
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	0019      	movs	r1, r3
 80031a0:	230f      	movs	r3, #15
 80031a2:	400b      	ands	r3, r1
 80031a4:	3b08      	subs	r3, #8
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3306      	adds	r3, #6
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	18d3      	adds	r3, r2, r3
 80031ae:	3304      	adds	r3, #4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1dfa      	adds	r2, r7, #7
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	0011      	movs	r1, r2
 80031b8:	2203      	movs	r2, #3
 80031ba:	400a      	ands	r2, r1
 80031bc:	00d2      	lsls	r2, r2, #3
 80031be:	21ff      	movs	r1, #255	@ 0xff
 80031c0:	4091      	lsls	r1, r2
 80031c2:	000a      	movs	r2, r1
 80031c4:	43d2      	mvns	r2, r2
 80031c6:	401a      	ands	r2, r3
 80031c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	22ff      	movs	r2, #255	@ 0xff
 80031d0:	401a      	ands	r2, r3
 80031d2:	1dfb      	adds	r3, r7, #7
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	0018      	movs	r0, r3
 80031d8:	2303      	movs	r3, #3
 80031da:	4003      	ands	r3, r0
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e0:	4809      	ldr	r0, [pc, #36]	@ (8003208 <__NVIC_SetPriority+0xd8>)
 80031e2:	1dfb      	adds	r3, r7, #7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	001c      	movs	r4, r3
 80031e8:	230f      	movs	r3, #15
 80031ea:	4023      	ands	r3, r4
 80031ec:	3b08      	subs	r3, #8
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	430a      	orrs	r2, r1
 80031f2:	3306      	adds	r3, #6
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	18c3      	adds	r3, r0, r3
 80031f8:	3304      	adds	r3, #4
 80031fa:	601a      	str	r2, [r3, #0]
}
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b003      	add	sp, #12
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	045b      	lsls	r3, r3, #17
 800321c:	429a      	cmp	r2, r3
 800321e:	d301      	bcc.n	8003224 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003220:	2301      	movs	r3, #1
 8003222:	e010      	b.n	8003246 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <SysTick_Config+0x44>)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	3a01      	subs	r2, #1
 800322a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322c:	2301      	movs	r3, #1
 800322e:	425b      	negs	r3, r3
 8003230:	2103      	movs	r1, #3
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff ff7c 	bl	8003130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003238:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <SysTick_Config+0x44>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <SysTick_Config+0x44>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	e000e010 	.word	0xe000e010

08003254 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	210f      	movs	r1, #15
 8003260:	187b      	adds	r3, r7, r1
 8003262:	1c02      	adds	r2, r0, #0
 8003264:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	187b      	adds	r3, r7, r1
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b25b      	sxtb	r3, r3
 800326e:	0011      	movs	r1, r2
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff ff5d 	bl	8003130 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	0002      	movs	r2, r0
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800328a:	1dfb      	adds	r3, r7, #7
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b25b      	sxtb	r3, r3
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff ff33 	bl	80030fc <__NVIC_EnableIRQ>
}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b002      	add	sp, #8
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ffaf 	bl	800320c <SysTick_Config>
 80032ae:	0003      	movs	r3, r0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e036      	b.n	800333c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2221      	movs	r2, #33	@ 0x21
 80032d2:	2102      	movs	r1, #2
 80032d4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_DMA_Init+0x8c>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0018      	movs	r0, r3
 8003320:	f000 f9c4 	bl	80036ac <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2221      	movs	r2, #33	@ 0x21
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b004      	add	sp, #16
 8003342:	bd80      	pop	{r7, pc}
 8003344:	ffffc00f 	.word	0xffffc00f

08003348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	2317      	movs	r3, #23
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	5c9b      	ldrb	r3, [r3, r2]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_DMA_Start_IT+0x24>
 8003368:	2302      	movs	r3, #2
 800336a:	e04f      	b.n	800340c <HAL_DMA_Start_IT+0xc4>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	2101      	movs	r1, #1
 8003372:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2221      	movs	r2, #33	@ 0x21
 8003378:	5c9b      	ldrb	r3, [r3, r2]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d13a      	bne.n	80033f6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2221      	movs	r2, #33	@ 0x21
 8003384:	2102      	movs	r1, #2
 8003386:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	438a      	bics	r2, r1
 800339c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f954 	bl	8003652 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	210e      	movs	r1, #14
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00f      	b.n	80033e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	210a      	movs	r1, #10
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2104      	movs	r1, #4
 80033e0:	438a      	bics	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e007      	b.n	8003406 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033fe:	2317      	movs	r3, #23
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003406:	2317      	movs	r3, #23
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	781b      	ldrb	r3, [r3, #0]
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b006      	add	sp, #24
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2221      	movs	r2, #33	@ 0x21
 8003420:	5c9b      	ldrb	r3, [r3, r2]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d008      	beq.n	800343a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2204      	movs	r2, #4
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e020      	b.n	800347c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	210e      	movs	r1, #14
 8003446:	438a      	bics	r2, r1
 8003448:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	438a      	bics	r2, r1
 8003458:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2101      	movs	r1, #1
 8003464:	4091      	lsls	r1, r2
 8003466:	000a      	movs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2221      	movs	r2, #33	@ 0x21
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	210f      	movs	r1, #15
 800348e:	187b      	adds	r3, r7, r1
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2221      	movs	r2, #33	@ 0x21
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d006      	beq.n	80034ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2204      	movs	r2, #4
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
 80034ac:	e028      	b.n	8003500 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	210e      	movs	r1, #14
 80034ba:	438a      	bics	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2101      	movs	r1, #1
 80034ca:	438a      	bics	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d6:	2101      	movs	r1, #1
 80034d8:	4091      	lsls	r1, r2
 80034da:	000a      	movs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2221      	movs	r2, #33	@ 0x21
 80034e2:	2101      	movs	r1, #1
 80034e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	0010      	movs	r0, r2
 80034fe:	4798      	blx	r3
    }
  }
  return status;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	781b      	ldrb	r3, [r3, #0]
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	2204      	movs	r2, #4
 800352c:	409a      	lsls	r2, r3
 800352e:	0013      	movs	r3, r2
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	d024      	beq.n	8003580 <HAL_DMA_IRQHandler+0x72>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2204      	movs	r2, #4
 800353a:	4013      	ands	r3, r2
 800353c:	d020      	beq.n	8003580 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2220      	movs	r2, #32
 8003546:	4013      	ands	r3, r2
 8003548:	d107      	bne.n	800355a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2104      	movs	r1, #4
 8003556:	438a      	bics	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003562:	2104      	movs	r1, #4
 8003564:	4091      	lsls	r1, r2
 8003566:	000a      	movs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d100      	bne.n	8003574 <HAL_DMA_IRQHandler+0x66>
 8003572:	e06a      	b.n	800364a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	0010      	movs	r0, r2
 800357c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800357e:	e064      	b.n	800364a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	2202      	movs	r2, #2
 8003586:	409a      	lsls	r2, r3
 8003588:	0013      	movs	r3, r2
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	d02b      	beq.n	80035e8 <HAL_DMA_IRQHandler+0xda>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d027      	beq.n	80035e8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	4013      	ands	r3, r2
 80035a2:	d10b      	bne.n	80035bc <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	210a      	movs	r1, #10
 80035b0:	438a      	bics	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2221      	movs	r2, #33	@ 0x21
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	2102      	movs	r1, #2
 80035c6:	4091      	lsls	r1, r2
 80035c8:	000a      	movs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	2100      	movs	r1, #0
 80035d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d036      	beq.n	800364a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	0010      	movs	r0, r2
 80035e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035e6:	e030      	b.n	800364a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	2208      	movs	r2, #8
 80035ee:	409a      	lsls	r2, r3
 80035f0:	0013      	movs	r3, r2
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	d028      	beq.n	800364a <HAL_DMA_IRQHandler+0x13c>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2208      	movs	r2, #8
 80035fc:	4013      	ands	r3, r2
 80035fe:	d024      	beq.n	800364a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	210e      	movs	r1, #14
 800360c:	438a      	bics	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	2101      	movs	r1, #1
 800361a:	4091      	lsls	r1, r2
 800361c:	000a      	movs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2221      	movs	r2, #33	@ 0x21
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	0010      	movs	r0, r2
 8003646:	4798      	blx	r3
    }
  }
}
 8003648:	e7ff      	b.n	800364a <HAL_DMA_IRQHandler+0x13c>
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b004      	add	sp, #16
 8003650:	bd80      	pop	{r7, pc}

08003652 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	2101      	movs	r1, #1
 800366a:	4091      	lsls	r1, r2
 800366c:	000a      	movs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b10      	cmp	r3, #16
 800367e:	d108      	bne.n	8003692 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003690:	e007      	b.n	80036a2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b004      	add	sp, #16
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a08      	ldr	r2, [pc, #32]	@ (80036dc <DMA_CalcBaseAndBitshift+0x30>)
 80036ba:	4694      	mov	ip, r2
 80036bc:	4463      	add	r3, ip
 80036be:	2114      	movs	r1, #20
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fc fd21 	bl	8000108 <__udivsi3>
 80036c6:	0003      	movs	r3, r0
 80036c8:	009a      	lsls	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a03      	ldr	r2, [pc, #12]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x34>)
 80036d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	bffdfff8 	.word	0xbffdfff8
 80036e0:	40020000 	.word	0x40020000

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f2:	e155      	b.n	80039a0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4091      	lsls	r1, r2
 80036fe:	000a      	movs	r2, r1
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d100      	bne.n	800370c <HAL_GPIO_Init+0x28>
 800370a:	e146      	b.n	800399a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2203      	movs	r2, #3
 8003712:	4013      	ands	r3, r2
 8003714:	2b01      	cmp	r3, #1
 8003716:	d005      	beq.n	8003724 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003720:	2b02      	cmp	r3, #2
 8003722:	d130      	bne.n	8003786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	409a      	lsls	r2, r3
 8003732:	0013      	movs	r3, r2
 8003734:	43da      	mvns	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	409a      	lsls	r2, r3
 8003746:	0013      	movs	r3, r2
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375a:	2201      	movs	r2, #1
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	409a      	lsls	r2, r3
 8003760:	0013      	movs	r3, r2
 8003762:	43da      	mvns	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	2201      	movs	r2, #1
 8003772:	401a      	ands	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	409a      	lsls	r2, r3
 8003778:	0013      	movs	r3, r2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2203      	movs	r2, #3
 800378c:	4013      	ands	r3, r2
 800378e:	2b03      	cmp	r3, #3
 8003790:	d017      	beq.n	80037c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	409a      	lsls	r2, r3
 80037a0:	0013      	movs	r3, r2
 80037a2:	43da      	mvns	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	409a      	lsls	r2, r3
 80037b4:	0013      	movs	r3, r2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d123      	bne.n	8003816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	08da      	lsrs	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3208      	adds	r2, #8
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	58d3      	ldr	r3, [r2, r3]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2207      	movs	r2, #7
 80037e0:	4013      	ands	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	220f      	movs	r2, #15
 80037e6:	409a      	lsls	r2, r3
 80037e8:	0013      	movs	r3, r2
 80037ea:	43da      	mvns	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2107      	movs	r1, #7
 80037fa:	400b      	ands	r3, r1
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	409a      	lsls	r2, r3
 8003800:	0013      	movs	r3, r2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	409a      	lsls	r2, r3
 8003824:	0013      	movs	r3, r2
 8003826:	43da      	mvns	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2203      	movs	r2, #3
 8003834:	401a      	ands	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	0013      	movs	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	23c0      	movs	r3, #192	@ 0xc0
 8003850:	029b      	lsls	r3, r3, #10
 8003852:	4013      	ands	r3, r2
 8003854:	d100      	bne.n	8003858 <HAL_GPIO_Init+0x174>
 8003856:	e0a0      	b.n	800399a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003858:	4b57      	ldr	r3, [pc, #348]	@ (80039b8 <HAL_GPIO_Init+0x2d4>)
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	4b56      	ldr	r3, [pc, #344]	@ (80039b8 <HAL_GPIO_Init+0x2d4>)
 800385e:	2101      	movs	r1, #1
 8003860:	430a      	orrs	r2, r1
 8003862:	619a      	str	r2, [r3, #24]
 8003864:	4b54      	ldr	r3, [pc, #336]	@ (80039b8 <HAL_GPIO_Init+0x2d4>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003870:	4a52      	ldr	r2, [pc, #328]	@ (80039bc <HAL_GPIO_Init+0x2d8>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	589b      	ldr	r3, [r3, r2]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2203      	movs	r2, #3
 8003882:	4013      	ands	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	220f      	movs	r2, #15
 8003888:	409a      	lsls	r2, r3
 800388a:	0013      	movs	r3, r2
 800388c:	43da      	mvns	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	2390      	movs	r3, #144	@ 0x90
 8003898:	05db      	lsls	r3, r3, #23
 800389a:	429a      	cmp	r2, r3
 800389c:	d019      	beq.n	80038d2 <HAL_GPIO_Init+0x1ee>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a47      	ldr	r2, [pc, #284]	@ (80039c0 <HAL_GPIO_Init+0x2dc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_GPIO_Init+0x1ea>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a46      	ldr	r2, [pc, #280]	@ (80039c4 <HAL_GPIO_Init+0x2e0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00d      	beq.n	80038ca <HAL_GPIO_Init+0x1e6>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a45      	ldr	r2, [pc, #276]	@ (80039c8 <HAL_GPIO_Init+0x2e4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <HAL_GPIO_Init+0x1e2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a44      	ldr	r2, [pc, #272]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_GPIO_Init+0x1de>
 80038be:	2304      	movs	r3, #4
 80038c0:	e008      	b.n	80038d4 <HAL_GPIO_Init+0x1f0>
 80038c2:	2305      	movs	r3, #5
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_Init+0x1f0>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e004      	b.n	80038d4 <HAL_GPIO_Init+0x1f0>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e002      	b.n	80038d4 <HAL_GPIO_Init+0x1f0>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_GPIO_Init+0x1f0>
 80038d2:	2300      	movs	r3, #0
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	2103      	movs	r1, #3
 80038d8:	400a      	ands	r2, r1
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	4093      	lsls	r3, r2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038e4:	4935      	ldr	r1, [pc, #212]	@ (80039bc <HAL_GPIO_Init+0x2d8>)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	3302      	adds	r3, #2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f2:	4b37      	ldr	r3, [pc, #220]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	035b      	lsls	r3, r3, #13
 800390a:	4013      	ands	r3, r2
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003916:	4b2e      	ldr	r3, [pc, #184]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800391c:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	43da      	mvns	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	2380      	movs	r3, #128	@ 0x80
 8003932:	039b      	lsls	r3, r3, #14
 8003934:	4013      	ands	r3, r2
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003940:	4b23      	ldr	r3, [pc, #140]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003946:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43da      	mvns	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	029b      	lsls	r3, r3, #10
 800395e:	4013      	ands	r3, r2
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800396a:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003970:	4b17      	ldr	r3, [pc, #92]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43da      	mvns	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	025b      	lsls	r3, r3, #9
 8003988:	4013      	ands	r3, r2
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003994:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3301      	adds	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	40da      	lsrs	r2, r3
 80039a8:	1e13      	subs	r3, r2, #0
 80039aa:	d000      	beq.n	80039ae <HAL_GPIO_Init+0x2ca>
 80039ac:	e6a2      	b.n	80036f4 <HAL_GPIO_Init+0x10>
  } 
}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b006      	add	sp, #24
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40010000 	.word	0x40010000
 80039c0:	48000400 	.word	0x48000400
 80039c4:	48000800 	.word	0x48000800
 80039c8:	48000c00 	.word	0x48000c00
 80039cc:	48001000 	.word	0x48001000
 80039d0:	40010400 	.word	0x40010400

080039d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	0008      	movs	r0, r1
 80039de:	0011      	movs	r1, r2
 80039e0:	1cbb      	adds	r3, r7, #2
 80039e2:	1c02      	adds	r2, r0, #0
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	1c7b      	adds	r3, r7, #1
 80039e8:	1c0a      	adds	r2, r1, #0
 80039ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039ec:	1c7b      	adds	r3, r7, #1
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039f4:	1cbb      	adds	r3, r7, #2
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039fc:	e003      	b.n	8003a06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fe:	1cbb      	adds	r3, r7, #2
 8003a00:	881a      	ldrh	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	000a      	movs	r2, r1
 8003a18:	1cbb      	adds	r3, r7, #2
 8003a1a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a22:	1cbb      	adds	r3, r7, #2
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	041a      	lsls	r2, r3, #16
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	1cb9      	adds	r1, r7, #2
 8003a32:	8809      	ldrh	r1, [r1, #0]
 8003a34:	400b      	ands	r3, r1
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b004      	add	sp, #16
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f000 fb76 	bl	8004144 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d100      	bne.n	8003a64 <HAL_RCC_OscConfig+0x20>
 8003a62:	e08e      	b.n	8003b82 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a64:	4bc5      	ldr	r3, [pc, #788]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	220c      	movs	r2, #12
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d00e      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a70:	4bc2      	ldr	r3, [pc, #776]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	220c      	movs	r2, #12
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d117      	bne.n	8003aac <HAL_RCC_OscConfig+0x68>
 8003a7c:	4bbf      	ldr	r3, [pc, #764]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	23c0      	movs	r3, #192	@ 0xc0
 8003a82:	025b      	lsls	r3, r3, #9
 8003a84:	401a      	ands	r2, r3
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	025b      	lsls	r3, r3, #9
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10e      	bne.n	8003aac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8e:	4bbb      	ldr	r3, [pc, #748]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	029b      	lsls	r3, r3, #10
 8003a96:	4013      	ands	r3, r2
 8003a98:	d100      	bne.n	8003a9c <HAL_RCC_OscConfig+0x58>
 8003a9a:	e071      	b.n	8003b80 <HAL_RCC_OscConfig+0x13c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d000      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x62>
 8003aa4:	e06c      	b.n	8003b80 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f000 fb4c 	bl	8004144 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x80>
 8003ab4:	4bb1      	ldr	r3, [pc, #708]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4bb0      	ldr	r3, [pc, #704]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003aba:	2180      	movs	r1, #128	@ 0x80
 8003abc:	0249      	lsls	r1, r1, #9
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e02f      	b.n	8003b24 <HAL_RCC_OscConfig+0xe0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10c      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xa2>
 8003acc:	4bab      	ldr	r3, [pc, #684]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4baa      	ldr	r3, [pc, #680]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003ad2:	49ab      	ldr	r1, [pc, #684]	@ (8003d80 <HAL_RCC_OscConfig+0x33c>)
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	4ba8      	ldr	r3, [pc, #672]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4ba7      	ldr	r3, [pc, #668]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003ade:	49a9      	ldr	r1, [pc, #676]	@ (8003d84 <HAL_RCC_OscConfig+0x340>)
 8003ae0:	400a      	ands	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e01e      	b.n	8003b24 <HAL_RCC_OscConfig+0xe0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d10e      	bne.n	8003b0c <HAL_RCC_OscConfig+0xc8>
 8003aee:	4ba3      	ldr	r3, [pc, #652]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4ba2      	ldr	r3, [pc, #648]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003af4:	2180      	movs	r1, #128	@ 0x80
 8003af6:	02c9      	lsls	r1, r1, #11
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	4b9f      	ldr	r3, [pc, #636]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b9e      	ldr	r3, [pc, #632]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b02:	2180      	movs	r1, #128	@ 0x80
 8003b04:	0249      	lsls	r1, r1, #9
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xe0>
 8003b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b9a      	ldr	r3, [pc, #616]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b12:	499b      	ldr	r1, [pc, #620]	@ (8003d80 <HAL_RCC_OscConfig+0x33c>)
 8003b14:	400a      	ands	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	4b98      	ldr	r3, [pc, #608]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b97      	ldr	r3, [pc, #604]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b1e:	4999      	ldr	r1, [pc, #612]	@ (8003d84 <HAL_RCC_OscConfig+0x340>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d014      	beq.n	8003b56 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f9c2 	bl	8001eb4 <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b36:	f7fe f9bd 	bl	8001eb4 <HAL_GetTick>
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b64      	cmp	r3, #100	@ 0x64
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e2fd      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b48:	4b8c      	ldr	r3, [pc, #560]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	4013      	ands	r3, r2
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0xf2>
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe f9ad 	bl	8001eb4 <HAL_GetTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe f9a8 	bl	8001eb4 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	@ 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e2e8      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	4b82      	ldr	r3, [pc, #520]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	029b      	lsls	r3, r3, #10
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x11c>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2202      	movs	r2, #2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <HAL_RCC_OscConfig+0x14a>
 8003b8c:	e06c      	b.n	8003c68 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	220c      	movs	r2, #12
 8003b94:	4013      	ands	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b98:	4b78      	ldr	r3, [pc, #480]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	220c      	movs	r2, #12
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d11f      	bne.n	8003be4 <HAL_RCC_OscConfig+0x1a0>
 8003ba4:	4b75      	ldr	r3, [pc, #468]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	23c0      	movs	r3, #192	@ 0xc0
 8003baa:	025b      	lsls	r3, r3, #9
 8003bac:	401a      	ands	r2, r3
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d116      	bne.n	8003be4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb6:	4b71      	ldr	r3, [pc, #452]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_OscConfig+0x188>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e2bb      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	22f8      	movs	r2, #248	@ 0xf8
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00da      	lsls	r2, r3, #3
 8003bdc:	4b67      	ldr	r3, [pc, #412]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be2:	e041      	b.n	8003c68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d024      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bec:	4b63      	ldr	r3, [pc, #396]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b62      	ldr	r3, [pc, #392]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe f95c 	bl	8001eb4 <HAL_GetTick>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fe f957 	bl	8001eb4 <HAL_GetTick>
 8003c06:	0002      	movs	r2, r0
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e297      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	4b59      	ldr	r3, [pc, #356]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d0f1      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b57      	ldr	r3, [pc, #348]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	22f8      	movs	r2, #248	@ 0xf8
 8003c24:	4393      	bics	r3, r2
 8003c26:	0019      	movs	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	00da      	lsls	r2, r3, #3
 8003c2e:	4b53      	ldr	r3, [pc, #332]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e018      	b.n	8003c68 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b51      	ldr	r3, [pc, #324]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b50      	ldr	r3, [pc, #320]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	438a      	bics	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe f937 	bl	8001eb4 <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fe f932 	bl	8001eb4 <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e272      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	4b47      	ldr	r3, [pc, #284]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d1f1      	bne.n	8003c4c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d036      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d019      	beq.n	8003cae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b40      	ldr	r3, [pc, #256]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c80:	2101      	movs	r1, #1
 8003c82:	430a      	orrs	r2, r1
 8003c84:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c86:	f7fe f915 	bl	8001eb4 <HAL_GetTick>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c90:	f7fe f910 	bl	8001eb4 <HAL_GetTick>
 8003c94:	0002      	movs	r2, r0
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e250      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d0f1      	beq.n	8003c90 <HAL_RCC_OscConfig+0x24c>
 8003cac:	e018      	b.n	8003ce0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cae:	4b33      	ldr	r3, [pc, #204]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cb2:	4b32      	ldr	r3, [pc, #200]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	438a      	bics	r2, r1
 8003cb8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cba:	f7fe f8fb 	bl	8001eb4 <HAL_GetTick>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fe f8f6 	bl	8001eb4 <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e236      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd6:	4b29      	ldr	r3, [pc, #164]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d1f1      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d100      	bne.n	8003cec <HAL_RCC_OscConfig+0x2a8>
 8003cea:	e0b5      	b.n	8003e58 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cec:	201f      	movs	r0, #31
 8003cee:	183b      	adds	r3, r7, r0
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	055b      	lsls	r3, r3, #21
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d110      	bne.n	8003d22 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d00:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003d06:	2180      	movs	r1, #128	@ 0x80
 8003d08:	0549      	lsls	r1, r1, #21
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	61da      	str	r2, [r3, #28]
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	2380      	movs	r3, #128	@ 0x80
 8003d14:	055b      	lsls	r3, r3, #21
 8003d16:	4013      	ands	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <HAL_RCC_OscConfig+0x344>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	2380      	movs	r3, #128	@ 0x80
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d11a      	bne.n	8003d64 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b16      	ldr	r3, [pc, #88]	@ (8003d88 <HAL_RCC_OscConfig+0x344>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <HAL_RCC_OscConfig+0x344>)
 8003d34:	2180      	movs	r1, #128	@ 0x80
 8003d36:	0049      	lsls	r1, r1, #1
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3c:	f7fe f8ba 	bl	8001eb4 <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fe f8b5 	bl	8001eb4 <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b64      	cmp	r3, #100	@ 0x64
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1f5      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_OscConfig+0x344>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4013      	ands	r3, r2
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10f      	bne.n	8003d8c <HAL_RCC_OscConfig+0x348>
 8003d6c:	4b03      	ldr	r3, [pc, #12]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	4b02      	ldr	r3, [pc, #8]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003d72:	2101      	movs	r1, #1
 8003d74:	430a      	orrs	r2, r1
 8003d76:	621a      	str	r2, [r3, #32]
 8003d78:	e036      	b.n	8003de8 <HAL_RCC_OscConfig+0x3a4>
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	fffeffff 	.word	0xfffeffff
 8003d84:	fffbffff 	.word	0xfffbffff
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10c      	bne.n	8003dae <HAL_RCC_OscConfig+0x36a>
 8003d94:	4bca      	ldr	r3, [pc, #808]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	4bc9      	ldr	r3, [pc, #804]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	621a      	str	r2, [r3, #32]
 8003da0:	4bc7      	ldr	r3, [pc, #796]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	4bc6      	ldr	r3, [pc, #792]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003da6:	2104      	movs	r1, #4
 8003da8:	438a      	bics	r2, r1
 8003daa:	621a      	str	r2, [r3, #32]
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x3a4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x38c>
 8003db6:	4bc2      	ldr	r3, [pc, #776]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	4bc1      	ldr	r3, [pc, #772]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	621a      	str	r2, [r3, #32]
 8003dc2:	4bbf      	ldr	r3, [pc, #764]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003dc4:	6a1a      	ldr	r2, [r3, #32]
 8003dc6:	4bbe      	ldr	r3, [pc, #760]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	621a      	str	r2, [r3, #32]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x3a4>
 8003dd0:	4bbb      	ldr	r3, [pc, #748]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	4bba      	ldr	r3, [pc, #744]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	438a      	bics	r2, r1
 8003dda:	621a      	str	r2, [r3, #32]
 8003ddc:	4bb8      	ldr	r3, [pc, #736]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	4bb7      	ldr	r3, [pc, #732]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003de2:	2104      	movs	r1, #4
 8003de4:	438a      	bics	r2, r1
 8003de6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d014      	beq.n	8003e1a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fe f860 	bl	8001eb4 <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df8:	e009      	b.n	8003e0e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fe f85b 	bl	8001eb4 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	4aaf      	ldr	r2, [pc, #700]	@ (80040c4 <HAL_RCC_OscConfig+0x680>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e19a      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	4bac      	ldr	r3, [pc, #688]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	2202      	movs	r2, #2
 8003e14:	4013      	ands	r3, r2
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x3b6>
 8003e18:	e013      	b.n	8003e42 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe f84b 	bl	8001eb4 <HAL_GetTick>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e22:	e009      	b.n	8003e38 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fe f846 	bl	8001eb4 <HAL_GetTick>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	4aa5      	ldr	r2, [pc, #660]	@ (80040c4 <HAL_RCC_OscConfig+0x680>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e185      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	4ba1      	ldr	r3, [pc, #644]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e42:	231f      	movs	r3, #31
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b9c      	ldr	r3, [pc, #624]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	4b9b      	ldr	r3, [pc, #620]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e52:	499d      	ldr	r1, [pc, #628]	@ (80040c8 <HAL_RCC_OscConfig+0x684>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d063      	beq.n	8003f2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d12a      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e6a:	4b95      	ldr	r3, [pc, #596]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e6e:	4b94      	ldr	r3, [pc, #592]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e70:	2104      	movs	r1, #4
 8003e72:	430a      	orrs	r2, r1
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e76:	4b92      	ldr	r3, [pc, #584]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e7a:	4b91      	ldr	r3, [pc, #580]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fe f817 	bl	8001eb4 <HAL_GetTick>
 8003e86:	0003      	movs	r3, r0
 8003e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e8c:	f7fe f812 	bl	8001eb4 <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e152      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e9e:	4b88      	ldr	r3, [pc, #544]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d0f1      	beq.n	8003e8c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ea8:	4b85      	ldr	r3, [pc, #532]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eac:	22f8      	movs	r2, #248	@ 0xf8
 8003eae:	4393      	bics	r3, r2
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	00da      	lsls	r2, r3, #3
 8003eb8:	4b81      	ldr	r3, [pc, #516]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ebe:	e034      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	3305      	adds	r3, #5
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003ec8:	4b7d      	ldr	r3, [pc, #500]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003ece:	2104      	movs	r1, #4
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ed4:	4b7a      	ldr	r3, [pc, #488]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed8:	22f8      	movs	r2, #248	@ 0xf8
 8003eda:	4393      	bics	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	00da      	lsls	r2, r3, #3
 8003ee4:	4b76      	ldr	r3, [pc, #472]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003eea:	e01e      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003eec:	4b74      	ldr	r3, [pc, #464]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef0:	4b73      	ldr	r3, [pc, #460]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003ef2:	2104      	movs	r1, #4
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003ef8:	4b71      	ldr	r3, [pc, #452]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003efc:	4b70      	ldr	r3, [pc, #448]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003efe:	2101      	movs	r1, #1
 8003f00:	438a      	bics	r2, r1
 8003f02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fd ffd6 	bl	8001eb4 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f0e:	f7fd ffd1 	bl	8001eb4 <HAL_GetTick>
 8003f12:	0002      	movs	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e111      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f20:	4b67      	ldr	r3, [pc, #412]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f24:	2202      	movs	r2, #2
 8003f26:	4013      	ands	r3, r2
 8003f28:	d1f1      	bne.n	8003f0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	4013      	ands	r3, r2
 8003f32:	d05c      	beq.n	8003fee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f34:	4b62      	ldr	r3, [pc, #392]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	220c      	movs	r2, #12
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d00e      	beq.n	8003f5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f40:	4b5f      	ldr	r3, [pc, #380]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	220c      	movs	r2, #12
 8003f46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d114      	bne.n	8003f76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	23c0      	movs	r3, #192	@ 0xc0
 8003f52:	025b      	lsls	r3, r3, #9
 8003f54:	401a      	ands	r2, r3
 8003f56:	23c0      	movs	r3, #192	@ 0xc0
 8003f58:	025b      	lsls	r3, r3, #9
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f5e:	4b58      	ldr	r3, [pc, #352]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	029b      	lsls	r3, r3, #10
 8003f66:	4013      	ands	r3, r2
 8003f68:	d040      	beq.n	8003fec <HAL_RCC_OscConfig+0x5a8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d03c      	beq.n	8003fec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0e6      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01b      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f7e:	4b50      	ldr	r3, [pc, #320]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f82:	4b4f      	ldr	r3, [pc, #316]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003f84:	2180      	movs	r1, #128	@ 0x80
 8003f86:	0249      	lsls	r1, r1, #9
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fd ff92 	bl	8001eb4 <HAL_GetTick>
 8003f90:	0003      	movs	r3, r0
 8003f92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f96:	f7fd ff8d 	bl	8001eb4 <HAL_GetTick>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e0cd      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fa8:	4b45      	ldr	r3, [pc, #276]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fac:	2380      	movs	r3, #128	@ 0x80
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x552>
 8003fb4:	e01b      	b.n	8003fee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fb6:	4b42      	ldr	r3, [pc, #264]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fba:	4b41      	ldr	r3, [pc, #260]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003fbc:	4943      	ldr	r1, [pc, #268]	@ (80040cc <HAL_RCC_OscConfig+0x688>)
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fd ff77 	bl	8001eb4 <HAL_GetTick>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fcc:	f7fd ff72 	bl	8001eb4 <HAL_GetTick>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e0b2      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003fde:	4b38      	ldr	r3, [pc, #224]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x588>
 8003fea:	e000      	b.n	8003fee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003fec:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d100      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x5b4>
 8003ff6:	e0a4      	b.n	8004142 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff8:	4b31      	ldr	r3, [pc, #196]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	220c      	movs	r2, #12
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b08      	cmp	r3, #8
 8004002:	d100      	bne.n	8004006 <HAL_RCC_OscConfig+0x5c2>
 8004004:	e078      	b.n	80040f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	2b02      	cmp	r3, #2
 800400c:	d14c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b2b      	ldr	r3, [pc, #172]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004014:	492e      	ldr	r1, [pc, #184]	@ (80040d0 <HAL_RCC_OscConfig+0x68c>)
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fd ff4b 	bl	8001eb4 <HAL_GetTick>
 800401e:	0003      	movs	r3, r0
 8004020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd ff46 	bl	8001eb4 <HAL_GetTick>
 8004028:	0002      	movs	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e086      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	2380      	movs	r3, #128	@ 0x80
 800403c:	049b      	lsls	r3, r3, #18
 800403e:	4013      	ands	r3, r2
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004042:	4b1f      	ldr	r3, [pc, #124]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	220f      	movs	r2, #15
 8004048:	4393      	bics	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004050:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004052:	430a      	orrs	r2, r1
 8004054:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004056:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_RCC_OscConfig+0x690>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	431a      	orrs	r2, r3
 800406a:	4b15      	ldr	r3, [pc, #84]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004070:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b12      	ldr	r3, [pc, #72]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 8004076:	2180      	movs	r1, #128	@ 0x80
 8004078:	0449      	lsls	r1, r1, #17
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fd ff19 	bl	8001eb4 <HAL_GetTick>
 8004082:	0003      	movs	r3, r0
 8004084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd ff14 	bl	8001eb4 <HAL_GetTick>
 800408c:	0002      	movs	r2, r0
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e054      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409a:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	049b      	lsls	r3, r3, #18
 80040a2:	4013      	ands	r3, r2
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x644>
 80040a6:	e04c      	b.n	8004142 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <HAL_RCC_OscConfig+0x67c>)
 80040ae:	4908      	ldr	r1, [pc, #32]	@ (80040d0 <HAL_RCC_OscConfig+0x68c>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fefe 	bl	8001eb4 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x6a6>
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	40021000 	.word	0x40021000
 80040c4:	00001388 	.word	0x00001388
 80040c8:	efffffff 	.word	0xefffffff
 80040cc:	fffeffff 	.word	0xfffeffff
 80040d0:	feffffff 	.word	0xfeffffff
 80040d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd feec 	bl	8001eb4 <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e02c      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ea:	4b18      	ldr	r3, [pc, #96]	@ (800414c <HAL_RCC_OscConfig+0x708>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	049b      	lsls	r3, r3, #18
 80040f2:	4013      	ands	r3, r2
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x694>
 80040f6:	e024      	b.n	8004142 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e01f      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <HAL_RCC_OscConfig+0x708>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <HAL_RCC_OscConfig+0x708>)
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	23c0      	movs	r3, #192	@ 0xc0
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411c:	429a      	cmp	r2, r3
 800411e:	d10e      	bne.n	800413e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	220f      	movs	r2, #15
 8004124:	401a      	ands	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d107      	bne.n	800413e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	23f0      	movs	r3, #240	@ 0xf0
 8004132:	039b      	lsls	r3, r3, #14
 8004134:	401a      	ands	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b008      	add	sp, #32
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000

08004150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0bf      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2201      	movs	r2, #1
 800416a:	4013      	ands	r3, r2
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d911      	bls.n	8004196 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b5e      	ldr	r3, [pc, #376]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2201      	movs	r2, #1
 8004178:	4393      	bics	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	4b5b      	ldr	r3, [pc, #364]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004184:	4b59      	ldr	r3, [pc, #356]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2201      	movs	r2, #1
 800418a:	4013      	ands	r3, r2
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d001      	beq.n	8004196 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0a6      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	d015      	beq.n	80041cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2204      	movs	r2, #4
 80041a6:	4013      	ands	r3, r2
 80041a8:	d006      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041aa:	4b51      	ldr	r3, [pc, #324]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	4b50      	ldr	r3, [pc, #320]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80041b0:	21e0      	movs	r1, #224	@ 0xe0
 80041b2:	00c9      	lsls	r1, r1, #3
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b4d      	ldr	r3, [pc, #308]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	22f0      	movs	r2, #240	@ 0xf0
 80041be:	4393      	bics	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	4b4a      	ldr	r3, [pc, #296]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	4013      	ands	r3, r2
 80041d4:	d04c      	beq.n	8004270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	4b44      	ldr	r3, [pc, #272]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	4013      	ands	r3, r2
 80041e8:	d120      	bne.n	800422c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07a      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	049b      	lsls	r3, r3, #18
 80041fe:	4013      	ands	r3, r2
 8004200:	d114      	bne.n	800422c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06e      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800420e:	4b38      	ldr	r3, [pc, #224]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 8004210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004212:	2380      	movs	r3, #128	@ 0x80
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	4013      	ands	r3, r2
 8004218:	d108      	bne.n	800422c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e062      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	4b34      	ldr	r3, [pc, #208]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2202      	movs	r2, #2
 8004224:	4013      	ands	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e05b      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422c:	4b30      	ldr	r3, [pc, #192]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	4393      	bics	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004240:	f7fd fe38 	bl	8001eb4 <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	e009      	b.n	800425e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424a:	f7fd fe33 	bl	8001eb4 <HAL_GetTick>
 800424e:	0002      	movs	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <HAL_RCC_ClockConfig+0x1a4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e042      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	220c      	movs	r2, #12
 8004264:	401a      	ands	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1ec      	bne.n	800424a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2201      	movs	r2, #1
 8004276:	4013      	ands	r3, r2
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d211      	bcs.n	80042a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	4393      	bics	r3, r2
 8004286:	0019      	movs	r1, r3
 8004288:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004290:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <HAL_RCC_ClockConfig+0x19c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2201      	movs	r2, #1
 8004296:	4013      	ands	r3, r2
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e020      	b.n	80042e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2204      	movs	r2, #4
 80042a8:	4013      	ands	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042ac:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a11      	ldr	r2, [pc, #68]	@ (80042f8 <HAL_RCC_ClockConfig+0x1a8>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042c0:	f000 f820 	bl	8004304 <HAL_RCC_GetSysClockFreq>
 80042c4:	0001      	movs	r1, r0
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_RCC_ClockConfig+0x1a0>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	220f      	movs	r2, #15
 80042ce:	4013      	ands	r3, r2
 80042d0:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <HAL_RCC_ClockConfig+0x1ac>)
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	000a      	movs	r2, r1
 80042d6:	40da      	lsrs	r2, r3
 80042d8:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <HAL_RCC_ClockConfig+0x1b0>)
 80042da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042dc:	2003      	movs	r0, #3
 80042de:	f7fd fda3 	bl	8001e28 <HAL_InitTick>
  
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40022000 	.word	0x40022000
 80042f0:	40021000 	.word	0x40021000
 80042f4:	00001388 	.word	0x00001388
 80042f8:	fffff8ff 	.word	0xfffff8ff
 80042fc:	08006664 	.word	0x08006664
 8004300:	20000010 	.word	0x20000010

08004304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800431e:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	220c      	movs	r2, #12
 8004328:	4013      	ands	r3, r2
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d046      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0xb8>
 800432e:	d848      	bhi.n	80043c2 <HAL_RCC_GetSysClockFreq+0xbe>
 8004330:	2b04      	cmp	r3, #4
 8004332:	d002      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x36>
 8004334:	2b08      	cmp	r3, #8
 8004336:	d003      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x3c>
 8004338:	e043      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800433a:	4b27      	ldr	r3, [pc, #156]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800433c:	613b      	str	r3, [r7, #16]
      break;
 800433e:	e043      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	0c9b      	lsrs	r3, r3, #18
 8004344:	220f      	movs	r2, #15
 8004346:	4013      	ands	r3, r2
 8004348:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <HAL_RCC_GetSysClockFreq+0xd8>)
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800434e:	4b21      	ldr	r3, [pc, #132]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	220f      	movs	r2, #15
 8004354:	4013      	ands	r3, r2
 8004356:	4a22      	ldr	r2, [pc, #136]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	23c0      	movs	r3, #192	@ 0xc0
 8004360:	025b      	lsls	r3, r3, #9
 8004362:	401a      	ands	r2, r3
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	025b      	lsls	r3, r3, #9
 8004368:	429a      	cmp	r2, r3
 800436a:	d109      	bne.n	8004380 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	481a      	ldr	r0, [pc, #104]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004370:	f7fb feca 	bl	8000108 <__udivsi3>
 8004374:	0003      	movs	r3, r0
 8004376:	001a      	movs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4353      	muls	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e01a      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	23c0      	movs	r3, #192	@ 0xc0
 8004384:	025b      	lsls	r3, r3, #9
 8004386:	401a      	ands	r2, r3
 8004388:	23c0      	movs	r3, #192	@ 0xc0
 800438a:	025b      	lsls	r3, r3, #9
 800438c:	429a      	cmp	r2, r3
 800438e:	d109      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4814      	ldr	r0, [pc, #80]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004394:	f7fb feb8 	bl	8000108 <__udivsi3>
 8004398:	0003      	movs	r3, r0
 800439a:	001a      	movs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4353      	muls	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	480c      	ldr	r0, [pc, #48]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043a8:	f7fb feae 	bl	8000108 <__udivsi3>
 80043ac:	0003      	movs	r3, r0
 80043ae:	001a      	movs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4353      	muls	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	613b      	str	r3, [r7, #16]
      break;
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80043bc:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80043be:	613b      	str	r3, [r7, #16]
      break;
 80043c0:	e002      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043c2:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043c4:	613b      	str	r3, [r7, #16]
      break;
 80043c6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80043c8:	693b      	ldr	r3, [r7, #16]
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b006      	add	sp, #24
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	40021000 	.word	0x40021000
 80043d8:	007a1200 	.word	0x007a1200
 80043dc:	080066b8 	.word	0x080066b8
 80043e0:	080066c8 	.word	0x080066c8
 80043e4:	02dc6c00 	.word	0x02dc6c00

080043e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b02      	ldr	r3, [pc, #8]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	20000010 	.word	0x20000010

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004400:	f7ff fff2 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004404:	0001      	movs	r1, r0
 8004406:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	2207      	movs	r2, #7
 800440e:	4013      	ands	r3, r2
 8004410:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	40d9      	lsrs	r1, r3
 8004416:	000b      	movs	r3, r1
}    
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	40021000 	.word	0x40021000
 8004424:	08006674 	.word	0x08006674

08004428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	025b      	lsls	r3, r3, #9
 8004440:	4013      	ands	r3, r2
 8004442:	d100      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004444:	e08e      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004446:	2017      	movs	r0, #23
 8004448:	183b      	adds	r3, r7, r0
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444e:	4b6e      	ldr	r3, [pc, #440]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	055b      	lsls	r3, r3, #21
 8004456:	4013      	ands	r3, r2
 8004458:	d110      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	4b6b      	ldr	r3, [pc, #428]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	4b6a      	ldr	r3, [pc, #424]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004460:	2180      	movs	r1, #128	@ 0x80
 8004462:	0549      	lsls	r1, r1, #21
 8004464:	430a      	orrs	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
 8004468:	4b67      	ldr	r3, [pc, #412]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	2380      	movs	r3, #128	@ 0x80
 800446e:	055b      	lsls	r3, r3, #21
 8004470:	4013      	ands	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	183b      	adds	r3, r7, r0
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	4b63      	ldr	r3, [pc, #396]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4013      	ands	r3, r2
 8004486:	d11a      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004488:	4b60      	ldr	r3, [pc, #384]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b5f      	ldr	r3, [pc, #380]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800448e:	2180      	movs	r1, #128	@ 0x80
 8004490:	0049      	lsls	r1, r1, #1
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004496:	f7fd fd0d 	bl	8001eb4 <HAL_GetTick>
 800449a:	0003      	movs	r3, r0
 800449c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	e008      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fd fd08 	bl	8001eb4 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	@ 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0a6      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b56      	ldr	r3, [pc, #344]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4013      	ands	r3, r2
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044be:	4b52      	ldr	r3, [pc, #328]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	23c0      	movs	r3, #192	@ 0xc0
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d034      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	23c0      	movs	r3, #192	@ 0xc0
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4013      	ands	r3, r2
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d02c      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e0:	4b49      	ldr	r3, [pc, #292]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ea:	4b47      	ldr	r3, [pc, #284]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	4b46      	ldr	r3, [pc, #280]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044f0:	2180      	movs	r1, #128	@ 0x80
 80044f2:	0249      	lsls	r1, r1, #9
 80044f4:	430a      	orrs	r2, r1
 80044f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f8:	4b43      	ldr	r3, [pc, #268]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	4b42      	ldr	r3, [pc, #264]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044fe:	4945      	ldr	r1, [pc, #276]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004500:	400a      	ands	r2, r1
 8004502:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004504:	4b40      	ldr	r3, [pc, #256]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004512:	f7fd fccf 	bl	8001eb4 <HAL_GetTick>
 8004516:	0003      	movs	r3, r0
 8004518:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e009      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fd fcca 	bl	8001eb4 <HAL_GetTick>
 8004520:	0002      	movs	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	4a3c      	ldr	r2, [pc, #240]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e067      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b35      	ldr	r3, [pc, #212]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	2202      	movs	r2, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d0f0      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800453a:	4b33      	ldr	r3, [pc, #204]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a34      	ldr	r2, [pc, #208]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004540:	4013      	ands	r3, r2
 8004542:	0019      	movs	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4b2f      	ldr	r3, [pc, #188]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800454a:	430a      	orrs	r2, r1
 800454c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800454e:	2317      	movs	r3, #23
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b2b      	ldr	r3, [pc, #172]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800455e:	492f      	ldr	r1, [pc, #188]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004560:	400a      	ands	r2, r1
 8004562:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2201      	movs	r2, #1
 800456a:	4013      	ands	r3, r2
 800456c:	d009      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800456e:	4b26      	ldr	r3, [pc, #152]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	2203      	movs	r2, #3
 8004574:	4393      	bics	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800457e:	430a      	orrs	r2, r1
 8004580:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2202      	movs	r2, #2
 8004588:	4013      	ands	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800458c:	4b1e      	ldr	r3, [pc, #120]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	4a23      	ldr	r2, [pc, #140]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004592:	4013      	ands	r3, r2
 8004594:	0019      	movs	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	4b1b      	ldr	r3, [pc, #108]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800459c:	430a      	orrs	r2, r1
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2220      	movs	r2, #32
 80045a6:	4013      	ands	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045aa:	4b17      	ldr	r3, [pc, #92]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	2210      	movs	r2, #16
 80045b0:	4393      	bics	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ba:	430a      	orrs	r2, r1
 80045bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	4013      	ands	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	2280      	movs	r2, #128	@ 0x80
 80045d0:	4393      	bics	r3, r2
 80045d2:	0019      	movs	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045da:	430a      	orrs	r2, r1
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4013      	ands	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045ea:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	2240      	movs	r2, #64	@ 0x40
 80045f0:	4393      	bics	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b006      	add	sp, #24
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	40007000 	.word	0x40007000
 8004610:	fffffcff 	.word	0xfffffcff
 8004614:	fffeffff 	.word	0xfffeffff
 8004618:	00001388 	.word	0x00001388
 800461c:	efffffff 	.word	0xefffffff
 8004620:	fffcffff 	.word	0xfffcffff

08004624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e044      	b.n	80046c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2278      	movs	r2, #120	@ 0x78
 8004642:	2100      	movs	r1, #0
 8004644:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0018      	movs	r0, r3
 800464a:	f7fd f953 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2224      	movs	r2, #36	@ 0x24
 8004652:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2101      	movs	r1, #1
 8004660:	438a      	bics	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0018      	movs	r0, r3
 8004670:	f000 fd98 	bl	80051a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fc0c 	bl	8004e94 <UART_SetConfig>
 800467c:	0003      	movs	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e01c      	b.n	80046c0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	490d      	ldr	r1, [pc, #52]	@ (80046c8 <HAL_UART_Init+0xa4>)
 8004692:	400a      	ands	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	212a      	movs	r1, #42	@ 0x2a
 80046a2:	438a      	bics	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2101      	movs	r1, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 fe27 	bl	800530c <UART_CheckIdleState>
 80046be:	0003      	movs	r3, r0
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	ffffb7ff 	.word	0xffffb7ff

080046cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	1dbb      	adds	r3, r7, #6
 80046d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d000      	beq.n	80046e4 <HAL_UART_Transmit_DMA+0x18>
 80046e2:	e077      	b.n	80047d4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_UART_Transmit_DMA+0x26>
 80046ea:	1dbb      	adds	r3, r7, #6
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e06f      	b.n	80047d6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	015b      	lsls	r3, r3, #5
 80046fe:	429a      	cmp	r2, r3
 8004700:	d109      	bne.n	8004716 <HAL_UART_Transmit_DMA+0x4a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2201      	movs	r2, #1
 800470e:	4013      	ands	r3, r2
 8004710:	d001      	beq.n	8004716 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e05f      	b.n	80047d6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1dba      	adds	r2, r7, #6
 8004720:	2150      	movs	r1, #80	@ 0x50
 8004722:	8812      	ldrh	r2, [r2, #0]
 8004724:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1dba      	adds	r2, r7, #6
 800472a:	2152      	movs	r1, #82	@ 0x52
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2284      	movs	r2, #132	@ 0x84
 8004734:	2100      	movs	r1, #0
 8004736:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2221      	movs	r2, #33	@ 0x21
 800473c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004742:	2b00      	cmp	r3, #0
 8004744:	d027      	beq.n	8004796 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474a:	4a25      	ldr	r2, [pc, #148]	@ (80047e0 <HAL_UART_Transmit_DMA+0x114>)
 800474c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	4a24      	ldr	r2, [pc, #144]	@ (80047e4 <HAL_UART_Transmit_DMA+0x118>)
 8004754:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	4a23      	ldr	r2, [pc, #140]	@ (80047e8 <HAL_UART_Transmit_DMA+0x11c>)
 800475c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	2200      	movs	r2, #0
 8004764:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476e:	0019      	movs	r1, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3328      	adds	r3, #40	@ 0x28
 8004776:	001a      	movs	r2, r3
 8004778:	1dbb      	adds	r3, r7, #6
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	f7fe fde4 	bl	8003348 <HAL_DMA_Start_IT>
 8004780:	1e03      	subs	r3, r0, #0
 8004782:	d008      	beq.n	8004796 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2284      	movs	r2, #132	@ 0x84
 8004788:	2110      	movs	r1, #16
 800478a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e01f      	b.n	80047d6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2240      	movs	r2, #64	@ 0x40
 800479c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479e:	f3ef 8310 	mrs	r3, PRIMASK
 80047a2:	613b      	str	r3, [r7, #16]
  return(result);
 80047a4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2180      	movs	r1, #128	@ 0x80
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e000      	b.n	80047d6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b008      	add	sp, #32
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	0800578d 	.word	0x0800578d
 80047e4:	08005821 	.word	0x08005821
 80047e8:	080059af 	.word	0x080059af

080047ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	1dbb      	adds	r3, r7, #6
 80047f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2280      	movs	r2, #128	@ 0x80
 80047fe:	589b      	ldr	r3, [r3, r2]
 8004800:	2b20      	cmp	r3, #32
 8004802:	d145      	bne.n	8004890 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_UART_Receive_DMA+0x26>
 800480a:	1dbb      	adds	r3, r7, #6
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e03d      	b.n	8004892 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	2380      	movs	r3, #128	@ 0x80
 800481c:	015b      	lsls	r3, r3, #5
 800481e:	429a      	cmp	r2, r3
 8004820:	d109      	bne.n	8004836 <HAL_UART_Receive_DMA+0x4a>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2201      	movs	r2, #1
 800482e:	4013      	ands	r3, r2
 8004830:	d001      	beq.n	8004836 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e02d      	b.n	8004892 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	2380      	movs	r3, #128	@ 0x80
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	4013      	ands	r3, r2
 8004848:	d019      	beq.n	800487e <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484a:	f3ef 8310 	mrs	r3, PRIMASK
 800484e:	613b      	str	r3, [r7, #16]
  return(result);
 8004850:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	2301      	movs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f383 8810 	msr	PRIMASK, r3
}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2180      	movs	r1, #128	@ 0x80
 800486c:	04c9      	lsls	r1, r1, #19
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f383 8810 	msr	PRIMASK, r3
}
 800487c:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800487e:	1dbb      	adds	r3, r7, #6
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	0018      	movs	r0, r3
 8004888:	f000 fe58 	bl	800553c <UART_Start_Receive_DMA>
 800488c:	0003      	movs	r3, r0
 800488e:	e000      	b.n	8004892 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b008      	add	sp, #32
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b0ab      	sub	sp, #172	@ 0xac
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	22a4      	movs	r2, #164	@ 0xa4
 80048ac:	18b9      	adds	r1, r7, r2
 80048ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	20a0      	movs	r0, #160	@ 0xa0
 80048b8:	1839      	adds	r1, r7, r0
 80048ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	219c      	movs	r1, #156	@ 0x9c
 80048c4:	1879      	adds	r1, r7, r1
 80048c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048c8:	0011      	movs	r1, r2
 80048ca:	18bb      	adds	r3, r7, r2
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a99      	ldr	r2, [pc, #612]	@ (8004b34 <HAL_UART_IRQHandler+0x298>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	2298      	movs	r2, #152	@ 0x98
 80048d4:	18bc      	adds	r4, r7, r2
 80048d6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80048d8:	18bb      	adds	r3, r7, r2
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d114      	bne.n	800490a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048e0:	187b      	adds	r3, r7, r1
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2220      	movs	r2, #32
 80048e6:	4013      	ands	r3, r2
 80048e8:	d00f      	beq.n	800490a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048ea:	183b      	adds	r3, r7, r0
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2220      	movs	r2, #32
 80048f0:	4013      	ands	r3, r2
 80048f2:	d00a      	beq.n	800490a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d100      	bne.n	80048fe <HAL_UART_IRQHandler+0x62>
 80048fc:	e29e      	b.n	8004e3c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	0010      	movs	r0, r2
 8004906:	4798      	blx	r3
      }
      return;
 8004908:	e298      	b.n	8004e3c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800490a:	2398      	movs	r3, #152	@ 0x98
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d100      	bne.n	8004916 <HAL_UART_IRQHandler+0x7a>
 8004914:	e114      	b.n	8004b40 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004916:	239c      	movs	r3, #156	@ 0x9c
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	4013      	ands	r3, r2
 8004920:	d106      	bne.n	8004930 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004922:	23a0      	movs	r3, #160	@ 0xa0
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a83      	ldr	r2, [pc, #524]	@ (8004b38 <HAL_UART_IRQHandler+0x29c>)
 800492a:	4013      	ands	r3, r2
 800492c:	d100      	bne.n	8004930 <HAL_UART_IRQHandler+0x94>
 800492e:	e107      	b.n	8004b40 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004930:	23a4      	movs	r3, #164	@ 0xa4
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	4013      	ands	r3, r2
 800493a:	d012      	beq.n	8004962 <HAL_UART_IRQHandler+0xc6>
 800493c:	23a0      	movs	r3, #160	@ 0xa0
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4013      	ands	r3, r2
 8004948:	d00b      	beq.n	8004962 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2201      	movs	r2, #1
 8004950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2284      	movs	r2, #132	@ 0x84
 8004956:	589b      	ldr	r3, [r3, r2]
 8004958:	2201      	movs	r2, #1
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2184      	movs	r1, #132	@ 0x84
 8004960:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004962:	23a4      	movs	r3, #164	@ 0xa4
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2202      	movs	r2, #2
 800496a:	4013      	ands	r3, r2
 800496c:	d011      	beq.n	8004992 <HAL_UART_IRQHandler+0xf6>
 800496e:	239c      	movs	r3, #156	@ 0x9c
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	4013      	ands	r3, r2
 8004978:	d00b      	beq.n	8004992 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2202      	movs	r2, #2
 8004980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2284      	movs	r2, #132	@ 0x84
 8004986:	589b      	ldr	r3, [r3, r2]
 8004988:	2204      	movs	r2, #4
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2184      	movs	r1, #132	@ 0x84
 8004990:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004992:	23a4      	movs	r3, #164	@ 0xa4
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2204      	movs	r2, #4
 800499a:	4013      	ands	r3, r2
 800499c:	d011      	beq.n	80049c2 <HAL_UART_IRQHandler+0x126>
 800499e:	239c      	movs	r3, #156	@ 0x9c
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2201      	movs	r2, #1
 80049a6:	4013      	ands	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2204      	movs	r2, #4
 80049b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2284      	movs	r2, #132	@ 0x84
 80049b6:	589b      	ldr	r3, [r3, r2]
 80049b8:	2202      	movs	r2, #2
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2184      	movs	r1, #132	@ 0x84
 80049c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049c2:	23a4      	movs	r3, #164	@ 0xa4
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2208      	movs	r2, #8
 80049ca:	4013      	ands	r3, r2
 80049cc:	d017      	beq.n	80049fe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049ce:	23a0      	movs	r3, #160	@ 0xa0
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2220      	movs	r2, #32
 80049d6:	4013      	ands	r3, r2
 80049d8:	d105      	bne.n	80049e6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049da:	239c      	movs	r3, #156	@ 0x9c
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049e4:	d00b      	beq.n	80049fe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2208      	movs	r2, #8
 80049ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2284      	movs	r2, #132	@ 0x84
 80049f2:	589b      	ldr	r3, [r3, r2]
 80049f4:	2208      	movs	r2, #8
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2184      	movs	r1, #132	@ 0x84
 80049fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049fe:	23a4      	movs	r3, #164	@ 0xa4
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_UART_IRQHandler+0x198>
 8004a0c:	23a0      	movs	r3, #160	@ 0xa0
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	04db      	lsls	r3, r3, #19
 8004a16:	4013      	ands	r3, r2
 8004a18:	d00c      	beq.n	8004a34 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2280      	movs	r2, #128	@ 0x80
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2284      	movs	r2, #132	@ 0x84
 8004a28:	589b      	ldr	r3, [r3, r2]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2184      	movs	r1, #132	@ 0x84
 8004a32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2284      	movs	r2, #132	@ 0x84
 8004a38:	589b      	ldr	r3, [r3, r2]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d100      	bne.n	8004a40 <HAL_UART_IRQHandler+0x1a4>
 8004a3e:	e1ff      	b.n	8004e40 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a40:	23a4      	movs	r3, #164	@ 0xa4
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2220      	movs	r2, #32
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a4c:	23a0      	movs	r3, #160	@ 0xa0
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2220      	movs	r2, #32
 8004a54:	4013      	ands	r3, r2
 8004a56:	d008      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	0010      	movs	r0, r2
 8004a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2284      	movs	r2, #132	@ 0x84
 8004a6e:	589b      	ldr	r3, [r3, r2]
 8004a70:	2194      	movs	r1, #148	@ 0x94
 8004a72:	187a      	adds	r2, r7, r1
 8004a74:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2240      	movs	r2, #64	@ 0x40
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d004      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2228      	movs	r2, #40	@ 0x28
 8004a8a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a8c:	d047      	beq.n	8004b1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 fe17 	bl	80056c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2240      	movs	r2, #64	@ 0x40
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d137      	bne.n	8004b14 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aac:	2090      	movs	r0, #144	@ 0x90
 8004aae:	183a      	adds	r2, r7, r0
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ab8:	f383 8810 	msr	PRIMASK, r3
}
 8004abc:	46c0      	nop			@ (mov r8, r8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2140      	movs	r1, #64	@ 0x40
 8004aca:	438a      	bics	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
 8004ace:	183b      	adds	r3, r7, r0
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ad6:	f383 8810 	msr	PRIMASK, r3
}
 8004ada:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae8:	4a14      	ldr	r2, [pc, #80]	@ (8004b3c <HAL_UART_IRQHandler+0x2a0>)
 8004aea:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fe fcc7 	bl	8003484 <HAL_DMA_Abort_IT>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d01a      	beq.n	8004b30 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b04:	0018      	movs	r0, r3
 8004b06:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e012      	b.n	8004b30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f001 fbee 	bl	80062ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b12:	e00d      	b.n	8004b30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f001 fbe9 	bl	80062ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	e008      	b.n	8004b30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f001 fbe4 	bl	80062ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2284      	movs	r2, #132	@ 0x84
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b2e:	e187      	b.n	8004e40 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	46c0      	nop			@ (mov r8, r8)
    return;
 8004b32:	e185      	b.n	8004e40 <HAL_UART_IRQHandler+0x5a4>
 8004b34:	0000080f 	.word	0x0000080f
 8004b38:	04000120 	.word	0x04000120
 8004b3c:	08005a33 	.word	0x08005a33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d000      	beq.n	8004b4a <HAL_UART_IRQHandler+0x2ae>
 8004b48:	e139      	b.n	8004dbe <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b4a:	23a4      	movs	r3, #164	@ 0xa4
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2210      	movs	r2, #16
 8004b52:	4013      	ands	r3, r2
 8004b54:	d100      	bne.n	8004b58 <HAL_UART_IRQHandler+0x2bc>
 8004b56:	e132      	b.n	8004dbe <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b58:	23a0      	movs	r3, #160	@ 0xa0
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2210      	movs	r2, #16
 8004b60:	4013      	ands	r3, r2
 8004b62:	d100      	bne.n	8004b66 <HAL_UART_IRQHandler+0x2ca>
 8004b64:	e12b      	b.n	8004dbe <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2240      	movs	r2, #64	@ 0x40
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b40      	cmp	r3, #64	@ 0x40
 8004b7a:	d000      	beq.n	8004b7e <HAL_UART_IRQHandler+0x2e2>
 8004b7c:	e09f      	b.n	8004cbe <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	217e      	movs	r1, #126	@ 0x7e
 8004b88:	187b      	adds	r3, r7, r1
 8004b8a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b8c:	187b      	adds	r3, r7, r1
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d100      	bne.n	8004b96 <HAL_UART_IRQHandler+0x2fa>
 8004b94:	e156      	b.n	8004e44 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2258      	movs	r2, #88	@ 0x58
 8004b9a:	5a9b      	ldrh	r3, [r3, r2]
 8004b9c:	187a      	adds	r2, r7, r1
 8004b9e:	8812      	ldrh	r2, [r2, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d300      	bcc.n	8004ba6 <HAL_UART_IRQHandler+0x30a>
 8004ba4:	e14e      	b.n	8004e44 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	187a      	adds	r2, r7, r1
 8004baa:	215a      	movs	r1, #90	@ 0x5a
 8004bac:	8812      	ldrh	r2, [r2, #0]
 8004bae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d06f      	beq.n	8004c9a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bba:	f3ef 8310 	mrs	r3, PRIMASK
 8004bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bca:	f383 8810 	msr	PRIMASK, r3
}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	499e      	ldr	r1, [pc, #632]	@ (8004e54 <HAL_UART_IRQHandler+0x5b8>)
 8004bdc:	400a      	ands	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bec:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bfc:	f383 8810 	msr	PRIMASK, r3
}
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	438a      	bics	r2, r1
 8004c10:	609a      	str	r2, [r3, #8]
 8004c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c14:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c18:	f383 8810 	msr	PRIMASK, r3
}
 8004c1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c26:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c28:	2301      	movs	r3, #1
 8004c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2e:	f383 8810 	msr	PRIMASK, r3
}
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2140      	movs	r1, #64	@ 0x40
 8004c40:	438a      	bics	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
 8004c44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c46:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c4a:	f383 8810 	msr	PRIMASK, r3
}
 8004c4e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2280      	movs	r2, #128	@ 0x80
 8004c54:	2120      	movs	r1, #32
 8004c56:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c62:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c68:	2301      	movs	r3, #1
 8004c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c6e:	f383 8810 	msr	PRIMASK, r3
}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2110      	movs	r1, #16
 8004c80:	438a      	bics	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c8a:	f383 8810 	msr	PRIMASK, r3
}
 8004c8e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fe fbbd 	bl	8003414 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2258      	movs	r2, #88	@ 0x58
 8004ca4:	5a9a      	ldrh	r2, [r3, r2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	215a      	movs	r1, #90	@ 0x5a
 8004caa:	5a5b      	ldrh	r3, [r3, r1]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0011      	movs	r1, r2
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 f8e0 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cbc:	e0c2      	b.n	8004e44 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2258      	movs	r2, #88	@ 0x58
 8004cc2:	5a99      	ldrh	r1, [r3, r2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	225a      	movs	r2, #90	@ 0x5a
 8004cc8:	5a9b      	ldrh	r3, [r3, r2]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	208e      	movs	r0, #142	@ 0x8e
 8004cce:	183b      	adds	r3, r7, r0
 8004cd0:	1a8a      	subs	r2, r1, r2
 8004cd2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	225a      	movs	r2, #90	@ 0x5a
 8004cd8:	5a9b      	ldrh	r3, [r3, r2]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d100      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x446>
 8004ce0:	e0b2      	b.n	8004e48 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004ce2:	183b      	adds	r3, r7, r0
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d100      	bne.n	8004cec <HAL_UART_IRQHandler+0x450>
 8004cea:	e0ad      	b.n	8004e48 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cec:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf4:	2488      	movs	r4, #136	@ 0x88
 8004cf6:	193a      	adds	r2, r7, r4
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4951      	ldr	r1, [pc, #324]	@ (8004e58 <HAL_UART_IRQHandler+0x5bc>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	193b      	adds	r3, r7, r4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d24:	f3ef 8310 	mrs	r3, PRIMASK
 8004d28:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d2a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	2484      	movs	r4, #132	@ 0x84
 8004d2e:	193a      	adds	r2, r7, r4
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	2301      	movs	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			@ (mov r8, r8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	438a      	bics	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	f383 8810 	msr	PRIMASK, r3
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2280      	movs	r2, #128	@ 0x80
 8004d60:	2120      	movs	r1, #32
 8004d62:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8310 	mrs	r3, PRIMASK
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d78:	2480      	movs	r4, #128	@ 0x80
 8004d7a:	193a      	adds	r2, r7, r4
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	2301      	movs	r3, #1
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	f383 8810 	msr	PRIMASK, r3
}
 8004d88:	46c0      	nop			@ (mov r8, r8)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2110      	movs	r1, #16
 8004d96:	438a      	bics	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	193b      	adds	r3, r7, r4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da2:	f383 8810 	msr	PRIMASK, r3
}
 8004da6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dae:	183b      	adds	r3, r7, r0
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0011      	movs	r1, r2
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 f860 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dbc:	e044      	b.n	8004e48 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dbe:	23a4      	movs	r3, #164	@ 0xa4
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	2380      	movs	r3, #128	@ 0x80
 8004dc6:	035b      	lsls	r3, r3, #13
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d010      	beq.n	8004dee <HAL_UART_IRQHandler+0x552>
 8004dcc:	239c      	movs	r3, #156	@ 0x9c
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	2380      	movs	r3, #128	@ 0x80
 8004dd4:	03db      	lsls	r3, r3, #15
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d009      	beq.n	8004dee <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	0352      	lsls	r2, r2, #13
 8004de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 fe65 	bl	8005ab6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dec:	e02f      	b.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dee:	23a4      	movs	r3, #164	@ 0xa4
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2280      	movs	r2, #128	@ 0x80
 8004df6:	4013      	ands	r3, r2
 8004df8:	d00f      	beq.n	8004e1a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dfa:	23a0      	movs	r3, #160	@ 0xa0
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2280      	movs	r2, #128	@ 0x80
 8004e02:	4013      	ands	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01e      	beq.n	8004e4c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	0010      	movs	r0, r2
 8004e16:	4798      	blx	r3
    }
    return;
 8004e18:	e018      	b.n	8004e4c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e1a:	23a4      	movs	r3, #164	@ 0xa4
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2240      	movs	r2, #64	@ 0x40
 8004e22:	4013      	ands	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
 8004e26:	23a0      	movs	r3, #160	@ 0xa0
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2240      	movs	r2, #64	@ 0x40
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d00d      	beq.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 fe13 	bl	8005a60 <UART_EndTransmit_IT>
    return;
 8004e3a:	e008      	b.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004e3c:	46c0      	nop			@ (mov r8, r8)
 8004e3e:	e006      	b.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004e40:	46c0      	nop			@ (mov r8, r8)
 8004e42:	e004      	b.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	e002      	b.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
      return;
 8004e48:	46c0      	nop			@ (mov r8, r8)
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_IRQHandler+0x5b2>
    return;
 8004e4c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b02b      	add	sp, #172	@ 0xac
 8004e52:	bd90      	pop	{r4, r7, pc}
 8004e54:	fffffeff 	.word	0xfffffeff
 8004e58:	fffffedf 	.word	0xfffffedf

08004e5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e64:	46c0      	nop			@ (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e74:	46c0      	nop			@ (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	000a      	movs	r2, r1
 8004e86:	1cbb      	adds	r3, r7, #2
 8004e88:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e9c:	231e      	movs	r3, #30
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4aaf      	ldr	r2, [pc, #700]	@ (8005180 <UART_SetConfig+0x2ec>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4aaa      	ldr	r2, [pc, #680]	@ (8005184 <UART_SetConfig+0x2f0>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4aa1      	ldr	r2, [pc, #644]	@ (8005188 <UART_SetConfig+0x2f4>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a9d      	ldr	r2, [pc, #628]	@ (800518c <UART_SetConfig+0x2f8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d127      	bne.n	8004f6a <UART_SetConfig+0xd6>
 8004f1a:	4b9d      	ldr	r3, [pc, #628]	@ (8005190 <UART_SetConfig+0x2fc>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	2203      	movs	r2, #3
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d00d      	beq.n	8004f42 <UART_SetConfig+0xae>
 8004f26:	d81b      	bhi.n	8004f60 <UART_SetConfig+0xcc>
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d014      	beq.n	8004f56 <UART_SetConfig+0xc2>
 8004f2c:	d818      	bhi.n	8004f60 <UART_SetConfig+0xcc>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <UART_SetConfig+0xa4>
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d00a      	beq.n	8004f4c <UART_SetConfig+0xb8>
 8004f36:	e013      	b.n	8004f60 <UART_SetConfig+0xcc>
 8004f38:	231f      	movs	r3, #31
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e065      	b.n	800500e <UART_SetConfig+0x17a>
 8004f42:	231f      	movs	r3, #31
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	2202      	movs	r2, #2
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e060      	b.n	800500e <UART_SetConfig+0x17a>
 8004f4c:	231f      	movs	r3, #31
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	2204      	movs	r2, #4
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e05b      	b.n	800500e <UART_SetConfig+0x17a>
 8004f56:	231f      	movs	r3, #31
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e056      	b.n	800500e <UART_SetConfig+0x17a>
 8004f60:	231f      	movs	r3, #31
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	2210      	movs	r2, #16
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e051      	b.n	800500e <UART_SetConfig+0x17a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a89      	ldr	r2, [pc, #548]	@ (8005194 <UART_SetConfig+0x300>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d134      	bne.n	8004fde <UART_SetConfig+0x14a>
 8004f74:	4b86      	ldr	r3, [pc, #536]	@ (8005190 <UART_SetConfig+0x2fc>)
 8004f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f78:	23c0      	movs	r3, #192	@ 0xc0
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	22c0      	movs	r2, #192	@ 0xc0
 8004f80:	0292      	lsls	r2, r2, #10
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d017      	beq.n	8004fb6 <UART_SetConfig+0x122>
 8004f86:	22c0      	movs	r2, #192	@ 0xc0
 8004f88:	0292      	lsls	r2, r2, #10
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d822      	bhi.n	8004fd4 <UART_SetConfig+0x140>
 8004f8e:	2280      	movs	r2, #128	@ 0x80
 8004f90:	0292      	lsls	r2, r2, #10
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d019      	beq.n	8004fca <UART_SetConfig+0x136>
 8004f96:	2280      	movs	r2, #128	@ 0x80
 8004f98:	0292      	lsls	r2, r2, #10
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d81a      	bhi.n	8004fd4 <UART_SetConfig+0x140>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <UART_SetConfig+0x118>
 8004fa2:	2280      	movs	r2, #128	@ 0x80
 8004fa4:	0252      	lsls	r2, r2, #9
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00a      	beq.n	8004fc0 <UART_SetConfig+0x12c>
 8004faa:	e013      	b.n	8004fd4 <UART_SetConfig+0x140>
 8004fac:	231f      	movs	r3, #31
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	e02b      	b.n	800500e <UART_SetConfig+0x17a>
 8004fb6:	231f      	movs	r3, #31
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	2202      	movs	r2, #2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e026      	b.n	800500e <UART_SetConfig+0x17a>
 8004fc0:	231f      	movs	r3, #31
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e021      	b.n	800500e <UART_SetConfig+0x17a>
 8004fca:	231f      	movs	r3, #31
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	2208      	movs	r2, #8
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e01c      	b.n	800500e <UART_SetConfig+0x17a>
 8004fd4:	231f      	movs	r3, #31
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2210      	movs	r2, #16
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	e017      	b.n	800500e <UART_SetConfig+0x17a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a6d      	ldr	r2, [pc, #436]	@ (8005198 <UART_SetConfig+0x304>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d104      	bne.n	8004ff2 <UART_SetConfig+0x15e>
 8004fe8:	231f      	movs	r3, #31
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	e00d      	b.n	800500e <UART_SetConfig+0x17a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a69      	ldr	r2, [pc, #420]	@ (800519c <UART_SetConfig+0x308>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d104      	bne.n	8005006 <UART_SetConfig+0x172>
 8004ffc:	231f      	movs	r3, #31
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e003      	b.n	800500e <UART_SetConfig+0x17a>
 8005006:	231f      	movs	r3, #31
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	2210      	movs	r2, #16
 800500c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	2380      	movs	r3, #128	@ 0x80
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	429a      	cmp	r2, r3
 8005018:	d15c      	bne.n	80050d4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800501a:	231f      	movs	r3, #31
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d015      	beq.n	8005050 <UART_SetConfig+0x1bc>
 8005024:	dc18      	bgt.n	8005058 <UART_SetConfig+0x1c4>
 8005026:	2b04      	cmp	r3, #4
 8005028:	d00d      	beq.n	8005046 <UART_SetConfig+0x1b2>
 800502a:	dc15      	bgt.n	8005058 <UART_SetConfig+0x1c4>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <UART_SetConfig+0x1a2>
 8005030:	2b02      	cmp	r3, #2
 8005032:	d005      	beq.n	8005040 <UART_SetConfig+0x1ac>
 8005034:	e010      	b.n	8005058 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005036:	f7ff f9e1 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800503a:	0003      	movs	r3, r0
 800503c:	61bb      	str	r3, [r7, #24]
        break;
 800503e:	e012      	b.n	8005066 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005040:	4b57      	ldr	r3, [pc, #348]	@ (80051a0 <UART_SetConfig+0x30c>)
 8005042:	61bb      	str	r3, [r7, #24]
        break;
 8005044:	e00f      	b.n	8005066 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005046:	f7ff f95d 	bl	8004304 <HAL_RCC_GetSysClockFreq>
 800504a:	0003      	movs	r3, r0
 800504c:	61bb      	str	r3, [r7, #24]
        break;
 800504e:	e00a      	b.n	8005066 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	61bb      	str	r3, [r7, #24]
        break;
 8005056:	e006      	b.n	8005066 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800505c:	231e      	movs	r3, #30
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
        break;
 8005064:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d100      	bne.n	800506e <UART_SetConfig+0x1da>
 800506c:	e07a      	b.n	8005164 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	005a      	lsls	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	18d2      	adds	r2, r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	0019      	movs	r1, r3
 8005080:	0010      	movs	r0, r2
 8005082:	f7fb f841 	bl	8000108 <__udivsi3>
 8005086:	0003      	movs	r3, r0
 8005088:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b0f      	cmp	r3, #15
 800508e:	d91c      	bls.n	80050ca <UART_SetConfig+0x236>
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	2380      	movs	r3, #128	@ 0x80
 8005094:	025b      	lsls	r3, r3, #9
 8005096:	429a      	cmp	r2, r3
 8005098:	d217      	bcs.n	80050ca <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	b29a      	uxth	r2, r3
 800509e:	200e      	movs	r0, #14
 80050a0:	183b      	adds	r3, r7, r0
 80050a2:	210f      	movs	r1, #15
 80050a4:	438a      	bics	r2, r1
 80050a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2207      	movs	r2, #7
 80050b0:	4013      	ands	r3, r2
 80050b2:	b299      	uxth	r1, r3
 80050b4:	183b      	adds	r3, r7, r0
 80050b6:	183a      	adds	r2, r7, r0
 80050b8:	8812      	ldrh	r2, [r2, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	183a      	adds	r2, r7, r0
 80050c4:	8812      	ldrh	r2, [r2, #0]
 80050c6:	60da      	str	r2, [r3, #12]
 80050c8:	e04c      	b.n	8005164 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80050ca:	231e      	movs	r3, #30
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e047      	b.n	8005164 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050d4:	231f      	movs	r3, #31
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d015      	beq.n	800510a <UART_SetConfig+0x276>
 80050de:	dc18      	bgt.n	8005112 <UART_SetConfig+0x27e>
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d00d      	beq.n	8005100 <UART_SetConfig+0x26c>
 80050e4:	dc15      	bgt.n	8005112 <UART_SetConfig+0x27e>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <UART_SetConfig+0x25c>
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d005      	beq.n	80050fa <UART_SetConfig+0x266>
 80050ee:	e010      	b.n	8005112 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7ff f984 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 80050f4:	0003      	movs	r3, r0
 80050f6:	61bb      	str	r3, [r7, #24]
        break;
 80050f8:	e012      	b.n	8005120 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fa:	4b29      	ldr	r3, [pc, #164]	@ (80051a0 <UART_SetConfig+0x30c>)
 80050fc:	61bb      	str	r3, [r7, #24]
        break;
 80050fe:	e00f      	b.n	8005120 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005100:	f7ff f900 	bl	8004304 <HAL_RCC_GetSysClockFreq>
 8005104:	0003      	movs	r3, r0
 8005106:	61bb      	str	r3, [r7, #24]
        break;
 8005108:	e00a      	b.n	8005120 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	2380      	movs	r3, #128	@ 0x80
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e006      	b.n	8005120 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005116:	231e      	movs	r3, #30
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
        break;
 800511e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01e      	beq.n	8005164 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	085a      	lsrs	r2, r3, #1
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	18d2      	adds	r2, r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0019      	movs	r1, r3
 8005136:	0010      	movs	r0, r2
 8005138:	f7fa ffe6 	bl	8000108 <__udivsi3>
 800513c:	0003      	movs	r3, r0
 800513e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b0f      	cmp	r3, #15
 8005144:	d90a      	bls.n	800515c <UART_SetConfig+0x2c8>
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	2380      	movs	r3, #128	@ 0x80
 800514a:	025b      	lsls	r3, r3, #9
 800514c:	429a      	cmp	r2, r3
 800514e:	d205      	bcs.n	800515c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	e003      	b.n	8005164 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800515c:	231e      	movs	r3, #30
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005170:	231e      	movs	r3, #30
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	781b      	ldrb	r3, [r3, #0]
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b008      	add	sp, #32
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	efff69f3 	.word	0xefff69f3
 8005184:	ffffcfff 	.word	0xffffcfff
 8005188:	fffff4ff 	.word	0xfffff4ff
 800518c:	40013800 	.word	0x40013800
 8005190:	40021000 	.word	0x40021000
 8005194:	40004400 	.word	0x40004400
 8005198:	40004800 	.word	0x40004800
 800519c:	40004c00 	.word	0x40004c00
 80051a0:	007a1200 	.word	0x007a1200

080051a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	2208      	movs	r2, #8
 80051b2:	4013      	ands	r3, r2
 80051b4:	d00b      	beq.n	80051ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a4a      	ldr	r2, [pc, #296]	@ (80052e8 <UART_AdvFeatureConfig+0x144>)
 80051be:	4013      	ands	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	2201      	movs	r2, #1
 80051d4:	4013      	ands	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4a43      	ldr	r2, [pc, #268]	@ (80052ec <UART_AdvFeatureConfig+0x148>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	0019      	movs	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	2202      	movs	r2, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	d00b      	beq.n	8005212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a3b      	ldr	r2, [pc, #236]	@ (80052f0 <UART_AdvFeatureConfig+0x14c>)
 8005202:	4013      	ands	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	2204      	movs	r2, #4
 8005218:	4013      	ands	r3, r2
 800521a:	d00b      	beq.n	8005234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4a34      	ldr	r2, [pc, #208]	@ (80052f4 <UART_AdvFeatureConfig+0x150>)
 8005224:	4013      	ands	r3, r2
 8005226:	0019      	movs	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	2210      	movs	r2, #16
 800523a:	4013      	ands	r3, r2
 800523c:	d00b      	beq.n	8005256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <UART_AdvFeatureConfig+0x154>)
 8005246:	4013      	ands	r3, r2
 8005248:	0019      	movs	r1, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	2220      	movs	r2, #32
 800525c:	4013      	ands	r3, r2
 800525e:	d00b      	beq.n	8005278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4a25      	ldr	r2, [pc, #148]	@ (80052fc <UART_AdvFeatureConfig+0x158>)
 8005268:	4013      	ands	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	2240      	movs	r2, #64	@ 0x40
 800527e:	4013      	ands	r3, r2
 8005280:	d01d      	beq.n	80052be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a1d      	ldr	r2, [pc, #116]	@ (8005300 <UART_AdvFeatureConfig+0x15c>)
 800528a:	4013      	ands	r3, r2
 800528c:	0019      	movs	r1, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800529e:	2380      	movs	r3, #128	@ 0x80
 80052a0:	035b      	lsls	r3, r3, #13
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d10b      	bne.n	80052be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a15      	ldr	r2, [pc, #84]	@ (8005304 <UART_AdvFeatureConfig+0x160>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	0019      	movs	r1, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	2280      	movs	r2, #128	@ 0x80
 80052c4:	4013      	ands	r3, r2
 80052c6:	d00b      	beq.n	80052e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005308 <UART_AdvFeatureConfig+0x164>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	0019      	movs	r1, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }
}
 80052e0:	46c0      	nop			@ (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b002      	add	sp, #8
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	ffff7fff 	.word	0xffff7fff
 80052ec:	fffdffff 	.word	0xfffdffff
 80052f0:	fffeffff 	.word	0xfffeffff
 80052f4:	fffbffff 	.word	0xfffbffff
 80052f8:	ffffefff 	.word	0xffffefff
 80052fc:	ffffdfff 	.word	0xffffdfff
 8005300:	ffefffff 	.word	0xffefffff
 8005304:	ff9fffff 	.word	0xff9fffff
 8005308:	fff7ffff 	.word	0xfff7ffff

0800530c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b092      	sub	sp, #72	@ 0x48
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2284      	movs	r2, #132	@ 0x84
 8005318:	2100      	movs	r1, #0
 800531a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800531c:	f7fc fdca 	bl	8001eb4 <HAL_GetTick>
 8005320:	0003      	movs	r3, r0
 8005322:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2208      	movs	r2, #8
 800532c:	4013      	ands	r3, r2
 800532e:	2b08      	cmp	r3, #8
 8005330:	d12c      	bne.n	800538c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005334:	2280      	movs	r2, #128	@ 0x80
 8005336:	0391      	lsls	r1, r2, #14
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4a46      	ldr	r2, [pc, #280]	@ (8005454 <UART_CheckIdleState+0x148>)
 800533c:	9200      	str	r2, [sp, #0]
 800533e:	2200      	movs	r2, #0
 8005340:	f000 f88c 	bl	800545c <UART_WaitOnFlagUntilTimeout>
 8005344:	1e03      	subs	r3, r0, #0
 8005346:	d021      	beq.n	800538c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005348:	f3ef 8310 	mrs	r3, PRIMASK
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005352:	2301      	movs	r3, #1
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	46c0      	nop			@ (mov r8, r8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2180      	movs	r1, #128	@ 0x80
 800536a:	438a      	bics	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2278      	movs	r2, #120	@ 0x78
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e05f      	b.n	800544c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2204      	movs	r2, #4
 8005394:	4013      	ands	r3, r2
 8005396:	2b04      	cmp	r3, #4
 8005398:	d146      	bne.n	8005428 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800539a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539c:	2280      	movs	r2, #128	@ 0x80
 800539e:	03d1      	lsls	r1, r2, #15
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005454 <UART_CheckIdleState+0x148>)
 80053a4:	9200      	str	r2, [sp, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f000 f858 	bl	800545c <UART_WaitOnFlagUntilTimeout>
 80053ac:	1e03      	subs	r3, r0, #0
 80053ae:	d03b      	beq.n	8005428 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b0:	f3ef 8310 	mrs	r3, PRIMASK
 80053b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80053b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ba:	2301      	movs	r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f383 8810 	msr	PRIMASK, r3
}
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4921      	ldr	r1, [pc, #132]	@ (8005458 <UART_CheckIdleState+0x14c>)
 80053d2:	400a      	ands	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f383 8810 	msr	PRIMASK, r3
}
 80053e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e2:	f3ef 8310 	mrs	r3, PRIMASK
 80053e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80053e8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ec:	2301      	movs	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2101      	movs	r1, #1
 8005404:	438a      	bics	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	f383 8810 	msr	PRIMASK, r3
}
 8005412:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2280      	movs	r2, #128	@ 0x80
 8005418:	2120      	movs	r1, #32
 800541a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2278      	movs	r2, #120	@ 0x78
 8005420:	2100      	movs	r1, #0
 8005422:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e011      	b.n	800544c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2280      	movs	r2, #128	@ 0x80
 8005432:	2120      	movs	r1, #32
 8005434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2278      	movs	r2, #120	@ 0x78
 8005446:	2100      	movs	r1, #0
 8005448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	0018      	movs	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	b010      	add	sp, #64	@ 0x40
 8005452:	bd80      	pop	{r7, pc}
 8005454:	01ffffff 	.word	0x01ffffff
 8005458:	fffffedf 	.word	0xfffffedf

0800545c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	1dfb      	adds	r3, r7, #7
 800546a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546c:	e051      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	3301      	adds	r3, #1
 8005472:	d04e      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7fc fd1e 	bl	8001eb4 <HAL_GetTick>
 8005478:	0002      	movs	r2, r0
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e051      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2204      	movs	r2, #4
 8005496:	4013      	ands	r3, r2
 8005498:	d03b      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb6>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b80      	cmp	r3, #128	@ 0x80
 800549e:	d038      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb6>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d035      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	2208      	movs	r2, #8
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d111      	bne.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2208      	movs	r2, #8
 80054ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	0018      	movs	r0, r3
 80054c0:	f000 f900 	bl	80056c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2284      	movs	r2, #132	@ 0x84
 80054c8:	2108      	movs	r1, #8
 80054ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2278      	movs	r2, #120	@ 0x78
 80054d0:	2100      	movs	r1, #0
 80054d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e02c      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	2380      	movs	r3, #128	@ 0x80
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	401a      	ands	r2, r3
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d112      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2280      	movs	r2, #128	@ 0x80
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f000 f8e3 	bl	80056c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2284      	movs	r2, #132	@ 0x84
 8005502:	2120      	movs	r1, #32
 8005504:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2278      	movs	r2, #120	@ 0x78
 800550a:	2100      	movs	r1, #0
 800550c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00f      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	425a      	negs	r2, r3
 8005522:	4153      	adcs	r3, r2
 8005524:	b2db      	uxtb	r3, r3
 8005526:	001a      	movs	r2, r3
 8005528:	1dfb      	adds	r3, r7, #7
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d09e      	beq.n	800546e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b004      	add	sp, #16
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b090      	sub	sp, #64	@ 0x40
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	1dbb      	adds	r3, r7, #6
 8005548:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1dba      	adds	r2, r7, #6
 8005554:	2158      	movs	r1, #88	@ 0x58
 8005556:	8812      	ldrh	r2, [r2, #0]
 8005558:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2284      	movs	r2, #132	@ 0x84
 800555e:	2100      	movs	r1, #0
 8005560:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2280      	movs	r2, #128	@ 0x80
 8005566:	2122      	movs	r1, #34	@ 0x22
 8005568:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556e:	2b00      	cmp	r3, #0
 8005570:	d028      	beq.n	80055c4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005576:	4a3e      	ldr	r2, [pc, #248]	@ (8005670 <UART_Start_Receive_DMA+0x134>)
 8005578:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557e:	4a3d      	ldr	r2, [pc, #244]	@ (8005674 <UART_Start_Receive_DMA+0x138>)
 8005580:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005586:	4a3c      	ldr	r2, [pc, #240]	@ (8005678 <UART_Start_Receive_DMA+0x13c>)
 8005588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558e:	2200      	movs	r2, #0
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3324      	adds	r3, #36	@ 0x24
 800559c:	0019      	movs	r1, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a2:	001a      	movs	r2, r3
 80055a4:	1dbb      	adds	r3, r7, #6
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	f7fd fece 	bl	8003348 <HAL_DMA_Start_IT>
 80055ac:	1e03      	subs	r3, r0, #0
 80055ae:	d009      	beq.n	80055c4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2284      	movs	r2, #132	@ 0x84
 80055b4:	2110      	movs	r1, #16
 80055b6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2280      	movs	r2, #128	@ 0x80
 80055bc:	2120      	movs	r1, #32
 80055be:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e050      	b.n	8005666 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055cc:	f3ef 8310 	mrs	r3, PRIMASK
 80055d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80055d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d6:	2301      	movs	r3, #1
 80055d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	f383 8810 	msr	PRIMASK, r3
}
 80055e0:	46c0      	nop			@ (mov r8, r8)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2180      	movs	r1, #128	@ 0x80
 80055ee:	0049      	lsls	r1, r1, #1
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	f383 8810 	msr	PRIMASK, r3
}
 80055fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005600:	f3ef 8310 	mrs	r3, PRIMASK
 8005604:	613b      	str	r3, [r7, #16]
  return(result);
 8005606:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800560a:	2301      	movs	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2101      	movs	r1, #1
 8005622:	430a      	orrs	r2, r1
 8005624:	609a      	str	r2, [r3, #8]
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005632:	f3ef 8310 	mrs	r3, PRIMASK
 8005636:	61fb      	str	r3, [r7, #28]
  return(result);
 8005638:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
 800563c:	2301      	movs	r3, #1
 800563e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2140      	movs	r1, #64	@ 0x40
 8005654:	430a      	orrs	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	f383 8810 	msr	PRIMASK, r3
}
 8005662:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b010      	add	sp, #64	@ 0x40
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	08005841 	.word	0x08005841
 8005674:	0800596d 	.word	0x0800596d
 8005678:	080059af 	.word	0x080059af

0800567c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005684:	f3ef 8310 	mrs	r3, PRIMASK
 8005688:	60bb      	str	r3, [r7, #8]
  return(result);
 800568a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	2301      	movs	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f383 8810 	msr	PRIMASK, r3
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	21c0      	movs	r1, #192	@ 0xc0
 80056a6:	438a      	bics	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f383 8810 	msr	PRIMASK, r3
}
 80056b4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80056bc:	46c0      	nop			@ (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b006      	add	sp, #24
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08e      	sub	sp, #56	@ 0x38
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056cc:	f3ef 8310 	mrs	r3, PRIMASK
 80056d0:	617b      	str	r3, [r7, #20]
  return(result);
 80056d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d6:	2301      	movs	r3, #1
 80056d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			@ (mov r8, r8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4926      	ldr	r1, [pc, #152]	@ (8005788 <UART_EndRxTransfer+0xc4>)
 80056ee:	400a      	ands	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f383 8810 	msr	PRIMASK, r3
}
 80056fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005702:	623b      	str	r3, [r7, #32]
  return(result);
 8005704:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005706:	633b      	str	r3, [r7, #48]	@ 0x30
 8005708:	2301      	movs	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	f383 8810 	msr	PRIMASK, r3
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2101      	movs	r1, #1
 8005720:	438a      	bics	r2, r1
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	f383 8810 	msr	PRIMASK, r3
}
 800572e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005734:	2b01      	cmp	r3, #1
 8005736:	d118      	bne.n	800576a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005738:	f3ef 8310 	mrs	r3, PRIMASK
 800573c:	60bb      	str	r3, [r7, #8]
  return(result);
 800573e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005742:	2301      	movs	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f383 8810 	msr	PRIMASK, r3
}
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2110      	movs	r1, #16
 800575a:	438a      	bics	r2, r1
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2280      	movs	r2, #128	@ 0x80
 800576e:	2120      	movs	r1, #32
 8005770:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b00e      	add	sp, #56	@ 0x38
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			@ (mov r8, r8)
 8005788:	fffffedf 	.word	0xfffffedf

0800578c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08c      	sub	sp, #48	@ 0x30
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d035      	beq.n	800580e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	2252      	movs	r2, #82	@ 0x52
 80057a6:	2100      	movs	r1, #0
 80057a8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057aa:	f3ef 8310 	mrs	r3, PRIMASK
 80057ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80057b0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b4:	2301      	movs	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2180      	movs	r1, #128	@ 0x80
 80057cc:	438a      	bics	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f383 8810 	msr	PRIMASK, r3
}
 80057da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057dc:	f3ef 8310 	mrs	r3, PRIMASK
 80057e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80057e2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e6:	2301      	movs	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f383 8810 	msr	PRIMASK, r3
}
 80057f0:	46c0      	nop			@ (mov r8, r8)
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2140      	movs	r1, #64	@ 0x40
 80057fe:	430a      	orrs	r2, r1
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f383 8810 	msr	PRIMASK, r3
}
 800580c:	e004      	b.n	8005818 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800580e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005810:	0018      	movs	r0, r3
 8005812:	f000 fd25 	bl	8006260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005816:	46c0      	nop			@ (mov r8, r8)
 8005818:	46c0      	nop			@ (mov r8, r8)
 800581a:	46bd      	mov	sp, r7
 800581c:	b00c      	add	sp, #48	@ 0x30
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	0018      	movs	r0, r3
 8005832:	f7ff fb13 	bl	8004e5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	46bd      	mov	sp, r7
 800583a:	b004      	add	sp, #16
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b094      	sub	sp, #80	@ 0x50
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b20      	cmp	r3, #32
 8005854:	d06f      	beq.n	8005936 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005858:	225a      	movs	r2, #90	@ 0x5a
 800585a:	2100      	movs	r1, #0
 800585c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800585e:	f3ef 8310 	mrs	r3, PRIMASK
 8005862:	61bb      	str	r3, [r7, #24]
  return(result);
 8005864:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005868:	2301      	movs	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f383 8810 	msr	PRIMASK, r3
}
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	493a      	ldr	r1, [pc, #232]	@ (8005968 <UART_DMAReceiveCplt+0x128>)
 8005880:	400a      	ands	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005886:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	f383 8810 	msr	PRIMASK, r3
}
 800588e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005890:	f3ef 8310 	mrs	r3, PRIMASK
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005898:	647b      	str	r3, [r7, #68]	@ 0x44
 800589a:	2301      	movs	r3, #1
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a0:	f383 8810 	msr	PRIMASK, r3
}
 80058a4:	46c0      	nop			@ (mov r8, r8)
 80058a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2101      	movs	r1, #1
 80058b2:	438a      	bics	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]
 80058b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c2:	f3ef 8310 	mrs	r3, PRIMASK
 80058c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80058cc:	2301      	movs	r3, #1
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d2:	f383 8810 	msr	PRIMASK, r3
}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2140      	movs	r1, #64	@ 0x40
 80058e4:	438a      	bics	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]
 80058e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	f383 8810 	msr	PRIMASK, r3
}
 80058f2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058f6:	2280      	movs	r2, #128	@ 0x80
 80058f8:	2120      	movs	r1, #32
 80058fa:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005900:	2b01      	cmp	r3, #1
 8005902:	d118      	bne.n	8005936 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005904:	f3ef 8310 	mrs	r3, PRIMASK
 8005908:	60fb      	str	r3, [r7, #12]
  return(result);
 800590a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800590e:	2301      	movs	r3, #1
 8005910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f383 8810 	msr	PRIMASK, r3
}
 8005918:	46c0      	nop			@ (mov r8, r8)
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2110      	movs	r1, #16
 8005926:	438a      	bics	r2, r1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f383 8810 	msr	PRIMASK, r3
}
 8005934:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005938:	2200      	movs	r2, #0
 800593a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005940:	2b01      	cmp	r3, #1
 8005942:	d108      	bne.n	8005956 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005946:	2258      	movs	r2, #88	@ 0x58
 8005948:	5a9a      	ldrh	r2, [r3, r2]
 800594a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800594c:	0011      	movs	r1, r2
 800594e:	0018      	movs	r0, r3
 8005950:	f7ff fa94 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005954:	e003      	b.n	800595e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005958:	0018      	movs	r0, r3
 800595a:	f000 fca8 	bl	80062ae <HAL_UART_RxCpltCallback>
}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	46bd      	mov	sp, r7
 8005962:	b014      	add	sp, #80	@ 0x50
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	fffffeff 	.word	0xfffffeff

0800596c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005984:	2b01      	cmp	r3, #1
 8005986:	d10a      	bne.n	800599e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2258      	movs	r2, #88	@ 0x58
 800598c:	5a9b      	ldrh	r3, [r3, r2]
 800598e:	085b      	lsrs	r3, r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	0011      	movs	r1, r2
 8005996:	0018      	movs	r0, r3
 8005998:	f7ff fa70 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800599c:	e003      	b.n	80059a6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff fa63 	bl	8004e6c <HAL_UART_RxHalfCpltCallback>
}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b004      	add	sp, #16
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2280      	movs	r2, #128	@ 0x80
 80059c6:	589b      	ldr	r3, [r3, r2]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2280      	movs	r2, #128	@ 0x80
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b80      	cmp	r3, #128	@ 0x80
 80059d6:	d10a      	bne.n	80059ee <UART_DMAError+0x40>
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b21      	cmp	r3, #33	@ 0x21
 80059dc:	d107      	bne.n	80059ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2252      	movs	r2, #82	@ 0x52
 80059e2:	2100      	movs	r1, #0
 80059e4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7ff fe47 	bl	800567c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2240      	movs	r2, #64	@ 0x40
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b40      	cmp	r3, #64	@ 0x40
 80059fa:	d10a      	bne.n	8005a12 <UART_DMAError+0x64>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b22      	cmp	r3, #34	@ 0x22
 8005a00:	d107      	bne.n	8005a12 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	225a      	movs	r2, #90	@ 0x5a
 8005a06:	2100      	movs	r1, #0
 8005a08:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7ff fe59 	bl	80056c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2284      	movs	r2, #132	@ 0x84
 8005a16:	589b      	ldr	r3, [r3, r2]
 8005a18:	2210      	movs	r2, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2184      	movs	r1, #132	@ 0x84
 8005a20:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 fc62 	bl	80062ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2a:	46c0      	nop			@ (mov r8, r8)
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b006      	add	sp, #24
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	225a      	movs	r2, #90	@ 0x5a
 8005a44:	2100      	movs	r1, #0
 8005a46:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2252      	movs	r2, #82	@ 0x52
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 fc4b 	bl	80062ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a58:	46c0      	nop			@ (mov r8, r8)
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b004      	add	sp, #16
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a68:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	2301      	movs	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			@ (mov r8, r8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2140      	movs	r1, #64	@ 0x40
 8005a8a:	438a      	bics	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 fbd9 	bl	8006260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b006      	add	sp, #24
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005abe:	46c0      	nop			@ (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b002      	add	sp, #8
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <crc_clear>:
	if(!hroboClaw->timeout) hroboClaw->timeout = MAXTOUT;

	return ROBOCLAW_OK;
}

static void crc_clear(RoboClaw_HandleTypeDef* hroboClaw){
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
	hroboClaw->crc = 0;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	801a      	strh	r2, [r3, #0]
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}

08005adc <crc_update>:

static void crc_update (RoboClaw_HandleTypeDef* hroboClaw, uint8_t data){
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	000a      	movs	r2, r1
 8005ae6:	1cfb      	adds	r3, r7, #3
 8005ae8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	hroboClaw->crc = hroboClaw->crc ^ ((uint16_t)data << 8);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b21a      	sxth	r2, r3
 8005af0:	1cfb      	adds	r3, r7, #3
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	b21b      	sxth	r3, r3
 8005afa:	4053      	eors	r3, r2
 8005afc:	b21b      	sxth	r3, r3
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8005b04:	230f      	movs	r3, #15
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e01c      	b.n	8005b48 <crc_update+0x6c>
	{
		if (hroboClaw->crc & 0x8000)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da0b      	bge.n	8005b30 <crc_update+0x54>
			hroboClaw->crc = (hroboClaw->crc << 1) ^ 0x1021;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b21b      	sxth	r3, r3
 8005b1e:	18db      	adds	r3, r3, r3
 8005b20:	b21b      	sxth	r3, r3
 8005b22:	4a0e      	ldr	r2, [pc, #56]	@ (8005b5c <crc_update+0x80>)
 8005b24:	4053      	eors	r3, r2
 8005b26:	b21b      	sxth	r3, r3
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	e005      	b.n	8005b3c <crc_update+0x60>
		else
			hroboClaw->crc <<= 1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	18db      	adds	r3, r3, r3
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	801a      	strh	r2, [r3, #0]
	for (i=0; i<8; i++)
 8005b3c:	210f      	movs	r1, #15
 8005b3e:	187b      	adds	r3, r7, r1
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	187b      	adds	r3, r7, r1
 8005b44:	3201      	adds	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	230f      	movs	r3, #15
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b07      	cmp	r3, #7
 8005b50:	d9dd      	bls.n	8005b0e <crc_update+0x32>
	}
}
 8005b52:	46c0      	nop			@ (mov r8, r8)
 8005b54:	46c0      	nop			@ (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b004      	add	sp, #16
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	00001021 	.word	0x00001021

08005b60 <crc_get>:

static uint16_t crc_get(RoboClaw_HandleTypeDef* hroboClaw){
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	return hroboClaw->crc;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	881b      	ldrh	r3, [r3, #0]
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b002      	add	sp, #8
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <write_n>:

static ROBOCLAW_StatusTypeDef write_n(RoboClaw_HandleTypeDef* hroboClaw, uint8_t cnt, ...){
 8005b74:	b40e      	push	{r1, r2, r3}
 8005b76:	b5b0      	push	{r4, r5, r7, lr}
 8005b78:	b087      	sub	sp, #28
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
	uint8_t trys=MAXRETRY;
 8005b7e:	2317      	movs	r3, #23
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	2202      	movs	r2, #2
 8005b84:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t temp;
	do{
		crc_clear(hroboClaw);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7ff ff9c 	bl	8005ac6 <crc_clear>
		//send data with crc
		va_list marker;
		va_start( marker, cnt );     /* Initialize variable arguments. */
 8005b8e:	2328      	movs	r3, #40	@ 0x28
 8005b90:	2208      	movs	r2, #8
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	19db      	adds	r3, r3, r7
 8005b96:	60fb      	str	r3, [r7, #12]
		for(uint8_t index=0; index<cnt ;index++){
 8005b98:	2316      	movs	r3, #22
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e01a      	b.n	8005bd8 <write_n+0x64>
			data = va_arg(marker, int);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	60fa      	str	r2, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	2413      	movs	r4, #19
 8005bae:	193b      	adds	r3, r7, r4
 8005bb0:	701a      	strb	r2, [r3, #0]
			crc_update(hroboClaw, data);
 8005bb2:	193b      	adds	r3, r7, r4
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	0011      	movs	r1, r2
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f7ff ff8e 	bl	8005adc <crc_update>
			write(hroboClaw, &data);
 8005bc0:	193a      	adds	r2, r7, r4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0011      	movs	r1, r2
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 f84a 	bl	8005c60 <write>
		for(uint8_t index=0; index<cnt ;index++){
 8005bcc:	2116      	movs	r1, #22
 8005bce:	187b      	adds	r3, r7, r1
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	187b      	adds	r3, r7, r1
 8005bd4:	3201      	adds	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	2316      	movs	r3, #22
 8005bda:	18fa      	adds	r2, r7, r3
 8005bdc:	2324      	movs	r3, #36	@ 0x24
 8005bde:	2108      	movs	r1, #8
 8005be0:	185b      	adds	r3, r3, r1
 8005be2:	19db      	adds	r3, r3, r7
 8005be4:	7812      	ldrb	r2, [r2, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d3da      	bcc.n	8005ba2 <write_n+0x2e>
		}
		va_end( marker );              /* Reset variable arguments.      */
		uint16_t crc = crc_get(hroboClaw);
 8005bec:	2514      	movs	r5, #20
 8005bee:	197c      	adds	r4, r7, r5
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7ff ffb4 	bl	8005b60 <crc_get>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	8023      	strh	r3, [r4, #0]
		temp = crc>>8;
 8005bfc:	197b      	adds	r3, r7, r5
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	2412      	movs	r4, #18
 8005c08:	193b      	adds	r3, r7, r4
 8005c0a:	701a      	strb	r2, [r3, #0]
		write(hroboClaw, &temp);
 8005c0c:	193a      	adds	r2, r7, r4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0011      	movs	r1, r2
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 f824 	bl	8005c60 <write>
		temp = (uint8_t)crc;
 8005c18:	197b      	adds	r3, r7, r5
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	193b      	adds	r3, r7, r4
 8005c20:	701a      	strb	r2, [r3, #0]
		write(hroboClaw,  &temp);
 8005c22:	193a      	adds	r2, r7, r4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	0011      	movs	r1, r2
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 f819 	bl	8005c60 <write>
		if(read_timeout(hroboClaw)==0xFF)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 f825 	bl	8005c80 <read_timeout>
 8005c36:	0003      	movs	r3, r0
 8005c38:	2bff      	cmp	r3, #255	@ 0xff
 8005c3a:	d101      	bne.n	8005c40 <write_n+0xcc>
			return  ROBOCLAW_OK ;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e008      	b.n	8005c52 <write_n+0xde>
	}while(trys--);
 8005c40:	2217      	movs	r2, #23
 8005c42:	18bb      	adds	r3, r7, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	18ba      	adds	r2, r7, r2
 8005c48:	1e59      	subs	r1, r3, #1
 8005c4a:	7011      	strb	r1, [r2, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d19a      	bne.n	8005b86 <write_n+0x12>
	return  ROBOCLAW_ERROR;
 8005c50:	2301      	movs	r3, #1
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b007      	add	sp, #28
 8005c58:	bcb0      	pop	{r4, r5, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	b003      	add	sp, #12
 8005c5e:	4718      	bx	r3

08005c60 <write>:

static void write(RoboClaw_HandleTypeDef* hroboClaw, uint8_t *byte){
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
	serial_write(hroboClaw->hserial, byte, SEND_BYTE_LEN);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	2201      	movs	r2, #1
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 fa9a 	bl	80061ac <serial_write>
}
 8005c78:	46c0      	nop			@ (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <read_timeout>:

static int read(RoboClaw_HandleTypeDef* hroboClaw){
	return serial_read(hroboClaw->hserial);
}

static int read_timeout(RoboClaw_HandleTypeDef* hroboClaw){
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick();
 8005c88:	f7fc f914 	bl	8001eb4 <HAL_GetTick>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	60fb      	str	r3, [r7, #12]
	// Empty buffer?
	while(!serial_available(hroboClaw->hserial)){
 8005c90:	e00b      	b.n	8005caa <read_timeout+0x2a>
		if((HAL_GetTick()-start)>=hroboClaw->timeout){
 8005c92:	f7fc f90f 	bl	8001eb4 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <read_timeout+0x2a>
			return -1;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	425b      	negs	r3, r3
 8005ca8:	e00c      	b.n	8005cc4 <read_timeout+0x44>
	while(!serial_available(hroboClaw->hserial)){
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 faa9 	bl	8006206 <serial_available>
 8005cb4:	1e03      	subs	r3, r0, #0
 8005cb6:	d0ec      	beq.n	8005c92 <read_timeout+0x12>
		}
	}
	return serial_read(hroboClaw->hserial);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f000 fab3 	bl	8006228 <serial_read>
 8005cc2:	0003      	movs	r3, r0
}
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b004      	add	sp, #16
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <Read4_1>:

static uint32_t Read4_1(RoboClaw_HandleTypeDef* hroboClaw, uint8_t cmd, uint8_t *status, bool *valid){
 8005ccc:	b5b0      	push	{r4, r5, r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	230b      	movs	r3, #11
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	1c0a      	adds	r2, r1, #0
 8005cde:	701a      	strb	r2, [r3, #0]

	if(valid)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <Read4_1+0x20>
		*valid = false;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]

	uint32_t value=0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
	uint8_t trys=MAXRETRY;
 8005cf0:	231b      	movs	r3, #27
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	701a      	strb	r2, [r3, #0]
	int16_t data;
	do{

		crc_clear(hroboClaw);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7ff fee3 	bl	8005ac6 <crc_clear>
		write(hroboClaw, &hroboClaw->packetserial_address);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	330c      	adds	r3, #12
 8005d04:	001a      	movs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0011      	movs	r1, r2
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f7ff ffa8 	bl	8005c60 <write>
		crc_update(hroboClaw, hroboClaw->packetserial_address);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	7b1a      	ldrb	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7ff fedf 	bl	8005adc <crc_update>
		write(hroboClaw, &cmd);
 8005d1e:	240b      	movs	r4, #11
 8005d20:	193a      	adds	r2, r7, r4
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	0011      	movs	r1, r2
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7ff ff9a 	bl	8005c60 <write>
		crc_update(hroboClaw, cmd);
 8005d2c:	193b      	adds	r3, r7, r4
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	0011      	movs	r1, r2
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7ff fed1 	bl	8005adc <crc_update>

		data = read_timeout(hroboClaw);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7ff ff9f 	bl	8005c80 <read_timeout>
 8005d42:	0002      	movs	r2, r0
 8005d44:	2418      	movs	r4, #24
 8005d46:	193b      	adds	r3, r7, r4
 8005d48:	801a      	strh	r2, [r3, #0]
		crc_update(hroboClaw, data);
 8005d4a:	193b      	adds	r3, r7, r4
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	0011      	movs	r1, r2
 8005d54:	0018      	movs	r0, r3
 8005d56:	f7ff fec1 	bl	8005adc <crc_update>
		value=(uint32_t)data<<24;
 8005d5a:	193b      	adds	r3, r7, r4
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	5e9b      	ldrsh	r3, [r3, r2]
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	61fb      	str	r3, [r7, #28]

		if(data!=-1){
 8005d64:	193b      	adds	r3, r7, r4
 8005d66:	2200      	movs	r2, #0
 8005d68:	5e9b      	ldrsh	r3, [r3, r2]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	d015      	beq.n	8005d9a <Read4_1+0xce>
			data = read_timeout(hroboClaw);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7ff ff85 	bl	8005c80 <read_timeout>
 8005d76:	0002      	movs	r2, r0
 8005d78:	193b      	adds	r3, r7, r4
 8005d7a:	801a      	strh	r2, [r3, #0]
			crc_update(hroboClaw, data);
 8005d7c:	193b      	adds	r3, r7, r4
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	0011      	movs	r1, r2
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7ff fea8 	bl	8005adc <crc_update>
			value|=(uint32_t)data<<16;
 8005d8c:	193b      	adds	r3, r7, r4
 8005d8e:	2200      	movs	r2, #0
 8005d90:	5e9b      	ldrsh	r3, [r3, r2]
 8005d92:	041b      	lsls	r3, r3, #16
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61fb      	str	r3, [r7, #28]
		}

		if(data!=-1){
 8005d9a:	2418      	movs	r4, #24
 8005d9c:	193b      	adds	r3, r7, r4
 8005d9e:	2200      	movs	r2, #0
 8005da0:	5e9b      	ldrsh	r3, [r3, r2]
 8005da2:	3301      	adds	r3, #1
 8005da4:	d015      	beq.n	8005dd2 <Read4_1+0x106>
			data = read_timeout(hroboClaw);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7ff ff69 	bl	8005c80 <read_timeout>
 8005dae:	0002      	movs	r2, r0
 8005db0:	193b      	adds	r3, r7, r4
 8005db2:	801a      	strh	r2, [r3, #0]
			crc_update(hroboClaw, data);
 8005db4:	193b      	adds	r3, r7, r4
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	0011      	movs	r1, r2
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7ff fe8c 	bl	8005adc <crc_update>
			value|=(uint32_t)data<<8;
 8005dc4:	193b      	adds	r3, r7, r4
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	61fb      	str	r3, [r7, #28]
		}

		if(data!=-1){
 8005dd2:	2418      	movs	r4, #24
 8005dd4:	193b      	adds	r3, r7, r4
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	5e9b      	ldrsh	r3, [r3, r2]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	d014      	beq.n	8005e08 <Read4_1+0x13c>
			data = read_timeout(hroboClaw);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff ff4d 	bl	8005c80 <read_timeout>
 8005de6:	0002      	movs	r2, r0
 8005de8:	193b      	adds	r3, r7, r4
 8005dea:	801a      	strh	r2, [r3, #0]
			crc_update(hroboClaw, data);
 8005dec:	193b      	adds	r3, r7, r4
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	0011      	movs	r1, r2
 8005df6:	0018      	movs	r0, r3
 8005df8:	f7ff fe70 	bl	8005adc <crc_update>
			value|=(uint32_t)data;
 8005dfc:	193b      	adds	r3, r7, r4
 8005dfe:	2200      	movs	r2, #0
 8005e00:	5e9b      	ldrsh	r3, [r3, r2]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	61fb      	str	r3, [r7, #28]
		}

		if(data!=-1){
 8005e08:	2418      	movs	r4, #24
 8005e0a:	193b      	adds	r3, r7, r4
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	5e9b      	ldrsh	r3, [r3, r2]
 8005e10:	3301      	adds	r3, #1
 8005e12:	d016      	beq.n	8005e42 <Read4_1+0x176>
			data = read_timeout(hroboClaw);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f7ff ff32 	bl	8005c80 <read_timeout>
 8005e1c:	0002      	movs	r2, r0
 8005e1e:	193b      	adds	r3, r7, r4
 8005e20:	801a      	strh	r2, [r3, #0]
			crc_update(hroboClaw, data);
 8005e22:	193b      	adds	r3, r7, r4
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	0011      	movs	r1, r2
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7ff fe55 	bl	8005adc <crc_update>
			if(status)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <Read4_1+0x176>
				*status = data;
 8005e38:	193b      	adds	r3, r7, r4
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	701a      	strb	r2, [r3, #0]
		}

		if(data!=-1){
 8005e42:	2418      	movs	r4, #24
 8005e44:	193b      	adds	r3, r7, r4
 8005e46:	2200      	movs	r2, #0
 8005e48:	5e9b      	ldrsh	r3, [r3, r2]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	d035      	beq.n	8005eba <Read4_1+0x1ee>
			uint16_t ccrc;
			data = read_timeout(hroboClaw);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7ff ff15 	bl	8005c80 <read_timeout>
 8005e56:	0002      	movs	r2, r0
 8005e58:	193b      	adds	r3, r7, r4
 8005e5a:	801a      	strh	r2, [r3, #0]
			if(data!=-1){
 8005e5c:	193b      	adds	r3, r7, r4
 8005e5e:	2200      	movs	r2, #0
 8005e60:	5e9b      	ldrsh	r3, [r3, r2]
 8005e62:	3301      	adds	r3, #1
 8005e64:	d029      	beq.n	8005eba <Read4_1+0x1ee>
				ccrc = data << 8;
 8005e66:	193b      	adds	r3, r7, r4
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	2516      	movs	r5, #22
 8005e6c:	197b      	adds	r3, r7, r5
 8005e6e:	0212      	lsls	r2, r2, #8
 8005e70:	801a      	strh	r2, [r3, #0]
				data = read_timeout(hroboClaw);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7ff ff03 	bl	8005c80 <read_timeout>
 8005e7a:	0002      	movs	r2, r0
 8005e7c:	193b      	adds	r3, r7, r4
 8005e7e:	801a      	strh	r2, [r3, #0]
				if(data!=-1){
 8005e80:	193b      	adds	r3, r7, r4
 8005e82:	2200      	movs	r2, #0
 8005e84:	5e9b      	ldrsh	r3, [r3, r2]
 8005e86:	3301      	adds	r3, #1
 8005e88:	d017      	beq.n	8005eba <Read4_1+0x1ee>
					ccrc |= data;
 8005e8a:	197b      	adds	r3, r7, r5
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	5e9a      	ldrsh	r2, [r3, r2]
 8005e90:	193b      	adds	r3, r7, r4
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b21a      	sxth	r2, r3
 8005e98:	197b      	adds	r3, r7, r5
 8005e9a:	801a      	strh	r2, [r3, #0]
					if(crc_get(hroboClaw)==ccrc){
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7ff fe5e 	bl	8005b60 <crc_get>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	197b      	adds	r3, r7, r5
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d104      	bne.n	8005eba <Read4_1+0x1ee>
						*valid = true;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]
						return value;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	e009      	b.n	8005ece <Read4_1+0x202>
					}
				}
			}
		}
	}while(trys--);
 8005eba:	221b      	movs	r2, #27
 8005ebc:	18bb      	adds	r3, r7, r2
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	18ba      	adds	r2, r7, r2
 8005ec2:	1e59      	subs	r1, r3, #1
 8005ec4:	7011      	strb	r1, [r2, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d000      	beq.n	8005ecc <Read4_1+0x200>
 8005eca:	e715      	b.n	8005cf8 <Read4_1+0x2c>

	return false;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b008      	add	sp, #32
 8005ed4:	bdb0      	pop	{r4, r5, r7, pc}

08005ed6 <SpeedM1>:

ROBOCLAW_StatusTypeDef DutyM1M2(RoboClaw_HandleTypeDef* hroboClaw, uint16_t duty1, uint16_t duty2){
	return write_n(hroboClaw, 6, hroboClaw->packetserial_address,MIXEDDUTY,SetWORDval(duty1),SetWORDval(duty2));
}

ROBOCLAW_StatusTypeDef SpeedM1(RoboClaw_HandleTypeDef* hroboClaw, int32_t speed){
 8005ed6:	b5b0      	push	{r4, r5, r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af04      	add	r7, sp, #16
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
	return write_n(hroboClaw, 6, hroboClaw->packetserial_address,M1SPEED,SetDWORDval(speed));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7b1b      	ldrb	r3, [r3, #12]
 8005ee4:	001d      	movs	r5, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	0e1b      	lsrs	r3, r3, #24
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	001a      	movs	r2, r3
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	0a1b      	lsrs	r3, r3, #8
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	b2c0      	uxtb	r0, r0
 8005f00:	0004      	movs	r4, r0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	9403      	str	r4, [sp, #12]
 8005f06:	9302      	str	r3, [sp, #8]
 8005f08:	9101      	str	r1, [sp, #4]
 8005f0a:	9200      	str	r2, [sp, #0]
 8005f0c:	2323      	movs	r3, #35	@ 0x23
 8005f0e:	002a      	movs	r2, r5
 8005f10:	2106      	movs	r1, #6
 8005f12:	f7ff fe2f 	bl	8005b74 <write_n>
 8005f16:	0003      	movs	r3, r0
}
 8005f18:	0018      	movs	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bdb0      	pop	{r4, r5, r7, pc}

08005f20 <SpeedAccelDeccelPositionM2>:
}
ROBOCLAW_StatusTypeDef SpeedAccelDeccelPositionM1(RoboClaw_HandleTypeDef* hroboClaw,uint32_t accel,uint32_t speed,uint32_t deccel,uint32_t position,uint8_t flag){
	return write_n(hroboClaw, 19, hroboClaw->packetserial_address,M1SPEEDACCELDECCELPOS,SetDWORDval(accel),SetDWORDval(speed),SetDWORDval(deccel),SetDWORDval(position),flag);
}

ROBOCLAW_StatusTypeDef SpeedAccelDeccelPositionM2(RoboClaw_HandleTypeDef* hroboClaw,uint32_t accel,uint32_t speed,uint32_t deccel,uint32_t position,uint8_t flag){
 8005f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f22:	46de      	mov	lr, fp
 8005f24:	4657      	mov	r7, sl
 8005f26:	464e      	mov	r6, r9
 8005f28:	4645      	mov	r5, r8
 8005f2a:	b5e0      	push	{r5, r6, r7, lr}
 8005f2c:	b09f      	sub	sp, #124	@ 0x7c
 8005f2e:	af12      	add	r7, sp, #72	@ 0x48
 8005f30:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005f32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005f34:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f36:	623b      	str	r3, [r7, #32]
	return write_n(hroboClaw, 19, hroboClaw->packetserial_address,M2SPEEDACCELDECCELPOS,SetDWORDval(accel),SetDWORDval(speed),SetDWORDval(deccel),SetDWORDval(position),flag);
 8005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3a:	7b1b      	ldrb	r3, [r3, #12]
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f40:	0e1b      	lsrs	r3, r3, #24
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	469c      	mov	ip, r3
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	4698      	mov	r8, r3
 8005f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f50:	0a1b      	lsrs	r3, r3, #8
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	4699      	mov	r9, r3
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	469a      	mov	sl, r3
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	0e1b      	lsrs	r3, r3, #24
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	469b      	mov	fp, r3
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	0e1b      	lsrs	r3, r3, #24
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	001e      	movs	r6, r3
 8005f98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f9a:	0e1b      	lsrs	r3, r3, #24
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	001d      	movs	r5, r3
 8005fa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fa2:	0c1b      	lsrs	r3, r3, #16
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	001c      	movs	r4, r3
 8005fa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	0019      	movs	r1, r3
 8005fb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	001a      	movs	r2, r3
 8005fb6:	203c      	movs	r0, #60	@ 0x3c
 8005fb8:	2320      	movs	r3, #32
 8005fba:	18c3      	adds	r3, r0, r3
 8005fbc:	19db      	adds	r3, r3, r7
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fc2:	9310      	str	r3, [sp, #64]	@ 0x40
 8005fc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005fc6:	910e      	str	r1, [sp, #56]	@ 0x38
 8005fc8:	940d      	str	r4, [sp, #52]	@ 0x34
 8005fca:	950c      	str	r5, [sp, #48]	@ 0x30
 8005fcc:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	910a      	str	r1, [sp, #40]	@ 0x28
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	9108      	str	r1, [sp, #32]
 8005fda:	6939      	ldr	r1, [r7, #16]
 8005fdc:	9107      	str	r1, [sp, #28]
 8005fde:	6979      	ldr	r1, [r7, #20]
 8005fe0:	9106      	str	r1, [sp, #24]
 8005fe2:	69b9      	ldr	r1, [r7, #24]
 8005fe4:	9105      	str	r1, [sp, #20]
 8005fe6:	4659      	mov	r1, fp
 8005fe8:	9104      	str	r1, [sp, #16]
 8005fea:	4651      	mov	r1, sl
 8005fec:	9103      	str	r1, [sp, #12]
 8005fee:	4649      	mov	r1, r9
 8005ff0:	9102      	str	r1, [sp, #8]
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	9101      	str	r1, [sp, #4]
 8005ff6:	4661      	mov	r1, ip
 8005ff8:	9100      	str	r1, [sp, #0]
 8005ffa:	2342      	movs	r3, #66	@ 0x42
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	2113      	movs	r1, #19
 8006000:	f7ff fdb8 	bl	8005b74 <write_n>
 8006004:	0003      	movs	r3, r0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b00d      	add	sp, #52	@ 0x34
 800600c:	bcf0      	pop	{r4, r5, r6, r7}
 800600e:	46bb      	mov	fp, r7
 8006010:	46b2      	mov	sl, r6
 8006012:	46a9      	mov	r9, r5
 8006014:	46a0      	mov	r8, r4
 8006016:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006018 <ReadEncM2>:

uint32_t ReadEncM1(RoboClaw_HandleTypeDef* hroboClaw, uint8_t *status, bool *valid){
	return Read4_1(hroboClaw, GETM1ENC, status, valid);
}

uint32_t ReadEncM2(RoboClaw_HandleTypeDef* hroboClaw, uint8_t *status, bool *valid){
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
	return Read4_1(hroboClaw, GETM2ENC, status, valid);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	2111      	movs	r1, #17
 800602c:	f7ff fe4e 	bl	8005ccc <Read4_1>
 8006030:	0003      	movs	r3, r0
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b004      	add	sp, #16
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <serial_init>:
    .application_reg_Rx = &USART4_Application_Reg_Tx,
    .WriteLock = SERIAL_WRITE_UNLOCKED,
    .ReadLock = SERIAL_READ_UNLOCKED
};
#endif
SERIAL_HandleTypeDef* serial_init(UART_HandleTypeDef *huartx) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef *serial_handler = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

#ifdef USE_USART1
		if(huartx->Instance == USART1){
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a4b      	ldr	r2, [pc, #300]	@ (800617c <serial_init+0x140>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d11f      	bne.n	8006092 <serial_init+0x56>

			USART1_Serial_Handler = &(__usart1_serial_handler);
 8006052:	4b4b      	ldr	r3, [pc, #300]	@ (8006180 <serial_init+0x144>)
 8006054:	4a4b      	ldr	r2, [pc, #300]	@ (8006184 <serial_init+0x148>)
 8006056:	601a      	str	r2, [r3, #0]

			USART1_Serial_Handler->huartx = huartx;
 8006058:	4b49      	ldr	r3, [pc, #292]	@ (8006180 <serial_init+0x144>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART1_Serial_Handler->buffer_Rx);
 8006060:	4b47      	ldr	r3, [pc, #284]	@ (8006180 <serial_init+0x144>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	0018      	movs	r0, r3
 8006068:	f000 f9ce 	bl	8006408 <ring_buffer_init>
			ring_buffer_init(USART1_Serial_Handler->buffer_Tx);
 800606c:	4b44      	ldr	r3, [pc, #272]	@ (8006180 <serial_init+0x144>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	0018      	movs	r0, r3
 8006074:	f000 f9c8 	bl	8006408 <ring_buffer_init>
			serial_handler = USART1_Serial_Handler;
 8006078:	4b41      	ldr	r3, [pc, #260]	@ (8006180 <serial_init+0x144>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART1_Serial_Handler->huartx, USART1_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 800607e:	4b40      	ldr	r3, [pc, #256]	@ (8006180 <serial_init+0x144>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	4b3e      	ldr	r3, [pc, #248]	@ (8006180 <serial_init+0x144>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2207      	movs	r2, #7
 800608c:	0019      	movs	r1, r3
 800608e:	f7fe fbad 	bl	80047ec <HAL_UART_Receive_DMA>
		}
#endif
#ifdef USE_USART2
		if(huartx->Instance == USART2){
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a3c      	ldr	r2, [pc, #240]	@ (8006188 <serial_init+0x14c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d11f      	bne.n	80060dc <serial_init+0xa0>

			USART2_Serial_Handler = &(__usart2_serial_handler);
 800609c:	4b3b      	ldr	r3, [pc, #236]	@ (800618c <serial_init+0x150>)
 800609e:	4a3c      	ldr	r2, [pc, #240]	@ (8006190 <serial_init+0x154>)
 80060a0:	601a      	str	r2, [r3, #0]

			USART2_Serial_Handler->huartx = huartx;
 80060a2:	4b3a      	ldr	r3, [pc, #232]	@ (800618c <serial_init+0x150>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART2_Serial_Handler->buffer_Rx);
 80060aa:	4b38      	ldr	r3, [pc, #224]	@ (800618c <serial_init+0x150>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 f9a9 	bl	8006408 <ring_buffer_init>
			ring_buffer_init(USART2_Serial_Handler->buffer_Tx);
 80060b6:	4b35      	ldr	r3, [pc, #212]	@ (800618c <serial_init+0x150>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	0018      	movs	r0, r3
 80060be:	f000 f9a3 	bl	8006408 <ring_buffer_init>
			serial_handler = USART2_Serial_Handler;
 80060c2:	4b32      	ldr	r3, [pc, #200]	@ (800618c <serial_init+0x150>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART2_Serial_Handler->huartx, USART2_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 80060c8:	4b30      	ldr	r3, [pc, #192]	@ (800618c <serial_init+0x150>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	4b2f      	ldr	r3, [pc, #188]	@ (800618c <serial_init+0x150>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2207      	movs	r2, #7
 80060d6:	0019      	movs	r1, r3
 80060d8:	f7fe fb88 	bl	80047ec <HAL_UART_Receive_DMA>
		}
#endif
#ifdef USE_USART3
		if(huartx->Instance == USART3){
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006194 <serial_init+0x158>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d11f      	bne.n	8006126 <serial_init+0xea>

			USART3_Serial_Handler = &(__usart3_serial_handler);
 80060e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006198 <serial_init+0x15c>)
 80060e8:	4a2c      	ldr	r2, [pc, #176]	@ (800619c <serial_init+0x160>)
 80060ea:	601a      	str	r2, [r3, #0]

			USART3_Serial_Handler->huartx = huartx;
 80060ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006198 <serial_init+0x15c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART3_Serial_Handler->buffer_Rx);
 80060f4:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <serial_init+0x15c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 f984 	bl	8006408 <ring_buffer_init>
			ring_buffer_init(USART3_Serial_Handler->buffer_Tx);
 8006100:	4b25      	ldr	r3, [pc, #148]	@ (8006198 <serial_init+0x15c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	0018      	movs	r0, r3
 8006108:	f000 f97e 	bl	8006408 <ring_buffer_init>
			serial_handler = USART3_Serial_Handler;
 800610c:	4b22      	ldr	r3, [pc, #136]	@ (8006198 <serial_init+0x15c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART3_Serial_Handler->huartx, USART3_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8006112:	4b21      	ldr	r3, [pc, #132]	@ (8006198 <serial_init+0x15c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4b1f      	ldr	r3, [pc, #124]	@ (8006198 <serial_init+0x15c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2207      	movs	r2, #7
 8006120:	0019      	movs	r1, r3
 8006122:	f7fe fb63 	bl	80047ec <HAL_UART_Receive_DMA>
		}
#endif
#ifdef USE_USART4
		if(huartx->Instance == USART4){
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1d      	ldr	r2, [pc, #116]	@ (80061a0 <serial_init+0x164>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d11f      	bne.n	8006170 <serial_init+0x134>

			USART4_Serial_Handler = &(__usart4_serial_handler);
 8006130:	4b1c      	ldr	r3, [pc, #112]	@ (80061a4 <serial_init+0x168>)
 8006132:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <serial_init+0x16c>)
 8006134:	601a      	str	r2, [r3, #0]

			USART4_Serial_Handler->huartx = huartx;
 8006136:	4b1b      	ldr	r3, [pc, #108]	@ (80061a4 <serial_init+0x168>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
			ring_buffer_init(USART4_Serial_Handler->buffer_Rx);
 800613e:	4b19      	ldr	r3, [pc, #100]	@ (80061a4 <serial_init+0x168>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	0018      	movs	r0, r3
 8006146:	f000 f95f 	bl	8006408 <ring_buffer_init>
			ring_buffer_init(USART4_Serial_Handler->buffer_Tx);
 800614a:	4b16      	ldr	r3, [pc, #88]	@ (80061a4 <serial_init+0x168>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	0018      	movs	r0, r3
 8006152:	f000 f959 	bl	8006408 <ring_buffer_init>
			serial_handler = USART4_Serial_Handler;
 8006156:	4b13      	ldr	r3, [pc, #76]	@ (80061a4 <serial_init+0x168>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]
			HAL_UART_Receive_DMA(USART4_Serial_Handler->huartx, USART4_Serial_Handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 800615c:	4b11      	ldr	r3, [pc, #68]	@ (80061a4 <serial_init+0x168>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <serial_init+0x168>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2207      	movs	r2, #7
 800616a:	0019      	movs	r1, r3
 800616c:	f7fe fb3e 	bl	80047ec <HAL_UART_Receive_DMA>
		}
#endif

	return serial_handler;
 8006170:	68fb      	ldr	r3, [r7, #12]

}
 8006172:	0018      	movs	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	b004      	add	sp, #16
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			@ (mov r8, r8)
 800617c:	40013800 	.word	0x40013800
 8006180:	20000520 	.word	0x20000520
 8006184:	2000001c 	.word	0x2000001c
 8006188:	40004400 	.word	0x40004400
 800618c:	20000940 	.word	0x20000940
 8006190:	20000038 	.word	0x20000038
 8006194:	40004800 	.word	0x40004800
 8006198:	20000d60 	.word	0x20000d60
 800619c:	20000054 	.word	0x20000054
 80061a0:	40004c00 	.word	0x40004c00
 80061a4:	20001180 	.word	0x20001180
 80061a8:	20000070 	.word	0x20000070

080061ac <serial_write>:

void serial_write(SERIAL_HandleTypeDef* hserial, uint8_t *pData, uint16_t len) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	1dbb      	adds	r3, r7, #6
 80061b8:	801a      	strh	r2, [r3, #0]

	if (ring_buffer_is_empty(hserial->buffer_Tx)) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	0018      	movs	r0, r3
 80061c0:	f000 f8ee 	bl	80063a0 <ring_buffer_is_empty>
 80061c4:	1e03      	subs	r3, r0, #0
 80061c6:	d012      	beq.n	80061ee <serial_write+0x42>

			if (HAL_UART_Transmit_DMA(hserial->huartx, pData, len) != HAL_OK) {
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	1dbb      	adds	r3, r7, #6
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	0019      	movs	r1, r3
 80061d4:	f7fe fa7a 	bl	80046cc <HAL_UART_Transmit_DMA>
 80061d8:	1e03      	subs	r3, r0, #0
 80061da:	d010      	beq.n	80061fe <serial_write+0x52>
				ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6858      	ldr	r0, [r3, #4]
 80061e0:	1dbb      	adds	r3, r7, #6
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	0019      	movs	r1, r3
 80061e8:	f000 f968 	bl	80064bc <ring_buffer_queue_arr>
			}
	} else {
			ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
	}
//	ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
}
 80061ec:	e007      	b.n	80061fe <serial_write+0x52>
			ring_buffer_queue_arr(hserial->buffer_Tx, pData, len);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6858      	ldr	r0, [r3, #4]
 80061f2:	1dbb      	adds	r3, r7, #6
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	0019      	movs	r1, r3
 80061fa:	f000 f95f 	bl	80064bc <ring_buffer_queue_arr>
}
 80061fe:	46c0      	nop			@ (mov r8, r8)
 8006200:	46bd      	mov	sp, r7
 8006202:	b004      	add	sp, #16
 8006204:	bd80      	pop	{r7, pc}

08006206 <serial_available>:

uint8_t serial_available(SERIAL_HandleTypeDef* hserial) {
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]

	return !ring_buffer_is_empty(hserial->buffer_Rx);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	0018      	movs	r0, r3
 8006214:	f000 f8c4 	bl	80063a0 <ring_buffer_is_empty>
 8006218:	0003      	movs	r3, r0
 800621a:	425a      	negs	r2, r3
 800621c:	4153      	adcs	r3, r2
 800621e:	b2db      	uxtb	r3, r3
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b002      	add	sp, #8
 8006226:	bd80      	pop	{r7, pc}

08006228 <serial_read>:

uint8_t serial_read(SERIAL_HandleTypeDef* hserial) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

		if (!ring_buffer_is_empty(hserial->buffer_Rx)) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	0018      	movs	r0, r3
 8006236:	f000 f8b3 	bl	80063a0 <ring_buffer_is_empty>
 800623a:	1e03      	subs	r3, r0, #0
 800623c:	d10b      	bne.n	8006256 <serial_read+0x2e>
			ring_buffer_dequeue(hserial->buffer_Rx, hserial->application_reg_Rx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	0019      	movs	r1, r3
 8006248:	0010      	movs	r0, r2
 800624a:	f000 f95f 	bl	800650c <ring_buffer_dequeue>
			return *(hserial->application_reg_Rx);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	e000      	b.n	8006258 <serial_read+0x30>
		}

		return '\0';
 8006256:	2300      	movs	r3, #0
}
 8006258:	0018      	movs	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	b002      	add	sp, #8
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	f000 f85c 	bl	8006328 <get_serial_handler>
 8006270:	0003      	movs	r3, r0
 8006272:	60fb      	str	r3, [r7, #12]
	
	if (serial_handler != NULL) {
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d015      	beq.n	80062a6 <HAL_UART_TxCpltCallback+0x46>
		if (!ring_buffer_is_empty(serial_handler->buffer_Tx)) {
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	0018      	movs	r0, r3
 8006280:	f000 f88e 	bl	80063a0 <ring_buffer_is_empty>
 8006284:	1e03      	subs	r3, r0, #0
 8006286:	d10e      	bne.n	80062a6 <HAL_UART_TxCpltCallback+0x46>

			  ring_buffer_dequeue(serial_handler->buffer_Tx, serial_handler->hal_reg_Tx);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	0019      	movs	r1, r3
 8006292:	0010      	movs	r0, r2
 8006294:	f000 f93a 	bl	800650c <ring_buffer_dequeue>
			  HAL_UART_Transmit_DMA(huart, serial_handler->hal_reg_Tx, PRIMARY_REG_SIZE);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68d9      	ldr	r1, [r3, #12]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2207      	movs	r2, #7
 80062a0:	0018      	movs	r0, r3
 80062a2:	f7fe fa13 	bl	80046cc <HAL_UART_Transmit_DMA>
		}
	}
}
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b004      	add	sp, #16
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 f835 	bl	8006328 <get_serial_handler>
 80062be:	0003      	movs	r3, r0
 80062c0:	60fb      	str	r3, [r7, #12]
	
	if (serial_handler != NULL) {
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00e      	beq.n	80062e6 <HAL_UART_RxCpltCallback+0x38>
		ring_buffer_queue_arr(serial_handler->buffer_Rx, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6898      	ldr	r0, [r3, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2207      	movs	r2, #7
 80062d2:	0019      	movs	r1, r3
 80062d4:	f000 f8f2 	bl	80064bc <ring_buffer_queue_arr>
		HAL_UART_Receive_DMA(huart, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6919      	ldr	r1, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2207      	movs	r2, #7
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7fe fa83 	bl	80047ec <HAL_UART_Receive_DMA>
	}
}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b004      	add	sp, #16
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
	if (huart->ErrorCode == HAL_UART_ERROR_ORE) {
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2284      	movs	r2, #132	@ 0x84
 80062fa:	589b      	ldr	r3, [r3, r2]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d10f      	bne.n	8006320 <HAL_UART_ErrorCallback+0x32>
		// Overrun error - restart DMA receive
		SERIAL_HandleTypeDef* serial_handler = get_serial_handler(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	0018      	movs	r0, r3
 8006304:	f000 f810 	bl	8006328 <get_serial_handler>
 8006308:	0003      	movs	r3, r0
 800630a:	60fb      	str	r3, [r7, #12]
		if (serial_handler != NULL) {
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d006      	beq.n	8006320 <HAL_UART_ErrorCallback+0x32>
			HAL_UART_Receive_DMA(huart, serial_handler->hal_reg_Rx, PRIMARY_REG_SIZE);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6919      	ldr	r1, [r3, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2207      	movs	r2, #7
 800631a:	0018      	movs	r0, r3
 800631c:	f7fe fa66 	bl	80047ec <HAL_UART_Receive_DMA>
		}
	}
}
 8006320:	46c0      	nop			@ (mov r8, r8)
 8006322:	46bd      	mov	sp, r7
 8006324:	b004      	add	sp, #16
 8006326:	bd80      	pop	{r7, pc}

08006328 <get_serial_handler>:
extern SERIAL_HandleTypeDef* USART1_Serial_Handler;
extern SERIAL_HandleTypeDef* USART2_Serial_Handler;
extern SERIAL_HandleTypeDef* USART3_Serial_Handler;
extern SERIAL_HandleTypeDef* USART4_Serial_Handler;

SERIAL_HandleTypeDef* get_serial_handler(UART_HandleTypeDef *huartx){
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

	SERIAL_HandleTypeDef* ret_serial_handler = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

#ifdef USE_USART1
	if(huartx->Instance == USART1){
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a11      	ldr	r2, [pc, #68]	@ (8006380 <get_serial_handler+0x58>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d102      	bne.n	8006344 <get_serial_handler+0x1c>
		ret_serial_handler = USART1_Serial_Handler;
 800633e:	4b11      	ldr	r3, [pc, #68]	@ (8006384 <get_serial_handler+0x5c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART2
	if(huartx->Instance == USART2){
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a0f      	ldr	r2, [pc, #60]	@ (8006388 <get_serial_handler+0x60>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d102      	bne.n	8006354 <get_serial_handler+0x2c>
		ret_serial_handler = USART2_Serial_Handler;
 800634e:	4b0f      	ldr	r3, [pc, #60]	@ (800638c <get_serial_handler+0x64>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART3
	if(huartx->Instance == USART3){
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a0d      	ldr	r2, [pc, #52]	@ (8006390 <get_serial_handler+0x68>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d102      	bne.n	8006364 <get_serial_handler+0x3c>
		ret_serial_handler = USART3_Serial_Handler;
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <get_serial_handler+0x6c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]
	}
#endif
#ifdef USE_USART4
	if(huartx->Instance == USART4){
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a0b      	ldr	r2, [pc, #44]	@ (8006398 <get_serial_handler+0x70>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d102      	bne.n	8006374 <get_serial_handler+0x4c>
		ret_serial_handler = USART4_Serial_Handler;
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <get_serial_handler+0x74>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]
	}
#endif
	return ret_serial_handler;
 8006374:	68fb      	ldr	r3, [r7, #12]
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b004      	add	sp, #16
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	40013800 	.word	0x40013800
 8006384:	20000520 	.word	0x20000520
 8006388:	40004400 	.word	0x40004400
 800638c:	20000940 	.word	0x20000940
 8006390:	40004800 	.word	0x40004800
 8006394:	20000d60 	.word	0x20000d60
 8006398:	40004c00 	.word	0x40004c00
 800639c:	20001180 	.word	0x20001180

080063a0 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a07      	ldr	r2, [pc, #28]	@ (80063c8 <ring_buffer_is_empty+0x28>)
 80063ac:	5a9a      	ldrh	r2, [r3, r2]
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	2380      	movs	r3, #128	@ 0x80
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	5acb      	ldrh	r3, [r1, r3]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	425a      	negs	r2, r3
 80063ba:	4153      	adcs	r3, r2
 80063bc:	b2db      	uxtb	r3, r3
}
 80063be:	0018      	movs	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b002      	add	sp, #8
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	00000202 	.word	0x00000202

080063cc <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006400 <ring_buffer_is_full+0x34>)
 80063d8:	5a9a      	ldrh	r2, [r3, r2]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	2380      	movs	r3, #128	@ 0x80
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	5acb      	ldrh	r3, [r1, r3]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	05db      	lsls	r3, r3, #23
 80063e8:	0ddb      	lsrs	r3, r3, #23
 80063ea:	4a06      	ldr	r2, [pc, #24]	@ (8006404 <ring_buffer_is_full+0x38>)
 80063ec:	4694      	mov	ip, r2
 80063ee:	4463      	add	r3, ip
 80063f0:	425a      	negs	r2, r3
 80063f2:	4153      	adcs	r3, r2
 80063f4:	b2db      	uxtb	r3, r3
}
 80063f6:	0018      	movs	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b002      	add	sp, #8
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	00000202 	.word	0x00000202
 8006404:	fffffe01 	.word	0xfffffe01

08006408 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	2380      	movs	r3, #128	@ 0x80
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	2100      	movs	r1, #0
 8006418:	52d1      	strh	r1, [r2, r3]
  buffer->head_index = 0;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a08      	ldr	r2, [pc, #32]	@ (8006440 <ring_buffer_init+0x38>)
 800641e:	2100      	movs	r1, #0
 8006420:	5299      	strh	r1, [r3, r2]

  /** debug features initialize. */
  buffer->byte_enqueue_hit = 0;
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	2381      	movs	r3, #129	@ 0x81
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	2100      	movs	r1, #0
 800642a:	50d1      	str	r1, [r2, r3]
  buffer->byte_dequeue_hit = 0;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	2382      	movs	r3, #130	@ 0x82
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	2100      	movs	r1, #0
 8006434:	50d1      	str	r1, [r2, r3]
}
 8006436:	46c0      	nop			@ (mov r8, r8)
 8006438:	46bd      	mov	sp, r7
 800643a:	b002      	add	sp, #8
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	00000202 	.word	0x00000202

08006444 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, uint8_t data) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	000a      	movs	r2, r1
 800644e:	1cfb      	adds	r3, r7, #3
 8006450:	701a      	strb	r2, [r3, #0]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	0018      	movs	r0, r3
 8006456:	f7ff ffb9 	bl	80063cc <ring_buffer_is_full>
 800645a:	1e03      	subs	r3, r0, #0
 800645c:	d00c      	beq.n	8006478 <ring_buffer_queue+0x34>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	2380      	movs	r3, #128	@ 0x80
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	5ad3      	ldrh	r3, [r2, r3]
 8006466:	3301      	adds	r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	05db      	lsls	r3, r3, #23
 800646c:	0ddb      	lsrs	r3, r3, #23
 800646e:	b299      	uxth	r1, r3
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	52d1      	strh	r1, [r2, r3]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a0f      	ldr	r2, [pc, #60]	@ (80064b8 <ring_buffer_queue+0x74>)
 800647c:	5a9b      	ldrh	r3, [r3, r2]
 800647e:	0019      	movs	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1cfa      	adds	r2, r7, #3
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a0b      	ldr	r2, [pc, #44]	@ (80064b8 <ring_buffer_queue+0x74>)
 800648c:	5a9b      	ldrh	r3, [r3, r2]
 800648e:	3301      	adds	r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	05db      	lsls	r3, r3, #23
 8006494:	0ddb      	lsrs	r3, r3, #23
 8006496:	b299      	uxth	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a07      	ldr	r2, [pc, #28]	@ (80064b8 <ring_buffer_queue+0x74>)
 800649c:	5299      	strh	r1, [r3, r2]

  /** debug features update. */
  buffer->byte_enqueue_hit ++;
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	2381      	movs	r3, #129	@ 0x81
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	58d3      	ldr	r3, [r2, r3]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	2381      	movs	r3, #129	@ 0x81
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	50d1      	str	r1, [r2, r3]

}
 80064b0:	46c0      	nop			@ (mov r8, r8)
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	00000202 	.word	0x00000202

080064bc <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, uint8_t *data, ring_buffer_size_t size) {
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	1dbb      	adds	r3, r7, #6
 80064c8:	801a      	strh	r2, [r3, #0]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 80064ca:	2316      	movs	r3, #22
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	2200      	movs	r2, #0
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e00f      	b.n	80064f4 <ring_buffer_queue_arr+0x38>
    ring_buffer_queue(buffer, data[i]);
 80064d4:	2416      	movs	r4, #22
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	18d3      	adds	r3, r2, r3
 80064de:	781a      	ldrb	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	0011      	movs	r1, r2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f7ff ffad 	bl	8006444 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 80064ea:	193b      	adds	r3, r7, r4
 80064ec:	881a      	ldrh	r2, [r3, #0]
 80064ee:	193b      	adds	r3, r7, r4
 80064f0:	3201      	adds	r2, #1
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	2316      	movs	r3, #22
 80064f6:	18fa      	adds	r2, r7, r3
 80064f8:	1dbb      	adds	r3, r7, #6
 80064fa:	8812      	ldrh	r2, [r2, #0]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d3e8      	bcc.n	80064d4 <ring_buffer_queue_arr+0x18>
  }
}
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	46c0      	nop			@ (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b007      	add	sp, #28
 800650a:	bd90      	pop	{r4, r7, pc}

0800650c <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, uint8_t *data) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	0018      	movs	r0, r3
 800651a:	f7ff ff41 	bl	80063a0 <ring_buffer_is_empty>
 800651e:	1e03      	subs	r3, r0, #0
 8006520:	d001      	beq.n	8006526 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8006522:	2300      	movs	r3, #0
 8006524:	e01f      	b.n	8006566 <ring_buffer_dequeue+0x5a>
  }

  *data = buffer->buffer[buffer->tail_index];
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	2380      	movs	r3, #128	@ 0x80
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	5ad3      	ldrh	r3, [r2, r3]
 800652e:	001a      	movs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	5c9a      	ldrb	r2, [r3, r2]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	2380      	movs	r3, #128	@ 0x80
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	5ad3      	ldrh	r3, [r2, r3]
 8006540:	3301      	adds	r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	05db      	lsls	r3, r3, #23
 8006546:	0ddb      	lsrs	r3, r3, #23
 8006548:	b299      	uxth	r1, r3
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	2380      	movs	r3, #128	@ 0x80
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	52d1      	strh	r1, [r2, r3]

  /** debug features update. */
  buffer->byte_dequeue_hit ++;
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	2382      	movs	r3, #130	@ 0x82
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	58d3      	ldr	r3, [r2, r3]
 800655a:	1c59      	adds	r1, r3, #1
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	2382      	movs	r3, #130	@ 0x82
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	50d1      	str	r1, [r2, r3]

  return 1;
 8006564:	2301      	movs	r3, #1
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bd80      	pop	{r7, pc}

0800656e <memset>:
 800656e:	0003      	movs	r3, r0
 8006570:	1882      	adds	r2, r0, r2
 8006572:	4293      	cmp	r3, r2
 8006574:	d100      	bne.n	8006578 <memset+0xa>
 8006576:	4770      	bx	lr
 8006578:	7019      	strb	r1, [r3, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	e7f9      	b.n	8006572 <memset+0x4>
	...

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	2600      	movs	r6, #0
 8006584:	4c0c      	ldr	r4, [pc, #48]	@ (80065b8 <__libc_init_array+0x38>)
 8006586:	4d0d      	ldr	r5, [pc, #52]	@ (80065bc <__libc_init_array+0x3c>)
 8006588:	1b64      	subs	r4, r4, r5
 800658a:	10a4      	asrs	r4, r4, #2
 800658c:	42a6      	cmp	r6, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	2600      	movs	r6, #0
 8006592:	f000 f819 	bl	80065c8 <_init>
 8006596:	4c0a      	ldr	r4, [pc, #40]	@ (80065c0 <__libc_init_array+0x40>)
 8006598:	4d0a      	ldr	r5, [pc, #40]	@ (80065c4 <__libc_init_array+0x44>)
 800659a:	1b64      	subs	r4, r4, r5
 800659c:	10a4      	asrs	r4, r4, #2
 800659e:	42a6      	cmp	r6, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	00b3      	lsls	r3, r6, #2
 80065a6:	58eb      	ldr	r3, [r5, r3]
 80065a8:	4798      	blx	r3
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	00b3      	lsls	r3, r6, #2
 80065b0:	58eb      	ldr	r3, [r5, r3]
 80065b2:	4798      	blx	r3
 80065b4:	3601      	adds	r6, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	080066d8 	.word	0x080066d8
 80065bc:	080066d8 	.word	0x080066d8
 80065c0:	080066dc 	.word	0x080066dc
 80065c4:	080066d8 	.word	0x080066d8

080065c8 <_init>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr

080065d4 <_fini>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	46c0      	nop			@ (mov r8, r8)
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr
