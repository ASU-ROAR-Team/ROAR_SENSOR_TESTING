
pcb_pid_cytron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003688  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003748  08003748  00004748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003804  08003804  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003804  08003804  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003804  08003804  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003808  08003808  00004808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800380c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000010  0800381c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800381c  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008124  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001762  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0000e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000709  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197e1  00000000  00000000  0000f8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b551  00000000  00000000  000290ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000944bf  00000000  00000000  0003461b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8ada  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c8  00000000  00000000  000c8b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003730 	.word	0x08003730

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003730 	.word	0x08003730

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fbc3 	bl	80009b4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fb4b 	bl	80008d4 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fbb5 	bl	80009b4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fbab 	bl	80009b4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb59 	bl	8000924 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb4f 	bl	8000924 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 ff8b 	bl	80011c0 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fd21 	bl	8000cf8 <__aeabi_fsub>
 80002b6:	f000 ff83 	bl	80011c0 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	024b      	lsls	r3, r1, #9
 80002c8:	0a5a      	lsrs	r2, r3, #9
 80002ca:	4694      	mov	ip, r2
 80002cc:	004a      	lsls	r2, r1, #1
 80002ce:	0fc9      	lsrs	r1, r1, #31
 80002d0:	46ce      	mov	lr, r9
 80002d2:	4647      	mov	r7, r8
 80002d4:	4689      	mov	r9, r1
 80002d6:	0045      	lsls	r5, r0, #1
 80002d8:	0246      	lsls	r6, r0, #9
 80002da:	0e2d      	lsrs	r5, r5, #24
 80002dc:	0e12      	lsrs	r2, r2, #24
 80002de:	b580      	push	{r7, lr}
 80002e0:	0999      	lsrs	r1, r3, #6
 80002e2:	0a77      	lsrs	r7, r6, #9
 80002e4:	0fc4      	lsrs	r4, r0, #31
 80002e6:	09b6      	lsrs	r6, r6, #6
 80002e8:	1aab      	subs	r3, r5, r2
 80002ea:	454c      	cmp	r4, r9
 80002ec:	d020      	beq.n	8000330 <__aeabi_fadd+0x6c>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	dd0c      	ble.n	800030c <__aeabi_fadd+0x48>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d134      	bne.n	8000360 <__aeabi_fadd+0x9c>
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d02a      	beq.n	8000350 <__aeabi_fadd+0x8c>
 80002fa:	1e5a      	subs	r2, r3, #1
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d100      	bne.n	8000302 <__aeabi_fadd+0x3e>
 8000300:	e08f      	b.n	8000422 <__aeabi_fadd+0x15e>
 8000302:	2bff      	cmp	r3, #255	@ 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0x44>
 8000306:	e0cd      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000308:	0013      	movs	r3, r2
 800030a:	e02f      	b.n	800036c <__aeabi_fadd+0xa8>
 800030c:	2b00      	cmp	r3, #0
 800030e:	d060      	beq.n	80003d2 <__aeabi_fadd+0x10e>
 8000310:	1b53      	subs	r3, r2, r5
 8000312:	2d00      	cmp	r5, #0
 8000314:	d000      	beq.n	8000318 <__aeabi_fadd+0x54>
 8000316:	e0ee      	b.n	80004f6 <__aeabi_fadd+0x232>
 8000318:	2e00      	cmp	r6, #0
 800031a:	d100      	bne.n	800031e <__aeabi_fadd+0x5a>
 800031c:	e13e      	b.n	800059c <__aeabi_fadd+0x2d8>
 800031e:	1e5c      	subs	r4, r3, #1
 8000320:	2b01      	cmp	r3, #1
 8000322:	d100      	bne.n	8000326 <__aeabi_fadd+0x62>
 8000324:	e16b      	b.n	80005fe <__aeabi_fadd+0x33a>
 8000326:	2bff      	cmp	r3, #255	@ 0xff
 8000328:	d100      	bne.n	800032c <__aeabi_fadd+0x68>
 800032a:	e0b9      	b.n	80004a0 <__aeabi_fadd+0x1dc>
 800032c:	0023      	movs	r3, r4
 800032e:	e0e7      	b.n	8000500 <__aeabi_fadd+0x23c>
 8000330:	2b00      	cmp	r3, #0
 8000332:	dc00      	bgt.n	8000336 <__aeabi_fadd+0x72>
 8000334:	e0a4      	b.n	8000480 <__aeabi_fadd+0x1bc>
 8000336:	2a00      	cmp	r2, #0
 8000338:	d069      	beq.n	800040e <__aeabi_fadd+0x14a>
 800033a:	2dff      	cmp	r5, #255	@ 0xff
 800033c:	d100      	bne.n	8000340 <__aeabi_fadd+0x7c>
 800033e:	e0b1      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000340:	2280      	movs	r2, #128	@ 0x80
 8000342:	04d2      	lsls	r2, r2, #19
 8000344:	4311      	orrs	r1, r2
 8000346:	2b1b      	cmp	r3, #27
 8000348:	dc00      	bgt.n	800034c <__aeabi_fadd+0x88>
 800034a:	e0e9      	b.n	8000520 <__aeabi_fadd+0x25c>
 800034c:	002b      	movs	r3, r5
 800034e:	3605      	adds	r6, #5
 8000350:	08f7      	lsrs	r7, r6, #3
 8000352:	2bff      	cmp	r3, #255	@ 0xff
 8000354:	d100      	bne.n	8000358 <__aeabi_fadd+0x94>
 8000356:	e0a5      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000358:	027a      	lsls	r2, r7, #9
 800035a:	0a52      	lsrs	r2, r2, #9
 800035c:	b2d8      	uxtb	r0, r3
 800035e:	e030      	b.n	80003c2 <__aeabi_fadd+0xfe>
 8000360:	2dff      	cmp	r5, #255	@ 0xff
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0xa2>
 8000364:	e09e      	b.n	80004a4 <__aeabi_fadd+0x1e0>
 8000366:	2280      	movs	r2, #128	@ 0x80
 8000368:	04d2      	lsls	r2, r2, #19
 800036a:	4311      	orrs	r1, r2
 800036c:	2001      	movs	r0, #1
 800036e:	2b1b      	cmp	r3, #27
 8000370:	dc08      	bgt.n	8000384 <__aeabi_fadd+0xc0>
 8000372:	0008      	movs	r0, r1
 8000374:	2220      	movs	r2, #32
 8000376:	40d8      	lsrs	r0, r3
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	4099      	lsls	r1, r3
 800037c:	000b      	movs	r3, r1
 800037e:	1e5a      	subs	r2, r3, #1
 8000380:	4193      	sbcs	r3, r2
 8000382:	4318      	orrs	r0, r3
 8000384:	1a36      	subs	r6, r6, r0
 8000386:	0173      	lsls	r3, r6, #5
 8000388:	d400      	bmi.n	800038c <__aeabi_fadd+0xc8>
 800038a:	e071      	b.n	8000470 <__aeabi_fadd+0x1ac>
 800038c:	01b6      	lsls	r6, r6, #6
 800038e:	09b7      	lsrs	r7, r6, #6
 8000390:	0038      	movs	r0, r7
 8000392:	f000 ffcb 	bl	800132c <__clzsi2>
 8000396:	003b      	movs	r3, r7
 8000398:	3805      	subs	r0, #5
 800039a:	4083      	lsls	r3, r0
 800039c:	4285      	cmp	r5, r0
 800039e:	dd4d      	ble.n	800043c <__aeabi_fadd+0x178>
 80003a0:	4eb4      	ldr	r6, [pc, #720]	@ (8000674 <__aeabi_fadd+0x3b0>)
 80003a2:	1a2d      	subs	r5, r5, r0
 80003a4:	401e      	ands	r6, r3
 80003a6:	075a      	lsls	r2, r3, #29
 80003a8:	d068      	beq.n	800047c <__aeabi_fadd+0x1b8>
 80003aa:	220f      	movs	r2, #15
 80003ac:	4013      	ands	r3, r2
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d064      	beq.n	800047c <__aeabi_fadd+0x1b8>
 80003b2:	3604      	adds	r6, #4
 80003b4:	0173      	lsls	r3, r6, #5
 80003b6:	d561      	bpl.n	800047c <__aeabi_fadd+0x1b8>
 80003b8:	1c68      	adds	r0, r5, #1
 80003ba:	2dfe      	cmp	r5, #254	@ 0xfe
 80003bc:	d154      	bne.n	8000468 <__aeabi_fadd+0x1a4>
 80003be:	20ff      	movs	r0, #255	@ 0xff
 80003c0:	2200      	movs	r2, #0
 80003c2:	05c0      	lsls	r0, r0, #23
 80003c4:	4310      	orrs	r0, r2
 80003c6:	07e4      	lsls	r4, r4, #31
 80003c8:	4320      	orrs	r0, r4
 80003ca:	bcc0      	pop	{r6, r7}
 80003cc:	46b9      	mov	r9, r7
 80003ce:	46b0      	mov	r8, r6
 80003d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003d2:	22fe      	movs	r2, #254	@ 0xfe
 80003d4:	4690      	mov	r8, r2
 80003d6:	1c68      	adds	r0, r5, #1
 80003d8:	0002      	movs	r2, r0
 80003da:	4640      	mov	r0, r8
 80003dc:	4210      	tst	r0, r2
 80003de:	d16b      	bne.n	80004b8 <__aeabi_fadd+0x1f4>
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	d000      	beq.n	80003e6 <__aeabi_fadd+0x122>
 80003e4:	e0dd      	b.n	80005a2 <__aeabi_fadd+0x2de>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_fadd+0x128>
 80003ea:	e102      	b.n	80005f2 <__aeabi_fadd+0x32e>
 80003ec:	2900      	cmp	r1, #0
 80003ee:	d0b3      	beq.n	8000358 <__aeabi_fadd+0x94>
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	1a77      	subs	r7, r6, r1
 80003f4:	04d2      	lsls	r2, r2, #19
 80003f6:	4217      	tst	r7, r2
 80003f8:	d100      	bne.n	80003fc <__aeabi_fadd+0x138>
 80003fa:	e136      	b.n	800066a <__aeabi_fadd+0x3a6>
 80003fc:	464c      	mov	r4, r9
 80003fe:	1b8e      	subs	r6, r1, r6
 8000400:	d061      	beq.n	80004c6 <__aeabi_fadd+0x202>
 8000402:	2001      	movs	r0, #1
 8000404:	4216      	tst	r6, r2
 8000406:	d130      	bne.n	800046a <__aeabi_fadd+0x1a6>
 8000408:	2300      	movs	r3, #0
 800040a:	08f7      	lsrs	r7, r6, #3
 800040c:	e7a4      	b.n	8000358 <__aeabi_fadd+0x94>
 800040e:	2900      	cmp	r1, #0
 8000410:	d09e      	beq.n	8000350 <__aeabi_fadd+0x8c>
 8000412:	1e5a      	subs	r2, r3, #1
 8000414:	2b01      	cmp	r3, #1
 8000416:	d100      	bne.n	800041a <__aeabi_fadd+0x156>
 8000418:	e0ca      	b.n	80005b0 <__aeabi_fadd+0x2ec>
 800041a:	2bff      	cmp	r3, #255	@ 0xff
 800041c:	d042      	beq.n	80004a4 <__aeabi_fadd+0x1e0>
 800041e:	0013      	movs	r3, r2
 8000420:	e791      	b.n	8000346 <__aeabi_fadd+0x82>
 8000422:	1a71      	subs	r1, r6, r1
 8000424:	014b      	lsls	r3, r1, #5
 8000426:	d400      	bmi.n	800042a <__aeabi_fadd+0x166>
 8000428:	e0d1      	b.n	80005ce <__aeabi_fadd+0x30a>
 800042a:	018f      	lsls	r7, r1, #6
 800042c:	09bf      	lsrs	r7, r7, #6
 800042e:	0038      	movs	r0, r7
 8000430:	f000 ff7c 	bl	800132c <__clzsi2>
 8000434:	003b      	movs	r3, r7
 8000436:	3805      	subs	r0, #5
 8000438:	4083      	lsls	r3, r0
 800043a:	2501      	movs	r5, #1
 800043c:	2220      	movs	r2, #32
 800043e:	1b40      	subs	r0, r0, r5
 8000440:	3001      	adds	r0, #1
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	001e      	movs	r6, r3
 8000446:	4093      	lsls	r3, r2
 8000448:	40c6      	lsrs	r6, r0
 800044a:	1e5a      	subs	r2, r3, #1
 800044c:	4193      	sbcs	r3, r2
 800044e:	431e      	orrs	r6, r3
 8000450:	d039      	beq.n	80004c6 <__aeabi_fadd+0x202>
 8000452:	0773      	lsls	r3, r6, #29
 8000454:	d100      	bne.n	8000458 <__aeabi_fadd+0x194>
 8000456:	e11b      	b.n	8000690 <__aeabi_fadd+0x3cc>
 8000458:	230f      	movs	r3, #15
 800045a:	2500      	movs	r5, #0
 800045c:	4033      	ands	r3, r6
 800045e:	2b04      	cmp	r3, #4
 8000460:	d1a7      	bne.n	80003b2 <__aeabi_fadd+0xee>
 8000462:	2001      	movs	r0, #1
 8000464:	0172      	lsls	r2, r6, #5
 8000466:	d57c      	bpl.n	8000562 <__aeabi_fadd+0x29e>
 8000468:	b2c0      	uxtb	r0, r0
 800046a:	01b2      	lsls	r2, r6, #6
 800046c:	0a52      	lsrs	r2, r2, #9
 800046e:	e7a8      	b.n	80003c2 <__aeabi_fadd+0xfe>
 8000470:	0773      	lsls	r3, r6, #29
 8000472:	d003      	beq.n	800047c <__aeabi_fadd+0x1b8>
 8000474:	230f      	movs	r3, #15
 8000476:	4033      	ands	r3, r6
 8000478:	2b04      	cmp	r3, #4
 800047a:	d19a      	bne.n	80003b2 <__aeabi_fadd+0xee>
 800047c:	002b      	movs	r3, r5
 800047e:	e767      	b.n	8000350 <__aeabi_fadd+0x8c>
 8000480:	2b00      	cmp	r3, #0
 8000482:	d023      	beq.n	80004cc <__aeabi_fadd+0x208>
 8000484:	1b53      	subs	r3, r2, r5
 8000486:	2d00      	cmp	r5, #0
 8000488:	d17b      	bne.n	8000582 <__aeabi_fadd+0x2be>
 800048a:	2e00      	cmp	r6, #0
 800048c:	d100      	bne.n	8000490 <__aeabi_fadd+0x1cc>
 800048e:	e086      	b.n	800059e <__aeabi_fadd+0x2da>
 8000490:	1e5d      	subs	r5, r3, #1
 8000492:	2b01      	cmp	r3, #1
 8000494:	d100      	bne.n	8000498 <__aeabi_fadd+0x1d4>
 8000496:	e08b      	b.n	80005b0 <__aeabi_fadd+0x2ec>
 8000498:	2bff      	cmp	r3, #255	@ 0xff
 800049a:	d002      	beq.n	80004a2 <__aeabi_fadd+0x1de>
 800049c:	002b      	movs	r3, r5
 800049e:	e075      	b.n	800058c <__aeabi_fadd+0x2c8>
 80004a0:	464c      	mov	r4, r9
 80004a2:	4667      	mov	r7, ip
 80004a4:	2f00      	cmp	r7, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_fadd+0x1e6>
 80004a8:	e789      	b.n	80003be <__aeabi_fadd+0xfa>
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	03d2      	lsls	r2, r2, #15
 80004ae:	433a      	orrs	r2, r7
 80004b0:	0252      	lsls	r2, r2, #9
 80004b2:	20ff      	movs	r0, #255	@ 0xff
 80004b4:	0a52      	lsrs	r2, r2, #9
 80004b6:	e784      	b.n	80003c2 <__aeabi_fadd+0xfe>
 80004b8:	1a77      	subs	r7, r6, r1
 80004ba:	017b      	lsls	r3, r7, #5
 80004bc:	d46b      	bmi.n	8000596 <__aeabi_fadd+0x2d2>
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x200>
 80004c2:	e765      	b.n	8000390 <__aeabi_fadd+0xcc>
 80004c4:	2400      	movs	r4, #0
 80004c6:	2000      	movs	r0, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	e77a      	b.n	80003c2 <__aeabi_fadd+0xfe>
 80004cc:	22fe      	movs	r2, #254	@ 0xfe
 80004ce:	1c6b      	adds	r3, r5, #1
 80004d0:	421a      	tst	r2, r3
 80004d2:	d149      	bne.n	8000568 <__aeabi_fadd+0x2a4>
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d000      	beq.n	80004da <__aeabi_fadd+0x216>
 80004d8:	e09f      	b.n	800061a <__aeabi_fadd+0x356>
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x21c>
 80004de:	e0ba      	b.n	8000656 <__aeabi_fadd+0x392>
 80004e0:	2900      	cmp	r1, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x222>
 80004e4:	e0cf      	b.n	8000686 <__aeabi_fadd+0x3c2>
 80004e6:	1872      	adds	r2, r6, r1
 80004e8:	0153      	lsls	r3, r2, #5
 80004ea:	d400      	bmi.n	80004ee <__aeabi_fadd+0x22a>
 80004ec:	e0cd      	b.n	800068a <__aeabi_fadd+0x3c6>
 80004ee:	0192      	lsls	r2, r2, #6
 80004f0:	2001      	movs	r0, #1
 80004f2:	0a52      	lsrs	r2, r2, #9
 80004f4:	e765      	b.n	80003c2 <__aeabi_fadd+0xfe>
 80004f6:	2aff      	cmp	r2, #255	@ 0xff
 80004f8:	d0d2      	beq.n	80004a0 <__aeabi_fadd+0x1dc>
 80004fa:	2080      	movs	r0, #128	@ 0x80
 80004fc:	04c0      	lsls	r0, r0, #19
 80004fe:	4306      	orrs	r6, r0
 8000500:	2001      	movs	r0, #1
 8000502:	2b1b      	cmp	r3, #27
 8000504:	dc08      	bgt.n	8000518 <__aeabi_fadd+0x254>
 8000506:	0030      	movs	r0, r6
 8000508:	2420      	movs	r4, #32
 800050a:	40d8      	lsrs	r0, r3
 800050c:	1ae3      	subs	r3, r4, r3
 800050e:	409e      	lsls	r6, r3
 8000510:	0033      	movs	r3, r6
 8000512:	1e5c      	subs	r4, r3, #1
 8000514:	41a3      	sbcs	r3, r4
 8000516:	4318      	orrs	r0, r3
 8000518:	464c      	mov	r4, r9
 800051a:	0015      	movs	r5, r2
 800051c:	1a0e      	subs	r6, r1, r0
 800051e:	e732      	b.n	8000386 <__aeabi_fadd+0xc2>
 8000520:	0008      	movs	r0, r1
 8000522:	2220      	movs	r2, #32
 8000524:	40d8      	lsrs	r0, r3
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	4099      	lsls	r1, r3
 800052a:	000b      	movs	r3, r1
 800052c:	1e5a      	subs	r2, r3, #1
 800052e:	4193      	sbcs	r3, r2
 8000530:	4303      	orrs	r3, r0
 8000532:	18f6      	adds	r6, r6, r3
 8000534:	0173      	lsls	r3, r6, #5
 8000536:	d59b      	bpl.n	8000470 <__aeabi_fadd+0x1ac>
 8000538:	3501      	adds	r5, #1
 800053a:	2dff      	cmp	r5, #255	@ 0xff
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x27c>
 800053e:	e73e      	b.n	80003be <__aeabi_fadd+0xfa>
 8000540:	2301      	movs	r3, #1
 8000542:	494d      	ldr	r1, [pc, #308]	@ (8000678 <__aeabi_fadd+0x3b4>)
 8000544:	0872      	lsrs	r2, r6, #1
 8000546:	4033      	ands	r3, r6
 8000548:	400a      	ands	r2, r1
 800054a:	431a      	orrs	r2, r3
 800054c:	0016      	movs	r6, r2
 800054e:	0753      	lsls	r3, r2, #29
 8000550:	d004      	beq.n	800055c <__aeabi_fadd+0x298>
 8000552:	230f      	movs	r3, #15
 8000554:	4013      	ands	r3, r2
 8000556:	2b04      	cmp	r3, #4
 8000558:	d000      	beq.n	800055c <__aeabi_fadd+0x298>
 800055a:	e72a      	b.n	80003b2 <__aeabi_fadd+0xee>
 800055c:	0173      	lsls	r3, r6, #5
 800055e:	d500      	bpl.n	8000562 <__aeabi_fadd+0x29e>
 8000560:	e72a      	b.n	80003b8 <__aeabi_fadd+0xf4>
 8000562:	002b      	movs	r3, r5
 8000564:	08f7      	lsrs	r7, r6, #3
 8000566:	e6f7      	b.n	8000358 <__aeabi_fadd+0x94>
 8000568:	2bff      	cmp	r3, #255	@ 0xff
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x2aa>
 800056c:	e727      	b.n	80003be <__aeabi_fadd+0xfa>
 800056e:	1871      	adds	r1, r6, r1
 8000570:	0849      	lsrs	r1, r1, #1
 8000572:	074a      	lsls	r2, r1, #29
 8000574:	d02f      	beq.n	80005d6 <__aeabi_fadd+0x312>
 8000576:	220f      	movs	r2, #15
 8000578:	400a      	ands	r2, r1
 800057a:	2a04      	cmp	r2, #4
 800057c:	d02b      	beq.n	80005d6 <__aeabi_fadd+0x312>
 800057e:	1d0e      	adds	r6, r1, #4
 8000580:	e6e6      	b.n	8000350 <__aeabi_fadd+0x8c>
 8000582:	2aff      	cmp	r2, #255	@ 0xff
 8000584:	d08d      	beq.n	80004a2 <__aeabi_fadd+0x1de>
 8000586:	2080      	movs	r0, #128	@ 0x80
 8000588:	04c0      	lsls	r0, r0, #19
 800058a:	4306      	orrs	r6, r0
 800058c:	2b1b      	cmp	r3, #27
 800058e:	dd24      	ble.n	80005da <__aeabi_fadd+0x316>
 8000590:	0013      	movs	r3, r2
 8000592:	1d4e      	adds	r6, r1, #5
 8000594:	e6dc      	b.n	8000350 <__aeabi_fadd+0x8c>
 8000596:	464c      	mov	r4, r9
 8000598:	1b8f      	subs	r7, r1, r6
 800059a:	e6f9      	b.n	8000390 <__aeabi_fadd+0xcc>
 800059c:	464c      	mov	r4, r9
 800059e:	000e      	movs	r6, r1
 80005a0:	e6d6      	b.n	8000350 <__aeabi_fadd+0x8c>
 80005a2:	2e00      	cmp	r6, #0
 80005a4:	d149      	bne.n	800063a <__aeabi_fadd+0x376>
 80005a6:	2900      	cmp	r1, #0
 80005a8:	d068      	beq.n	800067c <__aeabi_fadd+0x3b8>
 80005aa:	4667      	mov	r7, ip
 80005ac:	464c      	mov	r4, r9
 80005ae:	e77c      	b.n	80004aa <__aeabi_fadd+0x1e6>
 80005b0:	1870      	adds	r0, r6, r1
 80005b2:	0143      	lsls	r3, r0, #5
 80005b4:	d574      	bpl.n	80006a0 <__aeabi_fadd+0x3dc>
 80005b6:	4930      	ldr	r1, [pc, #192]	@ (8000678 <__aeabi_fadd+0x3b4>)
 80005b8:	0840      	lsrs	r0, r0, #1
 80005ba:	4001      	ands	r1, r0
 80005bc:	0743      	lsls	r3, r0, #29
 80005be:	d009      	beq.n	80005d4 <__aeabi_fadd+0x310>
 80005c0:	230f      	movs	r3, #15
 80005c2:	4003      	ands	r3, r0
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d005      	beq.n	80005d4 <__aeabi_fadd+0x310>
 80005c8:	2302      	movs	r3, #2
 80005ca:	1d0e      	adds	r6, r1, #4
 80005cc:	e6c0      	b.n	8000350 <__aeabi_fadd+0x8c>
 80005ce:	2301      	movs	r3, #1
 80005d0:	08cf      	lsrs	r7, r1, #3
 80005d2:	e6c1      	b.n	8000358 <__aeabi_fadd+0x94>
 80005d4:	2302      	movs	r3, #2
 80005d6:	08cf      	lsrs	r7, r1, #3
 80005d8:	e6be      	b.n	8000358 <__aeabi_fadd+0x94>
 80005da:	2520      	movs	r5, #32
 80005dc:	0030      	movs	r0, r6
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	1aeb      	subs	r3, r5, r3
 80005e2:	409e      	lsls	r6, r3
 80005e4:	0033      	movs	r3, r6
 80005e6:	1e5d      	subs	r5, r3, #1
 80005e8:	41ab      	sbcs	r3, r5
 80005ea:	4303      	orrs	r3, r0
 80005ec:	0015      	movs	r5, r2
 80005ee:	185e      	adds	r6, r3, r1
 80005f0:	e7a0      	b.n	8000534 <__aeabi_fadd+0x270>
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x334>
 80005f6:	e765      	b.n	80004c4 <__aeabi_fadd+0x200>
 80005f8:	464c      	mov	r4, r9
 80005fa:	4667      	mov	r7, ip
 80005fc:	e6ac      	b.n	8000358 <__aeabi_fadd+0x94>
 80005fe:	1b8f      	subs	r7, r1, r6
 8000600:	017b      	lsls	r3, r7, #5
 8000602:	d52e      	bpl.n	8000662 <__aeabi_fadd+0x39e>
 8000604:	01bf      	lsls	r7, r7, #6
 8000606:	09bf      	lsrs	r7, r7, #6
 8000608:	0038      	movs	r0, r7
 800060a:	f000 fe8f 	bl	800132c <__clzsi2>
 800060e:	003b      	movs	r3, r7
 8000610:	3805      	subs	r0, #5
 8000612:	4083      	lsls	r3, r0
 8000614:	464c      	mov	r4, r9
 8000616:	3501      	adds	r5, #1
 8000618:	e710      	b.n	800043c <__aeabi_fadd+0x178>
 800061a:	2e00      	cmp	r6, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x35c>
 800061e:	e740      	b.n	80004a2 <__aeabi_fadd+0x1de>
 8000620:	2900      	cmp	r1, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fadd+0x362>
 8000624:	e741      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	03db      	lsls	r3, r3, #15
 800062a:	429f      	cmp	r7, r3
 800062c:	d200      	bcs.n	8000630 <__aeabi_fadd+0x36c>
 800062e:	e73c      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000630:	459c      	cmp	ip, r3
 8000632:	d300      	bcc.n	8000636 <__aeabi_fadd+0x372>
 8000634:	e739      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000636:	4667      	mov	r7, ip
 8000638:	e737      	b.n	80004aa <__aeabi_fadd+0x1e6>
 800063a:	2900      	cmp	r1, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0x37c>
 800063e:	e734      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000640:	2380      	movs	r3, #128	@ 0x80
 8000642:	03db      	lsls	r3, r3, #15
 8000644:	429f      	cmp	r7, r3
 8000646:	d200      	bcs.n	800064a <__aeabi_fadd+0x386>
 8000648:	e72f      	b.n	80004aa <__aeabi_fadd+0x1e6>
 800064a:	459c      	cmp	ip, r3
 800064c:	d300      	bcc.n	8000650 <__aeabi_fadd+0x38c>
 800064e:	e72c      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000650:	464c      	mov	r4, r9
 8000652:	4667      	mov	r7, ip
 8000654:	e729      	b.n	80004aa <__aeabi_fadd+0x1e6>
 8000656:	2900      	cmp	r1, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x398>
 800065a:	e734      	b.n	80004c6 <__aeabi_fadd+0x202>
 800065c:	2300      	movs	r3, #0
 800065e:	08cf      	lsrs	r7, r1, #3
 8000660:	e67a      	b.n	8000358 <__aeabi_fadd+0x94>
 8000662:	464c      	mov	r4, r9
 8000664:	2301      	movs	r3, #1
 8000666:	08ff      	lsrs	r7, r7, #3
 8000668:	e676      	b.n	8000358 <__aeabi_fadd+0x94>
 800066a:	2f00      	cmp	r7, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x3ac>
 800066e:	e729      	b.n	80004c4 <__aeabi_fadd+0x200>
 8000670:	08ff      	lsrs	r7, r7, #3
 8000672:	e671      	b.n	8000358 <__aeabi_fadd+0x94>
 8000674:	fbffffff 	.word	0xfbffffff
 8000678:	7dffffff 	.word	0x7dffffff
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	2400      	movs	r4, #0
 8000680:	20ff      	movs	r0, #255	@ 0xff
 8000682:	03d2      	lsls	r2, r2, #15
 8000684:	e69d      	b.n	80003c2 <__aeabi_fadd+0xfe>
 8000686:	2300      	movs	r3, #0
 8000688:	e666      	b.n	8000358 <__aeabi_fadd+0x94>
 800068a:	2300      	movs	r3, #0
 800068c:	08d7      	lsrs	r7, r2, #3
 800068e:	e663      	b.n	8000358 <__aeabi_fadd+0x94>
 8000690:	2001      	movs	r0, #1
 8000692:	0172      	lsls	r2, r6, #5
 8000694:	d500      	bpl.n	8000698 <__aeabi_fadd+0x3d4>
 8000696:	e6e7      	b.n	8000468 <__aeabi_fadd+0x1a4>
 8000698:	0031      	movs	r1, r6
 800069a:	2300      	movs	r3, #0
 800069c:	08cf      	lsrs	r7, r1, #3
 800069e:	e65b      	b.n	8000358 <__aeabi_fadd+0x94>
 80006a0:	2301      	movs	r3, #1
 80006a2:	08c7      	lsrs	r7, r0, #3
 80006a4:	e658      	b.n	8000358 <__aeabi_fadd+0x94>
 80006a6:	46c0      	nop			@ (mov r8, r8)

080006a8 <__aeabi_fdiv>:
 80006a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006aa:	4646      	mov	r6, r8
 80006ac:	464f      	mov	r7, r9
 80006ae:	46d6      	mov	lr, sl
 80006b0:	0245      	lsls	r5, r0, #9
 80006b2:	b5c0      	push	{r6, r7, lr}
 80006b4:	0fc3      	lsrs	r3, r0, #31
 80006b6:	0047      	lsls	r7, r0, #1
 80006b8:	4698      	mov	r8, r3
 80006ba:	1c0e      	adds	r6, r1, #0
 80006bc:	0a6d      	lsrs	r5, r5, #9
 80006be:	0e3f      	lsrs	r7, r7, #24
 80006c0:	d05b      	beq.n	800077a <__aeabi_fdiv+0xd2>
 80006c2:	2fff      	cmp	r7, #255	@ 0xff
 80006c4:	d021      	beq.n	800070a <__aeabi_fdiv+0x62>
 80006c6:	2380      	movs	r3, #128	@ 0x80
 80006c8:	00ed      	lsls	r5, r5, #3
 80006ca:	04db      	lsls	r3, r3, #19
 80006cc:	431d      	orrs	r5, r3
 80006ce:	2300      	movs	r3, #0
 80006d0:	4699      	mov	r9, r3
 80006d2:	469a      	mov	sl, r3
 80006d4:	3f7f      	subs	r7, #127	@ 0x7f
 80006d6:	0274      	lsls	r4, r6, #9
 80006d8:	0073      	lsls	r3, r6, #1
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	0ff6      	lsrs	r6, r6, #31
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d020      	beq.n	8000726 <__aeabi_fdiv+0x7e>
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d043      	beq.n	8000770 <__aeabi_fdiv+0xc8>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	2000      	movs	r0, #0
 80006ec:	00e4      	lsls	r4, r4, #3
 80006ee:	04d2      	lsls	r2, r2, #19
 80006f0:	4314      	orrs	r4, r2
 80006f2:	3b7f      	subs	r3, #127	@ 0x7f
 80006f4:	4642      	mov	r2, r8
 80006f6:	1aff      	subs	r7, r7, r3
 80006f8:	464b      	mov	r3, r9
 80006fa:	4072      	eors	r2, r6
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d900      	bls.n	8000702 <__aeabi_fdiv+0x5a>
 8000700:	e09d      	b.n	800083e <__aeabi_fdiv+0x196>
 8000702:	4971      	ldr	r1, [pc, #452]	@ (80008c8 <__aeabi_fdiv+0x220>)
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	58cb      	ldr	r3, [r1, r3]
 8000708:	469f      	mov	pc, r3
 800070a:	2d00      	cmp	r5, #0
 800070c:	d15a      	bne.n	80007c4 <__aeabi_fdiv+0x11c>
 800070e:	2308      	movs	r3, #8
 8000710:	4699      	mov	r9, r3
 8000712:	3b06      	subs	r3, #6
 8000714:	0274      	lsls	r4, r6, #9
 8000716:	469a      	mov	sl, r3
 8000718:	0073      	lsls	r3, r6, #1
 800071a:	27ff      	movs	r7, #255	@ 0xff
 800071c:	0a64      	lsrs	r4, r4, #9
 800071e:	0e1b      	lsrs	r3, r3, #24
 8000720:	0ff6      	lsrs	r6, r6, #31
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1de      	bne.n	80006e4 <__aeabi_fdiv+0x3c>
 8000726:	2c00      	cmp	r4, #0
 8000728:	d13b      	bne.n	80007a2 <__aeabi_fdiv+0xfa>
 800072a:	2301      	movs	r3, #1
 800072c:	4642      	mov	r2, r8
 800072e:	4649      	mov	r1, r9
 8000730:	4072      	eors	r2, r6
 8000732:	4319      	orrs	r1, r3
 8000734:	290e      	cmp	r1, #14
 8000736:	d818      	bhi.n	800076a <__aeabi_fdiv+0xc2>
 8000738:	4864      	ldr	r0, [pc, #400]	@ (80008cc <__aeabi_fdiv+0x224>)
 800073a:	0089      	lsls	r1, r1, #2
 800073c:	5841      	ldr	r1, [r0, r1]
 800073e:	468f      	mov	pc, r1
 8000740:	4653      	mov	r3, sl
 8000742:	2b02      	cmp	r3, #2
 8000744:	d100      	bne.n	8000748 <__aeabi_fdiv+0xa0>
 8000746:	e0b8      	b.n	80008ba <__aeabi_fdiv+0x212>
 8000748:	2b03      	cmp	r3, #3
 800074a:	d06e      	beq.n	800082a <__aeabi_fdiv+0x182>
 800074c:	4642      	mov	r2, r8
 800074e:	002c      	movs	r4, r5
 8000750:	2b01      	cmp	r3, #1
 8000752:	d140      	bne.n	80007d6 <__aeabi_fdiv+0x12e>
 8000754:	2000      	movs	r0, #0
 8000756:	2400      	movs	r4, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	4320      	orrs	r0, r4
 800075c:	07d2      	lsls	r2, r2, #31
 800075e:	4310      	orrs	r0, r2
 8000760:	bce0      	pop	{r5, r6, r7}
 8000762:	46ba      	mov	sl, r7
 8000764:	46b1      	mov	r9, r6
 8000766:	46a8      	mov	r8, r5
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	20ff      	movs	r0, #255	@ 0xff
 800076c:	2400      	movs	r4, #0
 800076e:	e7f3      	b.n	8000758 <__aeabi_fdiv+0xb0>
 8000770:	2c00      	cmp	r4, #0
 8000772:	d120      	bne.n	80007b6 <__aeabi_fdiv+0x10e>
 8000774:	2302      	movs	r3, #2
 8000776:	3fff      	subs	r7, #255	@ 0xff
 8000778:	e7d8      	b.n	800072c <__aeabi_fdiv+0x84>
 800077a:	2d00      	cmp	r5, #0
 800077c:	d105      	bne.n	800078a <__aeabi_fdiv+0xe2>
 800077e:	2304      	movs	r3, #4
 8000780:	4699      	mov	r9, r3
 8000782:	3b03      	subs	r3, #3
 8000784:	2700      	movs	r7, #0
 8000786:	469a      	mov	sl, r3
 8000788:	e7a5      	b.n	80006d6 <__aeabi_fdiv+0x2e>
 800078a:	0028      	movs	r0, r5
 800078c:	f000 fdce 	bl	800132c <__clzsi2>
 8000790:	2776      	movs	r7, #118	@ 0x76
 8000792:	1f43      	subs	r3, r0, #5
 8000794:	409d      	lsls	r5, r3
 8000796:	2300      	movs	r3, #0
 8000798:	427f      	negs	r7, r7
 800079a:	4699      	mov	r9, r3
 800079c:	469a      	mov	sl, r3
 800079e:	1a3f      	subs	r7, r7, r0
 80007a0:	e799      	b.n	80006d6 <__aeabi_fdiv+0x2e>
 80007a2:	0020      	movs	r0, r4
 80007a4:	f000 fdc2 	bl	800132c <__clzsi2>
 80007a8:	1f43      	subs	r3, r0, #5
 80007aa:	409c      	lsls	r4, r3
 80007ac:	2376      	movs	r3, #118	@ 0x76
 80007ae:	425b      	negs	r3, r3
 80007b0:	1a1b      	subs	r3, r3, r0
 80007b2:	2000      	movs	r0, #0
 80007b4:	e79e      	b.n	80006f4 <__aeabi_fdiv+0x4c>
 80007b6:	2303      	movs	r3, #3
 80007b8:	464a      	mov	r2, r9
 80007ba:	431a      	orrs	r2, r3
 80007bc:	4691      	mov	r9, r2
 80007be:	2003      	movs	r0, #3
 80007c0:	33fc      	adds	r3, #252	@ 0xfc
 80007c2:	e797      	b.n	80006f4 <__aeabi_fdiv+0x4c>
 80007c4:	230c      	movs	r3, #12
 80007c6:	4699      	mov	r9, r3
 80007c8:	3b09      	subs	r3, #9
 80007ca:	27ff      	movs	r7, #255	@ 0xff
 80007cc:	469a      	mov	sl, r3
 80007ce:	e782      	b.n	80006d6 <__aeabi_fdiv+0x2e>
 80007d0:	2803      	cmp	r0, #3
 80007d2:	d02c      	beq.n	800082e <__aeabi_fdiv+0x186>
 80007d4:	0032      	movs	r2, r6
 80007d6:	0038      	movs	r0, r7
 80007d8:	307f      	adds	r0, #127	@ 0x7f
 80007da:	2800      	cmp	r0, #0
 80007dc:	dd47      	ble.n	800086e <__aeabi_fdiv+0x1c6>
 80007de:	0763      	lsls	r3, r4, #29
 80007e0:	d004      	beq.n	80007ec <__aeabi_fdiv+0x144>
 80007e2:	230f      	movs	r3, #15
 80007e4:	4023      	ands	r3, r4
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d000      	beq.n	80007ec <__aeabi_fdiv+0x144>
 80007ea:	3404      	adds	r4, #4
 80007ec:	0123      	lsls	r3, r4, #4
 80007ee:	d503      	bpl.n	80007f8 <__aeabi_fdiv+0x150>
 80007f0:	0038      	movs	r0, r7
 80007f2:	4b37      	ldr	r3, [pc, #220]	@ (80008d0 <__aeabi_fdiv+0x228>)
 80007f4:	3080      	adds	r0, #128	@ 0x80
 80007f6:	401c      	ands	r4, r3
 80007f8:	28fe      	cmp	r0, #254	@ 0xfe
 80007fa:	dcb6      	bgt.n	800076a <__aeabi_fdiv+0xc2>
 80007fc:	01a4      	lsls	r4, r4, #6
 80007fe:	0a64      	lsrs	r4, r4, #9
 8000800:	b2c0      	uxtb	r0, r0
 8000802:	e7a9      	b.n	8000758 <__aeabi_fdiv+0xb0>
 8000804:	2480      	movs	r4, #128	@ 0x80
 8000806:	2200      	movs	r2, #0
 8000808:	20ff      	movs	r0, #255	@ 0xff
 800080a:	03e4      	lsls	r4, r4, #15
 800080c:	e7a4      	b.n	8000758 <__aeabi_fdiv+0xb0>
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	421d      	tst	r5, r3
 8000814:	d001      	beq.n	800081a <__aeabi_fdiv+0x172>
 8000816:	421c      	tst	r4, r3
 8000818:	d00b      	beq.n	8000832 <__aeabi_fdiv+0x18a>
 800081a:	2480      	movs	r4, #128	@ 0x80
 800081c:	03e4      	lsls	r4, r4, #15
 800081e:	432c      	orrs	r4, r5
 8000820:	0264      	lsls	r4, r4, #9
 8000822:	4642      	mov	r2, r8
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	0a64      	lsrs	r4, r4, #9
 8000828:	e796      	b.n	8000758 <__aeabi_fdiv+0xb0>
 800082a:	4646      	mov	r6, r8
 800082c:	002c      	movs	r4, r5
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	03db      	lsls	r3, r3, #15
 8000832:	431c      	orrs	r4, r3
 8000834:	0264      	lsls	r4, r4, #9
 8000836:	0032      	movs	r2, r6
 8000838:	20ff      	movs	r0, #255	@ 0xff
 800083a:	0a64      	lsrs	r4, r4, #9
 800083c:	e78c      	b.n	8000758 <__aeabi_fdiv+0xb0>
 800083e:	016d      	lsls	r5, r5, #5
 8000840:	0160      	lsls	r0, r4, #5
 8000842:	4285      	cmp	r5, r0
 8000844:	d22d      	bcs.n	80008a2 <__aeabi_fdiv+0x1fa>
 8000846:	231b      	movs	r3, #27
 8000848:	2400      	movs	r4, #0
 800084a:	3f01      	subs	r7, #1
 800084c:	2601      	movs	r6, #1
 800084e:	0029      	movs	r1, r5
 8000850:	0064      	lsls	r4, r4, #1
 8000852:	006d      	lsls	r5, r5, #1
 8000854:	2900      	cmp	r1, #0
 8000856:	db01      	blt.n	800085c <__aeabi_fdiv+0x1b4>
 8000858:	4285      	cmp	r5, r0
 800085a:	d301      	bcc.n	8000860 <__aeabi_fdiv+0x1b8>
 800085c:	1a2d      	subs	r5, r5, r0
 800085e:	4334      	orrs	r4, r6
 8000860:	3b01      	subs	r3, #1
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f3      	bne.n	800084e <__aeabi_fdiv+0x1a6>
 8000866:	1e6b      	subs	r3, r5, #1
 8000868:	419d      	sbcs	r5, r3
 800086a:	432c      	orrs	r4, r5
 800086c:	e7b3      	b.n	80007d6 <__aeabi_fdiv+0x12e>
 800086e:	2301      	movs	r3, #1
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	2b1b      	cmp	r3, #27
 8000874:	dd00      	ble.n	8000878 <__aeabi_fdiv+0x1d0>
 8000876:	e76d      	b.n	8000754 <__aeabi_fdiv+0xac>
 8000878:	0021      	movs	r1, r4
 800087a:	379e      	adds	r7, #158	@ 0x9e
 800087c:	40d9      	lsrs	r1, r3
 800087e:	40bc      	lsls	r4, r7
 8000880:	000b      	movs	r3, r1
 8000882:	1e61      	subs	r1, r4, #1
 8000884:	418c      	sbcs	r4, r1
 8000886:	4323      	orrs	r3, r4
 8000888:	0759      	lsls	r1, r3, #29
 800088a:	d004      	beq.n	8000896 <__aeabi_fdiv+0x1ee>
 800088c:	210f      	movs	r1, #15
 800088e:	4019      	ands	r1, r3
 8000890:	2904      	cmp	r1, #4
 8000892:	d000      	beq.n	8000896 <__aeabi_fdiv+0x1ee>
 8000894:	3304      	adds	r3, #4
 8000896:	0159      	lsls	r1, r3, #5
 8000898:	d413      	bmi.n	80008c2 <__aeabi_fdiv+0x21a>
 800089a:	019b      	lsls	r3, r3, #6
 800089c:	2000      	movs	r0, #0
 800089e:	0a5c      	lsrs	r4, r3, #9
 80008a0:	e75a      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008a2:	231a      	movs	r3, #26
 80008a4:	2401      	movs	r4, #1
 80008a6:	1a2d      	subs	r5, r5, r0
 80008a8:	e7d0      	b.n	800084c <__aeabi_fdiv+0x1a4>
 80008aa:	1e98      	subs	r0, r3, #2
 80008ac:	4243      	negs	r3, r0
 80008ae:	4158      	adcs	r0, r3
 80008b0:	4240      	negs	r0, r0
 80008b2:	0032      	movs	r2, r6
 80008b4:	2400      	movs	r4, #0
 80008b6:	b2c0      	uxtb	r0, r0
 80008b8:	e74e      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008ba:	4642      	mov	r2, r8
 80008bc:	20ff      	movs	r0, #255	@ 0xff
 80008be:	2400      	movs	r4, #0
 80008c0:	e74a      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008c2:	2001      	movs	r0, #1
 80008c4:	2400      	movs	r4, #0
 80008c6:	e747      	b.n	8000758 <__aeabi_fdiv+0xb0>
 80008c8:	08003748 	.word	0x08003748
 80008cc:	08003788 	.word	0x08003788
 80008d0:	f7ffffff 	.word	0xf7ffffff

080008d4 <__eqsf2>:
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	0042      	lsls	r2, r0, #1
 80008d8:	024e      	lsls	r6, r1, #9
 80008da:	004c      	lsls	r4, r1, #1
 80008dc:	0245      	lsls	r5, r0, #9
 80008de:	0a6d      	lsrs	r5, r5, #9
 80008e0:	0e12      	lsrs	r2, r2, #24
 80008e2:	0fc3      	lsrs	r3, r0, #31
 80008e4:	0a76      	lsrs	r6, r6, #9
 80008e6:	0e24      	lsrs	r4, r4, #24
 80008e8:	0fc9      	lsrs	r1, r1, #31
 80008ea:	2aff      	cmp	r2, #255	@ 0xff
 80008ec:	d010      	beq.n	8000910 <__eqsf2+0x3c>
 80008ee:	2cff      	cmp	r4, #255	@ 0xff
 80008f0:	d00c      	beq.n	800090c <__eqsf2+0x38>
 80008f2:	2001      	movs	r0, #1
 80008f4:	42a2      	cmp	r2, r4
 80008f6:	d10a      	bne.n	800090e <__eqsf2+0x3a>
 80008f8:	42b5      	cmp	r5, r6
 80008fa:	d108      	bne.n	800090e <__eqsf2+0x3a>
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d00f      	beq.n	8000920 <__eqsf2+0x4c>
 8000900:	2a00      	cmp	r2, #0
 8000902:	d104      	bne.n	800090e <__eqsf2+0x3a>
 8000904:	0028      	movs	r0, r5
 8000906:	1e43      	subs	r3, r0, #1
 8000908:	4198      	sbcs	r0, r3
 800090a:	e000      	b.n	800090e <__eqsf2+0x3a>
 800090c:	2001      	movs	r0, #1
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	2001      	movs	r0, #1
 8000912:	2cff      	cmp	r4, #255	@ 0xff
 8000914:	d1fb      	bne.n	800090e <__eqsf2+0x3a>
 8000916:	4335      	orrs	r5, r6
 8000918:	d1f9      	bne.n	800090e <__eqsf2+0x3a>
 800091a:	404b      	eors	r3, r1
 800091c:	0018      	movs	r0, r3
 800091e:	e7f6      	b.n	800090e <__eqsf2+0x3a>
 8000920:	2000      	movs	r0, #0
 8000922:	e7f4      	b.n	800090e <__eqsf2+0x3a>

08000924 <__gesf2>:
 8000924:	b530      	push	{r4, r5, lr}
 8000926:	0042      	lsls	r2, r0, #1
 8000928:	0244      	lsls	r4, r0, #9
 800092a:	024d      	lsls	r5, r1, #9
 800092c:	0fc3      	lsrs	r3, r0, #31
 800092e:	0048      	lsls	r0, r1, #1
 8000930:	0a64      	lsrs	r4, r4, #9
 8000932:	0e12      	lsrs	r2, r2, #24
 8000934:	0a6d      	lsrs	r5, r5, #9
 8000936:	0e00      	lsrs	r0, r0, #24
 8000938:	0fc9      	lsrs	r1, r1, #31
 800093a:	2aff      	cmp	r2, #255	@ 0xff
 800093c:	d018      	beq.n	8000970 <__gesf2+0x4c>
 800093e:	28ff      	cmp	r0, #255	@ 0xff
 8000940:	d00a      	beq.n	8000958 <__gesf2+0x34>
 8000942:	2a00      	cmp	r2, #0
 8000944:	d11e      	bne.n	8000984 <__gesf2+0x60>
 8000946:	2800      	cmp	r0, #0
 8000948:	d10a      	bne.n	8000960 <__gesf2+0x3c>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d029      	beq.n	80009a2 <__gesf2+0x7e>
 800094e:	2c00      	cmp	r4, #0
 8000950:	d12d      	bne.n	80009ae <__gesf2+0x8a>
 8000952:	0048      	lsls	r0, r1, #1
 8000954:	3801      	subs	r0, #1
 8000956:	bd30      	pop	{r4, r5, pc}
 8000958:	2d00      	cmp	r5, #0
 800095a:	d125      	bne.n	80009a8 <__gesf2+0x84>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d101      	bne.n	8000964 <__gesf2+0x40>
 8000960:	2c00      	cmp	r4, #0
 8000962:	d0f6      	beq.n	8000952 <__gesf2+0x2e>
 8000964:	428b      	cmp	r3, r1
 8000966:	d019      	beq.n	800099c <__gesf2+0x78>
 8000968:	2001      	movs	r0, #1
 800096a:	425b      	negs	r3, r3
 800096c:	4318      	orrs	r0, r3
 800096e:	e7f2      	b.n	8000956 <__gesf2+0x32>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d119      	bne.n	80009a8 <__gesf2+0x84>
 8000974:	28ff      	cmp	r0, #255	@ 0xff
 8000976:	d1f7      	bne.n	8000968 <__gesf2+0x44>
 8000978:	2d00      	cmp	r5, #0
 800097a:	d115      	bne.n	80009a8 <__gesf2+0x84>
 800097c:	2000      	movs	r0, #0
 800097e:	428b      	cmp	r3, r1
 8000980:	d1f2      	bne.n	8000968 <__gesf2+0x44>
 8000982:	e7e8      	b.n	8000956 <__gesf2+0x32>
 8000984:	2800      	cmp	r0, #0
 8000986:	d0ef      	beq.n	8000968 <__gesf2+0x44>
 8000988:	428b      	cmp	r3, r1
 800098a:	d1ed      	bne.n	8000968 <__gesf2+0x44>
 800098c:	4282      	cmp	r2, r0
 800098e:	dceb      	bgt.n	8000968 <__gesf2+0x44>
 8000990:	db04      	blt.n	800099c <__gesf2+0x78>
 8000992:	42ac      	cmp	r4, r5
 8000994:	d8e8      	bhi.n	8000968 <__gesf2+0x44>
 8000996:	2000      	movs	r0, #0
 8000998:	42ac      	cmp	r4, r5
 800099a:	d2dc      	bcs.n	8000956 <__gesf2+0x32>
 800099c:	0058      	lsls	r0, r3, #1
 800099e:	3801      	subs	r0, #1
 80009a0:	e7d9      	b.n	8000956 <__gesf2+0x32>
 80009a2:	2c00      	cmp	r4, #0
 80009a4:	d0d7      	beq.n	8000956 <__gesf2+0x32>
 80009a6:	e7df      	b.n	8000968 <__gesf2+0x44>
 80009a8:	2002      	movs	r0, #2
 80009aa:	4240      	negs	r0, r0
 80009ac:	e7d3      	b.n	8000956 <__gesf2+0x32>
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d1da      	bne.n	8000968 <__gesf2+0x44>
 80009b2:	e7ee      	b.n	8000992 <__gesf2+0x6e>

080009b4 <__lesf2>:
 80009b4:	b530      	push	{r4, r5, lr}
 80009b6:	0042      	lsls	r2, r0, #1
 80009b8:	0244      	lsls	r4, r0, #9
 80009ba:	024d      	lsls	r5, r1, #9
 80009bc:	0fc3      	lsrs	r3, r0, #31
 80009be:	0048      	lsls	r0, r1, #1
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	0a6d      	lsrs	r5, r5, #9
 80009c6:	0e00      	lsrs	r0, r0, #24
 80009c8:	0fc9      	lsrs	r1, r1, #31
 80009ca:	2aff      	cmp	r2, #255	@ 0xff
 80009cc:	d017      	beq.n	80009fe <__lesf2+0x4a>
 80009ce:	28ff      	cmp	r0, #255	@ 0xff
 80009d0:	d00a      	beq.n	80009e8 <__lesf2+0x34>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d11b      	bne.n	8000a0e <__lesf2+0x5a>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d10a      	bne.n	80009f0 <__lesf2+0x3c>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d01d      	beq.n	8000a1a <__lesf2+0x66>
 80009de:	2c00      	cmp	r4, #0
 80009e0:	d12d      	bne.n	8000a3e <__lesf2+0x8a>
 80009e2:	0048      	lsls	r0, r1, #1
 80009e4:	3801      	subs	r0, #1
 80009e6:	e011      	b.n	8000a0c <__lesf2+0x58>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d10e      	bne.n	8000a0a <__lesf2+0x56>
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d101      	bne.n	80009f4 <__lesf2+0x40>
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d0f6      	beq.n	80009e2 <__lesf2+0x2e>
 80009f4:	428b      	cmp	r3, r1
 80009f6:	d10c      	bne.n	8000a12 <__lesf2+0x5e>
 80009f8:	0058      	lsls	r0, r3, #1
 80009fa:	3801      	subs	r0, #1
 80009fc:	e006      	b.n	8000a0c <__lesf2+0x58>
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d103      	bne.n	8000a0a <__lesf2+0x56>
 8000a02:	28ff      	cmp	r0, #255	@ 0xff
 8000a04:	d105      	bne.n	8000a12 <__lesf2+0x5e>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d015      	beq.n	8000a36 <__lesf2+0x82>
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	bd30      	pop	{r4, r5, pc}
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d106      	bne.n	8000a20 <__lesf2+0x6c>
 8000a12:	2001      	movs	r0, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	4318      	orrs	r0, r3
 8000a18:	e7f8      	b.n	8000a0c <__lesf2+0x58>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d0f6      	beq.n	8000a0c <__lesf2+0x58>
 8000a1e:	e7f8      	b.n	8000a12 <__lesf2+0x5e>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d1f6      	bne.n	8000a12 <__lesf2+0x5e>
 8000a24:	4282      	cmp	r2, r0
 8000a26:	dcf4      	bgt.n	8000a12 <__lesf2+0x5e>
 8000a28:	dbe6      	blt.n	80009f8 <__lesf2+0x44>
 8000a2a:	42ac      	cmp	r4, r5
 8000a2c:	d8f1      	bhi.n	8000a12 <__lesf2+0x5e>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	42ac      	cmp	r4, r5
 8000a32:	d2eb      	bcs.n	8000a0c <__lesf2+0x58>
 8000a34:	e7e0      	b.n	80009f8 <__lesf2+0x44>
 8000a36:	2000      	movs	r0, #0
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d1ea      	bne.n	8000a12 <__lesf2+0x5e>
 8000a3c:	e7e6      	b.n	8000a0c <__lesf2+0x58>
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d1e7      	bne.n	8000a12 <__lesf2+0x5e>
 8000a42:	e7f2      	b.n	8000a2a <__lesf2+0x76>

08000a44 <__aeabi_fmul>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	464f      	mov	r7, r9
 8000a48:	4646      	mov	r6, r8
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	0044      	lsls	r4, r0, #1
 8000a4e:	b5c0      	push	{r6, r7, lr}
 8000a50:	0246      	lsls	r6, r0, #9
 8000a52:	1c0f      	adds	r7, r1, #0
 8000a54:	0a76      	lsrs	r6, r6, #9
 8000a56:	0e24      	lsrs	r4, r4, #24
 8000a58:	0fc5      	lsrs	r5, r0, #31
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fmul+0x1c>
 8000a5e:	e0da      	b.n	8000c16 <__aeabi_fmul+0x1d2>
 8000a60:	2cff      	cmp	r4, #255	@ 0xff
 8000a62:	d074      	beq.n	8000b4e <__aeabi_fmul+0x10a>
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	00f6      	lsls	r6, r6, #3
 8000a68:	04db      	lsls	r3, r3, #19
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4699      	mov	r9, r3
 8000a70:	469a      	mov	sl, r3
 8000a72:	3c7f      	subs	r4, #127	@ 0x7f
 8000a74:	027b      	lsls	r3, r7, #9
 8000a76:	0a5b      	lsrs	r3, r3, #9
 8000a78:	4698      	mov	r8, r3
 8000a7a:	007b      	lsls	r3, r7, #1
 8000a7c:	0e1b      	lsrs	r3, r3, #24
 8000a7e:	0fff      	lsrs	r7, r7, #31
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d074      	beq.n	8000b6e <__aeabi_fmul+0x12a>
 8000a84:	2bff      	cmp	r3, #255	@ 0xff
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fmul+0x46>
 8000a88:	e08e      	b.n	8000ba8 <__aeabi_fmul+0x164>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	2180      	movs	r1, #128	@ 0x80
 8000a8e:	00d2      	lsls	r2, r2, #3
 8000a90:	04c9      	lsls	r1, r1, #19
 8000a92:	4311      	orrs	r1, r2
 8000a94:	3b7f      	subs	r3, #127	@ 0x7f
 8000a96:	002a      	movs	r2, r5
 8000a98:	18e4      	adds	r4, r4, r3
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	407a      	eors	r2, r7
 8000a9e:	4688      	mov	r8, r1
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	2b0a      	cmp	r3, #10
 8000aa4:	dc75      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	dd0f      	ble.n	8000ace <__aeabi_fmul+0x8a>
 8000aae:	4649      	mov	r1, r9
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	408b      	lsls	r3, r1
 8000ab4:	21a6      	movs	r1, #166	@ 0xa6
 8000ab6:	00c9      	lsls	r1, r1, #3
 8000ab8:	420b      	tst	r3, r1
 8000aba:	d169      	bne.n	8000b90 <__aeabi_fmul+0x14c>
 8000abc:	2190      	movs	r1, #144	@ 0x90
 8000abe:	0089      	lsls	r1, r1, #2
 8000ac0:	420b      	tst	r3, r1
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fmul+0x82>
 8000ac4:	e100      	b.n	8000cc8 <__aeabi_fmul+0x284>
 8000ac6:	2188      	movs	r1, #136	@ 0x88
 8000ac8:	4219      	tst	r1, r3
 8000aca:	d000      	beq.n	8000ace <__aeabi_fmul+0x8a>
 8000acc:	e0f5      	b.n	8000cba <__aeabi_fmul+0x276>
 8000ace:	4641      	mov	r1, r8
 8000ad0:	0409      	lsls	r1, r1, #16
 8000ad2:	0c09      	lsrs	r1, r1, #16
 8000ad4:	4643      	mov	r3, r8
 8000ad6:	0008      	movs	r0, r1
 8000ad8:	0c35      	lsrs	r5, r6, #16
 8000ada:	0436      	lsls	r6, r6, #16
 8000adc:	0c1b      	lsrs	r3, r3, #16
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	4370      	muls	r0, r6
 8000ae2:	4369      	muls	r1, r5
 8000ae4:	435e      	muls	r6, r3
 8000ae6:	435d      	muls	r5, r3
 8000ae8:	1876      	adds	r6, r6, r1
 8000aea:	0c03      	lsrs	r3, r0, #16
 8000aec:	199b      	adds	r3, r3, r6
 8000aee:	4299      	cmp	r1, r3
 8000af0:	d903      	bls.n	8000afa <__aeabi_fmul+0xb6>
 8000af2:	2180      	movs	r1, #128	@ 0x80
 8000af4:	0249      	lsls	r1, r1, #9
 8000af6:	468c      	mov	ip, r1
 8000af8:	4465      	add	r5, ip
 8000afa:	0400      	lsls	r0, r0, #16
 8000afc:	0419      	lsls	r1, r3, #16
 8000afe:	0c00      	lsrs	r0, r0, #16
 8000b00:	1809      	adds	r1, r1, r0
 8000b02:	018e      	lsls	r6, r1, #6
 8000b04:	1e70      	subs	r0, r6, #1
 8000b06:	4186      	sbcs	r6, r0
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	0e89      	lsrs	r1, r1, #26
 8000b0c:	195b      	adds	r3, r3, r5
 8000b0e:	430e      	orrs	r6, r1
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	431e      	orrs	r6, r3
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	d46c      	bmi.n	8000bf2 <__aeabi_fmul+0x1ae>
 8000b18:	0023      	movs	r3, r4
 8000b1a:	337f      	adds	r3, #127	@ 0x7f
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dc00      	bgt.n	8000b22 <__aeabi_fmul+0xde>
 8000b20:	e0b1      	b.n	8000c86 <__aeabi_fmul+0x242>
 8000b22:	0015      	movs	r5, r2
 8000b24:	0771      	lsls	r1, r6, #29
 8000b26:	d00b      	beq.n	8000b40 <__aeabi_fmul+0xfc>
 8000b28:	200f      	movs	r0, #15
 8000b2a:	0021      	movs	r1, r4
 8000b2c:	4030      	ands	r0, r6
 8000b2e:	2804      	cmp	r0, #4
 8000b30:	d006      	beq.n	8000b40 <__aeabi_fmul+0xfc>
 8000b32:	3604      	adds	r6, #4
 8000b34:	0132      	lsls	r2, r6, #4
 8000b36:	d503      	bpl.n	8000b40 <__aeabi_fmul+0xfc>
 8000b38:	4b6e      	ldr	r3, [pc, #440]	@ (8000cf4 <__aeabi_fmul+0x2b0>)
 8000b3a:	401e      	ands	r6, r3
 8000b3c:	000b      	movs	r3, r1
 8000b3e:	3380      	adds	r3, #128	@ 0x80
 8000b40:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_fmul+0x102>
 8000b44:	e0bd      	b.n	8000cc2 <__aeabi_fmul+0x27e>
 8000b46:	01b2      	lsls	r2, r6, #6
 8000b48:	0a52      	lsrs	r2, r2, #9
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	e048      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fmul+0x110>
 8000b52:	e092      	b.n	8000c7a <__aeabi_fmul+0x236>
 8000b54:	2308      	movs	r3, #8
 8000b56:	4699      	mov	r9, r3
 8000b58:	3b06      	subs	r3, #6
 8000b5a:	469a      	mov	sl, r3
 8000b5c:	027b      	lsls	r3, r7, #9
 8000b5e:	0a5b      	lsrs	r3, r3, #9
 8000b60:	4698      	mov	r8, r3
 8000b62:	007b      	lsls	r3, r7, #1
 8000b64:	24ff      	movs	r4, #255	@ 0xff
 8000b66:	0e1b      	lsrs	r3, r3, #24
 8000b68:	0fff      	lsrs	r7, r7, #31
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d18a      	bne.n	8000a84 <__aeabi_fmul+0x40>
 8000b6e:	4642      	mov	r2, r8
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	d164      	bne.n	8000c3e <__aeabi_fmul+0x1fa>
 8000b74:	4649      	mov	r1, r9
 8000b76:	3201      	adds	r2, #1
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	4689      	mov	r9, r1
 8000b7c:	290a      	cmp	r1, #10
 8000b7e:	dc08      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000b80:	407d      	eors	r5, r7
 8000b82:	2001      	movs	r0, #1
 8000b84:	b2ea      	uxtb	r2, r5
 8000b86:	2902      	cmp	r1, #2
 8000b88:	dc91      	bgt.n	8000aae <__aeabi_fmul+0x6a>
 8000b8a:	0015      	movs	r5, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e027      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000b90:	0015      	movs	r5, r2
 8000b92:	4653      	mov	r3, sl
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fmul+0x156>
 8000b98:	e093      	b.n	8000cc2 <__aeabi_fmul+0x27e>
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d01a      	beq.n	8000bd4 <__aeabi_fmul+0x190>
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d12c      	bne.n	8000bfc <__aeabi_fmul+0x1b8>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e01b      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000ba8:	4643      	mov	r3, r8
 8000baa:	34ff      	adds	r4, #255	@ 0xff
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d055      	beq.n	8000c5c <__aeabi_fmul+0x218>
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	2b0a      	cmp	r3, #10
 8000bba:	dc00      	bgt.n	8000bbe <__aeabi_fmul+0x17a>
 8000bbc:	e092      	b.n	8000ce4 <__aeabi_fmul+0x2a0>
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_fmul+0x180>
 8000bc2:	e08c      	b.n	8000cde <__aeabi_fmul+0x29a>
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	03d2      	lsls	r2, r2, #15
 8000bc8:	4216      	tst	r6, r2
 8000bca:	d003      	beq.n	8000bd4 <__aeabi_fmul+0x190>
 8000bcc:	4643      	mov	r3, r8
 8000bce:	4213      	tst	r3, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fmul+0x190>
 8000bd2:	e07d      	b.n	8000cd0 <__aeabi_fmul+0x28c>
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	03d2      	lsls	r2, r2, #15
 8000bd8:	4332      	orrs	r2, r6
 8000bda:	0252      	lsls	r2, r2, #9
 8000bdc:	0a52      	lsrs	r2, r2, #9
 8000bde:	23ff      	movs	r3, #255	@ 0xff
 8000be0:	05d8      	lsls	r0, r3, #23
 8000be2:	07ed      	lsls	r5, r5, #31
 8000be4:	4310      	orrs	r0, r2
 8000be6:	4328      	orrs	r0, r5
 8000be8:	bce0      	pop	{r5, r6, r7}
 8000bea:	46ba      	mov	sl, r7
 8000bec:	46b1      	mov	r9, r6
 8000bee:	46a8      	mov	r8, r5
 8000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	0015      	movs	r5, r2
 8000bf6:	0871      	lsrs	r1, r6, #1
 8000bf8:	401e      	ands	r6, r3
 8000bfa:	430e      	orrs	r6, r1
 8000bfc:	0023      	movs	r3, r4
 8000bfe:	3380      	adds	r3, #128	@ 0x80
 8000c00:	1c61      	adds	r1, r4, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dd41      	ble.n	8000c8a <__aeabi_fmul+0x246>
 8000c06:	0772      	lsls	r2, r6, #29
 8000c08:	d094      	beq.n	8000b34 <__aeabi_fmul+0xf0>
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	4032      	ands	r2, r6
 8000c0e:	2a04      	cmp	r2, #4
 8000c10:	d000      	beq.n	8000c14 <__aeabi_fmul+0x1d0>
 8000c12:	e78e      	b.n	8000b32 <__aeabi_fmul+0xee>
 8000c14:	e78e      	b.n	8000b34 <__aeabi_fmul+0xf0>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d105      	bne.n	8000c26 <__aeabi_fmul+0x1e2>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	3b03      	subs	r3, #3
 8000c20:	2400      	movs	r4, #0
 8000c22:	469a      	mov	sl, r3
 8000c24:	e726      	b.n	8000a74 <__aeabi_fmul+0x30>
 8000c26:	0030      	movs	r0, r6
 8000c28:	f000 fb80 	bl	800132c <__clzsi2>
 8000c2c:	2476      	movs	r4, #118	@ 0x76
 8000c2e:	1f43      	subs	r3, r0, #5
 8000c30:	409e      	lsls	r6, r3
 8000c32:	2300      	movs	r3, #0
 8000c34:	4264      	negs	r4, r4
 8000c36:	4699      	mov	r9, r3
 8000c38:	469a      	mov	sl, r3
 8000c3a:	1a24      	subs	r4, r4, r0
 8000c3c:	e71a      	b.n	8000a74 <__aeabi_fmul+0x30>
 8000c3e:	4640      	mov	r0, r8
 8000c40:	f000 fb74 	bl	800132c <__clzsi2>
 8000c44:	464b      	mov	r3, r9
 8000c46:	1a24      	subs	r4, r4, r0
 8000c48:	3c76      	subs	r4, #118	@ 0x76
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	dca1      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000c4e:	4643      	mov	r3, r8
 8000c50:	3805      	subs	r0, #5
 8000c52:	4083      	lsls	r3, r0
 8000c54:	407d      	eors	r5, r7
 8000c56:	4698      	mov	r8, r3
 8000c58:	b2ea      	uxtb	r2, r5
 8000c5a:	e724      	b.n	8000aa6 <__aeabi_fmul+0x62>
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	3302      	adds	r3, #2
 8000c60:	4313      	orrs	r3, r2
 8000c62:	002a      	movs	r2, r5
 8000c64:	407a      	eors	r2, r7
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	2b0a      	cmp	r3, #10
 8000c6a:	dc92      	bgt.n	8000b92 <__aeabi_fmul+0x14e>
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	0015      	movs	r5, r2
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d026      	beq.n	8000cc2 <__aeabi_fmul+0x27e>
 8000c74:	4699      	mov	r9, r3
 8000c76:	2002      	movs	r0, #2
 8000c78:	e719      	b.n	8000aae <__aeabi_fmul+0x6a>
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	3b09      	subs	r3, #9
 8000c80:	24ff      	movs	r4, #255	@ 0xff
 8000c82:	469a      	mov	sl, r3
 8000c84:	e6f6      	b.n	8000a74 <__aeabi_fmul+0x30>
 8000c86:	0015      	movs	r5, r2
 8000c88:	0021      	movs	r1, r4
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b1b      	cmp	r3, #27
 8000c90:	dd00      	ble.n	8000c94 <__aeabi_fmul+0x250>
 8000c92:	e786      	b.n	8000ba2 <__aeabi_fmul+0x15e>
 8000c94:	319e      	adds	r1, #158	@ 0x9e
 8000c96:	0032      	movs	r2, r6
 8000c98:	408e      	lsls	r6, r1
 8000c9a:	40da      	lsrs	r2, r3
 8000c9c:	1e73      	subs	r3, r6, #1
 8000c9e:	419e      	sbcs	r6, r3
 8000ca0:	4332      	orrs	r2, r6
 8000ca2:	0753      	lsls	r3, r2, #29
 8000ca4:	d004      	beq.n	8000cb0 <__aeabi_fmul+0x26c>
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	4013      	ands	r3, r2
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d000      	beq.n	8000cb0 <__aeabi_fmul+0x26c>
 8000cae:	3204      	adds	r2, #4
 8000cb0:	0153      	lsls	r3, r2, #5
 8000cb2:	d510      	bpl.n	8000cd6 <__aeabi_fmul+0x292>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	e792      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000cba:	003d      	movs	r5, r7
 8000cbc:	4646      	mov	r6, r8
 8000cbe:	4682      	mov	sl, r0
 8000cc0:	e767      	b.n	8000b92 <__aeabi_fmul+0x14e>
 8000cc2:	23ff      	movs	r3, #255	@ 0xff
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e78b      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000cc8:	2280      	movs	r2, #128	@ 0x80
 8000cca:	2500      	movs	r5, #0
 8000ccc:	03d2      	lsls	r2, r2, #15
 8000cce:	e786      	b.n	8000bde <__aeabi_fmul+0x19a>
 8000cd0:	003d      	movs	r5, r7
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	e783      	b.n	8000bde <__aeabi_fmul+0x19a>
 8000cd6:	0192      	lsls	r2, r2, #6
 8000cd8:	2300      	movs	r3, #0
 8000cda:	0a52      	lsrs	r2, r2, #9
 8000cdc:	e780      	b.n	8000be0 <__aeabi_fmul+0x19c>
 8000cde:	003d      	movs	r5, r7
 8000ce0:	4646      	mov	r6, r8
 8000ce2:	e777      	b.n	8000bd4 <__aeabi_fmul+0x190>
 8000ce4:	002a      	movs	r2, r5
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	407a      	eors	r2, r7
 8000cea:	408b      	lsls	r3, r1
 8000cec:	2003      	movs	r0, #3
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	e6e9      	b.n	8000ac6 <__aeabi_fmul+0x82>
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	f7ffffff 	.word	0xf7ffffff

08000cf8 <__aeabi_fsub>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	4647      	mov	r7, r8
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	0243      	lsls	r3, r0, #9
 8000d00:	b580      	push	{r7, lr}
 8000d02:	0a5f      	lsrs	r7, r3, #9
 8000d04:	099b      	lsrs	r3, r3, #6
 8000d06:	0045      	lsls	r5, r0, #1
 8000d08:	004a      	lsls	r2, r1, #1
 8000d0a:	469c      	mov	ip, r3
 8000d0c:	024b      	lsls	r3, r1, #9
 8000d0e:	0fc4      	lsrs	r4, r0, #31
 8000d10:	0fce      	lsrs	r6, r1, #31
 8000d12:	0e2d      	lsrs	r5, r5, #24
 8000d14:	0a58      	lsrs	r0, r3, #9
 8000d16:	0e12      	lsrs	r2, r2, #24
 8000d18:	0999      	lsrs	r1, r3, #6
 8000d1a:	2aff      	cmp	r2, #255	@ 0xff
 8000d1c:	d06b      	beq.n	8000df6 <__aeabi_fsub+0xfe>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	405e      	eors	r6, r3
 8000d22:	1aab      	subs	r3, r5, r2
 8000d24:	42b4      	cmp	r4, r6
 8000d26:	d04b      	beq.n	8000dc0 <__aeabi_fsub+0xc8>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dc00      	bgt.n	8000d2e <__aeabi_fsub+0x36>
 8000d2c:	e0ff      	b.n	8000f2e <__aeabi_fsub+0x236>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x3c>
 8000d32:	e088      	b.n	8000e46 <__aeabi_fsub+0x14e>
 8000d34:	2dff      	cmp	r5, #255	@ 0xff
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x42>
 8000d38:	e0ef      	b.n	8000f1a <__aeabi_fsub+0x222>
 8000d3a:	2280      	movs	r2, #128	@ 0x80
 8000d3c:	04d2      	lsls	r2, r2, #19
 8000d3e:	4311      	orrs	r1, r2
 8000d40:	2001      	movs	r0, #1
 8000d42:	2b1b      	cmp	r3, #27
 8000d44:	dc08      	bgt.n	8000d58 <__aeabi_fsub+0x60>
 8000d46:	0008      	movs	r0, r1
 8000d48:	2220      	movs	r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4099      	lsls	r1, r3
 8000d50:	000b      	movs	r3, r1
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	4193      	sbcs	r3, r2
 8000d56:	4318      	orrs	r0, r3
 8000d58:	4663      	mov	r3, ip
 8000d5a:	1a1b      	subs	r3, r3, r0
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	4663      	mov	r3, ip
 8000d60:	015b      	lsls	r3, r3, #5
 8000d62:	d400      	bmi.n	8000d66 <__aeabi_fsub+0x6e>
 8000d64:	e0cd      	b.n	8000f02 <__aeabi_fsub+0x20a>
 8000d66:	4663      	mov	r3, ip
 8000d68:	019f      	lsls	r7, r3, #6
 8000d6a:	09bf      	lsrs	r7, r7, #6
 8000d6c:	0038      	movs	r0, r7
 8000d6e:	f000 fadd 	bl	800132c <__clzsi2>
 8000d72:	003b      	movs	r3, r7
 8000d74:	3805      	subs	r0, #5
 8000d76:	4083      	lsls	r3, r0
 8000d78:	4285      	cmp	r5, r0
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_fsub+0x86>
 8000d7c:	e0a2      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 8000d7e:	4ab7      	ldr	r2, [pc, #732]	@ (800105c <__aeabi_fsub+0x364>)
 8000d80:	1a2d      	subs	r5, r5, r0
 8000d82:	401a      	ands	r2, r3
 8000d84:	4694      	mov	ip, r2
 8000d86:	075a      	lsls	r2, r3, #29
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fsub+0x94>
 8000d8a:	e0c3      	b.n	8000f14 <__aeabi_fsub+0x21c>
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x9e>
 8000d94:	e0be      	b.n	8000f14 <__aeabi_fsub+0x21c>
 8000d96:	2304      	movs	r3, #4
 8000d98:	4698      	mov	r8, r3
 8000d9a:	44c4      	add	ip, r8
 8000d9c:	4663      	mov	r3, ip
 8000d9e:	015b      	lsls	r3, r3, #5
 8000da0:	d400      	bmi.n	8000da4 <__aeabi_fsub+0xac>
 8000da2:	e0b7      	b.n	8000f14 <__aeabi_fsub+0x21c>
 8000da4:	1c68      	adds	r0, r5, #1
 8000da6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000da8:	d000      	beq.n	8000dac <__aeabi_fsub+0xb4>
 8000daa:	e0a5      	b.n	8000ef8 <__aeabi_fsub+0x200>
 8000dac:	20ff      	movs	r0, #255	@ 0xff
 8000dae:	2200      	movs	r2, #0
 8000db0:	05c0      	lsls	r0, r0, #23
 8000db2:	4310      	orrs	r0, r2
 8000db4:	07e4      	lsls	r4, r4, #31
 8000db6:	4320      	orrs	r0, r4
 8000db8:	bcc0      	pop	{r6, r7}
 8000dba:	46b9      	mov	r9, r7
 8000dbc:	46b0      	mov	r8, r6
 8000dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_fsub+0xce>
 8000dc4:	e1eb      	b.n	800119e <__aeabi_fsub+0x4a6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d046      	beq.n	8000e58 <__aeabi_fsub+0x160>
 8000dca:	2dff      	cmp	r5, #255	@ 0xff
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fsub+0xd8>
 8000dce:	e0a4      	b.n	8000f1a <__aeabi_fsub+0x222>
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	04d2      	lsls	r2, r2, #19
 8000dd4:	4311      	orrs	r1, r2
 8000dd6:	2b1b      	cmp	r3, #27
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fsub+0xe4>
 8000dda:	e0fb      	b.n	8000fd4 <__aeabi_fsub+0x2dc>
 8000ddc:	2305      	movs	r3, #5
 8000dde:	4698      	mov	r8, r3
 8000de0:	002b      	movs	r3, r5
 8000de2:	44c4      	add	ip, r8
 8000de4:	4662      	mov	r2, ip
 8000de6:	08d7      	lsrs	r7, r2, #3
 8000de8:	2bff      	cmp	r3, #255	@ 0xff
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0xf6>
 8000dec:	e095      	b.n	8000f1a <__aeabi_fsub+0x222>
 8000dee:	027a      	lsls	r2, r7, #9
 8000df0:	0a52      	lsrs	r2, r2, #9
 8000df2:	b2d8      	uxtb	r0, r3
 8000df4:	e7dc      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000df6:	002b      	movs	r3, r5
 8000df8:	3bff      	subs	r3, #255	@ 0xff
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d118      	bne.n	8000e32 <__aeabi_fsub+0x13a>
 8000e00:	2301      	movs	r3, #1
 8000e02:	405e      	eors	r6, r3
 8000e04:	42b4      	cmp	r4, r6
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x112>
 8000e08:	e0ca      	b.n	8000fa0 <__aeabi_fsub+0x2a8>
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d02d      	beq.n	8000e6c <__aeabi_fsub+0x174>
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d000      	beq.n	8000e16 <__aeabi_fsub+0x11e>
 8000e14:	e13c      	b.n	8001090 <__aeabi_fsub+0x398>
 8000e16:	23ff      	movs	r3, #255	@ 0xff
 8000e18:	4664      	mov	r4, ip
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x128>
 8000e1e:	e15f      	b.n	80010e0 <__aeabi_fsub+0x3e8>
 8000e20:	1e5d      	subs	r5, r3, #1
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d100      	bne.n	8000e28 <__aeabi_fsub+0x130>
 8000e26:	e174      	b.n	8001112 <__aeabi_fsub+0x41a>
 8000e28:	0034      	movs	r4, r6
 8000e2a:	2bff      	cmp	r3, #255	@ 0xff
 8000e2c:	d074      	beq.n	8000f18 <__aeabi_fsub+0x220>
 8000e2e:	002b      	movs	r3, r5
 8000e30:	e103      	b.n	800103a <__aeabi_fsub+0x342>
 8000e32:	42b4      	cmp	r4, r6
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fsub+0x140>
 8000e36:	e09c      	b.n	8000f72 <__aeabi_fsub+0x27a>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d017      	beq.n	8000e6c <__aeabi_fsub+0x174>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d0ea      	beq.n	8000e16 <__aeabi_fsub+0x11e>
 8000e40:	0007      	movs	r7, r0
 8000e42:	0034      	movs	r4, r6
 8000e44:	e06c      	b.n	8000f20 <__aeabi_fsub+0x228>
 8000e46:	2900      	cmp	r1, #0
 8000e48:	d0cc      	beq.n	8000de4 <__aeabi_fsub+0xec>
 8000e4a:	1e5a      	subs	r2, r3, #1
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d02b      	beq.n	8000ea8 <__aeabi_fsub+0x1b0>
 8000e50:	2bff      	cmp	r3, #255	@ 0xff
 8000e52:	d062      	beq.n	8000f1a <__aeabi_fsub+0x222>
 8000e54:	0013      	movs	r3, r2
 8000e56:	e773      	b.n	8000d40 <__aeabi_fsub+0x48>
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d0c3      	beq.n	8000de4 <__aeabi_fsub+0xec>
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fsub+0x16c>
 8000e62:	e11e      	b.n	80010a2 <__aeabi_fsub+0x3aa>
 8000e64:	2bff      	cmp	r3, #255	@ 0xff
 8000e66:	d058      	beq.n	8000f1a <__aeabi_fsub+0x222>
 8000e68:	0013      	movs	r3, r2
 8000e6a:	e7b4      	b.n	8000dd6 <__aeabi_fsub+0xde>
 8000e6c:	22fe      	movs	r2, #254	@ 0xfe
 8000e6e:	1c6b      	adds	r3, r5, #1
 8000e70:	421a      	tst	r2, r3
 8000e72:	d10d      	bne.n	8000e90 <__aeabi_fsub+0x198>
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d060      	beq.n	8000f3a <__aeabi_fsub+0x242>
 8000e78:	4663      	mov	r3, ip
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_fsub+0x188>
 8000e7e:	e120      	b.n	80010c2 <__aeabi_fsub+0x3ca>
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x18e>
 8000e84:	e128      	b.n	80010d8 <__aeabi_fsub+0x3e0>
 8000e86:	2280      	movs	r2, #128	@ 0x80
 8000e88:	2400      	movs	r4, #0
 8000e8a:	20ff      	movs	r0, #255	@ 0xff
 8000e8c:	03d2      	lsls	r2, r2, #15
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000e90:	4663      	mov	r3, ip
 8000e92:	1a5f      	subs	r7, r3, r1
 8000e94:	017b      	lsls	r3, r7, #5
 8000e96:	d500      	bpl.n	8000e9a <__aeabi_fsub+0x1a2>
 8000e98:	e0fe      	b.n	8001098 <__aeabi_fsub+0x3a0>
 8000e9a:	2f00      	cmp	r7, #0
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_fsub+0x1a8>
 8000e9e:	e765      	b.n	8000d6c <__aeabi_fsub+0x74>
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e783      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000ea8:	4663      	mov	r3, ip
 8000eaa:	1a59      	subs	r1, r3, r1
 8000eac:	014b      	lsls	r3, r1, #5
 8000eae:	d400      	bmi.n	8000eb2 <__aeabi_fsub+0x1ba>
 8000eb0:	e119      	b.n	80010e6 <__aeabi_fsub+0x3ee>
 8000eb2:	018f      	lsls	r7, r1, #6
 8000eb4:	09bf      	lsrs	r7, r7, #6
 8000eb6:	0038      	movs	r0, r7
 8000eb8:	f000 fa38 	bl	800132c <__clzsi2>
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	3805      	subs	r0, #5
 8000ec0:	4083      	lsls	r3, r0
 8000ec2:	2501      	movs	r5, #1
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	1b40      	subs	r0, r0, r5
 8000ec8:	3001      	adds	r0, #1
 8000eca:	1a12      	subs	r2, r2, r0
 8000ecc:	0019      	movs	r1, r3
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	40c1      	lsrs	r1, r0
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	4193      	sbcs	r3, r2
 8000ed6:	4319      	orrs	r1, r3
 8000ed8:	468c      	mov	ip, r1
 8000eda:	1e0b      	subs	r3, r1, #0
 8000edc:	d0e1      	beq.n	8000ea2 <__aeabi_fsub+0x1aa>
 8000ede:	075b      	lsls	r3, r3, #29
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x1ec>
 8000ee2:	e152      	b.n	800118a <__aeabi_fsub+0x492>
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	400b      	ands	r3, r1
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fsub+0x1f8>
 8000eee:	e752      	b.n	8000d96 <__aeabi_fsub+0x9e>
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	014a      	lsls	r2, r1, #5
 8000ef4:	d400      	bmi.n	8000ef8 <__aeabi_fsub+0x200>
 8000ef6:	e092      	b.n	800101e <__aeabi_fsub+0x326>
 8000ef8:	b2c0      	uxtb	r0, r0
 8000efa:	4663      	mov	r3, ip
 8000efc:	019a      	lsls	r2, r3, #6
 8000efe:	0a52      	lsrs	r2, r2, #9
 8000f00:	e756      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000f02:	4663      	mov	r3, ip
 8000f04:	075b      	lsls	r3, r3, #29
 8000f06:	d005      	beq.n	8000f14 <__aeabi_fsub+0x21c>
 8000f08:	230f      	movs	r3, #15
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d000      	beq.n	8000f14 <__aeabi_fsub+0x21c>
 8000f12:	e740      	b.n	8000d96 <__aeabi_fsub+0x9e>
 8000f14:	002b      	movs	r3, r5
 8000f16:	e765      	b.n	8000de4 <__aeabi_fsub+0xec>
 8000f18:	0007      	movs	r7, r0
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0x228>
 8000f1e:	e745      	b.n	8000dac <__aeabi_fsub+0xb4>
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	03d2      	lsls	r2, r2, #15
 8000f24:	433a      	orrs	r2, r7
 8000f26:	0252      	lsls	r2, r2, #9
 8000f28:	20ff      	movs	r0, #255	@ 0xff
 8000f2a:	0a52      	lsrs	r2, r2, #9
 8000f2c:	e740      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d179      	bne.n	8001026 <__aeabi_fsub+0x32e>
 8000f32:	22fe      	movs	r2, #254	@ 0xfe
 8000f34:	1c6b      	adds	r3, r5, #1
 8000f36:	421a      	tst	r2, r3
 8000f38:	d1aa      	bne.n	8000e90 <__aeabi_fsub+0x198>
 8000f3a:	4663      	mov	r3, ip
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x24a>
 8000f40:	e0f5      	b.n	800112e <__aeabi_fsub+0x436>
 8000f42:	2900      	cmp	r1, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x250>
 8000f46:	e0d1      	b.n	80010ec <__aeabi_fsub+0x3f4>
 8000f48:	1a5f      	subs	r7, r3, r1
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	04db      	lsls	r3, r3, #19
 8000f4e:	421f      	tst	r7, r3
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x25c>
 8000f52:	e10e      	b.n	8001172 <__aeabi_fsub+0x47a>
 8000f54:	4662      	mov	r2, ip
 8000f56:	2401      	movs	r4, #1
 8000f58:	1a8a      	subs	r2, r1, r2
 8000f5a:	4694      	mov	ip, r2
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	4034      	ands	r4, r6
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x26e>
 8000f64:	e724      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000f66:	2001      	movs	r0, #1
 8000f68:	421a      	tst	r2, r3
 8000f6a:	d1c6      	bne.n	8000efa <__aeabi_fsub+0x202>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	08d7      	lsrs	r7, r2, #3
 8000f70:	e73d      	b.n	8000dee <__aeabi_fsub+0xf6>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d017      	beq.n	8000fa6 <__aeabi_fsub+0x2ae>
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0x284>
 8000f7a:	e0af      	b.n	80010dc <__aeabi_fsub+0x3e4>
 8000f7c:	23ff      	movs	r3, #255	@ 0xff
 8000f7e:	4665      	mov	r5, ip
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_fsub+0x28e>
 8000f84:	e0ad      	b.n	80010e2 <__aeabi_fsub+0x3ea>
 8000f86:	1e5e      	subs	r6, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x296>
 8000f8c:	e089      	b.n	80010a2 <__aeabi_fsub+0x3aa>
 8000f8e:	2bff      	cmp	r3, #255	@ 0xff
 8000f90:	d0c2      	beq.n	8000f18 <__aeabi_fsub+0x220>
 8000f92:	2e1b      	cmp	r6, #27
 8000f94:	dc00      	bgt.n	8000f98 <__aeabi_fsub+0x2a0>
 8000f96:	e0ab      	b.n	80010f0 <__aeabi_fsub+0x3f8>
 8000f98:	1d4b      	adds	r3, r1, #5
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	e721      	b.n	8000de4 <__aeabi_fsub+0xec>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d170      	bne.n	8001088 <__aeabi_fsub+0x390>
 8000fa6:	22fe      	movs	r2, #254	@ 0xfe
 8000fa8:	1c6b      	adds	r3, r5, #1
 8000faa:	421a      	tst	r2, r3
 8000fac:	d15e      	bne.n	800106c <__aeabi_fsub+0x374>
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_fsub+0x2bc>
 8000fb2:	e0c3      	b.n	800113c <__aeabi_fsub+0x444>
 8000fb4:	4663      	mov	r3, ip
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_fsub+0x2c4>
 8000fba:	e0d0      	b.n	800115e <__aeabi_fsub+0x466>
 8000fbc:	2900      	cmp	r1, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x2ca>
 8000fc0:	e094      	b.n	80010ec <__aeabi_fsub+0x3f4>
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	4462      	add	r2, ip
 8000fc6:	0153      	lsls	r3, r2, #5
 8000fc8:	d400      	bmi.n	8000fcc <__aeabi_fsub+0x2d4>
 8000fca:	e0d8      	b.n	800117e <__aeabi_fsub+0x486>
 8000fcc:	0192      	lsls	r2, r2, #6
 8000fce:	2001      	movs	r0, #1
 8000fd0:	0a52      	lsrs	r2, r2, #9
 8000fd2:	e6ed      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8000fd4:	0008      	movs	r0, r1
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	40d8      	lsrs	r0, r3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4099      	lsls	r1, r3
 8000fde:	000b      	movs	r3, r1
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4193      	sbcs	r3, r2
 8000fe4:	4303      	orrs	r3, r0
 8000fe6:	449c      	add	ip, r3
 8000fe8:	4663      	mov	r3, ip
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	d589      	bpl.n	8000f02 <__aeabi_fsub+0x20a>
 8000fee:	3501      	adds	r5, #1
 8000ff0:	2dff      	cmp	r5, #255	@ 0xff
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x2fe>
 8000ff4:	e6da      	b.n	8000dac <__aeabi_fsub+0xb4>
 8000ff6:	4662      	mov	r2, ip
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4919      	ldr	r1, [pc, #100]	@ (8001060 <__aeabi_fsub+0x368>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	0852      	lsrs	r2, r2, #1
 8001000:	400a      	ands	r2, r1
 8001002:	431a      	orrs	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	4694      	mov	ip, r2
 8001008:	075b      	lsls	r3, r3, #29
 800100a:	d004      	beq.n	8001016 <__aeabi_fsub+0x31e>
 800100c:	230f      	movs	r3, #15
 800100e:	4013      	ands	r3, r2
 8001010:	2b04      	cmp	r3, #4
 8001012:	d000      	beq.n	8001016 <__aeabi_fsub+0x31e>
 8001014:	e6bf      	b.n	8000d96 <__aeabi_fsub+0x9e>
 8001016:	4663      	mov	r3, ip
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	d500      	bpl.n	800101e <__aeabi_fsub+0x326>
 800101c:	e6c2      	b.n	8000da4 <__aeabi_fsub+0xac>
 800101e:	4663      	mov	r3, ip
 8001020:	08df      	lsrs	r7, r3, #3
 8001022:	002b      	movs	r3, r5
 8001024:	e6e3      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001026:	1b53      	subs	r3, r2, r5
 8001028:	2d00      	cmp	r5, #0
 800102a:	d100      	bne.n	800102e <__aeabi_fsub+0x336>
 800102c:	e6f4      	b.n	8000e18 <__aeabi_fsub+0x120>
 800102e:	2080      	movs	r0, #128	@ 0x80
 8001030:	4664      	mov	r4, ip
 8001032:	04c0      	lsls	r0, r0, #19
 8001034:	4304      	orrs	r4, r0
 8001036:	46a4      	mov	ip, r4
 8001038:	0034      	movs	r4, r6
 800103a:	2001      	movs	r0, #1
 800103c:	2b1b      	cmp	r3, #27
 800103e:	dc09      	bgt.n	8001054 <__aeabi_fsub+0x35c>
 8001040:	2520      	movs	r5, #32
 8001042:	4660      	mov	r0, ip
 8001044:	40d8      	lsrs	r0, r3
 8001046:	1aeb      	subs	r3, r5, r3
 8001048:	4665      	mov	r5, ip
 800104a:	409d      	lsls	r5, r3
 800104c:	002b      	movs	r3, r5
 800104e:	1e5d      	subs	r5, r3, #1
 8001050:	41ab      	sbcs	r3, r5
 8001052:	4318      	orrs	r0, r3
 8001054:	1a0b      	subs	r3, r1, r0
 8001056:	469c      	mov	ip, r3
 8001058:	0015      	movs	r5, r2
 800105a:	e680      	b.n	8000d5e <__aeabi_fsub+0x66>
 800105c:	fbffffff 	.word	0xfbffffff
 8001060:	7dffffff 	.word	0x7dffffff
 8001064:	22fe      	movs	r2, #254	@ 0xfe
 8001066:	1c6b      	adds	r3, r5, #1
 8001068:	4213      	tst	r3, r2
 800106a:	d0a3      	beq.n	8000fb4 <__aeabi_fsub+0x2bc>
 800106c:	2bff      	cmp	r3, #255	@ 0xff
 800106e:	d100      	bne.n	8001072 <__aeabi_fsub+0x37a>
 8001070:	e69c      	b.n	8000dac <__aeabi_fsub+0xb4>
 8001072:	4461      	add	r1, ip
 8001074:	0849      	lsrs	r1, r1, #1
 8001076:	074a      	lsls	r2, r1, #29
 8001078:	d049      	beq.n	800110e <__aeabi_fsub+0x416>
 800107a:	220f      	movs	r2, #15
 800107c:	400a      	ands	r2, r1
 800107e:	2a04      	cmp	r2, #4
 8001080:	d045      	beq.n	800110e <__aeabi_fsub+0x416>
 8001082:	1d0a      	adds	r2, r1, #4
 8001084:	4694      	mov	ip, r2
 8001086:	e6ad      	b.n	8000de4 <__aeabi_fsub+0xec>
 8001088:	2d00      	cmp	r5, #0
 800108a:	d100      	bne.n	800108e <__aeabi_fsub+0x396>
 800108c:	e776      	b.n	8000f7c <__aeabi_fsub+0x284>
 800108e:	e68d      	b.n	8000dac <__aeabi_fsub+0xb4>
 8001090:	0034      	movs	r4, r6
 8001092:	20ff      	movs	r0, #255	@ 0xff
 8001094:	2200      	movs	r2, #0
 8001096:	e68b      	b.n	8000db0 <__aeabi_fsub+0xb8>
 8001098:	4663      	mov	r3, ip
 800109a:	2401      	movs	r4, #1
 800109c:	1acf      	subs	r7, r1, r3
 800109e:	4034      	ands	r4, r6
 80010a0:	e664      	b.n	8000d6c <__aeabi_fsub+0x74>
 80010a2:	4461      	add	r1, ip
 80010a4:	014b      	lsls	r3, r1, #5
 80010a6:	d56d      	bpl.n	8001184 <__aeabi_fsub+0x48c>
 80010a8:	0848      	lsrs	r0, r1, #1
 80010aa:	4944      	ldr	r1, [pc, #272]	@ (80011bc <__aeabi_fsub+0x4c4>)
 80010ac:	4001      	ands	r1, r0
 80010ae:	0743      	lsls	r3, r0, #29
 80010b0:	d02c      	beq.n	800110c <__aeabi_fsub+0x414>
 80010b2:	230f      	movs	r3, #15
 80010b4:	4003      	ands	r3, r0
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d028      	beq.n	800110c <__aeabi_fsub+0x414>
 80010ba:	1d0b      	adds	r3, r1, #4
 80010bc:	469c      	mov	ip, r3
 80010be:	2302      	movs	r3, #2
 80010c0:	e690      	b.n	8000de4 <__aeabi_fsub+0xec>
 80010c2:	2900      	cmp	r1, #0
 80010c4:	d100      	bne.n	80010c8 <__aeabi_fsub+0x3d0>
 80010c6:	e72b      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	03db      	lsls	r3, r3, #15
 80010cc:	429f      	cmp	r7, r3
 80010ce:	d200      	bcs.n	80010d2 <__aeabi_fsub+0x3da>
 80010d0:	e726      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010d2:	4298      	cmp	r0, r3
 80010d4:	d300      	bcc.n	80010d8 <__aeabi_fsub+0x3e0>
 80010d6:	e723      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010d8:	2401      	movs	r4, #1
 80010da:	4034      	ands	r4, r6
 80010dc:	0007      	movs	r7, r0
 80010de:	e71f      	b.n	8000f20 <__aeabi_fsub+0x228>
 80010e0:	0034      	movs	r4, r6
 80010e2:	468c      	mov	ip, r1
 80010e4:	e67e      	b.n	8000de4 <__aeabi_fsub+0xec>
 80010e6:	2301      	movs	r3, #1
 80010e8:	08cf      	lsrs	r7, r1, #3
 80010ea:	e680      	b.n	8000dee <__aeabi_fsub+0xf6>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e67e      	b.n	8000dee <__aeabi_fsub+0xf6>
 80010f0:	2020      	movs	r0, #32
 80010f2:	4665      	mov	r5, ip
 80010f4:	1b80      	subs	r0, r0, r6
 80010f6:	4085      	lsls	r5, r0
 80010f8:	4663      	mov	r3, ip
 80010fa:	0028      	movs	r0, r5
 80010fc:	40f3      	lsrs	r3, r6
 80010fe:	1e45      	subs	r5, r0, #1
 8001100:	41a8      	sbcs	r0, r5
 8001102:	4303      	orrs	r3, r0
 8001104:	469c      	mov	ip, r3
 8001106:	0015      	movs	r5, r2
 8001108:	448c      	add	ip, r1
 800110a:	e76d      	b.n	8000fe8 <__aeabi_fsub+0x2f0>
 800110c:	2302      	movs	r3, #2
 800110e:	08cf      	lsrs	r7, r1, #3
 8001110:	e66d      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001112:	1b0f      	subs	r7, r1, r4
 8001114:	017b      	lsls	r3, r7, #5
 8001116:	d528      	bpl.n	800116a <__aeabi_fsub+0x472>
 8001118:	01bf      	lsls	r7, r7, #6
 800111a:	09bf      	lsrs	r7, r7, #6
 800111c:	0038      	movs	r0, r7
 800111e:	f000 f905 	bl	800132c <__clzsi2>
 8001122:	003b      	movs	r3, r7
 8001124:	3805      	subs	r0, #5
 8001126:	4083      	lsls	r3, r0
 8001128:	0034      	movs	r4, r6
 800112a:	2501      	movs	r5, #1
 800112c:	e6ca      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 800112e:	2900      	cmp	r1, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x43c>
 8001132:	e6b5      	b.n	8000ea0 <__aeabi_fsub+0x1a8>
 8001134:	2401      	movs	r4, #1
 8001136:	0007      	movs	r7, r0
 8001138:	4034      	ands	r4, r6
 800113a:	e658      	b.n	8000dee <__aeabi_fsub+0xf6>
 800113c:	4663      	mov	r3, ip
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x44c>
 8001142:	e6e9      	b.n	8000f18 <__aeabi_fsub+0x220>
 8001144:	2900      	cmp	r1, #0
 8001146:	d100      	bne.n	800114a <__aeabi_fsub+0x452>
 8001148:	e6ea      	b.n	8000f20 <__aeabi_fsub+0x228>
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	03db      	lsls	r3, r3, #15
 800114e:	429f      	cmp	r7, r3
 8001150:	d200      	bcs.n	8001154 <__aeabi_fsub+0x45c>
 8001152:	e6e5      	b.n	8000f20 <__aeabi_fsub+0x228>
 8001154:	4298      	cmp	r0, r3
 8001156:	d300      	bcc.n	800115a <__aeabi_fsub+0x462>
 8001158:	e6e2      	b.n	8000f20 <__aeabi_fsub+0x228>
 800115a:	0007      	movs	r7, r0
 800115c:	e6e0      	b.n	8000f20 <__aeabi_fsub+0x228>
 800115e:	2900      	cmp	r1, #0
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x46c>
 8001162:	e69e      	b.n	8000ea2 <__aeabi_fsub+0x1aa>
 8001164:	2300      	movs	r3, #0
 8001166:	08cf      	lsrs	r7, r1, #3
 8001168:	e641      	b.n	8000dee <__aeabi_fsub+0xf6>
 800116a:	0034      	movs	r4, r6
 800116c:	2301      	movs	r3, #1
 800116e:	08ff      	lsrs	r7, r7, #3
 8001170:	e63d      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001172:	2f00      	cmp	r7, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0x480>
 8001176:	e693      	b.n	8000ea0 <__aeabi_fsub+0x1a8>
 8001178:	2300      	movs	r3, #0
 800117a:	08ff      	lsrs	r7, r7, #3
 800117c:	e637      	b.n	8000dee <__aeabi_fsub+0xf6>
 800117e:	2300      	movs	r3, #0
 8001180:	08d7      	lsrs	r7, r2, #3
 8001182:	e634      	b.n	8000dee <__aeabi_fsub+0xf6>
 8001184:	2301      	movs	r3, #1
 8001186:	08cf      	lsrs	r7, r1, #3
 8001188:	e631      	b.n	8000dee <__aeabi_fsub+0xf6>
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	000b      	movs	r3, r1
 800118e:	04d2      	lsls	r2, r2, #19
 8001190:	2001      	movs	r0, #1
 8001192:	4013      	ands	r3, r2
 8001194:	4211      	tst	r1, r2
 8001196:	d000      	beq.n	800119a <__aeabi_fsub+0x4a2>
 8001198:	e6ae      	b.n	8000ef8 <__aeabi_fsub+0x200>
 800119a:	08cf      	lsrs	r7, r1, #3
 800119c:	e627      	b.n	8000dee <__aeabi_fsub+0xf6>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x4ac>
 80011a2:	e75f      	b.n	8001064 <__aeabi_fsub+0x36c>
 80011a4:	1b56      	subs	r6, r2, r5
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	d101      	bne.n	80011ae <__aeabi_fsub+0x4b6>
 80011aa:	0033      	movs	r3, r6
 80011ac:	e6e7      	b.n	8000f7e <__aeabi_fsub+0x286>
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	4660      	mov	r0, ip
 80011b2:	04db      	lsls	r3, r3, #19
 80011b4:	4318      	orrs	r0, r3
 80011b6:	4684      	mov	ip, r0
 80011b8:	e6eb      	b.n	8000f92 <__aeabi_fsub+0x29a>
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	7dffffff 	.word	0x7dffffff

080011c0 <__aeabi_f2iz>:
 80011c0:	0241      	lsls	r1, r0, #9
 80011c2:	0042      	lsls	r2, r0, #1
 80011c4:	0fc3      	lsrs	r3, r0, #31
 80011c6:	0a49      	lsrs	r1, r1, #9
 80011c8:	2000      	movs	r0, #0
 80011ca:	0e12      	lsrs	r2, r2, #24
 80011cc:	2a7e      	cmp	r2, #126	@ 0x7e
 80011ce:	dd03      	ble.n	80011d8 <__aeabi_f2iz+0x18>
 80011d0:	2a9d      	cmp	r2, #157	@ 0x9d
 80011d2:	dd02      	ble.n	80011da <__aeabi_f2iz+0x1a>
 80011d4:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <__aeabi_f2iz+0x3c>)
 80011d6:	1898      	adds	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	2080      	movs	r0, #128	@ 0x80
 80011dc:	0400      	lsls	r0, r0, #16
 80011de:	4301      	orrs	r1, r0
 80011e0:	2a95      	cmp	r2, #149	@ 0x95
 80011e2:	dc07      	bgt.n	80011f4 <__aeabi_f2iz+0x34>
 80011e4:	2096      	movs	r0, #150	@ 0x96
 80011e6:	1a82      	subs	r2, r0, r2
 80011e8:	40d1      	lsrs	r1, r2
 80011ea:	4248      	negs	r0, r1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f3      	bne.n	80011d8 <__aeabi_f2iz+0x18>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7f1      	b.n	80011d8 <__aeabi_f2iz+0x18>
 80011f4:	3a96      	subs	r2, #150	@ 0x96
 80011f6:	4091      	lsls	r1, r2
 80011f8:	e7f7      	b.n	80011ea <__aeabi_f2iz+0x2a>
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	7fffffff 	.word	0x7fffffff

08001200 <__aeabi_i2f>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	2800      	cmp	r0, #0
 8001204:	d012      	beq.n	800122c <__aeabi_i2f+0x2c>
 8001206:	17c3      	asrs	r3, r0, #31
 8001208:	18c5      	adds	r5, r0, r3
 800120a:	405d      	eors	r5, r3
 800120c:	0fc4      	lsrs	r4, r0, #31
 800120e:	0028      	movs	r0, r5
 8001210:	f000 f88c 	bl	800132c <__clzsi2>
 8001214:	239e      	movs	r3, #158	@ 0x9e
 8001216:	1a1b      	subs	r3, r3, r0
 8001218:	2b96      	cmp	r3, #150	@ 0x96
 800121a:	dc0f      	bgt.n	800123c <__aeabi_i2f+0x3c>
 800121c:	2808      	cmp	r0, #8
 800121e:	d038      	beq.n	8001292 <__aeabi_i2f+0x92>
 8001220:	3808      	subs	r0, #8
 8001222:	4085      	lsls	r5, r0
 8001224:	026d      	lsls	r5, r5, #9
 8001226:	0a6d      	lsrs	r5, r5, #9
 8001228:	b2d8      	uxtb	r0, r3
 800122a:	e002      	b.n	8001232 <__aeabi_i2f+0x32>
 800122c:	2400      	movs	r4, #0
 800122e:	2000      	movs	r0, #0
 8001230:	2500      	movs	r5, #0
 8001232:	05c0      	lsls	r0, r0, #23
 8001234:	4328      	orrs	r0, r5
 8001236:	07e4      	lsls	r4, r4, #31
 8001238:	4320      	orrs	r0, r4
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	2b99      	cmp	r3, #153	@ 0x99
 800123e:	dc14      	bgt.n	800126a <__aeabi_i2f+0x6a>
 8001240:	1f42      	subs	r2, r0, #5
 8001242:	4095      	lsls	r5, r2
 8001244:	002a      	movs	r2, r5
 8001246:	4915      	ldr	r1, [pc, #84]	@ (800129c <__aeabi_i2f+0x9c>)
 8001248:	4011      	ands	r1, r2
 800124a:	0755      	lsls	r5, r2, #29
 800124c:	d01c      	beq.n	8001288 <__aeabi_i2f+0x88>
 800124e:	250f      	movs	r5, #15
 8001250:	402a      	ands	r2, r5
 8001252:	2a04      	cmp	r2, #4
 8001254:	d018      	beq.n	8001288 <__aeabi_i2f+0x88>
 8001256:	3104      	adds	r1, #4
 8001258:	08ca      	lsrs	r2, r1, #3
 800125a:	0149      	lsls	r1, r1, #5
 800125c:	d515      	bpl.n	800128a <__aeabi_i2f+0x8a>
 800125e:	239f      	movs	r3, #159	@ 0x9f
 8001260:	0252      	lsls	r2, r2, #9
 8001262:	1a18      	subs	r0, r3, r0
 8001264:	0a55      	lsrs	r5, r2, #9
 8001266:	b2c0      	uxtb	r0, r0
 8001268:	e7e3      	b.n	8001232 <__aeabi_i2f+0x32>
 800126a:	2205      	movs	r2, #5
 800126c:	0029      	movs	r1, r5
 800126e:	1a12      	subs	r2, r2, r0
 8001270:	40d1      	lsrs	r1, r2
 8001272:	0002      	movs	r2, r0
 8001274:	321b      	adds	r2, #27
 8001276:	4095      	lsls	r5, r2
 8001278:	002a      	movs	r2, r5
 800127a:	1e55      	subs	r5, r2, #1
 800127c:	41aa      	sbcs	r2, r5
 800127e:	430a      	orrs	r2, r1
 8001280:	4906      	ldr	r1, [pc, #24]	@ (800129c <__aeabi_i2f+0x9c>)
 8001282:	4011      	ands	r1, r2
 8001284:	0755      	lsls	r5, r2, #29
 8001286:	d1e2      	bne.n	800124e <__aeabi_i2f+0x4e>
 8001288:	08ca      	lsrs	r2, r1, #3
 800128a:	0252      	lsls	r2, r2, #9
 800128c:	0a55      	lsrs	r5, r2, #9
 800128e:	b2d8      	uxtb	r0, r3
 8001290:	e7cf      	b.n	8001232 <__aeabi_i2f+0x32>
 8001292:	026d      	lsls	r5, r5, #9
 8001294:	0a6d      	lsrs	r5, r5, #9
 8001296:	308e      	adds	r0, #142	@ 0x8e
 8001298:	e7cb      	b.n	8001232 <__aeabi_i2f+0x32>
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	fbffffff 	.word	0xfbffffff

080012a0 <__aeabi_ui2f>:
 80012a0:	b510      	push	{r4, lr}
 80012a2:	1e04      	subs	r4, r0, #0
 80012a4:	d00d      	beq.n	80012c2 <__aeabi_ui2f+0x22>
 80012a6:	f000 f841 	bl	800132c <__clzsi2>
 80012aa:	239e      	movs	r3, #158	@ 0x9e
 80012ac:	1a1b      	subs	r3, r3, r0
 80012ae:	2b96      	cmp	r3, #150	@ 0x96
 80012b0:	dc0c      	bgt.n	80012cc <__aeabi_ui2f+0x2c>
 80012b2:	2808      	cmp	r0, #8
 80012b4:	d034      	beq.n	8001320 <__aeabi_ui2f+0x80>
 80012b6:	3808      	subs	r0, #8
 80012b8:	4084      	lsls	r4, r0
 80012ba:	0264      	lsls	r4, r4, #9
 80012bc:	0a64      	lsrs	r4, r4, #9
 80012be:	b2d8      	uxtb	r0, r3
 80012c0:	e001      	b.n	80012c6 <__aeabi_ui2f+0x26>
 80012c2:	2000      	movs	r0, #0
 80012c4:	2400      	movs	r4, #0
 80012c6:	05c0      	lsls	r0, r0, #23
 80012c8:	4320      	orrs	r0, r4
 80012ca:	bd10      	pop	{r4, pc}
 80012cc:	2b99      	cmp	r3, #153	@ 0x99
 80012ce:	dc13      	bgt.n	80012f8 <__aeabi_ui2f+0x58>
 80012d0:	1f42      	subs	r2, r0, #5
 80012d2:	4094      	lsls	r4, r2
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <__aeabi_ui2f+0x88>)
 80012d6:	4022      	ands	r2, r4
 80012d8:	0761      	lsls	r1, r4, #29
 80012da:	d01c      	beq.n	8001316 <__aeabi_ui2f+0x76>
 80012dc:	210f      	movs	r1, #15
 80012de:	4021      	ands	r1, r4
 80012e0:	2904      	cmp	r1, #4
 80012e2:	d018      	beq.n	8001316 <__aeabi_ui2f+0x76>
 80012e4:	3204      	adds	r2, #4
 80012e6:	08d4      	lsrs	r4, r2, #3
 80012e8:	0152      	lsls	r2, r2, #5
 80012ea:	d515      	bpl.n	8001318 <__aeabi_ui2f+0x78>
 80012ec:	239f      	movs	r3, #159	@ 0x9f
 80012ee:	0264      	lsls	r4, r4, #9
 80012f0:	1a18      	subs	r0, r3, r0
 80012f2:	0a64      	lsrs	r4, r4, #9
 80012f4:	b2c0      	uxtb	r0, r0
 80012f6:	e7e6      	b.n	80012c6 <__aeabi_ui2f+0x26>
 80012f8:	0002      	movs	r2, r0
 80012fa:	0021      	movs	r1, r4
 80012fc:	321b      	adds	r2, #27
 80012fe:	4091      	lsls	r1, r2
 8001300:	000a      	movs	r2, r1
 8001302:	1e51      	subs	r1, r2, #1
 8001304:	418a      	sbcs	r2, r1
 8001306:	2105      	movs	r1, #5
 8001308:	1a09      	subs	r1, r1, r0
 800130a:	40cc      	lsrs	r4, r1
 800130c:	4314      	orrs	r4, r2
 800130e:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <__aeabi_ui2f+0x88>)
 8001310:	4022      	ands	r2, r4
 8001312:	0761      	lsls	r1, r4, #29
 8001314:	d1e2      	bne.n	80012dc <__aeabi_ui2f+0x3c>
 8001316:	08d4      	lsrs	r4, r2, #3
 8001318:	0264      	lsls	r4, r4, #9
 800131a:	0a64      	lsrs	r4, r4, #9
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	e7d2      	b.n	80012c6 <__aeabi_ui2f+0x26>
 8001320:	0264      	lsls	r4, r4, #9
 8001322:	0a64      	lsrs	r4, r4, #9
 8001324:	308e      	adds	r0, #142	@ 0x8e
 8001326:	e7ce      	b.n	80012c6 <__aeabi_ui2f+0x26>
 8001328:	fbffffff 	.word	0xfbffffff

0800132c <__clzsi2>:
 800132c:	211c      	movs	r1, #28
 800132e:	2301      	movs	r3, #1
 8001330:	041b      	lsls	r3, r3, #16
 8001332:	4298      	cmp	r0, r3
 8001334:	d301      	bcc.n	800133a <__clzsi2+0xe>
 8001336:	0c00      	lsrs	r0, r0, #16
 8001338:	3910      	subs	r1, #16
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	4298      	cmp	r0, r3
 800133e:	d301      	bcc.n	8001344 <__clzsi2+0x18>
 8001340:	0a00      	lsrs	r0, r0, #8
 8001342:	3908      	subs	r1, #8
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	4298      	cmp	r0, r3
 8001348:	d301      	bcc.n	800134e <__clzsi2+0x22>
 800134a:	0900      	lsrs	r0, r0, #4
 800134c:	3904      	subs	r1, #4
 800134e:	a202      	add	r2, pc, #8	@ (adr r2, 8001358 <__clzsi2+0x2c>)
 8001350:	5c10      	ldrb	r0, [r2, r0]
 8001352:	1840      	adds	r0, r0, r1
 8001354:	4770      	bx	lr
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	02020304 	.word	0x02020304
 800135c:	01010101 	.word	0x01010101
	...

08001368 <HAL_GPIO_EXTI_Callback>:
 * This function is called by the HAL when an external interrupt occurs on PB6 or PB7.
 * It decodes the quadrature signal to update the encoder_position.
 * @param GPIO_Pin Specifies the pins connected to the EXTI line.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	1dbb      	adds	r3, r7, #6
 8001372:	801a      	strh	r2, [r3, #0]
    // Read current states of both encoder channels
    uint8_t current_A_state = HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_Pin);
 8001374:	250f      	movs	r5, #15
 8001376:	197c      	adds	r4, r7, r5
 8001378:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <HAL_GPIO_EXTI_Callback+0x9c>)
 800137a:	2140      	movs	r1, #64	@ 0x40
 800137c:	0018      	movs	r0, r3
 800137e:	f000 fdef 	bl	8001f60 <HAL_GPIO_ReadPin>
 8001382:	0003      	movs	r3, r0
 8001384:	7023      	strb	r3, [r4, #0]
    uint8_t current_B_state = HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_Pin);
 8001386:	260e      	movs	r6, #14
 8001388:	19bc      	adds	r4, r7, r6
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <HAL_GPIO_EXTI_Callback+0x9c>)
 800138c:	2180      	movs	r1, #128	@ 0x80
 800138e:	0018      	movs	r0, r3
 8001390:	f000 fde6 	bl	8001f60 <HAL_GPIO_ReadPin>
 8001394:	0003      	movs	r3, r0
 8001396:	7023      	strb	r3, [r4, #0]

    // Combine current states into a 2-bit value: (A << 1) | B
    uint8_t current_encoder_state = (current_A_state << 1) | current_B_state;
 8001398:	197b      	adds	r3, r7, r5
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	18db      	adds	r3, r3, r3
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	19bb      	adds	r3, r7, r6
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	210d      	movs	r1, #13
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	701a      	strb	r2, [r3, #0]

    // Only update if the state has actually changed to avoid double counting from noise
    // This also acts as a simple form of debounce.
    if (current_encoder_state != prev_encoder_state)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	187a      	adds	r2, r7, r1
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d018      	beq.n	80013f2 <HAL_GPIO_EXTI_Callback+0x8a>
            1,  0,  0, -1,  // 10 -> 00, 01 (invalid), 10, 11
            0, -1,  1,  0   // 11 -> 00 (invalid), 01, 10, 11
        };

        // Calculate lookup table index
        int index = (prev_encoder_state << 2) | current_encoder_state;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	009a      	lsls	r2, r3, #2
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]

        // Update encoder position based on the lookup table result
        if (index >= 0 && index < sizeof(lookup_table) / sizeof(lookup_table[0])) {
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0d      	blt.n	80013f2 <HAL_GPIO_EXTI_Callback+0x8a>
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_GPIO_EXTI_Callback+0x8a>
            encoder_position += lookup_table[index];
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_GPIO_EXTI_Callback+0xa4>)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	18d3      	adds	r3, r2, r3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	001a      	movs	r2, r3
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_GPIO_EXTI_Callback+0xa8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	18d2      	adds	r2, r2, r3
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_GPIO_EXTI_Callback+0xa8>)
 80013f0:	601a      	str	r2, [r3, #0]
        }
    }

    // Store current state for the next interrupt
    prev_encoder_state = current_encoder_state;
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013f4:	220d      	movs	r2, #13
 80013f6:	18ba      	adds	r2, r7, r2
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	701a      	strb	r2, [r3, #0]
}
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b005      	add	sp, #20
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	48000400 	.word	0x48000400
 8001408:	200000ac 	.word	0x200000ac
 800140c:	080037c4 	.word	0x080037c4
 8001410:	20000094 	.word	0x20000094

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141a:	f000 fac3 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141e:	f000 f8d9 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001422:	f000 f977 	bl	8001714 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001426:	f000 f915 	bl	8001654 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize PID controller (default to position control gains at start)
  PID_Init(&motorPID, KP_POS, KI_POS, KD_POS, (float)htim2.Init.Period, -(float)htim2.Init.Period);
 800142a:	4b5c      	ldr	r3, [pc, #368]	@ (800159c <main+0x188>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	0018      	movs	r0, r3
 8001430:	f7ff ff36 	bl	80012a0 <__aeabi_ui2f>
 8001434:	1c04      	adds	r4, r0, #0
 8001436:	4b59      	ldr	r3, [pc, #356]	@ (800159c <main+0x188>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff ff30 	bl	80012a0 <__aeabi_ui2f>
 8001440:	1c02      	adds	r2, r0, #0
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	061b      	lsls	r3, r3, #24
 8001446:	4053      	eors	r3, r2
 8001448:	4d55      	ldr	r5, [pc, #340]	@ (80015a0 <main+0x18c>)
 800144a:	4a56      	ldr	r2, [pc, #344]	@ (80015a4 <main+0x190>)
 800144c:	21fc      	movs	r1, #252	@ 0xfc
 800144e:	0589      	lsls	r1, r1, #22
 8001450:	4855      	ldr	r0, [pc, #340]	@ (80015a8 <main+0x194>)
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9400      	str	r4, [sp, #0]
 8001456:	1c2b      	adds	r3, r5, #0
 8001458:	f001 ffda 	bl	8003410 <PID_Init>

  // Start the PWM timer
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Assuming PWM is on TIM2 Channel 2
 800145c:	4b4f      	ldr	r3, [pc, #316]	@ (800159c <main+0x188>)
 800145e:	2104      	movs	r1, #4
 8001460:	0018      	movs	r0, r3
 8001462:	f001 faf5 	bl	8002a50 <HAL_TIM_PWM_Start>

  // Initialize encoder state for interrupt decoding
  prev_encoder_state = (HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_Pin) << 1) |
 8001466:	4b51      	ldr	r3, [pc, #324]	@ (80015ac <main+0x198>)
 8001468:	2140      	movs	r1, #64	@ 0x40
 800146a:	0018      	movs	r0, r3
 800146c:	f000 fd78 	bl	8001f60 <HAL_GPIO_ReadPin>
 8001470:	0003      	movs	r3, r0
 8001472:	b25b      	sxtb	r3, r3
 8001474:	18db      	adds	r3, r3, r3
 8001476:	b25c      	sxtb	r4, r3
                       HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_Pin);
 8001478:	4b4c      	ldr	r3, [pc, #304]	@ (80015ac <main+0x198>)
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	0018      	movs	r0, r3
 800147e:	f000 fd6f 	bl	8001f60 <HAL_GPIO_ReadPin>
 8001482:	0003      	movs	r3, r0
 8001484:	b25b      	sxtb	r3, r3
  prev_encoder_state = (HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_Pin) << 1) |
 8001486:	4323      	orrs	r3, r4
 8001488:	b25b      	sxtb	r3, r3
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b48      	ldr	r3, [pc, #288]	@ (80015b0 <main+0x19c>)
 800148e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
      // The encoder_position is updated asynchronously by HAL_GPIO_EXTI_Callback

      // Calculate time difference since last loop iteration (for dt)
      uint32_t current_loop_time = HAL_GetTick();
 8001490:	f000 fae2 	bl	8001a58 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]
      float dt_ms = (float)(current_loop_time - last_loop_time);
 8001498:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <main+0x1a0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fefd 	bl	80012a0 <__aeabi_ui2f>
 80014a6:	1c03      	adds	r3, r0, #0
 80014a8:	60bb      	str	r3, [r7, #8]
      last_loop_time = current_loop_time; // Update for the next iteration
 80014aa:	4b42      	ldr	r3, [pc, #264]	@ (80015b4 <main+0x1a0>)
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	601a      	str	r2, [r3, #0]

      float dt_sec = dt_ms / 1000.0f;
 80014b0:	4941      	ldr	r1, [pc, #260]	@ (80015b8 <main+0x1a4>)
 80014b2:	68b8      	ldr	r0, [r7, #8]
 80014b4:	f7ff f8f8 	bl	80006a8 <__aeabi_fdiv>
 80014b8:	1c03      	adds	r3, r0, #0
 80014ba:	607b      	str	r3, [r7, #4]
      if (dt_sec == 0.0f) { // Prevent division by zero if tick hasn't advanced
 80014bc:	2100      	movs	r1, #0
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7fe feba 	bl	8000238 <__aeabi_fcmpeq>
 80014c4:	1e03      	subs	r3, r0, #0
 80014c6:	d001      	beq.n	80014cc <main+0xb8>
          dt_sec = 0.001f; // Assume a small non-zero time
 80014c8:	4b36      	ldr	r3, [pc, #216]	@ (80015a4 <main+0x190>)
 80014ca:	607b      	str	r3, [r7, #4]
      }


      // Control Mode Logic (only POSITION_CONTROL is active here)
      switch (current_control_mode)
 80014cc:	4b3b      	ldr	r3, [pc, #236]	@ (80015bc <main+0x1a8>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d11e      	bne.n	8001512 <main+0xfe>
      {
          case POSITION_CONTROL:
              // Calculate position error
              current_error = (float)target_position - encoder_position;
 80014d4:	4b3a      	ldr	r3, [pc, #232]	@ (80015c0 <main+0x1ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fe91 	bl	8001200 <__aeabi_i2f>
 80014de:	1c04      	adds	r4, r0, #0
 80014e0:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <main+0x1b0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff fe8b 	bl	8001200 <__aeabi_i2f>
 80014ea:	1c03      	adds	r3, r0, #0
 80014ec:	1c19      	adds	r1, r3, #0
 80014ee:	1c20      	adds	r0, r4, #0
 80014f0:	f7ff fc02 	bl	8000cf8 <__aeabi_fsub>
 80014f4:	1c03      	adds	r3, r0, #0
 80014f6:	1c1a      	adds	r2, r3, #0
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <main+0x1b4>)
 80014fa:	601a      	str	r2, [r3, #0]
              // Compute PID output
              current_pid_output = PID_Compute(&motorPID, current_error);
 80014fc:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <main+0x1b4>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b29      	ldr	r3, [pc, #164]	@ (80015a8 <main+0x194>)
 8001502:	1c11      	adds	r1, r2, #0
 8001504:	0018      	movs	r0, r3
 8001506:	f001 ffa9 	bl	800345c <PID_Compute>
 800150a:	1c02      	adds	r2, r0, #0
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <main+0x1b8>)
 800150e:	601a      	str	r2, [r3, #0]
              break;
 8001510:	e010      	b.n	8001534 <main+0x120>

          case VELOCITY_CONTROL: // Not actively used in this setup
          case IDLE_MODE:        // Not actively used in this setup (unless Motor_StopControl() is called)
          default:
              // If somehow not in POSITION_CONTROL, ensure motor is off
              current_error = 0.0f;
 8001512:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <main+0x1b4>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
              current_pid_output = 0.0f;
 8001518:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <main+0x1b8>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
              current_velocity = 0.0f;
 800151e:	4b2c      	ldr	r3, [pc, #176]	@ (80015d0 <main+0x1bc>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
              Motor_SetPWM(0);
 8001524:	2300      	movs	r3, #0
 8001526:	1c18      	adds	r0, r3, #0
 8001528:	f001 ff46 	bl	80033b8 <Motor_SetPWM>
              Motor_SetDirection(MOTOR_STOP);
 800152c:	2000      	movs	r0, #0
 800152e:	f001 ff19 	bl	8003364 <Motor_SetDirection>
              break;
 8001532:	46c0      	nop			@ (mov r8, r8)
      }


      // Apply PID output to motor
      if (current_control_mode == POSITION_CONTROL) // Only control motor if in position control mode
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <main+0x1a8>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d12a      	bne.n	8001592 <main+0x17e>
      {
          if (current_pid_output > 0)
 800153c:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <main+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2100      	movs	r1, #0
 8001542:	1c18      	adds	r0, r3, #0
 8001544:	f7fe fe92 	bl	800026c <__aeabi_fcmpgt>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d008      	beq.n	800155e <main+0x14a>
          {
              Motor_SetDirection(MOTOR_FORWARD);
 800154c:	2001      	movs	r0, #1
 800154e:	f001 ff09 	bl	8003364 <Motor_SetDirection>
              Motor_SetPWM(current_pid_output);
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <main+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	1c18      	adds	r0, r3, #0
 8001558:	f001 ff2e 	bl	80033b8 <Motor_SetPWM>
 800155c:	e019      	b.n	8001592 <main+0x17e>
          }
          else if (current_pid_output < 0)
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <main+0x1b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2100      	movs	r1, #0
 8001564:	1c18      	adds	r0, r3, #0
 8001566:	f7fe fe6d 	bl	8000244 <__aeabi_fcmplt>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d00a      	beq.n	8001584 <main+0x170>
          {
              Motor_SetDirection(MOTOR_REVERSE);
 800156e:	2002      	movs	r0, #2
 8001570:	f001 fef8 	bl	8003364 <Motor_SetDirection>
              Motor_SetPWM(fabs(current_pid_output));
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <main+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	1c18      	adds	r0, r3, #0
 800157e:	f001 ff1b 	bl	80033b8 <Motor_SetPWM>
 8001582:	e006      	b.n	8001592 <main+0x17e>
          }
          else // current_pid_output is 0 or very close to 0
          {
              Motor_SetDirection(MOTOR_STOP);
 8001584:	2000      	movs	r0, #0
 8001586:	f001 feed 	bl	8003364 <Motor_SetDirection>
              Motor_SetPWM(0);
 800158a:	2300      	movs	r3, #0
 800158c:	1c18      	adds	r0, r3, #0
 800158e:	f001 ff13 	bl	80033b8 <Motor_SetPWM>
          }
      }

      HAL_Delay(10); // Maintain a consistent loop rate (100 Hz) for PID calculations
 8001592:	200a      	movs	r0, #10
 8001594:	f000 fa6a 	bl	8001a6c <HAL_Delay>
  {
 8001598:	e77a      	b.n	8001490 <main+0x7c>
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	2000002c 	.word	0x2000002c
 80015a0:	3c23d70a 	.word	0x3c23d70a
 80015a4:	3a83126f 	.word	0x3a83126f
 80015a8:	20000074 	.word	0x20000074
 80015ac:	48000400 	.word	0x48000400
 80015b0:	200000ac 	.word	0x200000ac
 80015b4:	200000a8 	.word	0x200000a8
 80015b8:	447a0000 	.word	0x447a0000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	2000009c 	.word	0x2000009c
 80015c4:	20000094 	.word	0x20000094
 80015c8:	200000a0 	.word	0x200000a0
 80015cc:	200000a4 	.word	0x200000a4
 80015d0:	20000098 	.word	0x20000098

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b093      	sub	sp, #76	@ 0x4c
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	2414      	movs	r4, #20
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	0018      	movs	r0, r3
 80015e0:	2334      	movs	r3, #52	@ 0x34
 80015e2:	001a      	movs	r2, r3
 80015e4:	2100      	movs	r1, #0
 80015e6:	f002 f80b 	bl	8003600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	0018      	movs	r0, r3
 80015ee:	2310      	movs	r3, #16
 80015f0:	001a      	movs	r2, r3
 80015f2:	2100      	movs	r1, #0
 80015f4:	f002 f804 	bl	8003600 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f8:	0021      	movs	r1, r4
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2202      	movs	r2, #2
 80015fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2201      	movs	r2, #1
 8001604:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2210      	movs	r2, #16
 800160a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800160c:	187b      	adds	r3, r7, r1
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001612:	187b      	adds	r3, r7, r1
 8001614:	0018      	movs	r0, r3
 8001616:	f000 fcf9 	bl	800200c <HAL_RCC_OscConfig>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800161e:	f000 f8e9 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	0018      	movs	r0, r3
 8001640:	f001 f86a 	bl	8002718 <HAL_RCC_ClockConfig>
 8001644:	1e03      	subs	r3, r0, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001648:	f000 f8d4 	bl	80017f4 <Error_Handler>
  }
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b013      	add	sp, #76	@ 0x4c
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	2320      	movs	r3, #32
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	0018      	movs	r0, r3
 8001660:	2308      	movs	r3, #8
 8001662:	001a      	movs	r2, r3
 8001664:	2100      	movs	r1, #0
 8001666:	f001 ffcb 	bl	8003600 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	0018      	movs	r0, r3
 800166e:	231c      	movs	r3, #28
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f001 ffc4 	bl	8003600 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001678:	4b24      	ldr	r3, [pc, #144]	@ (800170c <MX_TIM2_Init+0xb8>)
 800167a:	2280      	movs	r2, #128	@ 0x80
 800167c:	05d2      	lsls	r2, r2, #23
 800167e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <MX_TIM2_Init+0xb8>)
 8001682:	2207      	movs	r2, #7
 8001684:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <MX_TIM2_Init+0xb8>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_TIM2_Init+0xb8>)
 800168e:	4a20      	ldr	r2, [pc, #128]	@ (8001710 <MX_TIM2_Init+0xbc>)
 8001690:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <MX_TIM2_Init+0xb8>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_TIM2_Init+0xb8>)
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800169e:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_TIM2_Init+0xb8>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f001 f985 	bl	80029b0 <HAL_TIM_PWM_Init>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016aa:	f000 f8a3 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	2120      	movs	r1, #32
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016bc:	187a      	adds	r2, r7, r1
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_TIM2_Init+0xb8>)
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 fdf0 	bl	80032a8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80016cc:	f000 f892 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2260      	movs	r2, #96	@ 0x60
 80016d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e8:	1d39      	adds	r1, r7, #4
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_TIM2_Init+0xb8>)
 80016ec:	2204      	movs	r2, #4
 80016ee:	0018      	movs	r0, r3
 80016f0:	f001 fa66 	bl	8002bc0 <HAL_TIM_PWM_ConfigChannel>
 80016f4:	1e03      	subs	r3, r0, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80016f8:	f000 f87c 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <MX_TIM2_Init+0xb8>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f000 f8be 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b00a      	add	sp, #40	@ 0x28
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000002c 	.word	0x2000002c
 8001710:	000003e7 	.word	0x000003e7

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	240c      	movs	r4, #12
 800171c:	193b      	adds	r3, r7, r4
 800171e:	0018      	movs	r0, r3
 8001720:	2314      	movs	r3, #20
 8001722:	001a      	movs	r2, r3
 8001724:	2100      	movs	r1, #0
 8001726:	f001 ff6b 	bl	8003600 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <MX_GPIO_Init+0xd8>)
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <MX_GPIO_Init+0xd8>)
 8001730:	2180      	movs	r1, #128	@ 0x80
 8001732:	03c9      	lsls	r1, r1, #15
 8001734:	430a      	orrs	r2, r1
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <MX_GPIO_Init+0xd8>)
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	03db      	lsls	r3, r3, #15
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <MX_GPIO_Init+0xd8>)
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <MX_GPIO_Init+0xd8>)
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	0289      	lsls	r1, r1, #10
 8001750:	430a      	orrs	r2, r1
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <MX_GPIO_Init+0xd8>)
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	029b      	lsls	r3, r3, #10
 800175c:	4013      	ands	r3, r2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <MX_GPIO_Init+0xd8>)
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_GPIO_Init+0xd8>)
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	02c9      	lsls	r1, r1, #11
 800176c:	430a      	orrs	r2, r1
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_GPIO_Init+0xd8>)
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	02db      	lsls	r3, r3, #11
 8001778:	4013      	ands	r3, r2
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 800177e:	2390      	movs	r3, #144	@ 0x90
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	2200      	movs	r2, #0
 8001784:	2120      	movs	r1, #32
 8001786:	0018      	movs	r0, r3
 8001788:	f000 fc07 	bl	8001f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin;
 800178c:	193b      	adds	r3, r7, r4
 800178e:	2220      	movs	r2, #32
 8001790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	193b      	adds	r3, r7, r4
 8001794:	2201      	movs	r2, #1
 8001796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	193b      	adds	r3, r7, r4
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_IN1_GPIO_Port, &GPIO_InitStruct);
 80017a4:	193a      	adds	r2, r7, r4
 80017a6:	2390      	movs	r3, #144	@ 0x90
 80017a8:	05db      	lsls	r3, r3, #23
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 fa5f 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80017b2:	0021      	movs	r1, r4
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	22c0      	movs	r2, #192	@ 0xc0
 80017b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	22c4      	movs	r2, #196	@ 0xc4
 80017be:	0392      	lsls	r2, r2, #14
 80017c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2201      	movs	r2, #1
 80017c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <MX_GPIO_Init+0xdc>)
 80017cc:	0019      	movs	r1, r3
 80017ce:	0010      	movs	r0, r2
 80017d0:	f000 fa4e 	bl	8001c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2103      	movs	r1, #3
 80017d8:	2007      	movs	r0, #7
 80017da:	f000 fa17 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017de:	2007      	movs	r0, #7
 80017e0:	f000 fa29 	bl	8001c36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017e4:	46c0      	nop			@ (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b009      	add	sp, #36	@ 0x24
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	48000400 	.word	0x48000400

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	46c0      	nop			@ (mov r8, r8)
 80017fe:	e7fd      	b.n	80017fc <Error_Handler+0x8>

08001800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_MspInit+0x44>)
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_MspInit+0x44>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	619a      	str	r2, [r3, #24]
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <HAL_MspInit+0x44>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_MspInit+0x44>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_MspInit+0x44>)
 8001824:	2180      	movs	r1, #128	@ 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_MspInit+0x44>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	05db      	lsls	r3, r3, #23
 8001858:	429a      	cmp	r2, r3
 800185a:	d10b      	bne.n	8001874 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185c:	4b07      	ldr	r3, [pc, #28]	@ (800187c <HAL_TIM_PWM_MspInit+0x34>)
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_TIM_PWM_MspInit+0x34>)
 8001862:	2101      	movs	r1, #1
 8001864:	430a      	orrs	r2, r1
 8001866:	61da      	str	r2, [r3, #28]
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <HAL_TIM_PWM_MspInit+0x34>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2201      	movs	r2, #1
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	240c      	movs	r4, #12
 800188a:	193b      	adds	r3, r7, r4
 800188c:	0018      	movs	r0, r3
 800188e:	2314      	movs	r3, #20
 8001890:	001a      	movs	r2, r3
 8001892:	2100      	movs	r1, #0
 8001894:	f001 feb4 	bl	8003600 <memset>
  if(htim->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	05db      	lsls	r3, r3, #23
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d124      	bne.n	80018ee <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_TIM_MspPostInit+0x78>)
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_TIM_MspPostInit+0x78>)
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	0289      	lsls	r1, r1, #10
 80018ae:	430a      	orrs	r2, r1
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_TIM_MspPostInit+0x78>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	2380      	movs	r3, #128	@ 0x80
 80018b8:	029b      	lsls	r3, r3, #10
 80018ba:	4013      	ands	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018c0:	0021      	movs	r1, r4
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2202      	movs	r2, #2
 80018c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2202      	movs	r2, #2
 80018cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2202      	movs	r2, #2
 80018de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	187a      	adds	r2, r7, r1
 80018e2:	2390      	movs	r3, #144	@ 0x90
 80018e4:	05db      	lsls	r3, r3, #23
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 f9c1 	bl	8001c70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b009      	add	sp, #36	@ 0x24
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	40021000 	.word	0x40021000

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	46c0      	nop			@ (mov r8, r8)
 8001902:	e7fd      	b.n	8001900 <NMI_Handler+0x4>

08001904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	e7fd      	b.n	8001908 <HardFault_Handler+0x4>

0800190c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */
  /* USER CODE END SVC_IRQn 1 */
}
 8001910:	46c0      	nop			@ (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f886 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001932:	2040      	movs	r0, #64	@ 0x40
 8001934:	f000 fb4e 	bl	8001fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8001938:	2080      	movs	r0, #128	@ 0x80
 800193a:	f000 fb4b 	bl	8001fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001950:	480d      	ldr	r0, [pc, #52]	@ (8001988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001952:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001954:	f7ff fff6 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopForever+0x6>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopForever+0xe>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopForever+0x16>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800197e:	f001 fe47 	bl	8003610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001982:	f7ff fd47 	bl	8001414 <main>

08001986 <LoopForever>:

LoopForever:
    b LoopForever
 8001986:	e7fe      	b.n	8001986 <LoopForever>
  ldr   r0, =_estack
 8001988:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001994:	0800380c 	.word	0x0800380c
  ldr r2, =_sbss
 8001998:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800199c:	200000b4 	.word	0x200000b4

080019a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_COMP_IRQHandler>
	...

080019a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <HAL_Init+0x24>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_Init+0x24>)
 80019ae:	2110      	movs	r1, #16
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f809 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ba:	f7ff ff21 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <HAL_InitTick+0x5c>)
 80019d6:	681c      	ldr	r4, [r3, #0]
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <HAL_InitTick+0x60>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	0019      	movs	r1, r3
 80019de:	23fa      	movs	r3, #250	@ 0xfa
 80019e0:	0098      	lsls	r0, r3, #2
 80019e2:	f7fe fb91 	bl	8000108 <__udivsi3>
 80019e6:	0003      	movs	r3, r0
 80019e8:	0019      	movs	r1, r3
 80019ea:	0020      	movs	r0, r4
 80019ec:	f7fe fb8c 	bl	8000108 <__udivsi3>
 80019f0:	0003      	movs	r3, r0
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 f92f 	bl	8001c56 <HAL_SYSTICK_Config>
 80019f8:	1e03      	subs	r3, r0, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e00f      	b.n	8001a20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d80b      	bhi.n	8001a1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	425b      	negs	r3, r3
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f8fc 	bl	8001c0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_InitTick+0x64>)
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b003      	add	sp, #12
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	2000000c 	.word	0x2000000c
 8001a30:	20000008 	.word	0x20000008

08001a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_IncTick+0x1c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <HAL_IncTick+0x20>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	18d2      	adds	r2, r2, r3
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_IncTick+0x20>)
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	2000000c 	.word	0x2000000c
 8001a54:	200000b0 	.word	0x200000b0

08001a58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	@ (8001a68 <HAL_GetTick+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	200000b0 	.word	0x200000b0

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3301      	adds	r3, #1
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	189b      	adds	r3, r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	f7ff ffe0 	bl	8001a58 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b004      	add	sp, #16
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ac6:	d809      	bhi.n	8001adc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	231f      	movs	r3, #31
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <__NVIC_EnableIRQ+0x30>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4091      	lsls	r1, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
  }
}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b7f      	cmp	r3, #127	@ 0x7f
 8001afc:	d828      	bhi.n	8001b50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afe:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	33c0      	adds	r3, #192	@ 0xc0
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	589b      	ldr	r3, [r3, r2]
 8001b0e:	1dfa      	adds	r2, r7, #7
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	0011      	movs	r1, r2
 8001b14:	2203      	movs	r2, #3
 8001b16:	400a      	ands	r2, r1
 8001b18:	00d2      	lsls	r2, r2, #3
 8001b1a:	21ff      	movs	r1, #255	@ 0xff
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	000a      	movs	r2, r1
 8001b20:	43d2      	mvns	r2, r2
 8001b22:	401a      	ands	r2, r3
 8001b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	22ff      	movs	r2, #255	@ 0xff
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	2303      	movs	r3, #3
 8001b36:	4003      	ands	r3, r0
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	481f      	ldr	r0, [pc, #124]	@ (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	430a      	orrs	r2, r1
 8001b48:	33c0      	adds	r3, #192	@ 0xc0
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b4e:	e031      	b.n	8001bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	0019      	movs	r1, r3
 8001b58:	230f      	movs	r3, #15
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	3b08      	subs	r3, #8
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3306      	adds	r3, #6
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	3304      	adds	r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1dfa      	adds	r2, r7, #7
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	0011      	movs	r1, r2
 8001b70:	2203      	movs	r2, #3
 8001b72:	400a      	ands	r2, r1
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	21ff      	movs	r1, #255	@ 0xff
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	401a      	ands	r2, r3
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2303      	movs	r3, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4809      	ldr	r0, [pc, #36]	@ (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	4023      	ands	r3, r4
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	3306      	adds	r3, #6
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	18c3      	adds	r3, r0, r3
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	46c0      	nop			@ (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b003      	add	sp, #12
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1e5a      	subs	r2, r3, #1
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	045b      	lsls	r3, r3, #17
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d301      	bcc.n	8001bdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e010      	b.n	8001bfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <SysTick_Config+0x44>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	3a01      	subs	r2, #1
 8001be2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be4:	2301      	movs	r3, #1
 8001be6:	425b      	negs	r3, r3
 8001be8:	2103      	movs	r1, #3
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff ff7c 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <SysTick_Config+0x44>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SysTick_Config+0x44>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	210f      	movs	r1, #15
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ff33 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff ffaf 	bl	8001bc4 <SysTick_Config>
 8001c66:	0003      	movs	r3, r0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	e155      	b.n	8001f2c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4091      	lsls	r1, r2
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d100      	bne.n	8001c98 <HAL_GPIO_Init+0x28>
 8001c96:	e146      	b.n	8001f26 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d005      	beq.n	8001cb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d130      	bne.n	8001d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	0013      	movs	r3, r2
 8001cc0:	43da      	mvns	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2203      	movs	r2, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d017      	beq.n	8001d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2203      	movs	r2, #3
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d123      	bne.n	8001da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	58d3      	ldr	r3, [r2, r3]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	409a      	lsls	r2, r3
 8001d74:	0013      	movs	r3, r2
 8001d76:	43da      	mvns	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2107      	movs	r1, #7
 8001d86:	400b      	ands	r3, r1
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	6939      	ldr	r1, [r7, #16]
 8001da0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	23c0      	movs	r3, #192	@ 0xc0
 8001ddc:	029b      	lsls	r3, r3, #10
 8001dde:	4013      	ands	r3, r2
 8001de0:	d100      	bne.n	8001de4 <HAL_GPIO_Init+0x174>
 8001de2:	e0a0      	b.n	8001f26 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de4:	4b57      	ldr	r3, [pc, #348]	@ (8001f44 <HAL_GPIO_Init+0x2d4>)
 8001de6:	699a      	ldr	r2, [r3, #24]
 8001de8:	4b56      	ldr	r3, [pc, #344]	@ (8001f44 <HAL_GPIO_Init+0x2d4>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	619a      	str	r2, [r3, #24]
 8001df0:	4b54      	ldr	r3, [pc, #336]	@ (8001f44 <HAL_GPIO_Init+0x2d4>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dfc:	4a52      	ldr	r2, [pc, #328]	@ (8001f48 <HAL_GPIO_Init+0x2d8>)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	589b      	ldr	r3, [r3, r2]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4013      	ands	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	409a      	lsls	r2, r3
 8001e16:	0013      	movs	r3, r2
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	2390      	movs	r3, #144	@ 0x90
 8001e24:	05db      	lsls	r3, r3, #23
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a47      	ldr	r2, [pc, #284]	@ (8001f4c <HAL_GPIO_Init+0x2dc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x1ea>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a46      	ldr	r2, [pc, #280]	@ (8001f50 <HAL_GPIO_Init+0x2e0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x1e6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a45      	ldr	r2, [pc, #276]	@ (8001f54 <HAL_GPIO_Init+0x2e4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x1e2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a44      	ldr	r2, [pc, #272]	@ (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x1de>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e008      	b.n	8001e60 <HAL_GPIO_Init+0x1f0>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x1f0>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x1f0>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x1f0>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x1f0>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	2103      	movs	r1, #3
 8001e64:	400a      	ands	r2, r1
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e70:	4935      	ldr	r1, [pc, #212]	@ (8001f48 <HAL_GPIO_Init+0x2d8>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7e:	4b37      	ldr	r3, [pc, #220]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	035b      	lsls	r3, r3, #13
 8001e96:	4013      	ands	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	039b      	lsls	r3, r3, #14
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ecc:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001ed2:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001efc:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	025b      	lsls	r3, r3, #9
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	40da      	lsrs	r2, r3
 8001f34:	1e13      	subs	r3, r2, #0
 8001f36:	d000      	beq.n	8001f3a <HAL_GPIO_Init+0x2ca>
 8001f38:	e6a2      	b.n	8001c80 <HAL_GPIO_Init+0x10>
  } 
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b006      	add	sp, #24
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	48000400 	.word	0x48000400
 8001f50:	48000800 	.word	0x48000800
 8001f54:	48000c00 	.word	0x48000c00
 8001f58:	48001000 	.word	0x48001000
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	000a      	movs	r2, r1
 8001f6a:	1cbb      	adds	r3, r7, #2
 8001f6c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	1cba      	adds	r2, r7, #2
 8001f74:	8812      	ldrh	r2, [r2, #0]
 8001f76:	4013      	ands	r3, r2
 8001f78:	d004      	beq.n	8001f84 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f7a:	230f      	movs	r3, #15
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e003      	b.n	8001f8c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f84:	230f      	movs	r3, #15
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	781b      	ldrb	r3, [r3, #0]
  }
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b004      	add	sp, #16
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	0008      	movs	r0, r1
 8001fa4:	0011      	movs	r1, r2
 8001fa6:	1cbb      	adds	r3, r7, #2
 8001fa8:	1c02      	adds	r2, r0, #0
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	1c7b      	adds	r3, r7, #1
 8001fae:	1c0a      	adds	r2, r1, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb2:	1c7b      	adds	r3, r7, #1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fba:	1cbb      	adds	r3, r7, #2
 8001fbc:	881a      	ldrh	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc2:	e003      	b.n	8001fcc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc4:	1cbb      	adds	r3, r7, #2
 8001fc6:	881a      	ldrh	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	0002      	movs	r2, r0
 8001fdc:	1dbb      	adds	r3, r7, #6
 8001fde:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	1dba      	adds	r2, r7, #6
 8001fe6:	8812      	ldrh	r2, [r2, #0]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d008      	beq.n	8001ffe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001fee:	1dba      	adds	r2, r7, #6
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	1dbb      	adds	r3, r7, #6
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7ff f9b5 	bl	8001368 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	40010400 	.word	0x40010400

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f000 fb76 	bl	800270c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	d100      	bne.n	800202c <HAL_RCC_OscConfig+0x20>
 800202a:	e08e      	b.n	800214a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800202c:	4bc5      	ldr	r3, [pc, #788]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	220c      	movs	r2, #12
 8002032:	4013      	ands	r3, r2
 8002034:	2b04      	cmp	r3, #4
 8002036:	d00e      	beq.n	8002056 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002038:	4bc2      	ldr	r3, [pc, #776]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	220c      	movs	r2, #12
 800203e:	4013      	ands	r3, r2
 8002040:	2b08      	cmp	r3, #8
 8002042:	d117      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
 8002044:	4bbf      	ldr	r3, [pc, #764]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	23c0      	movs	r3, #192	@ 0xc0
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	401a      	ands	r2, r3
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	429a      	cmp	r2, r3
 8002054:	d10e      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4bbb      	ldr	r3, [pc, #748]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	029b      	lsls	r3, r3, #10
 800205e:	4013      	ands	r3, r2
 8002060:	d100      	bne.n	8002064 <HAL_RCC_OscConfig+0x58>
 8002062:	e071      	b.n	8002148 <HAL_RCC_OscConfig+0x13c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d000      	beq.n	800206e <HAL_RCC_OscConfig+0x62>
 800206c:	e06c      	b.n	8002148 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 fb4c 	bl	800270c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x80>
 800207c:	4bb1      	ldr	r3, [pc, #708]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4bb0      	ldr	r3, [pc, #704]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002082:	2180      	movs	r1, #128	@ 0x80
 8002084:	0249      	lsls	r1, r1, #9
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e02f      	b.n	80020ec <HAL_RCC_OscConfig+0xe0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_OscConfig+0xa2>
 8002094:	4bab      	ldr	r3, [pc, #684]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4baa      	ldr	r3, [pc, #680]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800209a:	49ab      	ldr	r1, [pc, #684]	@ (8002348 <HAL_RCC_OscConfig+0x33c>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	4ba8      	ldr	r3, [pc, #672]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4ba7      	ldr	r3, [pc, #668]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020a6:	49a9      	ldr	r1, [pc, #676]	@ (800234c <HAL_RCC_OscConfig+0x340>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e01e      	b.n	80020ec <HAL_RCC_OscConfig+0xe0>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10e      	bne.n	80020d4 <HAL_RCC_OscConfig+0xc8>
 80020b6:	4ba3      	ldr	r3, [pc, #652]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4ba2      	ldr	r3, [pc, #648]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	02c9      	lsls	r1, r1, #11
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	4b9f      	ldr	r3, [pc, #636]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b9e      	ldr	r3, [pc, #632]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020ca:	2180      	movs	r1, #128	@ 0x80
 80020cc:	0249      	lsls	r1, r1, #9
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xe0>
 80020d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b9a      	ldr	r3, [pc, #616]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020da:	499b      	ldr	r1, [pc, #620]	@ (8002348 <HAL_RCC_OscConfig+0x33c>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	4b98      	ldr	r3, [pc, #608]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b97      	ldr	r3, [pc, #604]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80020e6:	4999      	ldr	r1, [pc, #612]	@ (800234c <HAL_RCC_OscConfig+0x340>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fcb0 	bl	8001a58 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fe:	f7ff fcab 	bl	8001a58 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	@ 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e2fd      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002110:	4b8c      	ldr	r3, [pc, #560]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	4013      	ands	r3, r2
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0xf2>
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fc9b 	bl	8001a58 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fc96 	bl	8001a58 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	@ 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e2e8      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	4b82      	ldr	r3, [pc, #520]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	4013      	ands	r3, r2
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x11c>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d100      	bne.n	8002156 <HAL_RCC_OscConfig+0x14a>
 8002154:	e06c      	b.n	8002230 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002156:	4b7b      	ldr	r3, [pc, #492]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	220c      	movs	r2, #12
 800215c:	4013      	ands	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002160:	4b78      	ldr	r3, [pc, #480]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	220c      	movs	r2, #12
 8002166:	4013      	ands	r3, r2
 8002168:	2b08      	cmp	r3, #8
 800216a:	d11f      	bne.n	80021ac <HAL_RCC_OscConfig+0x1a0>
 800216c:	4b75      	ldr	r3, [pc, #468]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	025b      	lsls	r3, r3, #9
 8002174:	401a      	ands	r2, r3
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	429a      	cmp	r2, r3
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	4b71      	ldr	r3, [pc, #452]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x188>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e2bb      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b6b      	ldr	r3, [pc, #428]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	22f8      	movs	r2, #248	@ 0xf8
 800219a:	4393      	bics	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00da      	lsls	r2, r3, #3
 80021a4:	4b67      	ldr	r3, [pc, #412]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	e041      	b.n	8002230 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d024      	beq.n	80021fe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b62      	ldr	r3, [pc, #392]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc4a 	bl	8001a58 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff fc45 	bl	8001a58 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e297      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d0f1      	beq.n	80021ca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b57      	ldr	r3, [pc, #348]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	22f8      	movs	r2, #248	@ 0xf8
 80021ec:	4393      	bics	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	00da      	lsls	r2, r3, #3
 80021f6:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e018      	b.n	8002230 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b51      	ldr	r3, [pc, #324]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002204:	2101      	movs	r1, #1
 8002206:	438a      	bics	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff fc25 	bl	8001a58 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002214:	f7ff fc20 	bl	8001a58 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e272      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d1f1      	bne.n	8002214 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2208      	movs	r2, #8
 8002236:	4013      	ands	r3, r2
 8002238:	d036      	beq.n	80022a8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d019      	beq.n	8002276 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b40      	ldr	r3, [pc, #256]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002246:	4b3f      	ldr	r3, [pc, #252]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002248:	2101      	movs	r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7ff fc03 	bl	8001a58 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7ff fbfe 	bl	8001a58 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e250      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d0f1      	beq.n	8002258 <HAL_RCC_OscConfig+0x24c>
 8002274:	e018      	b.n	80022a8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b33      	ldr	r3, [pc, #204]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002278:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800227a:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800227c:	2101      	movs	r1, #1
 800227e:	438a      	bics	r2, r1
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff fbe9 	bl	8001a58 <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff fbe4 	bl	8001a58 <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e236      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229e:	4b29      	ldr	r3, [pc, #164]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d1f1      	bne.n	800228c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2204      	movs	r2, #4
 80022ae:	4013      	ands	r3, r2
 80022b0:	d100      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2a8>
 80022b2:	e0b5      	b.n	8002420 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b4:	201f      	movs	r0, #31
 80022b6:	183b      	adds	r3, r7, r0
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022bc:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	d110      	bne.n	80022ea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80022ce:	2180      	movs	r1, #128	@ 0x80
 80022d0:	0549      	lsls	r1, r1, #21
 80022d2:	430a      	orrs	r2, r1
 80022d4:	61da      	str	r2, [r3, #28]
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	055b      	lsls	r3, r3, #21
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022e4:	183b      	adds	r3, r7, r0
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_OscConfig+0x344>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b16      	ldr	r3, [pc, #88]	@ (8002350 <HAL_RCC_OscConfig+0x344>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_RCC_OscConfig+0x344>)
 80022fc:	2180      	movs	r1, #128	@ 0x80
 80022fe:	0049      	lsls	r1, r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002304:	f7ff fba8 	bl	8001a58 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7ff fba3 	bl	8001a58 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	@ 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1f5      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <HAL_RCC_OscConfig+0x344>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10f      	bne.n	8002354 <HAL_RCC_OscConfig+0x348>
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	4b02      	ldr	r3, [pc, #8]	@ (8002344 <HAL_RCC_OscConfig+0x338>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	621a      	str	r2, [r3, #32]
 8002340:	e036      	b.n	80023b0 <HAL_RCC_OscConfig+0x3a4>
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	40021000 	.word	0x40021000
 8002348:	fffeffff 	.word	0xfffeffff
 800234c:	fffbffff 	.word	0xfffbffff
 8002350:	40007000 	.word	0x40007000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x36a>
 800235c:	4bca      	ldr	r3, [pc, #808]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	4bc9      	ldr	r3, [pc, #804]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002362:	2101      	movs	r1, #1
 8002364:	438a      	bics	r2, r1
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	4bc7      	ldr	r3, [pc, #796]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	4bc6      	ldr	r3, [pc, #792]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800236e:	2104      	movs	r1, #4
 8002370:	438a      	bics	r2, r1
 8002372:	621a      	str	r2, [r3, #32]
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x3a4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x38c>
 800237e:	4bc2      	ldr	r3, [pc, #776]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	4bc1      	ldr	r3, [pc, #772]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002384:	2104      	movs	r1, #4
 8002386:	430a      	orrs	r2, r1
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	4bbf      	ldr	r3, [pc, #764]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800238c:	6a1a      	ldr	r2, [r3, #32]
 800238e:	4bbe      	ldr	r3, [pc, #760]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002390:	2101      	movs	r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x3a4>
 8002398:	4bbb      	ldr	r3, [pc, #748]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	4bba      	ldr	r3, [pc, #744]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	621a      	str	r2, [r3, #32]
 80023a4:	4bb8      	ldr	r3, [pc, #736]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	4bb7      	ldr	r3, [pc, #732]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	2104      	movs	r1, #4
 80023ac:	438a      	bics	r2, r1
 80023ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d014      	beq.n	80023e2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fb4e 	bl	8001a58 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e009      	b.n	80023d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7ff fb49 	bl	8001a58 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4aaf      	ldr	r2, [pc, #700]	@ (800268c <HAL_RCC_OscConfig+0x680>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e19a      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4bac      	ldr	r3, [pc, #688]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x3b6>
 80023e0:	e013      	b.n	800240a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff fb39 	bl	8001a58 <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ea:	e009      	b.n	8002400 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7ff fb34 	bl	8001a58 <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	4aa5      	ldr	r2, [pc, #660]	@ (800268c <HAL_RCC_OscConfig+0x680>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e185      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	4ba1      	ldr	r3, [pc, #644]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	2202      	movs	r2, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240a:	231f      	movs	r3, #31
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b9c      	ldr	r3, [pc, #624]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	4b9b      	ldr	r3, [pc, #620]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800241a:	499d      	ldr	r1, [pc, #628]	@ (8002690 <HAL_RCC_OscConfig+0x684>)
 800241c:	400a      	ands	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	4013      	ands	r3, r2
 8002428:	d063      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d12a      	bne.n	8002488 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002432:	4b95      	ldr	r3, [pc, #596]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002436:	4b94      	ldr	r3, [pc, #592]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002438:	2104      	movs	r1, #4
 800243a:	430a      	orrs	r2, r1
 800243c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800243e:	4b92      	ldr	r3, [pc, #584]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002442:	4b91      	ldr	r3, [pc, #580]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002444:	2101      	movs	r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff fb05 	bl	8001a58 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002454:	f7ff fb00 	bl	8001a58 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e152      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002466:	4b88      	ldr	r3, [pc, #544]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	d0f1      	beq.n	8002454 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002470:	4b85      	ldr	r3, [pc, #532]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002474:	22f8      	movs	r2, #248	@ 0xf8
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	00da      	lsls	r2, r3, #3
 8002480:	4b81      	ldr	r3, [pc, #516]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002482:	430a      	orrs	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
 8002486:	e034      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	3305      	adds	r3, #5
 800248e:	d111      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002490:	4b7d      	ldr	r3, [pc, #500]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002494:	4b7c      	ldr	r3, [pc, #496]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002496:	2104      	movs	r1, #4
 8002498:	438a      	bics	r2, r1
 800249a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800249c:	4b7a      	ldr	r3, [pc, #488]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800249e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a0:	22f8      	movs	r2, #248	@ 0xf8
 80024a2:	4393      	bics	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	00da      	lsls	r2, r3, #3
 80024ac:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024b2:	e01e      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024b4:	4b74      	ldr	r3, [pc, #464]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024b8:	4b73      	ldr	r3, [pc, #460]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024ba:	2104      	movs	r1, #4
 80024bc:	430a      	orrs	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024c0:	4b71      	ldr	r3, [pc, #452]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c4:	4b70      	ldr	r3, [pc, #448]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7ff fac4 	bl	8001a58 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024d6:	f7ff fabf 	bl	8001a58 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e111      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024e8:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d1f1      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	4013      	ands	r3, r2
 80024fa:	d05c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024fc:	4b62      	ldr	r3, [pc, #392]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	220c      	movs	r2, #12
 8002502:	4013      	ands	r3, r2
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d00e      	beq.n	8002526 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002508:	4b5f      	ldr	r3, [pc, #380]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	220c      	movs	r2, #12
 800250e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002510:	2b08      	cmp	r3, #8
 8002512:	d114      	bne.n	800253e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002514:	4b5c      	ldr	r3, [pc, #368]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	23c0      	movs	r3, #192	@ 0xc0
 800251a:	025b      	lsls	r3, r3, #9
 800251c:	401a      	ands	r2, r3
 800251e:	23c0      	movs	r3, #192	@ 0xc0
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	429a      	cmp	r2, r3
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002526:	4b58      	ldr	r3, [pc, #352]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	4013      	ands	r3, r2
 8002530:	d040      	beq.n	80025b4 <HAL_RCC_OscConfig+0x5a8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d03c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0e6      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01b      	beq.n	800257e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002546:	4b50      	ldr	r3, [pc, #320]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	0249      	lsls	r1, r1, #9
 8002550:	430a      	orrs	r2, r1
 8002552:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff fa80 	bl	8001a58 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255e:	f7ff fa7b 	bl	8001a58 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0cd      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002570:	4b45      	ldr	r3, [pc, #276]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	4013      	ands	r3, r2
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x552>
 800257c:	e01b      	b.n	80025b6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800257e:	4b42      	ldr	r3, [pc, #264]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002582:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002584:	4943      	ldr	r1, [pc, #268]	@ (8002694 <HAL_RCC_OscConfig+0x688>)
 8002586:	400a      	ands	r2, r1
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fa65 	bl	8001a58 <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002594:	f7ff fa60 	bl	8001a58 <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0b2      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025a6:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	4013      	ands	r3, r2
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x588>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025b4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d100      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5b4>
 80025be:	e0a4      	b.n	800270a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	220c      	movs	r2, #12
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x5c2>
 80025cc:	e078      	b.n	80026c0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d14c      	bne.n	8002670 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025dc:	492e      	ldr	r1, [pc, #184]	@ (8002698 <HAL_RCC_OscConfig+0x68c>)
 80025de:	400a      	ands	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fa39 	bl	8001a58 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff fa34 	bl	8001a58 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e086      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	049b      	lsls	r3, r3, #18
 8002606:	4013      	ands	r3, r2
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260a:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260e:	220f      	movs	r2, #15
 8002610:	4393      	bics	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800261a:	430a      	orrs	r2, r1
 800261c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a1e      	ldr	r2, [pc, #120]	@ (800269c <HAL_RCC_OscConfig+0x690>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	431a      	orrs	r2, r3
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	0449      	lsls	r1, r1, #17
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7ff fa07 	bl	8001a58 <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff fa02 	bl	8001a58 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e054      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	049b      	lsls	r3, r3, #18
 800266a:	4013      	ands	r3, r2
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x644>
 800266e:	e04c      	b.n	800270a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002676:	4908      	ldr	r1, [pc, #32]	@ (8002698 <HAL_RCC_OscConfig+0x68c>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff f9ec 	bl	8001a58 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x6a6>
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	40021000 	.word	0x40021000
 800268c:	00001388 	.word	0x00001388
 8002690:	efffffff 	.word	0xefffffff
 8002694:	fffeffff 	.word	0xfffeffff
 8002698:	feffffff 	.word	0xfeffffff
 800269c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7ff f9da 	bl	8001a58 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e02c      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_RCC_OscConfig+0x708>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	049b      	lsls	r3, r3, #18
 80026ba:	4013      	ands	r3, r2
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x694>
 80026be:	e024      	b.n	800270a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e01f      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_RCC_OscConfig+0x708>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HAL_RCC_OscConfig+0x708>)
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	23c0      	movs	r3, #192	@ 0xc0
 80026dc:	025b      	lsls	r3, r3, #9
 80026de:	401a      	ands	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d10e      	bne.n	8002706 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	220f      	movs	r2, #15
 80026ec:	401a      	ands	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	23f0      	movs	r3, #240	@ 0xf0
 80026fa:	039b      	lsls	r3, r3, #14
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b008      	add	sp, #32
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0bf      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2201      	movs	r2, #1
 8002732:	4013      	ands	r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d911      	bls.n	800275e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b5e      	ldr	r3, [pc, #376]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	4393      	bics	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	4b5b      	ldr	r3, [pc, #364]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274c:	4b59      	ldr	r3, [pc, #356]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0a6      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d015      	beq.n	8002794 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2204      	movs	r2, #4
 800276e:	4013      	ands	r3, r2
 8002770:	d006      	beq.n	8002780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002772:	4b51      	ldr	r3, [pc, #324]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4b50      	ldr	r3, [pc, #320]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002778:	21e0      	movs	r1, #224	@ 0xe0
 800277a:	00c9      	lsls	r1, r1, #3
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b4d      	ldr	r3, [pc, #308]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	22f0      	movs	r2, #240	@ 0xf0
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	4b4a      	ldr	r3, [pc, #296]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	d04c      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b44      	ldr	r3, [pc, #272]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	d120      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07a      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	049b      	lsls	r3, r3, #18
 80027c6:	4013      	ands	r3, r2
 80027c8:	d114      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06e      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027d6:	4b38      	ldr	r3, [pc, #224]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	4013      	ands	r3, r2
 80027e0:	d108      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e062      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e05b      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f4:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	4393      	bics	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7ff f926 	bl	8001a58 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002810:	e009      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002812:	f7ff f921 	bl	8001a58 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	4a27      	ldr	r2, [pc, #156]	@ (80028bc <HAL_RCC_ClockConfig+0x1a4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e042      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	220c      	movs	r2, #12
 800282c:	401a      	ands	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1ec      	bne.n	8002812 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d211      	bcs.n	800286a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	4393      	bics	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002858:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e020      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	4013      	ands	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a11      	ldr	r2, [pc, #68]	@ (80028c0 <HAL_RCC_ClockConfig+0x1a8>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002888:	f000 f820 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800288c:	0001      	movs	r1, r0
 800288e:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	220f      	movs	r2, #15
 8002896:	4013      	ands	r3, r2
 8002898:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <HAL_RCC_ClockConfig+0x1ac>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	000a      	movs	r2, r1
 800289e:	40da      	lsrs	r2, r3
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b0>)
 80028a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f7ff f891 	bl	80019cc <HAL_InitTick>
  
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	00001388 	.word	0x00001388
 80028c0:	fffff8ff 	.word	0xfffff8ff
 80028c4:	080037d4 	.word	0x080037d4
 80028c8:	20000004 	.word	0x20000004

080028cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028e6:	4b2d      	ldr	r3, [pc, #180]	@ (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	220c      	movs	r2, #12
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d046      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xb8>
 80028f6:	d848      	bhi.n	800298a <HAL_RCC_GetSysClockFreq+0xbe>
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d002      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x36>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d003      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x3c>
 8002900:	e043      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002902:	4b27      	ldr	r3, [pc, #156]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002904:	613b      	str	r3, [r7, #16]
      break;
 8002906:	e043      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0c9b      	lsrs	r3, r3, #18
 800290c:	220f      	movs	r2, #15
 800290e:	4013      	ands	r3, r2
 8002910:	4a24      	ldr	r2, [pc, #144]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002916:	4b21      	ldr	r3, [pc, #132]	@ (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291a:	220f      	movs	r2, #15
 800291c:	4013      	ands	r3, r2
 800291e:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	23c0      	movs	r3, #192	@ 0xc0
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	401a      	ands	r2, r3
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	025b      	lsls	r3, r3, #9
 8002930:	429a      	cmp	r2, r3
 8002932:	d109      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	481a      	ldr	r0, [pc, #104]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002938:	f7fd fbe6 	bl	8000108 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	001a      	movs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4353      	muls	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e01a      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	23c0      	movs	r3, #192	@ 0xc0
 800294c:	025b      	lsls	r3, r3, #9
 800294e:	401a      	ands	r2, r3
 8002950:	23c0      	movs	r3, #192	@ 0xc0
 8002952:	025b      	lsls	r3, r3, #9
 8002954:	429a      	cmp	r2, r3
 8002956:	d109      	bne.n	800296c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4814      	ldr	r0, [pc, #80]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xe0>)
 800295c:	f7fd fbd4 	bl	8000108 <__udivsi3>
 8002960:	0003      	movs	r3, r0
 8002962:	001a      	movs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4353      	muls	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e008      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	480c      	ldr	r0, [pc, #48]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002970:	f7fd fbca 	bl	8000108 <__udivsi3>
 8002974:	0003      	movs	r3, r0
 8002976:	001a      	movs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4353      	muls	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	e005      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xe0>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	e002      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800298c:	613b      	str	r3, [r7, #16]
      break;
 800298e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002990:	693b      	ldr	r3, [r7, #16]
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b006      	add	sp, #24
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	40021000 	.word	0x40021000
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	080037e4 	.word	0x080037e4
 80029a8:	080037f4 	.word	0x080037f4
 80029ac:	02dc6c00 	.word	0x02dc6c00

080029b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e042      	b.n	8002a48 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223d      	movs	r2, #61	@ 0x3d
 80029c6:	5c9b      	ldrb	r3, [r3, r2]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	223c      	movs	r2, #60	@ 0x3c
 80029d2:	2100      	movs	r1, #0
 80029d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fe ff35 	bl	8001848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223d      	movs	r2, #61	@ 0x3d
 80029e2:	2102      	movs	r1, #2
 80029e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	0019      	movs	r1, r3
 80029f0:	0010      	movs	r0, r2
 80029f2:	f000 f9ab 	bl	8002d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2246      	movs	r2, #70	@ 0x46
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223e      	movs	r2, #62	@ 0x3e
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223f      	movs	r2, #63	@ 0x3f
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2240      	movs	r2, #64	@ 0x40
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2241      	movs	r2, #65	@ 0x41
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2242      	movs	r2, #66	@ 0x42
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2243      	movs	r2, #67	@ 0x43
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2244      	movs	r2, #68	@ 0x44
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2245      	movs	r2, #69	@ 0x45
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223d      	movs	r2, #61	@ 0x3d
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x22>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	223e      	movs	r2, #62	@ 0x3e
 8002a64:	5c9b      	ldrb	r3, [r3, r2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	1e5a      	subs	r2, r3, #1
 8002a6c:	4193      	sbcs	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e01f      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x62>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d108      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x3a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223f      	movs	r2, #63	@ 0x3f
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	4193      	sbcs	r3, r2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e013      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x62>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d108      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x52>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2240      	movs	r2, #64	@ 0x40
 8002a94:	5c9b      	ldrb	r3, [r3, r2]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	4193      	sbcs	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2241      	movs	r2, #65	@ 0x41
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	4193      	sbcs	r3, r2
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e074      	b.n	8002ba4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Start+0x7a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	223e      	movs	r2, #62	@ 0x3e
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	5499      	strb	r1, [r3, r2]
 8002ac8:	e013      	b.n	8002af2 <HAL_TIM_PWM_Start+0xa2>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_PWM_Start+0x8a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	223f      	movs	r2, #63	@ 0x3f
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	5499      	strb	r1, [r3, r2]
 8002ad8:	e00b      	b.n	8002af2 <HAL_TIM_PWM_Start+0xa2>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_PWM_Start+0x9a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2240      	movs	r2, #64	@ 0x40
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	5499      	strb	r1, [r3, r2]
 8002ae8:	e003      	b.n	8002af2 <HAL_TIM_PWM_Start+0xa2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	@ 0x41
 8002aee:	2102      	movs	r1, #2
 8002af0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fbb0 	bl	8003260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a29      	ldr	r2, [pc, #164]	@ (8002bac <HAL_TIM_PWM_Start+0x15c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_TIM_PWM_Start+0xd8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a28      	ldr	r2, [pc, #160]	@ (8002bb0 <HAL_TIM_PWM_Start+0x160>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_TIM_PWM_Start+0xd8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a26      	ldr	r2, [pc, #152]	@ (8002bb4 <HAL_TIM_PWM_Start+0x164>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIM_PWM_Start+0xd8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <HAL_TIM_PWM_Start+0x168>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_TIM_PWM_Start+0xdc>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_TIM_PWM_Start+0xde>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	0209      	lsls	r1, r1, #8
 8002b40:	430a      	orrs	r2, r1
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <HAL_TIM_PWM_Start+0x15c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x11e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	05db      	lsls	r3, r3, #23
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d009      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x11e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <HAL_TIM_PWM_Start+0x16c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x11e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a11      	ldr	r2, [pc, #68]	@ (8002bb0 <HAL_TIM_PWM_Start+0x160>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2207      	movs	r2, #7
 8002b76:	4013      	ands	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d010      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b90:	e007      	b.n	8002ba2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800
 8002bbc:	40000400 	.word	0x40000400

08002bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2317      	movs	r3, #23
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	223c      	movs	r2, #60	@ 0x3c
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e0ad      	b.n	8002d3e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	223c      	movs	r2, #60	@ 0x3c
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d100      	bne.n	8002bf2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002bf0:	e076      	b.n	8002ce0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d900      	bls.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002bf8:	e095      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d04e      	beq.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d900      	bls.n	8002c08 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c06:	e08e      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d021      	beq.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c14:	e087      	b.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	0011      	movs	r1, r2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f922 	bl	8002e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2108      	movs	r1, #8
 8002c30:	430a      	orrs	r2, r1
 8002c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2104      	movs	r1, #4
 8002c40:	438a      	bics	r2, r1
 8002c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6999      	ldr	r1, [r3, #24]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	619a      	str	r2, [r3, #24]
      break;
 8002c56:	e06b      	b.n	8002d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	0011      	movs	r1, r2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f989 	bl	8002f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2180      	movs	r1, #128	@ 0x80
 8002c72:	0109      	lsls	r1, r1, #4
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4931      	ldr	r1, [pc, #196]	@ (8002d48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c84:	400a      	ands	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6999      	ldr	r1, [r3, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	021a      	lsls	r2, r3, #8
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	619a      	str	r2, [r3, #24]
      break;
 8002c9c:	e048      	b.n	8002d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 f9ea 	bl	8003080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2108      	movs	r1, #8
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	438a      	bics	r2, r1
 8002cca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69d9      	ldr	r1, [r3, #28]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	61da      	str	r2, [r3, #28]
      break;
 8002cde:	e027      	b.n	8002d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fa4f 	bl	800318c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2180      	movs	r1, #128	@ 0x80
 8002cfa:	0109      	lsls	r1, r1, #4
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	490f      	ldr	r1, [pc, #60]	@ (8002d48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69d9      	ldr	r1, [r3, #28]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	61da      	str	r2, [r3, #28]
      break;
 8002d24:	e004      	b.n	8002d30 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d26:	2317      	movs	r3, #23
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
      break;
 8002d2e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	223c      	movs	r2, #60	@ 0x3c
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

  return status;
 8002d38:	2317      	movs	r3, #23
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	fffffbff 	.word	0xfffffbff

08002d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e4c <TIM_Base_SetConfig+0x100>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d008      	beq.n	8002d76 <TIM_Base_SetConfig+0x2a>
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0x2a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a37      	ldr	r2, [pc, #220]	@ (8002e50 <TIM_Base_SetConfig+0x104>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2270      	movs	r2, #112	@ 0x70
 8002d7a:	4393      	bics	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a30      	ldr	r2, [pc, #192]	@ (8002e4c <TIM_Base_SetConfig+0x100>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d018      	beq.n	8002dc2 <TIM_Base_SetConfig+0x76>
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	05db      	lsls	r3, r3, #23
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d013      	beq.n	8002dc2 <TIM_Base_SetConfig+0x76>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e50 <TIM_Base_SetConfig+0x104>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00f      	beq.n	8002dc2 <TIM_Base_SetConfig+0x76>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e54 <TIM_Base_SetConfig+0x108>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <TIM_Base_SetConfig+0x76>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <TIM_Base_SetConfig+0x10c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <TIM_Base_SetConfig+0x76>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a29      	ldr	r2, [pc, #164]	@ (8002e5c <TIM_Base_SetConfig+0x110>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d003      	beq.n	8002dc2 <TIM_Base_SetConfig+0x76>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	@ (8002e60 <TIM_Base_SetConfig+0x114>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d108      	bne.n	8002dd4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a27      	ldr	r2, [pc, #156]	@ (8002e64 <TIM_Base_SetConfig+0x118>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	4393      	bics	r3, r2
 8002dda:	001a      	movs	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <TIM_Base_SetConfig+0x100>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <TIM_Base_SetConfig+0xce>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a14      	ldr	r2, [pc, #80]	@ (8002e58 <TIM_Base_SetConfig+0x10c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <TIM_Base_SetConfig+0xce>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <TIM_Base_SetConfig+0x110>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_Base_SetConfig+0xce>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <TIM_Base_SetConfig+0x114>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d103      	bne.n	8002e22 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	611a      	str	r2, [r3, #16]
  }
}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40002000 	.word	0x40002000
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800
 8002e64:	fffffcff 	.word	0xfffffcff

08002e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4393      	bics	r3, r2
 8002e80:	001a      	movs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2270      	movs	r2, #112	@ 0x70
 8002e96:	4393      	bics	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a27      	ldr	r2, [pc, #156]	@ (8002f60 <TIM_OC1_SetConfig+0xf8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00b      	beq.n	8002ede <TIM_OC1_SetConfig+0x76>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	@ (8002f64 <TIM_OC1_SetConfig+0xfc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <TIM_OC1_SetConfig+0x76>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	@ (8002f68 <TIM_OC1_SetConfig+0x100>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <TIM_OC1_SetConfig+0x76>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	@ (8002f6c <TIM_OC1_SetConfig+0x104>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10c      	bne.n	8002ef8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a19      	ldr	r2, [pc, #100]	@ (8002f60 <TIM_OC1_SetConfig+0xf8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <TIM_OC1_SetConfig+0xb0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <TIM_OC1_SetConfig+0xfc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <TIM_OC1_SetConfig+0xb0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <TIM_OC1_SetConfig+0x100>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_OC1_SetConfig+0xb0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a16      	ldr	r2, [pc, #88]	@ (8002f6c <TIM_OC1_SetConfig+0x104>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d111      	bne.n	8002f3c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <TIM_OC1_SetConfig+0x108>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4a14      	ldr	r2, [pc, #80]	@ (8002f74 <TIM_OC1_SetConfig+0x10c>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b006      	add	sp, #24
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800
 8002f70:	fffffeff 	.word	0xfffffeff
 8002f74:	fffffdff 	.word	0xfffffdff

08002f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	4393      	bics	r3, r2
 8002f90:	001a      	movs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8003060 <TIM_OC2_SetConfig+0xe8>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a2d      	ldr	r2, [pc, #180]	@ (8003064 <TIM_OC2_SetConfig+0xec>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	4393      	bics	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a24      	ldr	r2, [pc, #144]	@ (8003068 <TIM_OC2_SetConfig+0xf0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10d      	bne.n	8002ff6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2280      	movs	r2, #128	@ 0x80
 8002fde:	4393      	bics	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2240      	movs	r2, #64	@ 0x40
 8002ff2:	4393      	bics	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <TIM_OC2_SetConfig+0xf0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00b      	beq.n	8003016 <TIM_OC2_SetConfig+0x9e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <TIM_OC2_SetConfig+0xf4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <TIM_OC2_SetConfig+0x9e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <TIM_OC2_SetConfig+0xf8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_OC2_SetConfig+0x9e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a18      	ldr	r2, [pc, #96]	@ (8003074 <TIM_OC2_SetConfig+0xfc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d113      	bne.n	800303e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4a17      	ldr	r2, [pc, #92]	@ (8003078 <TIM_OC2_SetConfig+0x100>)
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4a16      	ldr	r2, [pc, #88]	@ (800307c <TIM_OC2_SetConfig+0x104>)
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	46c0      	nop			@ (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b006      	add	sp, #24
 800305e:	bd80      	pop	{r7, pc}
 8003060:	ffff8fff 	.word	0xffff8fff
 8003064:	fffffcff 	.word	0xfffffcff
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800
 8003078:	fffffbff 	.word	0xfffffbff
 800307c:	fffff7ff 	.word	0xfffff7ff

08003080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4a33      	ldr	r2, [pc, #204]	@ (8003164 <TIM_OC3_SetConfig+0xe4>)
 8003096:	401a      	ands	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2270      	movs	r2, #112	@ 0x70
 80030ac:	4393      	bics	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2203      	movs	r2, #3
 80030b4:	4393      	bics	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4a28      	ldr	r2, [pc, #160]	@ (8003168 <TIM_OC3_SetConfig+0xe8>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a24      	ldr	r2, [pc, #144]	@ (800316c <TIM_OC3_SetConfig+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10d      	bne.n	80030fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4a23      	ldr	r2, [pc, #140]	@ (8003170 <TIM_OC3_SetConfig+0xf0>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003174 <TIM_OC3_SetConfig+0xf4>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <TIM_OC3_SetConfig+0xec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_OC3_SetConfig+0x9a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1c      	ldr	r2, [pc, #112]	@ (8003178 <TIM_OC3_SetConfig+0xf8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_OC3_SetConfig+0x9a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <TIM_OC3_SetConfig+0xfc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_OC3_SetConfig+0x9a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1a      	ldr	r2, [pc, #104]	@ (8003180 <TIM_OC3_SetConfig+0x100>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <TIM_OC3_SetConfig+0x104>)
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4a18      	ldr	r2, [pc, #96]	@ (8003188 <TIM_OC3_SetConfig+0x108>)
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b006      	add	sp, #24
 8003162:	bd80      	pop	{r7, pc}
 8003164:	fffffeff 	.word	0xfffffeff
 8003168:	fffffdff 	.word	0xfffffdff
 800316c:	40012c00 	.word	0x40012c00
 8003170:	fffff7ff 	.word	0xfffff7ff
 8003174:	fffffbff 	.word	0xfffffbff
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	ffffefff 	.word	0xffffefff
 8003188:	ffffdfff 	.word	0xffffdfff

0800318c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a26      	ldr	r2, [pc, #152]	@ (800323c <TIM_OC4_SetConfig+0xb0>)
 80031a2:	401a      	ands	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a22      	ldr	r2, [pc, #136]	@ (8003240 <TIM_OC4_SetConfig+0xb4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a21      	ldr	r2, [pc, #132]	@ (8003244 <TIM_OC4_SetConfig+0xb8>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003248 <TIM_OC4_SetConfig+0xbc>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	031b      	lsls	r3, r3, #12
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a19      	ldr	r2, [pc, #100]	@ (800324c <TIM_OC4_SetConfig+0xc0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_OC4_SetConfig+0x78>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <TIM_OC4_SetConfig+0xc4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_OC4_SetConfig+0x78>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <TIM_OC4_SetConfig+0xc8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_OC4_SetConfig+0x78>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a16      	ldr	r2, [pc, #88]	@ (8003258 <TIM_OC4_SetConfig+0xcc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d109      	bne.n	8003218 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4a15      	ldr	r2, [pc, #84]	@ (800325c <TIM_OC4_SetConfig+0xd0>)
 8003208:	4013      	ands	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b006      	add	sp, #24
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	ffffefff 	.word	0xffffefff
 8003240:	ffff8fff 	.word	0xffff8fff
 8003244:	fffffcff 	.word	0xfffffcff
 8003248:	ffffdfff 	.word	0xffffdfff
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	ffffbfff 	.word	0xffffbfff

08003260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	221f      	movs	r2, #31
 8003270:	4013      	ands	r3, r2
 8003272:	2201      	movs	r2, #1
 8003274:	409a      	lsls	r2, r3
 8003276:	0013      	movs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	43d2      	mvns	r2, r2
 8003282:	401a      	ands	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1a      	ldr	r2, [r3, #32]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	211f      	movs	r1, #31
 8003290:	400b      	ands	r3, r1
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4099      	lsls	r1, r3
 8003296:	000b      	movs	r3, r1
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b006      	add	sp, #24
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	223c      	movs	r2, #60	@ 0x3c
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032bc:	2302      	movs	r3, #2
 80032be:	e047      	b.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	223c      	movs	r2, #60	@ 0x3c
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	223d      	movs	r2, #61	@ 0x3d
 80032cc:	2102      	movs	r1, #2
 80032ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2270      	movs	r2, #112	@ 0x70
 80032e4:	4393      	bics	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00f      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	05db      	lsls	r3, r3, #23
 800330c:	429a      	cmp	r2, r3
 800330e:	d009      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a11      	ldr	r2, [pc, #68]	@ (800335c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10c      	bne.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2280      	movs	r2, #128	@ 0x80
 8003328:	4393      	bics	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	223d      	movs	r2, #61	@ 0x3d
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223c      	movs	r2, #60	@ 0x3c
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b004      	add	sp, #16
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40000400 	.word	0x40000400
 8003360:	40014000 	.word	0x40014000

08003364 <Motor_SetDirection>:

// Declare htim2 as extern since it's used here for PWM
extern TIM_HandleTypeDef htim2;

void Motor_SetDirection(MotorDirection_TypeDef direction)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	0002      	movs	r2, r0
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	701a      	strb	r2, [r3, #0]
    // Assuming MOTOR_DIR_Pin is correctly defined in main.h
    // For Cytron driver, typically HIGH for one direction, LOW for the other.
    // PWM controls speed.
    switch (direction)
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d002      	beq.n	800337e <Motor_SetDirection+0x1a>
 8003378:	2b02      	cmp	r3, #2
 800337a:	d008      	beq.n	800338e <Motor_SetDirection+0x2a>
 800337c:	e00f      	b.n	800339e <Motor_SetDirection+0x3a>
    {
        case MOTOR_FORWARD:
            HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 800337e:	2390      	movs	r3, #144	@ 0x90
 8003380:	05db      	lsls	r3, r3, #23
 8003382:	2201      	movs	r2, #1
 8003384:	2120      	movs	r1, #32
 8003386:	0018      	movs	r0, r3
 8003388:	f7fe fe07 	bl	8001f9a <HAL_GPIO_WritePin>
            break;
 800338c:	e00f      	b.n	80033ae <Motor_SetDirection+0x4a>
        case MOTOR_REVERSE:
            HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800338e:	2390      	movs	r3, #144	@ 0x90
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	2200      	movs	r2, #0
 8003394:	2120      	movs	r1, #32
 8003396:	0018      	movs	r0, r3
 8003398:	f7fe fdff 	bl	8001f9a <HAL_GPIO_WritePin>
            break;
 800339c:	e007      	b.n	80033ae <Motor_SetDirection+0x4a>
        case MOTOR_STOP:
        default:
            // When stopped, direction pin state might not matter, but setting it to a default
            // (e.g., LOW) can be good practice. PWM should be 0.
            HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800339e:	2390      	movs	r3, #144	@ 0x90
 80033a0:	05db      	lsls	r3, r3, #23
 80033a2:	2200      	movs	r2, #0
 80033a4:	2120      	movs	r1, #32
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7fe fdf7 	bl	8001f9a <HAL_GPIO_WritePin>
            break;
 80033ac:	46c0      	nop			@ (mov r8, r8)
    }
}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b002      	add	sp, #8
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <Motor_SetPWM>:

void Motor_SetPWM(float pwm_value)
{
 80033b8:	b5b0      	push	{r4, r5, r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    // Clamp the float PWM value to the valid uint16_t range [0, Period]
    // Use roundf to round to nearest integer for better precision
    uint16_t pwm_duty_cycle = (uint16_t)roundf(fmaxf(0.0f, fminf(pwm_value, (float)htim2.Init.Period)));
 80033c0:	4b12      	ldr	r3, [pc, #72]	@ (800340c <Motor_SetPWM+0x54>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd ff6b 	bl	80012a0 <__aeabi_ui2f>
 80033ca:	1c02      	adds	r2, r0, #0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	1c11      	adds	r1, r2, #0
 80033d0:	1c18      	adds	r0, r3, #0
 80033d2:	f000 f957 	bl	8003684 <fminf>
 80033d6:	1c03      	adds	r3, r0, #0
 80033d8:	2200      	movs	r2, #0
 80033da:	1c11      	adds	r1, r2, #0
 80033dc:	1c18      	adds	r0, r3, #0
 80033de:	f000 f93b 	bl	8003658 <fmaxf>
 80033e2:	1c03      	adds	r3, r0, #0
 80033e4:	1c18      	adds	r0, r3, #0
 80033e6:	f000 f97f 	bl	80036e8 <roundf>
 80033ea:	1c03      	adds	r3, r0, #0
 80033ec:	250e      	movs	r5, #14
 80033ee:	197c      	adds	r4, r7, r5
 80033f0:	1c18      	adds	r0, r3, #0
 80033f2:	f7fc ff4f 	bl	8000294 <__aeabi_f2uiz>
 80033f6:	0003      	movs	r3, r0
 80033f8:	8023      	strh	r3, [r4, #0]

    // Set the compare value for TIM2 Channel 2 (connected to PWM)
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_duty_cycle);
 80033fa:	4b04      	ldr	r3, [pc, #16]	@ (800340c <Motor_SetPWM+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	197a      	adds	r2, r7, r5
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bdb0      	pop	{r4, r5, r7, pc}
 800340c:	2000002c 	.word	0x2000002c

08003410 <PID_Init>:

// You might also need to define an epsilon for float comparisons if 0.0f is not exact
#define FLOAT_EPSILON 0.00001f

void PID_Init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float output_max, float output_min)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
    pid->Kp = Kp;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	609a      	str	r2, [r3, #8]
    pid->previous_error = 0.0f;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
    pid->integral_sum = 0.0f;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
    pid->output_limit_max = output_max;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	615a      	str	r2, [r3, #20]
    pid->output_limit_min = output_min;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	619a      	str	r2, [r3, #24]
    pid->last_time = HAL_GetTick(); // Initialize last_time
 8003448:	f7fe fb06 	bl	8001a58 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	61da      	str	r2, [r3, #28]
}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <PID_Compute>:

float PID_Compute(PID_TypeDef *pid, float error)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b08d      	sub	sp, #52	@ 0x34
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
    uint32_t current_time = HAL_GetTick();
 8003466:	f7fe faf7 	bl	8001a58 <HAL_GetTick>
 800346a:	0003      	movs	r3, r0
 800346c:	61bb      	str	r3, [r7, #24]
    float delta_time_ms = (float)(current_time - pid->last_time);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	0018      	movs	r0, r3
 8003478:	f7fd ff12 	bl	80012a0 <__aeabi_ui2f>
 800347c:	1c03      	adds	r3, r0, #0
 800347e:	617b      	str	r3, [r7, #20]
    pid->last_time = current_time;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	61da      	str	r2, [r3, #28]

    // Convert delta_time to seconds for more standard PID calculations
    // Ensure dt is not zero to prevent division by zero in derivative term if loop runs too fast
    float dt = delta_time_ms / 1000.0f;
 8003486:	495b      	ldr	r1, [pc, #364]	@ (80035f4 <PID_Compute+0x198>)
 8003488:	6978      	ldr	r0, [r7, #20]
 800348a:	f7fd f90d 	bl	80006a8 <__aeabi_fdiv>
 800348e:	1c03      	adds	r3, r0, #0
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dt == 0.0f) { // If delta_time_ms is 0, dt would be 0. This can happen if HAL_GetTick() doesn't change
 8003492:	2100      	movs	r1, #0
 8003494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003496:	f7fc fecf 	bl	8000238 <__aeabi_fcmpeq>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <PID_Compute+0x46>
        dt = 0.001f; // Assume a small non-zero time if tick hasn't changed. Or, skip this loop iteration.
 800349e:	4b56      	ldr	r3, [pc, #344]	@ (80035f8 <PID_Compute+0x19c>)
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }


    // Proportional term
    float proportional_term = pid->Kp * error;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	1c19      	adds	r1, r3, #0
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f7fd facb 	bl	8000a44 <__aeabi_fmul>
 80034ae:	1c03      	adds	r3, r0, #0
 80034b0:	613b      	str	r3, [r7, #16]

    // Integral term
    float integral_term = 0.0f; // Initialize to 0.0f
 80034b2:	2300      	movs	r3, #0
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Only update integral sum if Ki is non-zero to avoid division by zero and unnecessary accumulation
    if (fabs(pid->Ki) > FLOAT_EPSILON) // Use fabs and epsilon for robust float comparison to zero
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	494f      	ldr	r1, [pc, #316]	@ (80035fc <PID_Compute+0x1a0>)
 80034c0:	1c18      	adds	r0, r3, #0
 80034c2:	f7fc fed3 	bl	800026c <__aeabi_fcmpgt>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d052      	beq.n	8003570 <PID_Compute+0x114>
    {
        pid->integral_sum += error * dt;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691c      	ldr	r4, [r3, #16]
 80034ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	f7fd fab7 	bl	8000a44 <__aeabi_fmul>
 80034d6:	1c03      	adds	r3, r0, #0
 80034d8:	1c19      	adds	r1, r3, #0
 80034da:	1c20      	adds	r0, r4, #0
 80034dc:	f7fc fef2 	bl	80002c4 <__aeabi_fadd>
 80034e0:	1c03      	adds	r3, r0, #0
 80034e2:	1c1a      	adds	r2, r3, #0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	611a      	str	r2, [r3, #16]

        // Anti-windup: Clamp integral_sum to prevent it from growing too large.
        // The limits for integral_sum are derived from the output limits divided by Ki.
        float integral_sum_limit_max = pid->output_limit_max / pid->Ki;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	1c19      	adds	r1, r3, #0
 80034f2:	1c10      	adds	r0, r2, #0
 80034f4:	f7fd f8d8 	bl	80006a8 <__aeabi_fdiv>
 80034f8:	1c03      	adds	r3, r0, #0
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
        float integral_sum_limit_min = pid->output_limit_min / pid->Ki;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	1c19      	adds	r1, r3, #0
 8003506:	1c10      	adds	r0, r2, #0
 8003508:	f7fd f8ce 	bl	80006a8 <__aeabi_fdiv>
 800350c:	1c03      	adds	r3, r0, #0
 800350e:	623b      	str	r3, [r7, #32]

        // Ensure proper clamping even if Ki is negative (min/max swap)
        if (pid->Ki < 0) { // If Ki is negative, swap the limits
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2100      	movs	r1, #0
 8003516:	1c18      	adds	r0, r3, #0
 8003518:	f7fc fe94 	bl	8000244 <__aeabi_fcmplt>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d005      	beq.n	800352c <PID_Compute+0xd0>
            float temp = integral_sum_limit_max;
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	60fb      	str	r3, [r7, #12]
            integral_sum_limit_max = integral_sum_limit_min;
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
            integral_sum_limit_min = temp;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	623b      	str	r3, [r7, #32]
        }

        if (pid->integral_sum > integral_sum_limit_max) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	1c19      	adds	r1, r3, #0
 8003532:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003534:	f7fc fe86 	bl	8000244 <__aeabi_fcmplt>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d003      	beq.n	8003544 <PID_Compute+0xe8>
            pid->integral_sum = integral_sum_limit_max;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e00a      	b.n	800355a <PID_Compute+0xfe>
        } else if (pid->integral_sum < integral_sum_limit_min) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	1c19      	adds	r1, r3, #0
 800354a:	6a38      	ldr	r0, [r7, #32]
 800354c:	f7fc fe8e 	bl	800026c <__aeabi_fcmpgt>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d002      	beq.n	800355a <PID_Compute+0xfe>
            pid->integral_sum = integral_sum_limit_min;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a3a      	ldr	r2, [r7, #32]
 8003558:	611a      	str	r2, [r3, #16]
        }

        integral_term = pid->Ki * pid->integral_sum;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	1c19      	adds	r1, r3, #0
 8003564:	1c10      	adds	r0, r2, #0
 8003566:	f7fd fa6d 	bl	8000a44 <__aeabi_fmul>
 800356a:	1c03      	adds	r3, r0, #0
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356e:	e002      	b.n	8003576 <PID_Compute+0x11a>
    } else {
        pid->integral_sum = 0.0f; // Ensure integral_sum is reset if Ki is effectively zero
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
    }


    // Derivative term
    float derivative_term = pid->Kd * ((error - pid->previous_error) / dt);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689c      	ldr	r4, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	1c19      	adds	r1, r3, #0
 8003580:	6838      	ldr	r0, [r7, #0]
 8003582:	f7fd fbb9 	bl	8000cf8 <__aeabi_fsub>
 8003586:	1c03      	adds	r3, r0, #0
 8003588:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800358a:	1c18      	adds	r0, r3, #0
 800358c:	f7fd f88c 	bl	80006a8 <__aeabi_fdiv>
 8003590:	1c03      	adds	r3, r0, #0
 8003592:	1c19      	adds	r1, r3, #0
 8003594:	1c20      	adds	r0, r4, #0
 8003596:	f7fd fa55 	bl	8000a44 <__aeabi_fmul>
 800359a:	1c03      	adds	r3, r0, #0
 800359c:	60bb      	str	r3, [r7, #8]

    // Total PID output
    float output = proportional_term + integral_term + derivative_term;
 800359e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035a0:	6938      	ldr	r0, [r7, #16]
 80035a2:	f7fc fe8f 	bl	80002c4 <__aeabi_fadd>
 80035a6:	1c03      	adds	r3, r0, #0
 80035a8:	1c19      	adds	r1, r3, #0
 80035aa:	68b8      	ldr	r0, [r7, #8]
 80035ac:	f7fc fe8a 	bl	80002c4 <__aeabi_fadd>
 80035b0:	1c03      	adds	r3, r0, #0
 80035b2:	61fb      	str	r3, [r7, #28]

    // Clamp total output to defined limits
    if (output > pid->output_limit_max) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	1c19      	adds	r1, r3, #0
 80035ba:	69f8      	ldr	r0, [r7, #28]
 80035bc:	f7fc fe56 	bl	800026c <__aeabi_fcmpgt>
 80035c0:	1e03      	subs	r3, r0, #0
 80035c2:	d003      	beq.n	80035cc <PID_Compute+0x170>
        output = pid->output_limit_max;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e00a      	b.n	80035e2 <PID_Compute+0x186>
    } else if (output < pid->output_limit_min) {
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	1c19      	adds	r1, r3, #0
 80035d2:	69f8      	ldr	r0, [r7, #28]
 80035d4:	f7fc fe36 	bl	8000244 <__aeabi_fcmplt>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d002      	beq.n	80035e2 <PID_Compute+0x186>
        output = pid->output_limit_min;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61fb      	str	r3, [r7, #28]
    }

    // Store current error for next iteration's derivative calculation
    pid->previous_error = error;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	60da      	str	r2, [r3, #12]

    return output;
 80035e8:	69fb      	ldr	r3, [r7, #28]
}
 80035ea:	1c18      	adds	r0, r3, #0
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b00d      	add	sp, #52	@ 0x34
 80035f0:	bd90      	pop	{r4, r7, pc}
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	447a0000 	.word	0x447a0000
 80035f8:	3a83126f 	.word	0x3a83126f
 80035fc:	3727c5ac 	.word	0x3727c5ac

08003600 <memset>:
 8003600:	0003      	movs	r3, r0
 8003602:	1882      	adds	r2, r0, r2
 8003604:	4293      	cmp	r3, r2
 8003606:	d100      	bne.n	800360a <memset+0xa>
 8003608:	4770      	bx	lr
 800360a:	7019      	strb	r1, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	e7f9      	b.n	8003604 <memset+0x4>

08003610 <__libc_init_array>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	2600      	movs	r6, #0
 8003614:	4c0c      	ldr	r4, [pc, #48]	@ (8003648 <__libc_init_array+0x38>)
 8003616:	4d0d      	ldr	r5, [pc, #52]	@ (800364c <__libc_init_array+0x3c>)
 8003618:	1b64      	subs	r4, r4, r5
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	42a6      	cmp	r6, r4
 800361e:	d109      	bne.n	8003634 <__libc_init_array+0x24>
 8003620:	2600      	movs	r6, #0
 8003622:	f000 f885 	bl	8003730 <_init>
 8003626:	4c0a      	ldr	r4, [pc, #40]	@ (8003650 <__libc_init_array+0x40>)
 8003628:	4d0a      	ldr	r5, [pc, #40]	@ (8003654 <__libc_init_array+0x44>)
 800362a:	1b64      	subs	r4, r4, r5
 800362c:	10a4      	asrs	r4, r4, #2
 800362e:	42a6      	cmp	r6, r4
 8003630:	d105      	bne.n	800363e <__libc_init_array+0x2e>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	00b3      	lsls	r3, r6, #2
 8003636:	58eb      	ldr	r3, [r5, r3]
 8003638:	4798      	blx	r3
 800363a:	3601      	adds	r6, #1
 800363c:	e7ee      	b.n	800361c <__libc_init_array+0xc>
 800363e:	00b3      	lsls	r3, r6, #2
 8003640:	58eb      	ldr	r3, [r5, r3]
 8003642:	4798      	blx	r3
 8003644:	3601      	adds	r6, #1
 8003646:	e7f2      	b.n	800362e <__libc_init_array+0x1e>
 8003648:	08003804 	.word	0x08003804
 800364c:	08003804 	.word	0x08003804
 8003650:	08003808 	.word	0x08003808
 8003654:	08003804 	.word	0x08003804

08003658 <fmaxf>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	1c04      	adds	r4, r0, #0
 800365c:	1c0d      	adds	r5, r1, #0
 800365e:	f000 f827 	bl	80036b0 <__fpclassifyf>
 8003662:	2800      	cmp	r0, #0
 8003664:	d102      	bne.n	800366c <fmaxf+0x14>
 8003666:	1c2c      	adds	r4, r5, #0
 8003668:	1c20      	adds	r0, r4, #0
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	1c28      	adds	r0, r5, #0
 800366e:	f000 f81f 	bl	80036b0 <__fpclassifyf>
 8003672:	2800      	cmp	r0, #0
 8003674:	d0f8      	beq.n	8003668 <fmaxf+0x10>
 8003676:	1c29      	adds	r1, r5, #0
 8003678:	1c20      	adds	r0, r4, #0
 800367a:	f7fc fdf7 	bl	800026c <__aeabi_fcmpgt>
 800367e:	2800      	cmp	r0, #0
 8003680:	d0f1      	beq.n	8003666 <fmaxf+0xe>
 8003682:	e7f1      	b.n	8003668 <fmaxf+0x10>

08003684 <fminf>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	1c04      	adds	r4, r0, #0
 8003688:	1c0d      	adds	r5, r1, #0
 800368a:	f000 f811 	bl	80036b0 <__fpclassifyf>
 800368e:	2800      	cmp	r0, #0
 8003690:	d102      	bne.n	8003698 <fminf+0x14>
 8003692:	1c2c      	adds	r4, r5, #0
 8003694:	1c20      	adds	r0, r4, #0
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	1c28      	adds	r0, r5, #0
 800369a:	f000 f809 	bl	80036b0 <__fpclassifyf>
 800369e:	2800      	cmp	r0, #0
 80036a0:	d0f8      	beq.n	8003694 <fminf+0x10>
 80036a2:	1c29      	adds	r1, r5, #0
 80036a4:	1c20      	adds	r0, r4, #0
 80036a6:	f7fc fdcd 	bl	8000244 <__aeabi_fcmplt>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d0f1      	beq.n	8003692 <fminf+0xe>
 80036ae:	e7f1      	b.n	8003694 <fminf+0x10>

080036b0 <__fpclassifyf>:
 80036b0:	0043      	lsls	r3, r0, #1
 80036b2:	085a      	lsrs	r2, r3, #1
 80036b4:	2002      	movs	r0, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00f      	beq.n	80036da <__fpclassifyf+0x2a>
 80036ba:	21fe      	movs	r1, #254	@ 0xfe
 80036bc:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <__fpclassifyf+0x2c>)
 80036be:	05c9      	lsls	r1, r1, #23
 80036c0:	18d3      	adds	r3, r2, r3
 80036c2:	1800      	adds	r0, r0, r0
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d308      	bcc.n	80036da <__fpclassifyf+0x2a>
 80036c8:	4905      	ldr	r1, [pc, #20]	@ (80036e0 <__fpclassifyf+0x30>)
 80036ca:	1e53      	subs	r3, r2, #1
 80036cc:	3801      	subs	r0, #1
 80036ce:	428b      	cmp	r3, r1
 80036d0:	d903      	bls.n	80036da <__fpclassifyf+0x2a>
 80036d2:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <__fpclassifyf+0x34>)
 80036d4:	18d0      	adds	r0, r2, r3
 80036d6:	4243      	negs	r3, r0
 80036d8:	4158      	adcs	r0, r3
 80036da:	4770      	bx	lr
 80036dc:	ff800000 	.word	0xff800000
 80036e0:	007ffffe 	.word	0x007ffffe
 80036e4:	80800000 	.word	0x80800000

080036e8 <roundf>:
 80036e8:	0dc3      	lsrs	r3, r0, #23
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3b7f      	subs	r3, #127	@ 0x7f
 80036ee:	0002      	movs	r2, r0
 80036f0:	b510      	push	{r4, lr}
 80036f2:	2b16      	cmp	r3, #22
 80036f4:	dc13      	bgt.n	800371e <roundf+0x36>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	da07      	bge.n	800370a <roundf+0x22>
 80036fa:	0fc2      	lsrs	r2, r0, #31
 80036fc:	07d0      	lsls	r0, r2, #31
 80036fe:	3301      	adds	r3, #1
 8003700:	d102      	bne.n	8003708 <roundf+0x20>
 8003702:	23fe      	movs	r3, #254	@ 0xfe
 8003704:	059b      	lsls	r3, r3, #22
 8003706:	4318      	orrs	r0, r3
 8003708:	bd10      	pop	{r4, pc}
 800370a:	4908      	ldr	r1, [pc, #32]	@ (800372c <roundf+0x44>)
 800370c:	4119      	asrs	r1, r3
 800370e:	4208      	tst	r0, r1
 8003710:	d0fa      	beq.n	8003708 <roundf+0x20>
 8003712:	2080      	movs	r0, #128	@ 0x80
 8003714:	03c0      	lsls	r0, r0, #15
 8003716:	4118      	asrs	r0, r3
 8003718:	1880      	adds	r0, r0, r2
 800371a:	4388      	bics	r0, r1
 800371c:	e7f4      	b.n	8003708 <roundf+0x20>
 800371e:	2b80      	cmp	r3, #128	@ 0x80
 8003720:	d1f2      	bne.n	8003708 <roundf+0x20>
 8003722:	1c01      	adds	r1, r0, #0
 8003724:	f7fc fdce 	bl	80002c4 <__aeabi_fadd>
 8003728:	e7ee      	b.n	8003708 <roundf+0x20>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	007fffff 	.word	0x007fffff

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	46c0      	nop			@ (mov r8, r8)
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr
