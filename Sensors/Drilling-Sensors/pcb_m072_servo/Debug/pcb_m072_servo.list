
pcb_m072_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f0c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001fcc  08001fcc  00002fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ffc  08001ffc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ffc  08001ffc  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ffc  08001ffc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ffc  08001ffc  00002ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002000  08002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002004  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002010  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002010  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070e3  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143d  00000000  00000000  0000b117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0000c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c1  00000000  00000000  0000ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184d0  00000000  00000000  0000d4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e2a  00000000  00000000  000259a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900d5  00000000  00000000  0002f7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf8a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f1c  00000000  00000000  000bf8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c1800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001fb4 	.word	0x08001fb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001fb4 	.word	0x08001fb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <angleToPulseValue>:
 * @brief  Maps a desired angle (0-180) to the corresponding PWM pulse count.
 * @param  angle The desired angle in degrees (0 to 180).
 * @retval The calculated pulse value for the timer's compare register.
 */
uint16_t angleToPulseValue(uint16_t angle)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
    // Clamp the angle to ensure it stays within 0-180 degrees
    if (angle > 180) {
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2bb4      	cmp	r3, #180	@ 0xb4
 8000232:	d902      	bls.n	800023a <angleToPulseValue+0x1a>
        angle = 180;
 8000234:	1dbb      	adds	r3, r7, #6
 8000236:	22b4      	movs	r2, #180	@ 0xb4
 8000238:	801a      	strh	r2, [r3, #0]

    // These values are correct for a 50Hz PWM with a Period of 9999 (10000 total counts)
    // which corresponds to a 20ms period.
    // 0.5ms pulse (0 deg)  -> (0.5ms / 20ms) * 10000 = 250
    // 2.5ms pulse (180 deg) -> (2.5ms / 20ms) * 10000 = 1250
    const uint16_t MIN_PULSE_COUNTS = 250;
 800023a:	240e      	movs	r4, #14
 800023c:	193b      	adds	r3, r7, r4
 800023e:	22fa      	movs	r2, #250	@ 0xfa
 8000240:	801a      	strh	r2, [r3, #0]
    const uint16_t MAX_PULSE_COUNTS = 1250;
 8000242:	210c      	movs	r1, #12
 8000244:	187b      	adds	r3, r7, r1
 8000246:	4a10      	ldr	r2, [pc, #64]	@ (8000288 <angleToPulseValue+0x68>)
 8000248:	801a      	strh	r2, [r3, #0]
    const uint16_t PULSE_RANGE_COUNTS = MAX_PULSE_COUNTS - MIN_PULSE_COUNTS; // 1000 counts
 800024a:	200a      	movs	r0, #10
 800024c:	183b      	adds	r3, r7, r0
 800024e:	1879      	adds	r1, r7, r1
 8000250:	193a      	adds	r2, r7, r4
 8000252:	8809      	ldrh	r1, [r1, #0]
 8000254:	8812      	ldrh	r2, [r2, #0]
 8000256:	1a8a      	subs	r2, r1, r2
 8000258:	801a      	strh	r2, [r3, #0]

    // Linear mapping formula:
    // pulse_counts = MIN_PULSE_COUNTS + (angle * PULSE_RANGE_COUNTS) / 180
    uint16_t pulse = MIN_PULSE_COUNTS + ((uint32_t)angle * PULSE_RANGE_COUNTS) / 180;
 800025a:	1dbb      	adds	r3, r7, #6
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	183a      	adds	r2, r7, r0
 8000260:	8812      	ldrh	r2, [r2, #0]
 8000262:	4353      	muls	r3, r2
 8000264:	21b4      	movs	r1, #180	@ 0xb4
 8000266:	0018      	movs	r0, r3
 8000268:	f7ff ff4e 	bl	8000108 <__udivsi3>
 800026c:	0003      	movs	r3, r0
 800026e:	b299      	uxth	r1, r3
 8000270:	2008      	movs	r0, #8
 8000272:	183b      	adds	r3, r7, r0
 8000274:	193a      	adds	r2, r7, r4
 8000276:	8812      	ldrh	r2, [r2, #0]
 8000278:	188a      	adds	r2, r1, r2
 800027a:	801a      	strh	r2, [r3, #0]

    return pulse;
 800027c:	183b      	adds	r3, r7, r0
 800027e:	881b      	ldrh	r3, [r3, #0]
}
 8000280:	0018      	movs	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	b005      	add	sp, #20
 8000286:	bd90      	pop	{r4, r7, pc}
 8000288:	000004e2 	.word	0x000004e2

0800028c <setServoAngle>:
 * @param  htim A pointer to the TIM_HandleTypeDef structure for your timer.
 * @param  channel The timer channel used for the servo (e.g., TIM_CHANNEL_2).
 * @param  angle The desired servo angle in degrees (0 to 180).
 */
void setServoAngle(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t angle)
{
 800028c:	b5b0      	push	{r4, r5, r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	1dbb      	adds	r3, r7, #6
 8000298:	801a      	strh	r2, [r3, #0]
    uint16_t pulse = angleToPulseValue(angle);
 800029a:	2516      	movs	r5, #22
 800029c:	197c      	adds	r4, r7, r5
 800029e:	1dbb      	adds	r3, r7, #6
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ffbc 	bl	8000220 <angleToPulseValue>
 80002a8:	0003      	movs	r3, r0
 80002aa:	8023      	strh	r3, [r4, #0]

    // Update the Capture Compare Register (CCR) for the specified channel.
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d105      	bne.n	80002be <setServoAngle+0x32>
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	8812      	ldrh	r2, [r2, #0]
 80002ba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002bc:	e019      	b.n	80002f2 <setServoAngle+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	d106      	bne.n	80002d2 <setServoAngle+0x46>
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	2316      	movs	r3, #22
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80002d0:	e00f      	b.n	80002f2 <setServoAngle+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2b08      	cmp	r3, #8
 80002d6:	d106      	bne.n	80002e6 <setServoAngle+0x5a>
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	2316      	movs	r3, #22
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80002e4:	e005      	b.n	80002f2 <setServoAngle+0x66>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	2316      	movs	r3, #22
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b006      	add	sp, #24
 80002f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000300:	f000 f9cc 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000304:	f000 f838 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000308:	f000 f8d6 	bl	80004b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800030c:	f000 f874 	bl	80003f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	// Start the PWM signal on TIM2 Channel 2
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000310:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <main+0x74>)
 8000312:	2108      	movs	r1, #8
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f997 	bl	8001648 <HAL_TIM_PWM_Start>

	// Set initial position to center (90 degrees)
	setServoAngle(&htim2, TIM_CHANNEL_3, 90);
 800031a:	4b15      	ldr	r3, [pc, #84]	@ (8000370 <main+0x74>)
 800031c:	225a      	movs	r2, #90	@ 0x5a
 800031e:	2108      	movs	r1, #8
 8000320:	0018      	movs	r0, r3
 8000322:	f7ff ffb3 	bl	800028c <setServoAngle>
	HAL_Delay(1000); // Give servo time to reach initial position
 8000326:	23fa      	movs	r3, #250	@ 0xfa
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fa1a 	bl	8000764 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setServoAngle(&htim2, TIM_CHANNEL_3, 0);
 8000330:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <main+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	2108      	movs	r1, #8
 8000336:	0018      	movs	r0, r3
 8000338:	f7ff ffa8 	bl	800028c <setServoAngle>
	  HAL_Delay(1500);
 800033c:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <main+0x78>)
 800033e:	0018      	movs	r0, r3
 8000340:	f000 fa10 	bl	8000764 <HAL_Delay>
	  setServoAngle(&htim2, TIM_CHANNEL_3, 90);
 8000344:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <main+0x74>)
 8000346:	225a      	movs	r2, #90	@ 0x5a
 8000348:	2108      	movs	r1, #8
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff ff9e 	bl	800028c <setServoAngle>
	  HAL_Delay(1500);
 8000350:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <main+0x78>)
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fa06 	bl	8000764 <HAL_Delay>
	  setServoAngle(&htim2, TIM_CHANNEL_3, 180);
 8000358:	4b05      	ldr	r3, [pc, #20]	@ (8000370 <main+0x74>)
 800035a:	22b4      	movs	r2, #180	@ 0xb4
 800035c:	2108      	movs	r1, #8
 800035e:	0018      	movs	r0, r3
 8000360:	f7ff ff94 	bl	800028c <setServoAngle>
	  HAL_Delay(1500);
 8000364:	4b03      	ldr	r3, [pc, #12]	@ (8000374 <main+0x78>)
 8000366:	0018      	movs	r0, r3
 8000368:	f000 f9fc 	bl	8000764 <HAL_Delay>
	  setServoAngle(&htim2, TIM_CHANNEL_3, 0);
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	e7df      	b.n	8000330 <main+0x34>
 8000370:	20000028 	.word	0x20000028
 8000374:	000005dc 	.word	0x000005dc

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b093      	sub	sp, #76	@ 0x4c
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	2414      	movs	r4, #20
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	2334      	movs	r3, #52	@ 0x34
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f001 fde7 	bl	8001f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	0018      	movs	r0, r3
 8000392:	2310      	movs	r3, #16
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f001 fde0 	bl	8001f5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039c:	0021      	movs	r1, r4
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2202      	movs	r2, #2
 80003a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2201      	movs	r2, #1
 80003a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2210      	movs	r2, #16
 80003ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 fc23 	bl	8000c04 <HAL_RCC_OscConfig>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003c2:	f000 f89f 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2207      	movs	r2, #7
 80003ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2100      	movs	r1, #0
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 ff94 	bl	8001310 <HAL_RCC_ClockConfig>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003ec:	f000 f88a 	bl	8000504 <Error_Handler>
  }
}
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b013      	add	sp, #76	@ 0x4c
 80003f6:	bd90      	pop	{r4, r7, pc}

080003f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	@ 0x28
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	2320      	movs	r3, #32
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	0018      	movs	r0, r3
 8000404:	2308      	movs	r3, #8
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f001 fda7 	bl	8001f5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	231c      	movs	r3, #28
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f001 fda0 	bl	8001f5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800041c:	4b24      	ldr	r3, [pc, #144]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 800041e:	2280      	movs	r2, #128	@ 0x80
 8000420:	05d2      	lsls	r2, r2, #23
 8000422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000424:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 8000426:	220f      	movs	r2, #15
 8000428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042a:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000430:	4b1f      	ldr	r3, [pc, #124]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 8000432:	4a20      	ldr	r2, [pc, #128]	@ (80004b4 <MX_TIM2_Init+0xbc>)
 8000434:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000436:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000442:	4b1b      	ldr	r3, [pc, #108]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 8000444:	0018      	movs	r0, r3
 8000446:	f001 f8af 	bl	80015a8 <HAL_TIM_PWM_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800044e:	f000 f859 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000452:	2120      	movs	r1, #32
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000460:	187a      	adds	r2, r7, r1
 8000462:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 8000464:	0011      	movs	r1, r2
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fd1a 	bl	8001ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000470:	f000 f848 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2260      	movs	r2, #96	@ 0x60
 8000478:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800048c:	1d39      	adds	r1, r7, #4
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 8000490:	2208      	movs	r2, #8
 8000492:	0018      	movs	r0, r3
 8000494:	f001 f990 	bl	80017b8 <HAL_TIM_PWM_ConfigChannel>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800049c:	f000 f832 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004a0:	4b03      	ldr	r3, [pc, #12]	@ (80004b0 <MX_TIM2_Init+0xb8>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 f874 	bl	8000590 <HAL_TIM_MspPostInit>

}
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b00a      	add	sp, #40	@ 0x28
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000028 	.word	0x20000028
 80004b4:	0000270f 	.word	0x0000270f

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <MX_GPIO_Init+0x48>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_GPIO_Init+0x48>)
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	03c9      	lsls	r1, r1, #15
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_GPIO_Init+0x48>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	03db      	lsls	r3, r3, #15
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_GPIO_Init+0x48>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_GPIO_Init+0x48>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <MX_GPIO_Init+0x48>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	40021000 	.word	0x40021000

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <HAL_MspInit+0x44>)
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <HAL_MspInit+0x44>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	619a      	str	r2, [r3, #24]
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <HAL_MspInit+0x44>)
 8000530:	69da      	ldr	r2, [r3, #28]
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <HAL_MspInit+0x44>)
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	0549      	lsls	r1, r1, #21
 8000538:	430a      	orrs	r2, r1
 800053a:	61da      	str	r2, [r3, #28]
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <HAL_MspInit+0x44>)
 800053e:	69da      	ldr	r2, [r3, #28]
 8000540:	2380      	movs	r3, #128	@ 0x80
 8000542:	055b      	lsls	r3, r3, #21
 8000544:	4013      	ands	r3, r2
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	429a      	cmp	r2, r3
 800056a:	d10b      	bne.n	8000584 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800056c:	4b07      	ldr	r3, [pc, #28]	@ (800058c <HAL_TIM_PWM_MspInit+0x34>)
 800056e:	69da      	ldr	r2, [r3, #28]
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_TIM_PWM_MspInit+0x34>)
 8000572:	2101      	movs	r1, #1
 8000574:	430a      	orrs	r2, r1
 8000576:	61da      	str	r2, [r3, #28]
 8000578:	4b04      	ldr	r3, [pc, #16]	@ (800058c <HAL_TIM_PWM_MspInit+0x34>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	@ 0x24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	240c      	movs	r4, #12
 800059a:	193b      	adds	r3, r7, r4
 800059c:	0018      	movs	r0, r3
 800059e:	2314      	movs	r3, #20
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f001 fcda 	bl	8001f5c <memset>
  if(htim->Instance==TIM2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	2380      	movs	r3, #128	@ 0x80
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d124      	bne.n	80005fe <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <HAL_TIM_MspPostInit+0x78>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <HAL_TIM_MspPostInit+0x78>)
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	0289      	lsls	r1, r1, #10
 80005be:	430a      	orrs	r2, r1
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <HAL_TIM_MspPostInit+0x78>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	2380      	movs	r3, #128	@ 0x80
 80005c8:	029b      	lsls	r3, r3, #10
 80005ca:	4013      	ands	r3, r2
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005d0:	0021      	movs	r1, r4
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2204      	movs	r2, #4
 80005d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2202      	movs	r2, #2
 80005dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2202      	movs	r2, #2
 80005ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	187a      	adds	r2, r7, r1
 80005f2:	2390      	movs	r3, #144	@ 0x90
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 f98b 	bl	8000914 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b009      	add	sp, #36	@ 0x24
 8000604:	bd90      	pop	{r4, r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	40021000 	.word	0x40021000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	e7fd      	b.n	8000610 <NMI_Handler+0x4>

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	e7fd      	b.n	8000618 <HardFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f87a 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	@ (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800064c:	f7ff fff7 	bl	800063e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000676:	f001 fc79 	bl	8001f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fe3f 	bl	80002fc <main>

0800067e <LoopForever>:

LoopForever:
    b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800068c:	08002004 	.word	0x08002004
  ldr r2, =_sbss
 8000690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000694:	20000074 	.word	0x20000074

08000698 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_COMP_IRQHandler>
	...

0800069c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <HAL_Init+0x24>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_Init+0x24>)
 80006a6:	2110      	movs	r1, #16
 80006a8:	430a      	orrs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f809 	bl	80006c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b2:	f7ff ff2d 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <HAL_InitTick+0x5c>)
 80006ce:	681c      	ldr	r4, [r3, #0]
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <HAL_InitTick+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	0019      	movs	r1, r3
 80006d6:	23fa      	movs	r3, #250	@ 0xfa
 80006d8:	0098      	lsls	r0, r3, #2
 80006da:	f7ff fd15 	bl	8000108 <__udivsi3>
 80006de:	0003      	movs	r3, r0
 80006e0:	0019      	movs	r1, r3
 80006e2:	0020      	movs	r0, r4
 80006e4:	f7ff fd10 	bl	8000108 <__udivsi3>
 80006e8:	0003      	movs	r3, r0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f905 	bl	80008fa <HAL_SYSTICK_Config>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e00f      	b.n	8000718 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d80b      	bhi.n	8000716 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	2301      	movs	r3, #1
 8000702:	425b      	negs	r3, r3
 8000704:	2200      	movs	r2, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f000 f8e2 	bl	80008d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <HAL_InitTick+0x64>)
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b003      	add	sp, #12
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	001a      	movs	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	18d2      	adds	r2, r2, r3
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <HAL_IncTick+0x20>)
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	20000008 	.word	0x20000008
 800074c:	20000070 	.word	0x20000070

08000750 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	@ (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	20000070 	.word	0x20000070

08000764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff fff0 	bl	8000750 <HAL_GetTick>
 8000770:	0003      	movs	r3, r0
 8000772:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077e:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <HAL_Delay+0x44>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	001a      	movs	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	189b      	adds	r3, r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	f7ff ffe0 	bl	8000750 <HAL_GetTick>
 8000790:	0002      	movs	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d8f7      	bhi.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	20000008 	.word	0x20000008

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b7f      	cmp	r3, #127	@ 0x7f
 80007c0:	d828      	bhi.n	8000814 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000880 <__NVIC_SetPriority+0xd4>)
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	33c0      	adds	r3, #192	@ 0xc0
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	589b      	ldr	r3, [r3, r2]
 80007d2:	1dfa      	adds	r2, r7, #7
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	0011      	movs	r1, r2
 80007d8:	2203      	movs	r2, #3
 80007da:	400a      	ands	r2, r1
 80007dc:	00d2      	lsls	r2, r2, #3
 80007de:	21ff      	movs	r1, #255	@ 0xff
 80007e0:	4091      	lsls	r1, r2
 80007e2:	000a      	movs	r2, r1
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	401a      	ands	r2, r3
 80007e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	019b      	lsls	r3, r3, #6
 80007ee:	22ff      	movs	r2, #255	@ 0xff
 80007f0:	401a      	ands	r2, r3
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0018      	movs	r0, r3
 80007f8:	2303      	movs	r3, #3
 80007fa:	4003      	ands	r3, r0
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000800:	481f      	ldr	r0, [pc, #124]	@ (8000880 <__NVIC_SetPriority+0xd4>)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b25b      	sxtb	r3, r3
 8000808:	089b      	lsrs	r3, r3, #2
 800080a:	430a      	orrs	r2, r1
 800080c:	33c0      	adds	r3, #192	@ 0xc0
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000812:	e031      	b.n	8000878 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	4a1b      	ldr	r2, [pc, #108]	@ (8000884 <__NVIC_SetPriority+0xd8>)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	0019      	movs	r1, r3
 800081c:	230f      	movs	r3, #15
 800081e:	400b      	ands	r3, r1
 8000820:	3b08      	subs	r3, #8
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	3306      	adds	r3, #6
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	18d3      	adds	r3, r2, r3
 800082a:	3304      	adds	r3, #4
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1dfa      	adds	r2, r7, #7
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	0011      	movs	r1, r2
 8000834:	2203      	movs	r2, #3
 8000836:	400a      	ands	r2, r1
 8000838:	00d2      	lsls	r2, r2, #3
 800083a:	21ff      	movs	r1, #255	@ 0xff
 800083c:	4091      	lsls	r1, r2
 800083e:	000a      	movs	r2, r1
 8000840:	43d2      	mvns	r2, r2
 8000842:	401a      	ands	r2, r3
 8000844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	019b      	lsls	r3, r3, #6
 800084a:	22ff      	movs	r2, #255	@ 0xff
 800084c:	401a      	ands	r2, r3
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	2303      	movs	r3, #3
 8000856:	4003      	ands	r3, r0
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085c:	4809      	ldr	r0, [pc, #36]	@ (8000884 <__NVIC_SetPriority+0xd8>)
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	001c      	movs	r4, r3
 8000864:	230f      	movs	r3, #15
 8000866:	4023      	ands	r3, r4
 8000868:	3b08      	subs	r3, #8
 800086a:	089b      	lsrs	r3, r3, #2
 800086c:	430a      	orrs	r2, r1
 800086e:	3306      	adds	r3, #6
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	18c3      	adds	r3, r0, r3
 8000874:	3304      	adds	r3, #4
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b003      	add	sp, #12
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	045b      	lsls	r3, r3, #17
 8000898:	429a      	cmp	r2, r3
 800089a:	d301      	bcc.n	80008a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089c:	2301      	movs	r3, #1
 800089e:	e010      	b.n	80008c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <SysTick_Config+0x44>)
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	3a01      	subs	r2, #1
 80008a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a8:	2301      	movs	r3, #1
 80008aa:	425b      	negs	r3, r3
 80008ac:	2103      	movs	r1, #3
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff ff7c 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <SysTick_Config+0x44>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <SysTick_Config+0x44>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	210f      	movs	r1, #15
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	1c02      	adds	r2, r0, #0
 80008e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff ff5d 	bl	80007ac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b004      	add	sp, #16
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff ffbf 	bl	8000888 <SysTick_Config>
 800090a:	0003      	movs	r3, r0
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b002      	add	sp, #8
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e155      	b.n	8000bd0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	4091      	lsls	r1, r2
 800092e:	000a      	movs	r2, r1
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d100      	bne.n	800093c <HAL_GPIO_Init+0x28>
 800093a:	e146      	b.n	8000bca <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2203      	movs	r2, #3
 8000942:	4013      	ands	r3, r2
 8000944:	2b01      	cmp	r3, #1
 8000946:	d005      	beq.n	8000954 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2203      	movs	r2, #3
 800094e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000950:	2b02      	cmp	r3, #2
 8000952:	d130      	bne.n	80009b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	43da      	mvns	r2, r3
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800098a:	2201      	movs	r2, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	43da      	mvns	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	2201      	movs	r2, #1
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2203      	movs	r2, #3
 80009bc:	4013      	ands	r3, r2
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d017      	beq.n	80009f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	43da      	mvns	r2, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2203      	movs	r2, #3
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d123      	bne.n	8000a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	08da      	lsrs	r2, r3, #3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3208      	adds	r2, #8
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	58d3      	ldr	r3, [r2, r3]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2207      	movs	r2, #7
 8000a10:	4013      	ands	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	220f      	movs	r2, #15
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	691a      	ldr	r2, [r3, #16]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2107      	movs	r1, #7
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	08da      	lsrs	r2, r3, #3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3208      	adds	r2, #8
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	6939      	ldr	r1, [r7, #16]
 8000a44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	43da      	mvns	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2203      	movs	r2, #3
 8000a64:	401a      	ands	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	23c0      	movs	r3, #192	@ 0xc0
 8000a80:	029b      	lsls	r3, r3, #10
 8000a82:	4013      	ands	r3, r2
 8000a84:	d100      	bne.n	8000a88 <HAL_GPIO_Init+0x174>
 8000a86:	e0a0      	b.n	8000bca <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a88:	4b57      	ldr	r3, [pc, #348]	@ (8000be8 <HAL_GPIO_Init+0x2d4>)
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	4b56      	ldr	r3, [pc, #344]	@ (8000be8 <HAL_GPIO_Init+0x2d4>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	430a      	orrs	r2, r1
 8000a92:	619a      	str	r2, [r3, #24]
 8000a94:	4b54      	ldr	r3, [pc, #336]	@ (8000be8 <HAL_GPIO_Init+0x2d4>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aa0:	4a52      	ldr	r2, [pc, #328]	@ (8000bec <HAL_GPIO_Init+0x2d8>)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	589b      	ldr	r3, [r3, r2]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	409a      	lsls	r2, r3
 8000aba:	0013      	movs	r3, r2
 8000abc:	43da      	mvns	r2, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	2390      	movs	r3, #144	@ 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d019      	beq.n	8000b02 <HAL_GPIO_Init+0x1ee>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a47      	ldr	r2, [pc, #284]	@ (8000bf0 <HAL_GPIO_Init+0x2dc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d013      	beq.n	8000afe <HAL_GPIO_Init+0x1ea>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a46      	ldr	r2, [pc, #280]	@ (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d00d      	beq.n	8000afa <HAL_GPIO_Init+0x1e6>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a45      	ldr	r2, [pc, #276]	@ (8000bf8 <HAL_GPIO_Init+0x2e4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d007      	beq.n	8000af6 <HAL_GPIO_Init+0x1e2>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a44      	ldr	r2, [pc, #272]	@ (8000bfc <HAL_GPIO_Init+0x2e8>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_GPIO_Init+0x1de>
 8000aee:	2304      	movs	r3, #4
 8000af0:	e008      	b.n	8000b04 <HAL_GPIO_Init+0x1f0>
 8000af2:	2305      	movs	r3, #5
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x1f0>
 8000af6:	2303      	movs	r3, #3
 8000af8:	e004      	b.n	8000b04 <HAL_GPIO_Init+0x1f0>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e002      	b.n	8000b04 <HAL_GPIO_Init+0x1f0>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <HAL_GPIO_Init+0x1f0>
 8000b02:	2300      	movs	r3, #0
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	2103      	movs	r1, #3
 8000b08:	400a      	ands	r2, r1
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	4093      	lsls	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b14:	4935      	ldr	r1, [pc, #212]	@ (8000bec <HAL_GPIO_Init+0x2d8>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b22:	4b37      	ldr	r3, [pc, #220]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	035b      	lsls	r3, r3, #13
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b46:	4b2e      	ldr	r3, [pc, #184]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43da      	mvns	r2, r3
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	039b      	lsls	r3, r3, #14
 8000b64:	4013      	ands	r3, r2
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b76:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	2380      	movs	r3, #128	@ 0x80
 8000b8c:	029b      	lsls	r3, r3, #10
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	025b      	lsls	r3, r3, #9
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_GPIO_Init+0x2ec>)
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	40da      	lsrs	r2, r3
 8000bd8:	1e13      	subs	r3, r2, #0
 8000bda:	d000      	beq.n	8000bde <HAL_GPIO_Init+0x2ca>
 8000bdc:	e6a2      	b.n	8000924 <HAL_GPIO_Init+0x10>
  } 
}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b006      	add	sp, #24
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010000 	.word	0x40010000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	48000c00 	.word	0x48000c00
 8000bfc:	48001000 	.word	0x48001000
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f000 fb76 	bl	8001304 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d100      	bne.n	8000c24 <HAL_RCC_OscConfig+0x20>
 8000c22:	e08e      	b.n	8000d42 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c24:	4bc5      	ldr	r3, [pc, #788]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	220c      	movs	r2, #12
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d00e      	beq.n	8000c4e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c30:	4bc2      	ldr	r3, [pc, #776]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	220c      	movs	r2, #12
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d117      	bne.n	8000c6c <HAL_RCC_OscConfig+0x68>
 8000c3c:	4bbf      	ldr	r3, [pc, #764]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	23c0      	movs	r3, #192	@ 0xc0
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	401a      	ands	r2, r3
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d10e      	bne.n	8000c6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4e:	4bbb      	ldr	r3, [pc, #748]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	2380      	movs	r3, #128	@ 0x80
 8000c54:	029b      	lsls	r3, r3, #10
 8000c56:	4013      	ands	r3, r2
 8000c58:	d100      	bne.n	8000c5c <HAL_RCC_OscConfig+0x58>
 8000c5a:	e071      	b.n	8000d40 <HAL_RCC_OscConfig+0x13c>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d000      	beq.n	8000c66 <HAL_RCC_OscConfig+0x62>
 8000c64:	e06c      	b.n	8000d40 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f000 fb4c 	bl	8001304 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d107      	bne.n	8000c84 <HAL_RCC_OscConfig+0x80>
 8000c74:	4bb1      	ldr	r3, [pc, #708]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4bb0      	ldr	r3, [pc, #704]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c7a:	2180      	movs	r1, #128	@ 0x80
 8000c7c:	0249      	lsls	r1, r1, #9
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e02f      	b.n	8000ce4 <HAL_RCC_OscConfig+0xe0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10c      	bne.n	8000ca6 <HAL_RCC_OscConfig+0xa2>
 8000c8c:	4bab      	ldr	r3, [pc, #684]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4baa      	ldr	r3, [pc, #680]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c92:	49ab      	ldr	r1, [pc, #684]	@ (8000f40 <HAL_RCC_OscConfig+0x33c>)
 8000c94:	400a      	ands	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	4ba8      	ldr	r3, [pc, #672]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4ba7      	ldr	r3, [pc, #668]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000c9e:	49a9      	ldr	r1, [pc, #676]	@ (8000f44 <HAL_RCC_OscConfig+0x340>)
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e01e      	b.n	8000ce4 <HAL_RCC_OscConfig+0xe0>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d10e      	bne.n	8000ccc <HAL_RCC_OscConfig+0xc8>
 8000cae:	4ba3      	ldr	r3, [pc, #652]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cb4:	2180      	movs	r1, #128	@ 0x80
 8000cb6:	02c9      	lsls	r1, r1, #11
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	4b9f      	ldr	r3, [pc, #636]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b9e      	ldr	r3, [pc, #632]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cc2:	2180      	movs	r1, #128	@ 0x80
 8000cc4:	0249      	lsls	r1, r1, #9
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e00b      	b.n	8000ce4 <HAL_RCC_OscConfig+0xe0>
 8000ccc:	4b9b      	ldr	r3, [pc, #620]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cd2:	499b      	ldr	r1, [pc, #620]	@ (8000f40 <HAL_RCC_OscConfig+0x33c>)
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	4b98      	ldr	r3, [pc, #608]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b97      	ldr	r3, [pc, #604]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000cde:	4999      	ldr	r1, [pc, #612]	@ (8000f44 <HAL_RCC_OscConfig+0x340>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d014      	beq.n	8000d16 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cec:	f7ff fd30 	bl	8000750 <HAL_GetTick>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf6:	f7ff fd2b 	bl	8000750 <HAL_GetTick>
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b64      	cmp	r3, #100	@ 0x64
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e2fd      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	4b8c      	ldr	r3, [pc, #560]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	2380      	movs	r3, #128	@ 0x80
 8000d0e:	029b      	lsls	r3, r3, #10
 8000d10:	4013      	ands	r3, r2
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0xf2>
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d16:	f7ff fd1b 	bl	8000750 <HAL_GetTick>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fd16 	bl	8000750 <HAL_GetTick>
 8000d24:	0002      	movs	r2, r0
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	@ 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e2e8      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	4b82      	ldr	r3, [pc, #520]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	029b      	lsls	r3, r3, #10
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d1f0      	bne.n	8000d20 <HAL_RCC_OscConfig+0x11c>
 8000d3e:	e000      	b.n	8000d42 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2202      	movs	r2, #2
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d100      	bne.n	8000d4e <HAL_RCC_OscConfig+0x14a>
 8000d4c:	e06c      	b.n	8000e28 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	220c      	movs	r2, #12
 8000d54:	4013      	ands	r3, r2
 8000d56:	d00e      	beq.n	8000d76 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d58:	4b78      	ldr	r3, [pc, #480]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	220c      	movs	r2, #12
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d11f      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1a0>
 8000d64:	4b75      	ldr	r3, [pc, #468]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	23c0      	movs	r3, #192	@ 0xc0
 8000d6a:	025b      	lsls	r3, r3, #9
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	2380      	movs	r3, #128	@ 0x80
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d116      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d76:	4b71      	ldr	r3, [pc, #452]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d005      	beq.n	8000d8c <HAL_RCC_OscConfig+0x188>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d001      	beq.n	8000d8c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e2bb      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	22f8      	movs	r2, #248	@ 0xf8
 8000d92:	4393      	bics	r3, r2
 8000d94:	0019      	movs	r1, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	00da      	lsls	r2, r3, #3
 8000d9c:	4b67      	ldr	r3, [pc, #412]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	e041      	b.n	8000e28 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d024      	beq.n	8000df6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dac:	4b63      	ldr	r3, [pc, #396]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b62      	ldr	r3, [pc, #392]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fcca 	bl	8000750 <HAL_GetTick>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc2:	f7ff fcc5 	bl	8000750 <HAL_GetTick>
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e297      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd4:	4b59      	ldr	r3, [pc, #356]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2202      	movs	r2, #2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d0f1      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dde:	4b57      	ldr	r3, [pc, #348]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	22f8      	movs	r2, #248	@ 0xf8
 8000de4:	4393      	bics	r3, r2
 8000de6:	0019      	movs	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	00da      	lsls	r2, r3, #3
 8000dee:	4b53      	ldr	r3, [pc, #332]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e018      	b.n	8000e28 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000df6:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b50      	ldr	r3, [pc, #320]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	438a      	bics	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fca5 	bl	8000750 <HAL_GetTick>
 8000e06:	0003      	movs	r3, r0
 8000e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fca0 	bl	8000750 <HAL_GetTick>
 8000e10:	0002      	movs	r2, r0
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e272      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1e:	4b47      	ldr	r3, [pc, #284]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2202      	movs	r2, #2
 8000e24:	4013      	ands	r3, r2
 8000e26:	d1f1      	bne.n	8000e0c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d036      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d019      	beq.n	8000e6e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e46:	f7ff fc83 	bl	8000750 <HAL_GetTick>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fc7e 	bl	8000750 <HAL_GetTick>
 8000e54:	0002      	movs	r2, r0
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e250      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e66:	2202      	movs	r2, #2
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d0f1      	beq.n	8000e50 <HAL_RCC_OscConfig+0x24c>
 8000e6c:	e018      	b.n	8000ea0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e6e:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e72:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000e74:	2101      	movs	r1, #1
 8000e76:	438a      	bics	r2, r1
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fc69 	bl	8000750 <HAL_GetTick>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc64 	bl	8000750 <HAL_GetTick>
 8000e88:	0002      	movs	r2, r0
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e236      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e96:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d1f1      	bne.n	8000e84 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d100      	bne.n	8000eac <HAL_RCC_OscConfig+0x2a8>
 8000eaa:	e0b5      	b.n	8001018 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eac:	201f      	movs	r0, #31
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	055b      	lsls	r3, r3, #21
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d110      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	0549      	lsls	r1, r1, #21
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	61da      	str	r2, [r3, #28]
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000ed0:	69da      	ldr	r2, [r3, #28]
 8000ed2:	2380      	movs	r3, #128	@ 0x80
 8000ed4:	055b      	lsls	r3, r3, #21
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000edc:	183b      	adds	r3, r7, r0
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_RCC_OscConfig+0x344>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4013      	ands	r3, r2
 8000eec:	d11a      	bne.n	8000f24 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_RCC_OscConfig+0x344>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_RCC_OscConfig+0x344>)
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0049      	lsls	r1, r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000efc:	f7ff fc28 	bl	8000750 <HAL_GetTick>
 8000f00:	0003      	movs	r3, r0
 8000f02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f06:	f7ff fc23 	bl	8000750 <HAL_GetTick>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b64      	cmp	r3, #100	@ 0x64
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e1f5      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_RCC_OscConfig+0x344>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	d0f0      	beq.n	8000f06 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10f      	bne.n	8000f4c <HAL_RCC_OscConfig+0x348>
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	4b02      	ldr	r3, [pc, #8]	@ (8000f3c <HAL_RCC_OscConfig+0x338>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	621a      	str	r2, [r3, #32]
 8000f38:	e036      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3a4>
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	fffeffff 	.word	0xfffeffff
 8000f44:	fffbffff 	.word	0xfffbffff
 8000f48:	40007000 	.word	0x40007000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <HAL_RCC_OscConfig+0x36a>
 8000f54:	4bca      	ldr	r3, [pc, #808]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	4bc9      	ldr	r3, [pc, #804]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	621a      	str	r2, [r3, #32]
 8000f60:	4bc7      	ldr	r3, [pc, #796]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	6a1a      	ldr	r2, [r3, #32]
 8000f64:	4bc6      	ldr	r3, [pc, #792]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f66:	2104      	movs	r1, #4
 8000f68:	438a      	bics	r2, r1
 8000f6a:	621a      	str	r2, [r3, #32]
 8000f6c:	e01c      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3a4>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x38c>
 8000f76:	4bc2      	ldr	r3, [pc, #776]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f78:	6a1a      	ldr	r2, [r3, #32]
 8000f7a:	4bc1      	ldr	r3, [pc, #772]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	621a      	str	r2, [r3, #32]
 8000f82:	4bbf      	ldr	r3, [pc, #764]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f84:	6a1a      	ldr	r2, [r3, #32]
 8000f86:	4bbe      	ldr	r3, [pc, #760]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f88:	2101      	movs	r1, #1
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3a4>
 8000f90:	4bbb      	ldr	r3, [pc, #748]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	4bba      	ldr	r3, [pc, #744]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	438a      	bics	r2, r1
 8000f9a:	621a      	str	r2, [r3, #32]
 8000f9c:	4bb8      	ldr	r3, [pc, #736]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000f9e:	6a1a      	ldr	r2, [r3, #32]
 8000fa0:	4bb7      	ldr	r3, [pc, #732]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d014      	beq.n	8000fda <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fbce 	bl	8000750 <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	e009      	b.n	8000fce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fba:	f7ff fbc9 	bl	8000750 <HAL_GetTick>
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	4aaf      	ldr	r2, [pc, #700]	@ (8001284 <HAL_RCC_OscConfig+0x680>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e19a      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fce:	4bac      	ldr	r3, [pc, #688]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x3b6>
 8000fd8:	e013      	b.n	8001002 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fbb9 	bl	8000750 <HAL_GetTick>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe2:	e009      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fbb4 	bl	8000750 <HAL_GetTick>
 8000fe8:	0002      	movs	r2, r0
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	4aa5      	ldr	r2, [pc, #660]	@ (8001284 <HAL_RCC_OscConfig+0x680>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e185      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	4ba1      	ldr	r3, [pc, #644]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	4013      	ands	r3, r2
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001002:	231f      	movs	r3, #31
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100c:	4b9c      	ldr	r3, [pc, #624]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	4b9b      	ldr	r3, [pc, #620]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001012:	499d      	ldr	r1, [pc, #628]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 8001014:	400a      	ands	r2, r1
 8001016:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2210      	movs	r2, #16
 800101e:	4013      	ands	r3, r2
 8001020:	d063      	beq.n	80010ea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d12a      	bne.n	8001080 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800102a:	4b95      	ldr	r3, [pc, #596]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102e:	4b94      	ldr	r3, [pc, #592]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001030:	2104      	movs	r1, #4
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001036:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800103a:	4b91      	ldr	r3, [pc, #580]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800103c:	2101      	movs	r1, #1
 800103e:	430a      	orrs	r2, r1
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb85 	bl	8000750 <HAL_GetTick>
 8001046:	0003      	movs	r3, r0
 8001048:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800104c:	f7ff fb80 	bl	8000750 <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e152      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800105e:	4b88      	ldr	r3, [pc, #544]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001062:	2202      	movs	r2, #2
 8001064:	4013      	ands	r3, r2
 8001066:	d0f1      	beq.n	800104c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001068:	4b85      	ldr	r3, [pc, #532]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800106a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106c:	22f8      	movs	r2, #248	@ 0xf8
 800106e:	4393      	bics	r3, r2
 8001070:	0019      	movs	r1, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	00da      	lsls	r2, r3, #3
 8001078:	4b81      	ldr	r3, [pc, #516]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800107a:	430a      	orrs	r2, r1
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
 800107e:	e034      	b.n	80010ea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	3305      	adds	r3, #5
 8001086:	d111      	bne.n	80010ac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001088:	4b7d      	ldr	r3, [pc, #500]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800108a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800108c:	4b7c      	ldr	r3, [pc, #496]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800108e:	2104      	movs	r1, #4
 8001090:	438a      	bics	r2, r1
 8001092:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001094:	4b7a      	ldr	r3, [pc, #488]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001098:	22f8      	movs	r2, #248	@ 0xf8
 800109a:	4393      	bics	r3, r2
 800109c:	0019      	movs	r1, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	00da      	lsls	r2, r3, #3
 80010a4:	4b76      	ldr	r3, [pc, #472]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010aa:	e01e      	b.n	80010ea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010ac:	4b74      	ldr	r3, [pc, #464]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80010ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010b0:	4b73      	ldr	r3, [pc, #460]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80010b2:	2104      	movs	r1, #4
 80010b4:	430a      	orrs	r2, r1
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010b8:	4b71      	ldr	r3, [pc, #452]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80010ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010bc:	4b70      	ldr	r3, [pc, #448]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80010be:	2101      	movs	r1, #1
 80010c0:	438a      	bics	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fb44 	bl	8000750 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ce:	f7ff fb3f 	bl	8000750 <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e111      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010e0:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80010e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e4:	2202      	movs	r2, #2
 80010e6:	4013      	ands	r3, r2
 80010e8:	d1f1      	bne.n	80010ce <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2220      	movs	r2, #32
 80010f0:	4013      	ands	r3, r2
 80010f2:	d05c      	beq.n	80011ae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010f4:	4b62      	ldr	r3, [pc, #392]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	220c      	movs	r2, #12
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b0c      	cmp	r3, #12
 80010fe:	d00e      	beq.n	800111e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001100:	4b5f      	ldr	r3, [pc, #380]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	220c      	movs	r2, #12
 8001106:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001108:	2b08      	cmp	r3, #8
 800110a:	d114      	bne.n	8001136 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800110c:	4b5c      	ldr	r3, [pc, #368]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	23c0      	movs	r3, #192	@ 0xc0
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	401a      	ands	r2, r3
 8001116:	23c0      	movs	r3, #192	@ 0xc0
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	429a      	cmp	r2, r3
 800111c:	d10b      	bne.n	8001136 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800111e:	4b58      	ldr	r3, [pc, #352]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d040      	beq.n	80011ac <HAL_RCC_OscConfig+0x5a8>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d03c      	beq.n	80011ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0e6      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01b      	beq.n	8001176 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800113e:	4b50      	ldr	r3, [pc, #320]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001142:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	0249      	lsls	r1, r1, #9
 8001148:	430a      	orrs	r2, r1
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fb00 	bl	8000750 <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001156:	f7ff fafb 	bl	8000750 <HAL_GetTick>
 800115a:	0002      	movs	r2, r0
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e0cd      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001168:	4b45      	ldr	r3, [pc, #276]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800116a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	4013      	ands	r3, r2
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x552>
 8001174:	e01b      	b.n	80011ae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001176:	4b42      	ldr	r3, [pc, #264]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117a:	4b41      	ldr	r3, [pc, #260]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800117c:	4943      	ldr	r1, [pc, #268]	@ (800128c <HAL_RCC_OscConfig+0x688>)
 800117e:	400a      	ands	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fae5 	bl	8000750 <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800118c:	f7ff fae0 	bl	8000750 <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e0b2      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80011a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a2:	2380      	movs	r3, #128	@ 0x80
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x588>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011ac:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <HAL_RCC_OscConfig+0x5b4>
 80011b6:	e0a4      	b.n	8001302 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	220c      	movs	r2, #12
 80011be:	4013      	ands	r3, r2
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d100      	bne.n	80011c6 <HAL_RCC_OscConfig+0x5c2>
 80011c4:	e078      	b.n	80012b8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d14c      	bne.n	8001268 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80011d4:	492e      	ldr	r1, [pc, #184]	@ (8001290 <HAL_RCC_OscConfig+0x68c>)
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fab9 	bl	8000750 <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e4:	f7ff fab4 	bl	8000750 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e086      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	049b      	lsls	r3, r3, #18
 80011fe:	4013      	ands	r3, r2
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	220f      	movs	r2, #15
 8001208:	4393      	bics	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001212:	430a      	orrs	r2, r1
 8001214:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <HAL_RCC_OscConfig+0x690>)
 800121c:	4013      	ands	r3, r2
 800121e:	0019      	movs	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	431a      	orrs	r2, r3
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800122c:	430a      	orrs	r2, r1
 800122e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001236:	2180      	movs	r1, #128	@ 0x80
 8001238:	0449      	lsls	r1, r1, #17
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fa87 	bl	8000750 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fa82 	bl	8000750 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e054      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	@ 0x80
 8001260:	049b      	lsls	r3, r3, #18
 8001262:	4013      	ands	r3, r2
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0x644>
 8001266:	e04c      	b.n	8001302 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <HAL_RCC_OscConfig+0x68c>)
 8001270:	400a      	ands	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fa6c 	bl	8000750 <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x6a6>
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	40021000 	.word	0x40021000
 8001284:	00001388 	.word	0x00001388
 8001288:	efffffff 	.word	0xefffffff
 800128c:	fffeffff 	.word	0xfffeffff
 8001290:	feffffff 	.word	0xfeffffff
 8001294:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff fa5a 	bl	8000750 <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e02c      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_RCC_OscConfig+0x708>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2380      	movs	r3, #128	@ 0x80
 80012b0:	049b      	lsls	r3, r3, #18
 80012b2:	4013      	ands	r3, r2
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x694>
 80012b6:	e024      	b.n	8001302 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e01f      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_RCC_OscConfig+0x708>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HAL_RCC_OscConfig+0x708>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	23c0      	movs	r3, #192	@ 0xc0
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	401a      	ands	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	429a      	cmp	r2, r3
 80012de:	d10e      	bne.n	80012fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	220f      	movs	r2, #15
 80012e4:	401a      	ands	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	23f0      	movs	r3, #240	@ 0xf0
 80012f2:	039b      	lsls	r3, r3, #14
 80012f4:	401a      	ands	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b008      	add	sp, #32
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0bf      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001324:	4b61      	ldr	r3, [pc, #388]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d911      	bls.n	8001356 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b5e      	ldr	r3, [pc, #376]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	4393      	bics	r3, r2
 800133a:	0019      	movs	r1, r3
 800133c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001344:	4b59      	ldr	r3, [pc, #356]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	4013      	ands	r3, r2
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d001      	beq.n	8001356 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0a6      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d015      	beq.n	800138c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2204      	movs	r2, #4
 8001366:	4013      	ands	r3, r2
 8001368:	d006      	beq.n	8001378 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800136a:	4b51      	ldr	r3, [pc, #324]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4b50      	ldr	r3, [pc, #320]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001370:	21e0      	movs	r1, #224	@ 0xe0
 8001372:	00c9      	lsls	r1, r1, #3
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001378:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	22f0      	movs	r2, #240	@ 0xf0
 800137e:	4393      	bics	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001388:	430a      	orrs	r2, r1
 800138a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	d04c      	beq.n	8001430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	029b      	lsls	r3, r3, #10
 80013a6:	4013      	ands	r3, r2
 80013a8:	d120      	bne.n	80013ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e07a      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	049b      	lsls	r3, r3, #18
 80013be:	4013      	ands	r3, r2
 80013c0:	d114      	bne.n	80013ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e06e      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013ce:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 80013d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d108      	bne.n	80013ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e062      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e05b      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	4393      	bics	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001400:	f7ff f9a6 	bl	8000750 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001408:	e009      	b.n	800141e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140a:	f7ff f9a1 	bl	8000750 <HAL_GetTick>
 800140e:	0002      	movs	r2, r0
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	4a27      	ldr	r2, [pc, #156]	@ (80014b4 <HAL_RCC_ClockConfig+0x1a4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e042      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	220c      	movs	r2, #12
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	429a      	cmp	r2, r3
 800142e:	d1ec      	bne.n	800140a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d211      	bcs.n	8001462 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	4393      	bics	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_RCC_ClockConfig+0x19c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e020      	b.n	80014a4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2204      	movs	r2, #4
 8001468:	4013      	ands	r3, r2
 800146a:	d009      	beq.n	8001480 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <HAL_RCC_ClockConfig+0x1a8>)
 8001472:	4013      	ands	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001480:	f000 f820 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 8001484:	0001      	movs	r1, r0
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_RCC_ClockConfig+0x1a0>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	220f      	movs	r2, #15
 800148e:	4013      	ands	r3, r2
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_RCC_ClockConfig+0x1ac>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	000a      	movs	r2, r1
 8001496:	40da      	lsrs	r2, r3
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_RCC_ClockConfig+0x1b0>)
 800149a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff f911 	bl	80006c4 <HAL_InitTick>
  
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40022000 	.word	0x40022000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	00001388 	.word	0x00001388
 80014b8:	fffff8ff 	.word	0xfffff8ff
 80014bc:	08001fcc 	.word	0x08001fcc
 80014c0:	20000000 	.word	0x20000000

080014c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80014de:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <HAL_RCC_GetSysClockFreq+0xd0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	220c      	movs	r2, #12
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d046      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0xb8>
 80014ee:	d848      	bhi.n	8001582 <HAL_RCC_GetSysClockFreq+0xbe>
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d002      	beq.n	80014fa <HAL_RCC_GetSysClockFreq+0x36>
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d003      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x3c>
 80014f8:	e043      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_RCC_GetSysClockFreq+0xd4>)
 80014fc:	613b      	str	r3, [r7, #16]
      break;
 80014fe:	e043      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	220f      	movs	r2, #15
 8001506:	4013      	ands	r3, r2
 8001508:	4a24      	ldr	r2, [pc, #144]	@ (800159c <HAL_RCC_GetSysClockFreq+0xd8>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001512:	220f      	movs	r2, #15
 8001514:	4013      	ands	r3, r2
 8001516:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	23c0      	movs	r3, #192	@ 0xc0
 8001520:	025b      	lsls	r3, r3, #9
 8001522:	401a      	ands	r2, r3
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	025b      	lsls	r3, r3, #9
 8001528:	429a      	cmp	r2, r3
 800152a:	d109      	bne.n	8001540 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	481a      	ldr	r0, [pc, #104]	@ (8001598 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001530:	f7fe fdea 	bl	8000108 <__udivsi3>
 8001534:	0003      	movs	r3, r0
 8001536:	001a      	movs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4353      	muls	r3, r2
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e01a      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	23c0      	movs	r3, #192	@ 0xc0
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	401a      	ands	r2, r3
 8001548:	23c0      	movs	r3, #192	@ 0xc0
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	429a      	cmp	r2, r3
 800154e:	d109      	bne.n	8001564 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	4814      	ldr	r0, [pc, #80]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001554:	f7fe fdd8 	bl	8000108 <__udivsi3>
 8001558:	0003      	movs	r3, r0
 800155a:	001a      	movs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4353      	muls	r3, r2
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e008      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001568:	f7fe fdce 	bl	8000108 <__udivsi3>
 800156c:	0003      	movs	r3, r0
 800156e:	001a      	movs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4353      	muls	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	613b      	str	r3, [r7, #16]
      break;
 800157a:	e005      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800157e:	613b      	str	r3, [r7, #16]
      break;
 8001580:	e002      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001584:	613b      	str	r3, [r7, #16]
      break;
 8001586:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001588:	693b      	ldr	r3, [r7, #16]
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b006      	add	sp, #24
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	40021000 	.word	0x40021000
 8001598:	007a1200 	.word	0x007a1200
 800159c:	08001fdc 	.word	0x08001fdc
 80015a0:	08001fec 	.word	0x08001fec
 80015a4:	02dc6c00 	.word	0x02dc6c00

080015a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e042      	b.n	8001640 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	223d      	movs	r2, #61	@ 0x3d
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	223c      	movs	r2, #60	@ 0x3c
 80015ca:	2100      	movs	r1, #0
 80015cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7fe ffc1 	bl	8000558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	223d      	movs	r2, #61	@ 0x3d
 80015da:	2102      	movs	r1, #2
 80015dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	0019      	movs	r1, r3
 80015e8:	0010      	movs	r0, r2
 80015ea:	f000 f9ab 	bl	8001944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2246      	movs	r2, #70	@ 0x46
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	223e      	movs	r2, #62	@ 0x3e
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	223f      	movs	r2, #63	@ 0x3f
 8001602:	2101      	movs	r1, #1
 8001604:	5499      	strb	r1, [r3, r2]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2240      	movs	r2, #64	@ 0x40
 800160a:	2101      	movs	r1, #1
 800160c:	5499      	strb	r1, [r3, r2]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2241      	movs	r2, #65	@ 0x41
 8001612:	2101      	movs	r1, #1
 8001614:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2242      	movs	r2, #66	@ 0x42
 800161a:	2101      	movs	r1, #1
 800161c:	5499      	strb	r1, [r3, r2]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2243      	movs	r2, #67	@ 0x43
 8001622:	2101      	movs	r1, #1
 8001624:	5499      	strb	r1, [r3, r2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2244      	movs	r2, #68	@ 0x44
 800162a:	2101      	movs	r1, #1
 800162c:	5499      	strb	r1, [r3, r2]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2245      	movs	r2, #69	@ 0x45
 8001632:	2101      	movs	r1, #1
 8001634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	223d      	movs	r2, #61	@ 0x3d
 800163a:	2101      	movs	r1, #1
 800163c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	0018      	movs	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d108      	bne.n	800166a <HAL_TIM_PWM_Start+0x22>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	223e      	movs	r2, #62	@ 0x3e
 800165c:	5c9b      	ldrb	r3, [r3, r2]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	4193      	sbcs	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	e01f      	b.n	80016aa <HAL_TIM_PWM_Start+0x62>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b04      	cmp	r3, #4
 800166e:	d108      	bne.n	8001682 <HAL_TIM_PWM_Start+0x3a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	223f      	movs	r2, #63	@ 0x3f
 8001674:	5c9b      	ldrb	r3, [r3, r2]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	4193      	sbcs	r3, r2
 800167e:	b2db      	uxtb	r3, r3
 8001680:	e013      	b.n	80016aa <HAL_TIM_PWM_Start+0x62>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b08      	cmp	r3, #8
 8001686:	d108      	bne.n	800169a <HAL_TIM_PWM_Start+0x52>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2240      	movs	r2, #64	@ 0x40
 800168c:	5c9b      	ldrb	r3, [r3, r2]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b01      	subs	r3, #1
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	4193      	sbcs	r3, r2
 8001696:	b2db      	uxtb	r3, r3
 8001698:	e007      	b.n	80016aa <HAL_TIM_PWM_Start+0x62>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2241      	movs	r2, #65	@ 0x41
 800169e:	5c9b      	ldrb	r3, [r3, r2]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	4193      	sbcs	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e074      	b.n	800179c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d104      	bne.n	80016c2 <HAL_TIM_PWM_Start+0x7a>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	223e      	movs	r2, #62	@ 0x3e
 80016bc:	2102      	movs	r1, #2
 80016be:	5499      	strb	r1, [r3, r2]
 80016c0:	e013      	b.n	80016ea <HAL_TIM_PWM_Start+0xa2>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d104      	bne.n	80016d2 <HAL_TIM_PWM_Start+0x8a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	223f      	movs	r2, #63	@ 0x3f
 80016cc:	2102      	movs	r1, #2
 80016ce:	5499      	strb	r1, [r3, r2]
 80016d0:	e00b      	b.n	80016ea <HAL_TIM_PWM_Start+0xa2>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d104      	bne.n	80016e2 <HAL_TIM_PWM_Start+0x9a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	2102      	movs	r1, #2
 80016de:	5499      	strb	r1, [r3, r2]
 80016e0:	e003      	b.n	80016ea <HAL_TIM_PWM_Start+0xa2>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2241      	movs	r2, #65	@ 0x41
 80016e6:	2102      	movs	r1, #2
 80016e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6839      	ldr	r1, [r7, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 fbb0 	bl	8001e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a29      	ldr	r2, [pc, #164]	@ (80017a4 <HAL_TIM_PWM_Start+0x15c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00e      	beq.n	8001720 <HAL_TIM_PWM_Start+0xd8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a28      	ldr	r2, [pc, #160]	@ (80017a8 <HAL_TIM_PWM_Start+0x160>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d009      	beq.n	8001720 <HAL_TIM_PWM_Start+0xd8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a26      	ldr	r2, [pc, #152]	@ (80017ac <HAL_TIM_PWM_Start+0x164>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d004      	beq.n	8001720 <HAL_TIM_PWM_Start+0xd8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a25      	ldr	r2, [pc, #148]	@ (80017b0 <HAL_TIM_PWM_Start+0x168>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_TIM_PWM_Start+0xdc>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_TIM_PWM_Start+0xde>
 8001724:	2300      	movs	r3, #0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2180      	movs	r1, #128	@ 0x80
 8001736:	0209      	lsls	r1, r1, #8
 8001738:	430a      	orrs	r2, r1
 800173a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <HAL_TIM_PWM_Start+0x15c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00f      	beq.n	8001766 <HAL_TIM_PWM_Start+0x11e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	429a      	cmp	r2, r3
 8001750:	d009      	beq.n	8001766 <HAL_TIM_PWM_Start+0x11e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_TIM_PWM_Start+0x16c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d004      	beq.n	8001766 <HAL_TIM_PWM_Start+0x11e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <HAL_TIM_PWM_Start+0x160>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d111      	bne.n	800178a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2207      	movs	r2, #7
 800176e:	4013      	ands	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b06      	cmp	r3, #6
 8001776:	d010      	beq.n	800179a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2101      	movs	r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001788:	e007      	b.n	800179a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b004      	add	sp, #16
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40012c00 	.word	0x40012c00
 80017a8:	40014000 	.word	0x40014000
 80017ac:	40014400 	.word	0x40014400
 80017b0:	40014800 	.word	0x40014800
 80017b4:	40000400 	.word	0x40000400

080017b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c4:	2317      	movs	r3, #23
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	223c      	movs	r2, #60	@ 0x3c
 80017d0:	5c9b      	ldrb	r3, [r3, r2]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_TIM_PWM_ConfigChannel+0x22>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e0ad      	b.n	8001936 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	223c      	movs	r2, #60	@ 0x3c
 80017de:	2101      	movs	r1, #1
 80017e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d100      	bne.n	80017ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80017e8:	e076      	b.n	80018d8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d900      	bls.n	80017f2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80017f0:	e095      	b.n	800191e <HAL_TIM_PWM_ConfigChannel+0x166>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d04e      	beq.n	8001896 <HAL_TIM_PWM_ConfigChannel+0xde>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d900      	bls.n	8001800 <HAL_TIM_PWM_ConfigChannel+0x48>
 80017fe:	e08e      	b.n	800191e <HAL_TIM_PWM_ConfigChannel+0x166>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_PWM_ConfigChannel+0x56>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d021      	beq.n	8001850 <HAL_TIM_PWM_ConfigChannel+0x98>
 800180c:	e087      	b.n	800191e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f000 f922 	bl	8001a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2108      	movs	r1, #8
 8001828:	430a      	orrs	r2, r1
 800182a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2104      	movs	r1, #4
 8001838:	438a      	bics	r2, r1
 800183a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6999      	ldr	r1, [r3, #24]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	619a      	str	r2, [r3, #24]
      break;
 800184e:	e06b      	b.n	8001928 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f000 f989 	bl	8001b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	0109      	lsls	r1, r1, #4
 800186c:	430a      	orrs	r2, r1
 800186e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4931      	ldr	r1, [pc, #196]	@ (8001940 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800187c:	400a      	ands	r2, r1
 800187e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6999      	ldr	r1, [r3, #24]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	021a      	lsls	r2, r3, #8
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	619a      	str	r2, [r3, #24]
      break;
 8001894:	e048      	b.n	8001928 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 f9ea 	bl	8001c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2108      	movs	r1, #8
 80018b0:	430a      	orrs	r2, r1
 80018b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69da      	ldr	r2, [r3, #28]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2104      	movs	r1, #4
 80018c0:	438a      	bics	r2, r1
 80018c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69d9      	ldr	r1, [r3, #28]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	61da      	str	r2, [r3, #28]
      break;
 80018d6:	e027      	b.n	8001928 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 fa4f 	bl	8001d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	0109      	lsls	r1, r1, #4
 80018f4:	430a      	orrs	r2, r1
 80018f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	490f      	ldr	r1, [pc, #60]	@ (8001940 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001904:	400a      	ands	r2, r1
 8001906:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69d9      	ldr	r1, [r3, #28]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	021a      	lsls	r2, r3, #8
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	61da      	str	r2, [r3, #28]
      break;
 800191c:	e004      	b.n	8001928 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800191e:	2317      	movs	r3, #23
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	223c      	movs	r2, #60	@ 0x3c
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

  return status;
 8001930:	2317      	movs	r3, #23
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b006      	add	sp, #24
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	fffffbff 	.word	0xfffffbff

08001944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3b      	ldr	r2, [pc, #236]	@ (8001a44 <TIM_Base_SetConfig+0x100>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d008      	beq.n	800196e <TIM_Base_SetConfig+0x2a>
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	2380      	movs	r3, #128	@ 0x80
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	429a      	cmp	r2, r3
 8001964:	d003      	beq.n	800196e <TIM_Base_SetConfig+0x2a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a37      	ldr	r2, [pc, #220]	@ (8001a48 <TIM_Base_SetConfig+0x104>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d108      	bne.n	8001980 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2270      	movs	r2, #112	@ 0x70
 8001972:	4393      	bics	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a30      	ldr	r2, [pc, #192]	@ (8001a44 <TIM_Base_SetConfig+0x100>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d018      	beq.n	80019ba <TIM_Base_SetConfig+0x76>
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	429a      	cmp	r2, r3
 8001990:	d013      	beq.n	80019ba <TIM_Base_SetConfig+0x76>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a2c      	ldr	r2, [pc, #176]	@ (8001a48 <TIM_Base_SetConfig+0x104>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00f      	beq.n	80019ba <TIM_Base_SetConfig+0x76>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a4c <TIM_Base_SetConfig+0x108>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00b      	beq.n	80019ba <TIM_Base_SetConfig+0x76>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a50 <TIM_Base_SetConfig+0x10c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <TIM_Base_SetConfig+0x76>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a29      	ldr	r2, [pc, #164]	@ (8001a54 <TIM_Base_SetConfig+0x110>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d003      	beq.n	80019ba <TIM_Base_SetConfig+0x76>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a28      	ldr	r2, [pc, #160]	@ (8001a58 <TIM_Base_SetConfig+0x114>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d108      	bne.n	80019cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <TIM_Base_SetConfig+0x118>)
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	4393      	bics	r3, r2
 80019d2:	001a      	movs	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <TIM_Base_SetConfig+0x100>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00b      	beq.n	8001a12 <TIM_Base_SetConfig+0xce>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <TIM_Base_SetConfig+0x10c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <TIM_Base_SetConfig+0xce>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a13      	ldr	r2, [pc, #76]	@ (8001a54 <TIM_Base_SetConfig+0x110>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d003      	beq.n	8001a12 <TIM_Base_SetConfig+0xce>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <TIM_Base_SetConfig+0x114>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d103      	bne.n	8001a1a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4393      	bics	r3, r2
 8001a34:	001a      	movs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
  }
}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b004      	add	sp, #16
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40002000 	.word	0x40002000
 8001a50:	40014000 	.word	0x40014000
 8001a54:	40014400 	.word	0x40014400
 8001a58:	40014800 	.word	0x40014800
 8001a5c:	fffffcff 	.word	0xfffffcff

08001a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4393      	bics	r3, r2
 8001a78:	001a      	movs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2270      	movs	r2, #112	@ 0x70
 8001a8e:	4393      	bics	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2203      	movs	r2, #3
 8001a96:	4393      	bics	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a27      	ldr	r2, [pc, #156]	@ (8001b58 <TIM_OC1_SetConfig+0xf8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00b      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x76>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a26      	ldr	r2, [pc, #152]	@ (8001b5c <TIM_OC1_SetConfig+0xfc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x76>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a25      	ldr	r2, [pc, #148]	@ (8001b60 <TIM_OC1_SetConfig+0x100>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d003      	beq.n	8001ad6 <TIM_OC1_SetConfig+0x76>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a24      	ldr	r2, [pc, #144]	@ (8001b64 <TIM_OC1_SetConfig+0x104>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10c      	bne.n	8001af0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4393      	bics	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4393      	bics	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a19      	ldr	r2, [pc, #100]	@ (8001b58 <TIM_OC1_SetConfig+0xf8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00b      	beq.n	8001b10 <TIM_OC1_SetConfig+0xb0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <TIM_OC1_SetConfig+0xfc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <TIM_OC1_SetConfig+0xb0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <TIM_OC1_SetConfig+0x100>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d003      	beq.n	8001b10 <TIM_OC1_SetConfig+0xb0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a16      	ldr	r2, [pc, #88]	@ (8001b64 <TIM_OC1_SetConfig+0x104>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d111      	bne.n	8001b34 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4a15      	ldr	r2, [pc, #84]	@ (8001b68 <TIM_OC1_SetConfig+0x108>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <TIM_OC1_SetConfig+0x10c>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	621a      	str	r2, [r3, #32]
}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b006      	add	sp, #24
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40014000 	.word	0x40014000
 8001b60:	40014400 	.word	0x40014400
 8001b64:	40014800 	.word	0x40014800
 8001b68:	fffffeff 	.word	0xfffffeff
 8001b6c:	fffffdff 	.word	0xfffffdff

08001b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	2210      	movs	r2, #16
 8001b86:	4393      	bics	r3, r2
 8001b88:	001a      	movs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c58 <TIM_OC2_SetConfig+0xe8>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8001c5c <TIM_OC2_SetConfig+0xec>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	4393      	bics	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	@ (8001c60 <TIM_OC2_SetConfig+0xf0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10d      	bne.n	8001bee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2240      	movs	r2, #64	@ 0x40
 8001bea:	4393      	bics	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c60 <TIM_OC2_SetConfig+0xf0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <TIM_OC2_SetConfig+0x9e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <TIM_OC2_SetConfig+0xf4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <TIM_OC2_SetConfig+0x9e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <TIM_OC2_SetConfig+0xf8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d003      	beq.n	8001c0e <TIM_OC2_SetConfig+0x9e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <TIM_OC2_SetConfig+0xfc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d113      	bne.n	8001c36 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <TIM_OC2_SetConfig+0x100>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <TIM_OC2_SetConfig+0x104>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	621a      	str	r2, [r3, #32]
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b006      	add	sp, #24
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	ffff8fff 	.word	0xffff8fff
 8001c5c:	fffffcff 	.word	0xfffffcff
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40014000 	.word	0x40014000
 8001c68:	40014400 	.word	0x40014400
 8001c6c:	40014800 	.word	0x40014800
 8001c70:	fffffbff 	.word	0xfffffbff
 8001c74:	fffff7ff 	.word	0xfffff7ff

08001c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a33      	ldr	r2, [pc, #204]	@ (8001d5c <TIM_OC3_SetConfig+0xe4>)
 8001c8e:	401a      	ands	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2270      	movs	r2, #112	@ 0x70
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2203      	movs	r2, #3
 8001cac:	4393      	bics	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <TIM_OC3_SetConfig+0xe8>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a24      	ldr	r2, [pc, #144]	@ (8001d64 <TIM_OC3_SetConfig+0xec>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10d      	bne.n	8001cf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	4a23      	ldr	r2, [pc, #140]	@ (8001d68 <TIM_OC3_SetConfig+0xf0>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	@ (8001d6c <TIM_OC3_SetConfig+0xf4>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d64 <TIM_OC3_SetConfig+0xec>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00b      	beq.n	8001d12 <TIM_OC3_SetConfig+0x9a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <TIM_OC3_SetConfig+0xf8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <TIM_OC3_SetConfig+0x9a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <TIM_OC3_SetConfig+0xfc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d003      	beq.n	8001d12 <TIM_OC3_SetConfig+0x9a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d78 <TIM_OC3_SetConfig+0x100>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d113      	bne.n	8001d3a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <TIM_OC3_SetConfig+0x104>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4a18      	ldr	r2, [pc, #96]	@ (8001d80 <TIM_OC3_SetConfig+0x108>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	621a      	str	r2, [r3, #32]
}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b006      	add	sp, #24
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	fffffeff 	.word	0xfffffeff
 8001d60:	fffffdff 	.word	0xfffffdff
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	fffff7ff 	.word	0xfffff7ff
 8001d6c:	fffffbff 	.word	0xfffffbff
 8001d70:	40014000 	.word	0x40014000
 8001d74:	40014400 	.word	0x40014400
 8001d78:	40014800 	.word	0x40014800
 8001d7c:	ffffefff 	.word	0xffffefff
 8001d80:	ffffdfff 	.word	0xffffdfff

08001d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a26      	ldr	r2, [pc, #152]	@ (8001e34 <TIM_OC4_SetConfig+0xb0>)
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <TIM_OC4_SetConfig+0xb4>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a21      	ldr	r2, [pc, #132]	@ (8001e3c <TIM_OC4_SetConfig+0xb8>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <TIM_OC4_SetConfig+0xbc>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	031b      	lsls	r3, r3, #12
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <TIM_OC4_SetConfig+0xc0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00b      	beq.n	8001dfc <TIM_OC4_SetConfig+0x78>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a18      	ldr	r2, [pc, #96]	@ (8001e48 <TIM_OC4_SetConfig+0xc4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <TIM_OC4_SetConfig+0x78>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <TIM_OC4_SetConfig+0xc8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d003      	beq.n	8001dfc <TIM_OC4_SetConfig+0x78>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a16      	ldr	r2, [pc, #88]	@ (8001e50 <TIM_OC4_SetConfig+0xcc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d109      	bne.n	8001e10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <TIM_OC4_SetConfig+0xd0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	621a      	str	r2, [r3, #32]
}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b006      	add	sp, #24
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	ffffefff 	.word	0xffffefff
 8001e38:	ffff8fff 	.word	0xffff8fff
 8001e3c:	fffffcff 	.word	0xfffffcff
 8001e40:	ffffdfff 	.word	0xffffdfff
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40014000 	.word	0x40014000
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40014800 	.word	0x40014800
 8001e54:	ffffbfff 	.word	0xffffbfff

08001e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	221f      	movs	r2, #31
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	43d2      	mvns	r2, r2
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	211f      	movs	r1, #31
 8001e88:	400b      	ands	r3, r1
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4099      	lsls	r1, r3
 8001e8e:	000b      	movs	r3, r1
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	621a      	str	r2, [r3, #32]
}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b006      	add	sp, #24
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	223c      	movs	r2, #60	@ 0x3c
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e047      	b.n	8001f48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	223c      	movs	r2, #60	@ 0x3c
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	223d      	movs	r2, #61	@ 0x3d
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2270      	movs	r2, #112	@ 0x70
 8001edc:	4393      	bics	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a16      	ldr	r2, [pc, #88]	@ (8001f50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00f      	beq.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d009      	beq.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10c      	bne.n	8001f36 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	4393      	bics	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	223d      	movs	r2, #61	@ 0x3d
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223c      	movs	r2, #60	@ 0x3c
 8001f42:	2100      	movs	r1, #0
 8001f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b004      	add	sp, #16
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40014000 	.word	0x40014000

08001f5c <memset>:
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	1882      	adds	r2, r0, r2
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d100      	bne.n	8001f66 <memset+0xa>
 8001f64:	4770      	bx	lr
 8001f66:	7019      	strb	r1, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	e7f9      	b.n	8001f60 <memset+0x4>

08001f6c <__libc_init_array>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	2600      	movs	r6, #0
 8001f70:	4c0c      	ldr	r4, [pc, #48]	@ (8001fa4 <__libc_init_array+0x38>)
 8001f72:	4d0d      	ldr	r5, [pc, #52]	@ (8001fa8 <__libc_init_array+0x3c>)
 8001f74:	1b64      	subs	r4, r4, r5
 8001f76:	10a4      	asrs	r4, r4, #2
 8001f78:	42a6      	cmp	r6, r4
 8001f7a:	d109      	bne.n	8001f90 <__libc_init_array+0x24>
 8001f7c:	2600      	movs	r6, #0
 8001f7e:	f000 f819 	bl	8001fb4 <_init>
 8001f82:	4c0a      	ldr	r4, [pc, #40]	@ (8001fac <__libc_init_array+0x40>)
 8001f84:	4d0a      	ldr	r5, [pc, #40]	@ (8001fb0 <__libc_init_array+0x44>)
 8001f86:	1b64      	subs	r4, r4, r5
 8001f88:	10a4      	asrs	r4, r4, #2
 8001f8a:	42a6      	cmp	r6, r4
 8001f8c:	d105      	bne.n	8001f9a <__libc_init_array+0x2e>
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
 8001f90:	00b3      	lsls	r3, r6, #2
 8001f92:	58eb      	ldr	r3, [r5, r3]
 8001f94:	4798      	blx	r3
 8001f96:	3601      	adds	r6, #1
 8001f98:	e7ee      	b.n	8001f78 <__libc_init_array+0xc>
 8001f9a:	00b3      	lsls	r3, r6, #2
 8001f9c:	58eb      	ldr	r3, [r5, r3]
 8001f9e:	4798      	blx	r3
 8001fa0:	3601      	adds	r6, #1
 8001fa2:	e7f2      	b.n	8001f8a <__libc_init_array+0x1e>
 8001fa4:	08001ffc 	.word	0x08001ffc
 8001fa8:	08001ffc 	.word	0x08001ffc
 8001fac:	08002000 	.word	0x08002000
 8001fb0:	08001ffc 	.word	0x08001ffc

08001fb4 <_init>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_fini>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc6:	bc08      	pop	{r3}
 8001fc8:	469e      	mov	lr, r3
 8001fca:	4770      	bx	lr
