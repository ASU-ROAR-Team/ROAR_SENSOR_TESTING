
pcb_m072_loadcell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002774  08002774  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002774  08002774  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002774  08002774  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002774  08002774  00003774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002778  08002778  00003778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800277c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  0800278c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800278c  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007211  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001417  00000000  00000000  0000b249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c9  00000000  00000000  0000cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001853e  00000000  00000000  0000d5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f34  00000000  00000000  00025b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090286  00000000  00000000  0002fa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff4  00000000  00000000  000bfd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c1d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026b0 	.word	0x080026b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080026b0 	.word	0x080026b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4646      	mov	r6, r8
 8000224:	464f      	mov	r7, r9
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0fc3      	lsrs	r3, r0, #31
 800022e:	0047      	lsls	r7, r0, #1
 8000230:	4698      	mov	r8, r3
 8000232:	1c0e      	adds	r6, r1, #0
 8000234:	0a6d      	lsrs	r5, r5, #9
 8000236:	0e3f      	lsrs	r7, r7, #24
 8000238:	d05b      	beq.n	80002f2 <__aeabi_fdiv+0xd2>
 800023a:	2fff      	cmp	r7, #255	@ 0xff
 800023c:	d021      	beq.n	8000282 <__aeabi_fdiv+0x62>
 800023e:	2380      	movs	r3, #128	@ 0x80
 8000240:	00ed      	lsls	r5, r5, #3
 8000242:	04db      	lsls	r3, r3, #19
 8000244:	431d      	orrs	r5, r3
 8000246:	2300      	movs	r3, #0
 8000248:	4699      	mov	r9, r3
 800024a:	469a      	mov	sl, r3
 800024c:	3f7f      	subs	r7, #127	@ 0x7f
 800024e:	0274      	lsls	r4, r6, #9
 8000250:	0073      	lsls	r3, r6, #1
 8000252:	0a64      	lsrs	r4, r4, #9
 8000254:	0e1b      	lsrs	r3, r3, #24
 8000256:	0ff6      	lsrs	r6, r6, #31
 8000258:	2b00      	cmp	r3, #0
 800025a:	d020      	beq.n	800029e <__aeabi_fdiv+0x7e>
 800025c:	2bff      	cmp	r3, #255	@ 0xff
 800025e:	d043      	beq.n	80002e8 <__aeabi_fdiv+0xc8>
 8000260:	2280      	movs	r2, #128	@ 0x80
 8000262:	2000      	movs	r0, #0
 8000264:	00e4      	lsls	r4, r4, #3
 8000266:	04d2      	lsls	r2, r2, #19
 8000268:	4314      	orrs	r4, r2
 800026a:	3b7f      	subs	r3, #127	@ 0x7f
 800026c:	4642      	mov	r2, r8
 800026e:	1aff      	subs	r7, r7, r3
 8000270:	464b      	mov	r3, r9
 8000272:	4072      	eors	r2, r6
 8000274:	2b0f      	cmp	r3, #15
 8000276:	d900      	bls.n	800027a <__aeabi_fdiv+0x5a>
 8000278:	e09d      	b.n	80003b6 <__aeabi_fdiv+0x196>
 800027a:	4971      	ldr	r1, [pc, #452]	@ (8000440 <__aeabi_fdiv+0x220>)
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	58cb      	ldr	r3, [r1, r3]
 8000280:	469f      	mov	pc, r3
 8000282:	2d00      	cmp	r5, #0
 8000284:	d15a      	bne.n	800033c <__aeabi_fdiv+0x11c>
 8000286:	2308      	movs	r3, #8
 8000288:	4699      	mov	r9, r3
 800028a:	3b06      	subs	r3, #6
 800028c:	0274      	lsls	r4, r6, #9
 800028e:	469a      	mov	sl, r3
 8000290:	0073      	lsls	r3, r6, #1
 8000292:	27ff      	movs	r7, #255	@ 0xff
 8000294:	0a64      	lsrs	r4, r4, #9
 8000296:	0e1b      	lsrs	r3, r3, #24
 8000298:	0ff6      	lsrs	r6, r6, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1de      	bne.n	800025c <__aeabi_fdiv+0x3c>
 800029e:	2c00      	cmp	r4, #0
 80002a0:	d13b      	bne.n	800031a <__aeabi_fdiv+0xfa>
 80002a2:	2301      	movs	r3, #1
 80002a4:	4642      	mov	r2, r8
 80002a6:	4649      	mov	r1, r9
 80002a8:	4072      	eors	r2, r6
 80002aa:	4319      	orrs	r1, r3
 80002ac:	290e      	cmp	r1, #14
 80002ae:	d818      	bhi.n	80002e2 <__aeabi_fdiv+0xc2>
 80002b0:	4864      	ldr	r0, [pc, #400]	@ (8000444 <__aeabi_fdiv+0x224>)
 80002b2:	0089      	lsls	r1, r1, #2
 80002b4:	5841      	ldr	r1, [r0, r1]
 80002b6:	468f      	mov	pc, r1
 80002b8:	4653      	mov	r3, sl
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_fdiv+0xa0>
 80002be:	e0b8      	b.n	8000432 <__aeabi_fdiv+0x212>
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d06e      	beq.n	80003a2 <__aeabi_fdiv+0x182>
 80002c4:	4642      	mov	r2, r8
 80002c6:	002c      	movs	r4, r5
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d140      	bne.n	800034e <__aeabi_fdiv+0x12e>
 80002cc:	2000      	movs	r0, #0
 80002ce:	2400      	movs	r4, #0
 80002d0:	05c0      	lsls	r0, r0, #23
 80002d2:	4320      	orrs	r0, r4
 80002d4:	07d2      	lsls	r2, r2, #31
 80002d6:	4310      	orrs	r0, r2
 80002d8:	bce0      	pop	{r5, r6, r7}
 80002da:	46ba      	mov	sl, r7
 80002dc:	46b1      	mov	r9, r6
 80002de:	46a8      	mov	r8, r5
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	20ff      	movs	r0, #255	@ 0xff
 80002e4:	2400      	movs	r4, #0
 80002e6:	e7f3      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80002e8:	2c00      	cmp	r4, #0
 80002ea:	d120      	bne.n	800032e <__aeabi_fdiv+0x10e>
 80002ec:	2302      	movs	r3, #2
 80002ee:	3fff      	subs	r7, #255	@ 0xff
 80002f0:	e7d8      	b.n	80002a4 <__aeabi_fdiv+0x84>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d105      	bne.n	8000302 <__aeabi_fdiv+0xe2>
 80002f6:	2304      	movs	r3, #4
 80002f8:	4699      	mov	r9, r3
 80002fa:	3b03      	subs	r3, #3
 80002fc:	2700      	movs	r7, #0
 80002fe:	469a      	mov	sl, r3
 8000300:	e7a5      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000302:	0028      	movs	r0, r5
 8000304:	f000 fb76 	bl	80009f4 <__clzsi2>
 8000308:	2776      	movs	r7, #118	@ 0x76
 800030a:	1f43      	subs	r3, r0, #5
 800030c:	409d      	lsls	r5, r3
 800030e:	2300      	movs	r3, #0
 8000310:	427f      	negs	r7, r7
 8000312:	4699      	mov	r9, r3
 8000314:	469a      	mov	sl, r3
 8000316:	1a3f      	subs	r7, r7, r0
 8000318:	e799      	b.n	800024e <__aeabi_fdiv+0x2e>
 800031a:	0020      	movs	r0, r4
 800031c:	f000 fb6a 	bl	80009f4 <__clzsi2>
 8000320:	1f43      	subs	r3, r0, #5
 8000322:	409c      	lsls	r4, r3
 8000324:	2376      	movs	r3, #118	@ 0x76
 8000326:	425b      	negs	r3, r3
 8000328:	1a1b      	subs	r3, r3, r0
 800032a:	2000      	movs	r0, #0
 800032c:	e79e      	b.n	800026c <__aeabi_fdiv+0x4c>
 800032e:	2303      	movs	r3, #3
 8000330:	464a      	mov	r2, r9
 8000332:	431a      	orrs	r2, r3
 8000334:	4691      	mov	r9, r2
 8000336:	2003      	movs	r0, #3
 8000338:	33fc      	adds	r3, #252	@ 0xfc
 800033a:	e797      	b.n	800026c <__aeabi_fdiv+0x4c>
 800033c:	230c      	movs	r3, #12
 800033e:	4699      	mov	r9, r3
 8000340:	3b09      	subs	r3, #9
 8000342:	27ff      	movs	r7, #255	@ 0xff
 8000344:	469a      	mov	sl, r3
 8000346:	e782      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000348:	2803      	cmp	r0, #3
 800034a:	d02c      	beq.n	80003a6 <__aeabi_fdiv+0x186>
 800034c:	0032      	movs	r2, r6
 800034e:	0038      	movs	r0, r7
 8000350:	307f      	adds	r0, #127	@ 0x7f
 8000352:	2800      	cmp	r0, #0
 8000354:	dd47      	ble.n	80003e6 <__aeabi_fdiv+0x1c6>
 8000356:	0763      	lsls	r3, r4, #29
 8000358:	d004      	beq.n	8000364 <__aeabi_fdiv+0x144>
 800035a:	230f      	movs	r3, #15
 800035c:	4023      	ands	r3, r4
 800035e:	2b04      	cmp	r3, #4
 8000360:	d000      	beq.n	8000364 <__aeabi_fdiv+0x144>
 8000362:	3404      	adds	r4, #4
 8000364:	0123      	lsls	r3, r4, #4
 8000366:	d503      	bpl.n	8000370 <__aeabi_fdiv+0x150>
 8000368:	0038      	movs	r0, r7
 800036a:	4b37      	ldr	r3, [pc, #220]	@ (8000448 <__aeabi_fdiv+0x228>)
 800036c:	3080      	adds	r0, #128	@ 0x80
 800036e:	401c      	ands	r4, r3
 8000370:	28fe      	cmp	r0, #254	@ 0xfe
 8000372:	dcb6      	bgt.n	80002e2 <__aeabi_fdiv+0xc2>
 8000374:	01a4      	lsls	r4, r4, #6
 8000376:	0a64      	lsrs	r4, r4, #9
 8000378:	b2c0      	uxtb	r0, r0
 800037a:	e7a9      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800037c:	2480      	movs	r4, #128	@ 0x80
 800037e:	2200      	movs	r2, #0
 8000380:	20ff      	movs	r0, #255	@ 0xff
 8000382:	03e4      	lsls	r4, r4, #15
 8000384:	e7a4      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421d      	tst	r5, r3
 800038c:	d001      	beq.n	8000392 <__aeabi_fdiv+0x172>
 800038e:	421c      	tst	r4, r3
 8000390:	d00b      	beq.n	80003aa <__aeabi_fdiv+0x18a>
 8000392:	2480      	movs	r4, #128	@ 0x80
 8000394:	03e4      	lsls	r4, r4, #15
 8000396:	432c      	orrs	r4, r5
 8000398:	0264      	lsls	r4, r4, #9
 800039a:	4642      	mov	r2, r8
 800039c:	20ff      	movs	r0, #255	@ 0xff
 800039e:	0a64      	lsrs	r4, r4, #9
 80003a0:	e796      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80003a2:	4646      	mov	r6, r8
 80003a4:	002c      	movs	r4, r5
 80003a6:	2380      	movs	r3, #128	@ 0x80
 80003a8:	03db      	lsls	r3, r3, #15
 80003aa:	431c      	orrs	r4, r3
 80003ac:	0264      	lsls	r4, r4, #9
 80003ae:	0032      	movs	r2, r6
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	0a64      	lsrs	r4, r4, #9
 80003b4:	e78c      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80003b6:	016d      	lsls	r5, r5, #5
 80003b8:	0160      	lsls	r0, r4, #5
 80003ba:	4285      	cmp	r5, r0
 80003bc:	d22d      	bcs.n	800041a <__aeabi_fdiv+0x1fa>
 80003be:	231b      	movs	r3, #27
 80003c0:	2400      	movs	r4, #0
 80003c2:	3f01      	subs	r7, #1
 80003c4:	2601      	movs	r6, #1
 80003c6:	0029      	movs	r1, r5
 80003c8:	0064      	lsls	r4, r4, #1
 80003ca:	006d      	lsls	r5, r5, #1
 80003cc:	2900      	cmp	r1, #0
 80003ce:	db01      	blt.n	80003d4 <__aeabi_fdiv+0x1b4>
 80003d0:	4285      	cmp	r5, r0
 80003d2:	d301      	bcc.n	80003d8 <__aeabi_fdiv+0x1b8>
 80003d4:	1a2d      	subs	r5, r5, r0
 80003d6:	4334      	orrs	r4, r6
 80003d8:	3b01      	subs	r3, #1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1f3      	bne.n	80003c6 <__aeabi_fdiv+0x1a6>
 80003de:	1e6b      	subs	r3, r5, #1
 80003e0:	419d      	sbcs	r5, r3
 80003e2:	432c      	orrs	r4, r5
 80003e4:	e7b3      	b.n	800034e <__aeabi_fdiv+0x12e>
 80003e6:	2301      	movs	r3, #1
 80003e8:	1a1b      	subs	r3, r3, r0
 80003ea:	2b1b      	cmp	r3, #27
 80003ec:	dd00      	ble.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003ee:	e76d      	b.n	80002cc <__aeabi_fdiv+0xac>
 80003f0:	0021      	movs	r1, r4
 80003f2:	379e      	adds	r7, #158	@ 0x9e
 80003f4:	40d9      	lsrs	r1, r3
 80003f6:	40bc      	lsls	r4, r7
 80003f8:	000b      	movs	r3, r1
 80003fa:	1e61      	subs	r1, r4, #1
 80003fc:	418c      	sbcs	r4, r1
 80003fe:	4323      	orrs	r3, r4
 8000400:	0759      	lsls	r1, r3, #29
 8000402:	d004      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 8000404:	210f      	movs	r1, #15
 8000406:	4019      	ands	r1, r3
 8000408:	2904      	cmp	r1, #4
 800040a:	d000      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 800040c:	3304      	adds	r3, #4
 800040e:	0159      	lsls	r1, r3, #5
 8000410:	d413      	bmi.n	800043a <__aeabi_fdiv+0x21a>
 8000412:	019b      	lsls	r3, r3, #6
 8000414:	2000      	movs	r0, #0
 8000416:	0a5c      	lsrs	r4, r3, #9
 8000418:	e75a      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800041a:	231a      	movs	r3, #26
 800041c:	2401      	movs	r4, #1
 800041e:	1a2d      	subs	r5, r5, r0
 8000420:	e7d0      	b.n	80003c4 <__aeabi_fdiv+0x1a4>
 8000422:	1e98      	subs	r0, r3, #2
 8000424:	4243      	negs	r3, r0
 8000426:	4158      	adcs	r0, r3
 8000428:	4240      	negs	r0, r0
 800042a:	0032      	movs	r2, r6
 800042c:	2400      	movs	r4, #0
 800042e:	b2c0      	uxtb	r0, r0
 8000430:	e74e      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000432:	4642      	mov	r2, r8
 8000434:	20ff      	movs	r0, #255	@ 0xff
 8000436:	2400      	movs	r4, #0
 8000438:	e74a      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800043a:	2001      	movs	r0, #1
 800043c:	2400      	movs	r4, #0
 800043e:	e747      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000440:	080026c8 	.word	0x080026c8
 8000444:	08002708 	.word	0x08002708
 8000448:	f7ffffff 	.word	0xf7ffffff

0800044c <__aeabi_fsub>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	4647      	mov	r7, r8
 8000450:	46ce      	mov	lr, r9
 8000452:	0243      	lsls	r3, r0, #9
 8000454:	b580      	push	{r7, lr}
 8000456:	0a5f      	lsrs	r7, r3, #9
 8000458:	099b      	lsrs	r3, r3, #6
 800045a:	0045      	lsls	r5, r0, #1
 800045c:	004a      	lsls	r2, r1, #1
 800045e:	469c      	mov	ip, r3
 8000460:	024b      	lsls	r3, r1, #9
 8000462:	0fc4      	lsrs	r4, r0, #31
 8000464:	0fce      	lsrs	r6, r1, #31
 8000466:	0e2d      	lsrs	r5, r5, #24
 8000468:	0a58      	lsrs	r0, r3, #9
 800046a:	0e12      	lsrs	r2, r2, #24
 800046c:	0999      	lsrs	r1, r3, #6
 800046e:	2aff      	cmp	r2, #255	@ 0xff
 8000470:	d06b      	beq.n	800054a <__aeabi_fsub+0xfe>
 8000472:	2301      	movs	r3, #1
 8000474:	405e      	eors	r6, r3
 8000476:	1aab      	subs	r3, r5, r2
 8000478:	42b4      	cmp	r4, r6
 800047a:	d04b      	beq.n	8000514 <__aeabi_fsub+0xc8>
 800047c:	2b00      	cmp	r3, #0
 800047e:	dc00      	bgt.n	8000482 <__aeabi_fsub+0x36>
 8000480:	e0ff      	b.n	8000682 <__aeabi_fsub+0x236>
 8000482:	2a00      	cmp	r2, #0
 8000484:	d100      	bne.n	8000488 <__aeabi_fsub+0x3c>
 8000486:	e088      	b.n	800059a <__aeabi_fsub+0x14e>
 8000488:	2dff      	cmp	r5, #255	@ 0xff
 800048a:	d100      	bne.n	800048e <__aeabi_fsub+0x42>
 800048c:	e0ef      	b.n	800066e <__aeabi_fsub+0x222>
 800048e:	2280      	movs	r2, #128	@ 0x80
 8000490:	04d2      	lsls	r2, r2, #19
 8000492:	4311      	orrs	r1, r2
 8000494:	2001      	movs	r0, #1
 8000496:	2b1b      	cmp	r3, #27
 8000498:	dc08      	bgt.n	80004ac <__aeabi_fsub+0x60>
 800049a:	0008      	movs	r0, r1
 800049c:	2220      	movs	r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	4099      	lsls	r1, r3
 80004a4:	000b      	movs	r3, r1
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	4193      	sbcs	r3, r2
 80004aa:	4318      	orrs	r0, r3
 80004ac:	4663      	mov	r3, ip
 80004ae:	1a1b      	subs	r3, r3, r0
 80004b0:	469c      	mov	ip, r3
 80004b2:	4663      	mov	r3, ip
 80004b4:	015b      	lsls	r3, r3, #5
 80004b6:	d400      	bmi.n	80004ba <__aeabi_fsub+0x6e>
 80004b8:	e0cd      	b.n	8000656 <__aeabi_fsub+0x20a>
 80004ba:	4663      	mov	r3, ip
 80004bc:	019f      	lsls	r7, r3, #6
 80004be:	09bf      	lsrs	r7, r7, #6
 80004c0:	0038      	movs	r0, r7
 80004c2:	f000 fa97 	bl	80009f4 <__clzsi2>
 80004c6:	003b      	movs	r3, r7
 80004c8:	3805      	subs	r0, #5
 80004ca:	4083      	lsls	r3, r0
 80004cc:	4285      	cmp	r5, r0
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fsub+0x86>
 80004d0:	e0a2      	b.n	8000618 <__aeabi_fsub+0x1cc>
 80004d2:	4ab7      	ldr	r2, [pc, #732]	@ (80007b0 <__aeabi_fsub+0x364>)
 80004d4:	1a2d      	subs	r5, r5, r0
 80004d6:	401a      	ands	r2, r3
 80004d8:	4694      	mov	ip, r2
 80004da:	075a      	lsls	r2, r3, #29
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fsub+0x94>
 80004de:	e0c3      	b.n	8000668 <__aeabi_fsub+0x21c>
 80004e0:	220f      	movs	r2, #15
 80004e2:	4013      	ands	r3, r2
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d100      	bne.n	80004ea <__aeabi_fsub+0x9e>
 80004e8:	e0be      	b.n	8000668 <__aeabi_fsub+0x21c>
 80004ea:	2304      	movs	r3, #4
 80004ec:	4698      	mov	r8, r3
 80004ee:	44c4      	add	ip, r8
 80004f0:	4663      	mov	r3, ip
 80004f2:	015b      	lsls	r3, r3, #5
 80004f4:	d400      	bmi.n	80004f8 <__aeabi_fsub+0xac>
 80004f6:	e0b7      	b.n	8000668 <__aeabi_fsub+0x21c>
 80004f8:	1c68      	adds	r0, r5, #1
 80004fa:	2dfe      	cmp	r5, #254	@ 0xfe
 80004fc:	d000      	beq.n	8000500 <__aeabi_fsub+0xb4>
 80004fe:	e0a5      	b.n	800064c <__aeabi_fsub+0x200>
 8000500:	20ff      	movs	r0, #255	@ 0xff
 8000502:	2200      	movs	r2, #0
 8000504:	05c0      	lsls	r0, r0, #23
 8000506:	4310      	orrs	r0, r2
 8000508:	07e4      	lsls	r4, r4, #31
 800050a:	4320      	orrs	r0, r4
 800050c:	bcc0      	pop	{r6, r7}
 800050e:	46b9      	mov	r9, r7
 8000510:	46b0      	mov	r8, r6
 8000512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000514:	2b00      	cmp	r3, #0
 8000516:	dc00      	bgt.n	800051a <__aeabi_fsub+0xce>
 8000518:	e1eb      	b.n	80008f2 <__aeabi_fsub+0x4a6>
 800051a:	2a00      	cmp	r2, #0
 800051c:	d046      	beq.n	80005ac <__aeabi_fsub+0x160>
 800051e:	2dff      	cmp	r5, #255	@ 0xff
 8000520:	d100      	bne.n	8000524 <__aeabi_fsub+0xd8>
 8000522:	e0a4      	b.n	800066e <__aeabi_fsub+0x222>
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	04d2      	lsls	r2, r2, #19
 8000528:	4311      	orrs	r1, r2
 800052a:	2b1b      	cmp	r3, #27
 800052c:	dc00      	bgt.n	8000530 <__aeabi_fsub+0xe4>
 800052e:	e0fb      	b.n	8000728 <__aeabi_fsub+0x2dc>
 8000530:	2305      	movs	r3, #5
 8000532:	4698      	mov	r8, r3
 8000534:	002b      	movs	r3, r5
 8000536:	44c4      	add	ip, r8
 8000538:	4662      	mov	r2, ip
 800053a:	08d7      	lsrs	r7, r2, #3
 800053c:	2bff      	cmp	r3, #255	@ 0xff
 800053e:	d100      	bne.n	8000542 <__aeabi_fsub+0xf6>
 8000540:	e095      	b.n	800066e <__aeabi_fsub+0x222>
 8000542:	027a      	lsls	r2, r7, #9
 8000544:	0a52      	lsrs	r2, r2, #9
 8000546:	b2d8      	uxtb	r0, r3
 8000548:	e7dc      	b.n	8000504 <__aeabi_fsub+0xb8>
 800054a:	002b      	movs	r3, r5
 800054c:	3bff      	subs	r3, #255	@ 0xff
 800054e:	4699      	mov	r9, r3
 8000550:	2900      	cmp	r1, #0
 8000552:	d118      	bne.n	8000586 <__aeabi_fsub+0x13a>
 8000554:	2301      	movs	r3, #1
 8000556:	405e      	eors	r6, r3
 8000558:	42b4      	cmp	r4, r6
 800055a:	d100      	bne.n	800055e <__aeabi_fsub+0x112>
 800055c:	e0ca      	b.n	80006f4 <__aeabi_fsub+0x2a8>
 800055e:	464b      	mov	r3, r9
 8000560:	2b00      	cmp	r3, #0
 8000562:	d02d      	beq.n	80005c0 <__aeabi_fsub+0x174>
 8000564:	2d00      	cmp	r5, #0
 8000566:	d000      	beq.n	800056a <__aeabi_fsub+0x11e>
 8000568:	e13c      	b.n	80007e4 <__aeabi_fsub+0x398>
 800056a:	23ff      	movs	r3, #255	@ 0xff
 800056c:	4664      	mov	r4, ip
 800056e:	2c00      	cmp	r4, #0
 8000570:	d100      	bne.n	8000574 <__aeabi_fsub+0x128>
 8000572:	e15f      	b.n	8000834 <__aeabi_fsub+0x3e8>
 8000574:	1e5d      	subs	r5, r3, #1
 8000576:	2b01      	cmp	r3, #1
 8000578:	d100      	bne.n	800057c <__aeabi_fsub+0x130>
 800057a:	e174      	b.n	8000866 <__aeabi_fsub+0x41a>
 800057c:	0034      	movs	r4, r6
 800057e:	2bff      	cmp	r3, #255	@ 0xff
 8000580:	d074      	beq.n	800066c <__aeabi_fsub+0x220>
 8000582:	002b      	movs	r3, r5
 8000584:	e103      	b.n	800078e <__aeabi_fsub+0x342>
 8000586:	42b4      	cmp	r4, r6
 8000588:	d100      	bne.n	800058c <__aeabi_fsub+0x140>
 800058a:	e09c      	b.n	80006c6 <__aeabi_fsub+0x27a>
 800058c:	2b00      	cmp	r3, #0
 800058e:	d017      	beq.n	80005c0 <__aeabi_fsub+0x174>
 8000590:	2d00      	cmp	r5, #0
 8000592:	d0ea      	beq.n	800056a <__aeabi_fsub+0x11e>
 8000594:	0007      	movs	r7, r0
 8000596:	0034      	movs	r4, r6
 8000598:	e06c      	b.n	8000674 <__aeabi_fsub+0x228>
 800059a:	2900      	cmp	r1, #0
 800059c:	d0cc      	beq.n	8000538 <__aeabi_fsub+0xec>
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d02b      	beq.n	80005fc <__aeabi_fsub+0x1b0>
 80005a4:	2bff      	cmp	r3, #255	@ 0xff
 80005a6:	d062      	beq.n	800066e <__aeabi_fsub+0x222>
 80005a8:	0013      	movs	r3, r2
 80005aa:	e773      	b.n	8000494 <__aeabi_fsub+0x48>
 80005ac:	2900      	cmp	r1, #0
 80005ae:	d0c3      	beq.n	8000538 <__aeabi_fsub+0xec>
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fsub+0x16c>
 80005b6:	e11e      	b.n	80007f6 <__aeabi_fsub+0x3aa>
 80005b8:	2bff      	cmp	r3, #255	@ 0xff
 80005ba:	d058      	beq.n	800066e <__aeabi_fsub+0x222>
 80005bc:	0013      	movs	r3, r2
 80005be:	e7b4      	b.n	800052a <__aeabi_fsub+0xde>
 80005c0:	22fe      	movs	r2, #254	@ 0xfe
 80005c2:	1c6b      	adds	r3, r5, #1
 80005c4:	421a      	tst	r2, r3
 80005c6:	d10d      	bne.n	80005e4 <__aeabi_fsub+0x198>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d060      	beq.n	800068e <__aeabi_fsub+0x242>
 80005cc:	4663      	mov	r3, ip
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d000      	beq.n	80005d4 <__aeabi_fsub+0x188>
 80005d2:	e120      	b.n	8000816 <__aeabi_fsub+0x3ca>
 80005d4:	2900      	cmp	r1, #0
 80005d6:	d000      	beq.n	80005da <__aeabi_fsub+0x18e>
 80005d8:	e128      	b.n	800082c <__aeabi_fsub+0x3e0>
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	2400      	movs	r4, #0
 80005de:	20ff      	movs	r0, #255	@ 0xff
 80005e0:	03d2      	lsls	r2, r2, #15
 80005e2:	e78f      	b.n	8000504 <__aeabi_fsub+0xb8>
 80005e4:	4663      	mov	r3, ip
 80005e6:	1a5f      	subs	r7, r3, r1
 80005e8:	017b      	lsls	r3, r7, #5
 80005ea:	d500      	bpl.n	80005ee <__aeabi_fsub+0x1a2>
 80005ec:	e0fe      	b.n	80007ec <__aeabi_fsub+0x3a0>
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d000      	beq.n	80005f4 <__aeabi_fsub+0x1a8>
 80005f2:	e765      	b.n	80004c0 <__aeabi_fsub+0x74>
 80005f4:	2400      	movs	r4, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	2200      	movs	r2, #0
 80005fa:	e783      	b.n	8000504 <__aeabi_fsub+0xb8>
 80005fc:	4663      	mov	r3, ip
 80005fe:	1a59      	subs	r1, r3, r1
 8000600:	014b      	lsls	r3, r1, #5
 8000602:	d400      	bmi.n	8000606 <__aeabi_fsub+0x1ba>
 8000604:	e119      	b.n	800083a <__aeabi_fsub+0x3ee>
 8000606:	018f      	lsls	r7, r1, #6
 8000608:	09bf      	lsrs	r7, r7, #6
 800060a:	0038      	movs	r0, r7
 800060c:	f000 f9f2 	bl	80009f4 <__clzsi2>
 8000610:	003b      	movs	r3, r7
 8000612:	3805      	subs	r0, #5
 8000614:	4083      	lsls	r3, r0
 8000616:	2501      	movs	r5, #1
 8000618:	2220      	movs	r2, #32
 800061a:	1b40      	subs	r0, r0, r5
 800061c:	3001      	adds	r0, #1
 800061e:	1a12      	subs	r2, r2, r0
 8000620:	0019      	movs	r1, r3
 8000622:	4093      	lsls	r3, r2
 8000624:	40c1      	lsrs	r1, r0
 8000626:	1e5a      	subs	r2, r3, #1
 8000628:	4193      	sbcs	r3, r2
 800062a:	4319      	orrs	r1, r3
 800062c:	468c      	mov	ip, r1
 800062e:	1e0b      	subs	r3, r1, #0
 8000630:	d0e1      	beq.n	80005f6 <__aeabi_fsub+0x1aa>
 8000632:	075b      	lsls	r3, r3, #29
 8000634:	d100      	bne.n	8000638 <__aeabi_fsub+0x1ec>
 8000636:	e152      	b.n	80008de <__aeabi_fsub+0x492>
 8000638:	230f      	movs	r3, #15
 800063a:	2500      	movs	r5, #0
 800063c:	400b      	ands	r3, r1
 800063e:	2b04      	cmp	r3, #4
 8000640:	d000      	beq.n	8000644 <__aeabi_fsub+0x1f8>
 8000642:	e752      	b.n	80004ea <__aeabi_fsub+0x9e>
 8000644:	2001      	movs	r0, #1
 8000646:	014a      	lsls	r2, r1, #5
 8000648:	d400      	bmi.n	800064c <__aeabi_fsub+0x200>
 800064a:	e092      	b.n	8000772 <__aeabi_fsub+0x326>
 800064c:	b2c0      	uxtb	r0, r0
 800064e:	4663      	mov	r3, ip
 8000650:	019a      	lsls	r2, r3, #6
 8000652:	0a52      	lsrs	r2, r2, #9
 8000654:	e756      	b.n	8000504 <__aeabi_fsub+0xb8>
 8000656:	4663      	mov	r3, ip
 8000658:	075b      	lsls	r3, r3, #29
 800065a:	d005      	beq.n	8000668 <__aeabi_fsub+0x21c>
 800065c:	230f      	movs	r3, #15
 800065e:	4662      	mov	r2, ip
 8000660:	4013      	ands	r3, r2
 8000662:	2b04      	cmp	r3, #4
 8000664:	d000      	beq.n	8000668 <__aeabi_fsub+0x21c>
 8000666:	e740      	b.n	80004ea <__aeabi_fsub+0x9e>
 8000668:	002b      	movs	r3, r5
 800066a:	e765      	b.n	8000538 <__aeabi_fsub+0xec>
 800066c:	0007      	movs	r7, r0
 800066e:	2f00      	cmp	r7, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_fsub+0x228>
 8000672:	e745      	b.n	8000500 <__aeabi_fsub+0xb4>
 8000674:	2280      	movs	r2, #128	@ 0x80
 8000676:	03d2      	lsls	r2, r2, #15
 8000678:	433a      	orrs	r2, r7
 800067a:	0252      	lsls	r2, r2, #9
 800067c:	20ff      	movs	r0, #255	@ 0xff
 800067e:	0a52      	lsrs	r2, r2, #9
 8000680:	e740      	b.n	8000504 <__aeabi_fsub+0xb8>
 8000682:	2b00      	cmp	r3, #0
 8000684:	d179      	bne.n	800077a <__aeabi_fsub+0x32e>
 8000686:	22fe      	movs	r2, #254	@ 0xfe
 8000688:	1c6b      	adds	r3, r5, #1
 800068a:	421a      	tst	r2, r3
 800068c:	d1aa      	bne.n	80005e4 <__aeabi_fsub+0x198>
 800068e:	4663      	mov	r3, ip
 8000690:	2b00      	cmp	r3, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_fsub+0x24a>
 8000694:	e0f5      	b.n	8000882 <__aeabi_fsub+0x436>
 8000696:	2900      	cmp	r1, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fsub+0x250>
 800069a:	e0d1      	b.n	8000840 <__aeabi_fsub+0x3f4>
 800069c:	1a5f      	subs	r7, r3, r1
 800069e:	2380      	movs	r3, #128	@ 0x80
 80006a0:	04db      	lsls	r3, r3, #19
 80006a2:	421f      	tst	r7, r3
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fsub+0x25c>
 80006a6:	e10e      	b.n	80008c6 <__aeabi_fsub+0x47a>
 80006a8:	4662      	mov	r2, ip
 80006aa:	2401      	movs	r4, #1
 80006ac:	1a8a      	subs	r2, r1, r2
 80006ae:	4694      	mov	ip, r2
 80006b0:	2000      	movs	r0, #0
 80006b2:	4034      	ands	r4, r6
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_fsub+0x26e>
 80006b8:	e724      	b.n	8000504 <__aeabi_fsub+0xb8>
 80006ba:	2001      	movs	r0, #1
 80006bc:	421a      	tst	r2, r3
 80006be:	d1c6      	bne.n	800064e <__aeabi_fsub+0x202>
 80006c0:	2300      	movs	r3, #0
 80006c2:	08d7      	lsrs	r7, r2, #3
 80006c4:	e73d      	b.n	8000542 <__aeabi_fsub+0xf6>
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d017      	beq.n	80006fa <__aeabi_fsub+0x2ae>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d000      	beq.n	80006d0 <__aeabi_fsub+0x284>
 80006ce:	e0af      	b.n	8000830 <__aeabi_fsub+0x3e4>
 80006d0:	23ff      	movs	r3, #255	@ 0xff
 80006d2:	4665      	mov	r5, ip
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_fsub+0x28e>
 80006d8:	e0ad      	b.n	8000836 <__aeabi_fsub+0x3ea>
 80006da:	1e5e      	subs	r6, r3, #1
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d100      	bne.n	80006e2 <__aeabi_fsub+0x296>
 80006e0:	e089      	b.n	80007f6 <__aeabi_fsub+0x3aa>
 80006e2:	2bff      	cmp	r3, #255	@ 0xff
 80006e4:	d0c2      	beq.n	800066c <__aeabi_fsub+0x220>
 80006e6:	2e1b      	cmp	r6, #27
 80006e8:	dc00      	bgt.n	80006ec <__aeabi_fsub+0x2a0>
 80006ea:	e0ab      	b.n	8000844 <__aeabi_fsub+0x3f8>
 80006ec:	1d4b      	adds	r3, r1, #5
 80006ee:	469c      	mov	ip, r3
 80006f0:	0013      	movs	r3, r2
 80006f2:	e721      	b.n	8000538 <__aeabi_fsub+0xec>
 80006f4:	464b      	mov	r3, r9
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d170      	bne.n	80007dc <__aeabi_fsub+0x390>
 80006fa:	22fe      	movs	r2, #254	@ 0xfe
 80006fc:	1c6b      	adds	r3, r5, #1
 80006fe:	421a      	tst	r2, r3
 8000700:	d15e      	bne.n	80007c0 <__aeabi_fsub+0x374>
 8000702:	2d00      	cmp	r5, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_fsub+0x2bc>
 8000706:	e0c3      	b.n	8000890 <__aeabi_fsub+0x444>
 8000708:	4663      	mov	r3, ip
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fsub+0x2c4>
 800070e:	e0d0      	b.n	80008b2 <__aeabi_fsub+0x466>
 8000710:	2900      	cmp	r1, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fsub+0x2ca>
 8000714:	e094      	b.n	8000840 <__aeabi_fsub+0x3f4>
 8000716:	000a      	movs	r2, r1
 8000718:	4462      	add	r2, ip
 800071a:	0153      	lsls	r3, r2, #5
 800071c:	d400      	bmi.n	8000720 <__aeabi_fsub+0x2d4>
 800071e:	e0d8      	b.n	80008d2 <__aeabi_fsub+0x486>
 8000720:	0192      	lsls	r2, r2, #6
 8000722:	2001      	movs	r0, #1
 8000724:	0a52      	lsrs	r2, r2, #9
 8000726:	e6ed      	b.n	8000504 <__aeabi_fsub+0xb8>
 8000728:	0008      	movs	r0, r1
 800072a:	2220      	movs	r2, #32
 800072c:	40d8      	lsrs	r0, r3
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	4099      	lsls	r1, r3
 8000732:	000b      	movs	r3, r1
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	4193      	sbcs	r3, r2
 8000738:	4303      	orrs	r3, r0
 800073a:	449c      	add	ip, r3
 800073c:	4663      	mov	r3, ip
 800073e:	015b      	lsls	r3, r3, #5
 8000740:	d589      	bpl.n	8000656 <__aeabi_fsub+0x20a>
 8000742:	3501      	adds	r5, #1
 8000744:	2dff      	cmp	r5, #255	@ 0xff
 8000746:	d100      	bne.n	800074a <__aeabi_fsub+0x2fe>
 8000748:	e6da      	b.n	8000500 <__aeabi_fsub+0xb4>
 800074a:	4662      	mov	r2, ip
 800074c:	2301      	movs	r3, #1
 800074e:	4919      	ldr	r1, [pc, #100]	@ (80007b4 <__aeabi_fsub+0x368>)
 8000750:	4013      	ands	r3, r2
 8000752:	0852      	lsrs	r2, r2, #1
 8000754:	400a      	ands	r2, r1
 8000756:	431a      	orrs	r2, r3
 8000758:	0013      	movs	r3, r2
 800075a:	4694      	mov	ip, r2
 800075c:	075b      	lsls	r3, r3, #29
 800075e:	d004      	beq.n	800076a <__aeabi_fsub+0x31e>
 8000760:	230f      	movs	r3, #15
 8000762:	4013      	ands	r3, r2
 8000764:	2b04      	cmp	r3, #4
 8000766:	d000      	beq.n	800076a <__aeabi_fsub+0x31e>
 8000768:	e6bf      	b.n	80004ea <__aeabi_fsub+0x9e>
 800076a:	4663      	mov	r3, ip
 800076c:	015b      	lsls	r3, r3, #5
 800076e:	d500      	bpl.n	8000772 <__aeabi_fsub+0x326>
 8000770:	e6c2      	b.n	80004f8 <__aeabi_fsub+0xac>
 8000772:	4663      	mov	r3, ip
 8000774:	08df      	lsrs	r7, r3, #3
 8000776:	002b      	movs	r3, r5
 8000778:	e6e3      	b.n	8000542 <__aeabi_fsub+0xf6>
 800077a:	1b53      	subs	r3, r2, r5
 800077c:	2d00      	cmp	r5, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fsub+0x336>
 8000780:	e6f4      	b.n	800056c <__aeabi_fsub+0x120>
 8000782:	2080      	movs	r0, #128	@ 0x80
 8000784:	4664      	mov	r4, ip
 8000786:	04c0      	lsls	r0, r0, #19
 8000788:	4304      	orrs	r4, r0
 800078a:	46a4      	mov	ip, r4
 800078c:	0034      	movs	r4, r6
 800078e:	2001      	movs	r0, #1
 8000790:	2b1b      	cmp	r3, #27
 8000792:	dc09      	bgt.n	80007a8 <__aeabi_fsub+0x35c>
 8000794:	2520      	movs	r5, #32
 8000796:	4660      	mov	r0, ip
 8000798:	40d8      	lsrs	r0, r3
 800079a:	1aeb      	subs	r3, r5, r3
 800079c:	4665      	mov	r5, ip
 800079e:	409d      	lsls	r5, r3
 80007a0:	002b      	movs	r3, r5
 80007a2:	1e5d      	subs	r5, r3, #1
 80007a4:	41ab      	sbcs	r3, r5
 80007a6:	4318      	orrs	r0, r3
 80007a8:	1a0b      	subs	r3, r1, r0
 80007aa:	469c      	mov	ip, r3
 80007ac:	0015      	movs	r5, r2
 80007ae:	e680      	b.n	80004b2 <__aeabi_fsub+0x66>
 80007b0:	fbffffff 	.word	0xfbffffff
 80007b4:	7dffffff 	.word	0x7dffffff
 80007b8:	22fe      	movs	r2, #254	@ 0xfe
 80007ba:	1c6b      	adds	r3, r5, #1
 80007bc:	4213      	tst	r3, r2
 80007be:	d0a3      	beq.n	8000708 <__aeabi_fsub+0x2bc>
 80007c0:	2bff      	cmp	r3, #255	@ 0xff
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fsub+0x37a>
 80007c4:	e69c      	b.n	8000500 <__aeabi_fsub+0xb4>
 80007c6:	4461      	add	r1, ip
 80007c8:	0849      	lsrs	r1, r1, #1
 80007ca:	074a      	lsls	r2, r1, #29
 80007cc:	d049      	beq.n	8000862 <__aeabi_fsub+0x416>
 80007ce:	220f      	movs	r2, #15
 80007d0:	400a      	ands	r2, r1
 80007d2:	2a04      	cmp	r2, #4
 80007d4:	d045      	beq.n	8000862 <__aeabi_fsub+0x416>
 80007d6:	1d0a      	adds	r2, r1, #4
 80007d8:	4694      	mov	ip, r2
 80007da:	e6ad      	b.n	8000538 <__aeabi_fsub+0xec>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fsub+0x396>
 80007e0:	e776      	b.n	80006d0 <__aeabi_fsub+0x284>
 80007e2:	e68d      	b.n	8000500 <__aeabi_fsub+0xb4>
 80007e4:	0034      	movs	r4, r6
 80007e6:	20ff      	movs	r0, #255	@ 0xff
 80007e8:	2200      	movs	r2, #0
 80007ea:	e68b      	b.n	8000504 <__aeabi_fsub+0xb8>
 80007ec:	4663      	mov	r3, ip
 80007ee:	2401      	movs	r4, #1
 80007f0:	1acf      	subs	r7, r1, r3
 80007f2:	4034      	ands	r4, r6
 80007f4:	e664      	b.n	80004c0 <__aeabi_fsub+0x74>
 80007f6:	4461      	add	r1, ip
 80007f8:	014b      	lsls	r3, r1, #5
 80007fa:	d56d      	bpl.n	80008d8 <__aeabi_fsub+0x48c>
 80007fc:	0848      	lsrs	r0, r1, #1
 80007fe:	4944      	ldr	r1, [pc, #272]	@ (8000910 <__aeabi_fsub+0x4c4>)
 8000800:	4001      	ands	r1, r0
 8000802:	0743      	lsls	r3, r0, #29
 8000804:	d02c      	beq.n	8000860 <__aeabi_fsub+0x414>
 8000806:	230f      	movs	r3, #15
 8000808:	4003      	ands	r3, r0
 800080a:	2b04      	cmp	r3, #4
 800080c:	d028      	beq.n	8000860 <__aeabi_fsub+0x414>
 800080e:	1d0b      	adds	r3, r1, #4
 8000810:	469c      	mov	ip, r3
 8000812:	2302      	movs	r3, #2
 8000814:	e690      	b.n	8000538 <__aeabi_fsub+0xec>
 8000816:	2900      	cmp	r1, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fsub+0x3d0>
 800081a:	e72b      	b.n	8000674 <__aeabi_fsub+0x228>
 800081c:	2380      	movs	r3, #128	@ 0x80
 800081e:	03db      	lsls	r3, r3, #15
 8000820:	429f      	cmp	r7, r3
 8000822:	d200      	bcs.n	8000826 <__aeabi_fsub+0x3da>
 8000824:	e726      	b.n	8000674 <__aeabi_fsub+0x228>
 8000826:	4298      	cmp	r0, r3
 8000828:	d300      	bcc.n	800082c <__aeabi_fsub+0x3e0>
 800082a:	e723      	b.n	8000674 <__aeabi_fsub+0x228>
 800082c:	2401      	movs	r4, #1
 800082e:	4034      	ands	r4, r6
 8000830:	0007      	movs	r7, r0
 8000832:	e71f      	b.n	8000674 <__aeabi_fsub+0x228>
 8000834:	0034      	movs	r4, r6
 8000836:	468c      	mov	ip, r1
 8000838:	e67e      	b.n	8000538 <__aeabi_fsub+0xec>
 800083a:	2301      	movs	r3, #1
 800083c:	08cf      	lsrs	r7, r1, #3
 800083e:	e680      	b.n	8000542 <__aeabi_fsub+0xf6>
 8000840:	2300      	movs	r3, #0
 8000842:	e67e      	b.n	8000542 <__aeabi_fsub+0xf6>
 8000844:	2020      	movs	r0, #32
 8000846:	4665      	mov	r5, ip
 8000848:	1b80      	subs	r0, r0, r6
 800084a:	4085      	lsls	r5, r0
 800084c:	4663      	mov	r3, ip
 800084e:	0028      	movs	r0, r5
 8000850:	40f3      	lsrs	r3, r6
 8000852:	1e45      	subs	r5, r0, #1
 8000854:	41a8      	sbcs	r0, r5
 8000856:	4303      	orrs	r3, r0
 8000858:	469c      	mov	ip, r3
 800085a:	0015      	movs	r5, r2
 800085c:	448c      	add	ip, r1
 800085e:	e76d      	b.n	800073c <__aeabi_fsub+0x2f0>
 8000860:	2302      	movs	r3, #2
 8000862:	08cf      	lsrs	r7, r1, #3
 8000864:	e66d      	b.n	8000542 <__aeabi_fsub+0xf6>
 8000866:	1b0f      	subs	r7, r1, r4
 8000868:	017b      	lsls	r3, r7, #5
 800086a:	d528      	bpl.n	80008be <__aeabi_fsub+0x472>
 800086c:	01bf      	lsls	r7, r7, #6
 800086e:	09bf      	lsrs	r7, r7, #6
 8000870:	0038      	movs	r0, r7
 8000872:	f000 f8bf 	bl	80009f4 <__clzsi2>
 8000876:	003b      	movs	r3, r7
 8000878:	3805      	subs	r0, #5
 800087a:	4083      	lsls	r3, r0
 800087c:	0034      	movs	r4, r6
 800087e:	2501      	movs	r5, #1
 8000880:	e6ca      	b.n	8000618 <__aeabi_fsub+0x1cc>
 8000882:	2900      	cmp	r1, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fsub+0x43c>
 8000886:	e6b5      	b.n	80005f4 <__aeabi_fsub+0x1a8>
 8000888:	2401      	movs	r4, #1
 800088a:	0007      	movs	r7, r0
 800088c:	4034      	ands	r4, r6
 800088e:	e658      	b.n	8000542 <__aeabi_fsub+0xf6>
 8000890:	4663      	mov	r3, ip
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fsub+0x44c>
 8000896:	e6e9      	b.n	800066c <__aeabi_fsub+0x220>
 8000898:	2900      	cmp	r1, #0
 800089a:	d100      	bne.n	800089e <__aeabi_fsub+0x452>
 800089c:	e6ea      	b.n	8000674 <__aeabi_fsub+0x228>
 800089e:	2380      	movs	r3, #128	@ 0x80
 80008a0:	03db      	lsls	r3, r3, #15
 80008a2:	429f      	cmp	r7, r3
 80008a4:	d200      	bcs.n	80008a8 <__aeabi_fsub+0x45c>
 80008a6:	e6e5      	b.n	8000674 <__aeabi_fsub+0x228>
 80008a8:	4298      	cmp	r0, r3
 80008aa:	d300      	bcc.n	80008ae <__aeabi_fsub+0x462>
 80008ac:	e6e2      	b.n	8000674 <__aeabi_fsub+0x228>
 80008ae:	0007      	movs	r7, r0
 80008b0:	e6e0      	b.n	8000674 <__aeabi_fsub+0x228>
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fsub+0x46c>
 80008b6:	e69e      	b.n	80005f6 <__aeabi_fsub+0x1aa>
 80008b8:	2300      	movs	r3, #0
 80008ba:	08cf      	lsrs	r7, r1, #3
 80008bc:	e641      	b.n	8000542 <__aeabi_fsub+0xf6>
 80008be:	0034      	movs	r4, r6
 80008c0:	2301      	movs	r3, #1
 80008c2:	08ff      	lsrs	r7, r7, #3
 80008c4:	e63d      	b.n	8000542 <__aeabi_fsub+0xf6>
 80008c6:	2f00      	cmp	r7, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0x480>
 80008ca:	e693      	b.n	80005f4 <__aeabi_fsub+0x1a8>
 80008cc:	2300      	movs	r3, #0
 80008ce:	08ff      	lsrs	r7, r7, #3
 80008d0:	e637      	b.n	8000542 <__aeabi_fsub+0xf6>
 80008d2:	2300      	movs	r3, #0
 80008d4:	08d7      	lsrs	r7, r2, #3
 80008d6:	e634      	b.n	8000542 <__aeabi_fsub+0xf6>
 80008d8:	2301      	movs	r3, #1
 80008da:	08cf      	lsrs	r7, r1, #3
 80008dc:	e631      	b.n	8000542 <__aeabi_fsub+0xf6>
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	000b      	movs	r3, r1
 80008e2:	04d2      	lsls	r2, r2, #19
 80008e4:	2001      	movs	r0, #1
 80008e6:	4013      	ands	r3, r2
 80008e8:	4211      	tst	r1, r2
 80008ea:	d000      	beq.n	80008ee <__aeabi_fsub+0x4a2>
 80008ec:	e6ae      	b.n	800064c <__aeabi_fsub+0x200>
 80008ee:	08cf      	lsrs	r7, r1, #3
 80008f0:	e627      	b.n	8000542 <__aeabi_fsub+0xf6>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fsub+0x4ac>
 80008f6:	e75f      	b.n	80007b8 <__aeabi_fsub+0x36c>
 80008f8:	1b56      	subs	r6, r2, r5
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d101      	bne.n	8000902 <__aeabi_fsub+0x4b6>
 80008fe:	0033      	movs	r3, r6
 8000900:	e6e7      	b.n	80006d2 <__aeabi_fsub+0x286>
 8000902:	2380      	movs	r3, #128	@ 0x80
 8000904:	4660      	mov	r0, ip
 8000906:	04db      	lsls	r3, r3, #19
 8000908:	4318      	orrs	r0, r3
 800090a:	4684      	mov	ip, r0
 800090c:	e6eb      	b.n	80006e6 <__aeabi_fsub+0x29a>
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	7dffffff 	.word	0x7dffffff

08000914 <__aeabi_f2iz>:
 8000914:	0241      	lsls	r1, r0, #9
 8000916:	0042      	lsls	r2, r0, #1
 8000918:	0fc3      	lsrs	r3, r0, #31
 800091a:	0a49      	lsrs	r1, r1, #9
 800091c:	2000      	movs	r0, #0
 800091e:	0e12      	lsrs	r2, r2, #24
 8000920:	2a7e      	cmp	r2, #126	@ 0x7e
 8000922:	dd03      	ble.n	800092c <__aeabi_f2iz+0x18>
 8000924:	2a9d      	cmp	r2, #157	@ 0x9d
 8000926:	dd02      	ble.n	800092e <__aeabi_f2iz+0x1a>
 8000928:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <__aeabi_f2iz+0x3c>)
 800092a:	1898      	adds	r0, r3, r2
 800092c:	4770      	bx	lr
 800092e:	2080      	movs	r0, #128	@ 0x80
 8000930:	0400      	lsls	r0, r0, #16
 8000932:	4301      	orrs	r1, r0
 8000934:	2a95      	cmp	r2, #149	@ 0x95
 8000936:	dc07      	bgt.n	8000948 <__aeabi_f2iz+0x34>
 8000938:	2096      	movs	r0, #150	@ 0x96
 800093a:	1a82      	subs	r2, r0, r2
 800093c:	40d1      	lsrs	r1, r2
 800093e:	4248      	negs	r0, r1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f3      	bne.n	800092c <__aeabi_f2iz+0x18>
 8000944:	0008      	movs	r0, r1
 8000946:	e7f1      	b.n	800092c <__aeabi_f2iz+0x18>
 8000948:	3a96      	subs	r2, #150	@ 0x96
 800094a:	4091      	lsls	r1, r2
 800094c:	e7f7      	b.n	800093e <__aeabi_f2iz+0x2a>
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	7fffffff 	.word	0x7fffffff

08000954 <__aeabi_i2f>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	2800      	cmp	r0, #0
 8000958:	d012      	beq.n	8000980 <__aeabi_i2f+0x2c>
 800095a:	17c3      	asrs	r3, r0, #31
 800095c:	18c5      	adds	r5, r0, r3
 800095e:	405d      	eors	r5, r3
 8000960:	0fc4      	lsrs	r4, r0, #31
 8000962:	0028      	movs	r0, r5
 8000964:	f000 f846 	bl	80009f4 <__clzsi2>
 8000968:	239e      	movs	r3, #158	@ 0x9e
 800096a:	1a1b      	subs	r3, r3, r0
 800096c:	2b96      	cmp	r3, #150	@ 0x96
 800096e:	dc0f      	bgt.n	8000990 <__aeabi_i2f+0x3c>
 8000970:	2808      	cmp	r0, #8
 8000972:	d038      	beq.n	80009e6 <__aeabi_i2f+0x92>
 8000974:	3808      	subs	r0, #8
 8000976:	4085      	lsls	r5, r0
 8000978:	026d      	lsls	r5, r5, #9
 800097a:	0a6d      	lsrs	r5, r5, #9
 800097c:	b2d8      	uxtb	r0, r3
 800097e:	e002      	b.n	8000986 <__aeabi_i2f+0x32>
 8000980:	2400      	movs	r4, #0
 8000982:	2000      	movs	r0, #0
 8000984:	2500      	movs	r5, #0
 8000986:	05c0      	lsls	r0, r0, #23
 8000988:	4328      	orrs	r0, r5
 800098a:	07e4      	lsls	r4, r4, #31
 800098c:	4320      	orrs	r0, r4
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	2b99      	cmp	r3, #153	@ 0x99
 8000992:	dc14      	bgt.n	80009be <__aeabi_i2f+0x6a>
 8000994:	1f42      	subs	r2, r0, #5
 8000996:	4095      	lsls	r5, r2
 8000998:	002a      	movs	r2, r5
 800099a:	4915      	ldr	r1, [pc, #84]	@ (80009f0 <__aeabi_i2f+0x9c>)
 800099c:	4011      	ands	r1, r2
 800099e:	0755      	lsls	r5, r2, #29
 80009a0:	d01c      	beq.n	80009dc <__aeabi_i2f+0x88>
 80009a2:	250f      	movs	r5, #15
 80009a4:	402a      	ands	r2, r5
 80009a6:	2a04      	cmp	r2, #4
 80009a8:	d018      	beq.n	80009dc <__aeabi_i2f+0x88>
 80009aa:	3104      	adds	r1, #4
 80009ac:	08ca      	lsrs	r2, r1, #3
 80009ae:	0149      	lsls	r1, r1, #5
 80009b0:	d515      	bpl.n	80009de <__aeabi_i2f+0x8a>
 80009b2:	239f      	movs	r3, #159	@ 0x9f
 80009b4:	0252      	lsls	r2, r2, #9
 80009b6:	1a18      	subs	r0, r3, r0
 80009b8:	0a55      	lsrs	r5, r2, #9
 80009ba:	b2c0      	uxtb	r0, r0
 80009bc:	e7e3      	b.n	8000986 <__aeabi_i2f+0x32>
 80009be:	2205      	movs	r2, #5
 80009c0:	0029      	movs	r1, r5
 80009c2:	1a12      	subs	r2, r2, r0
 80009c4:	40d1      	lsrs	r1, r2
 80009c6:	0002      	movs	r2, r0
 80009c8:	321b      	adds	r2, #27
 80009ca:	4095      	lsls	r5, r2
 80009cc:	002a      	movs	r2, r5
 80009ce:	1e55      	subs	r5, r2, #1
 80009d0:	41aa      	sbcs	r2, r5
 80009d2:	430a      	orrs	r2, r1
 80009d4:	4906      	ldr	r1, [pc, #24]	@ (80009f0 <__aeabi_i2f+0x9c>)
 80009d6:	4011      	ands	r1, r2
 80009d8:	0755      	lsls	r5, r2, #29
 80009da:	d1e2      	bne.n	80009a2 <__aeabi_i2f+0x4e>
 80009dc:	08ca      	lsrs	r2, r1, #3
 80009de:	0252      	lsls	r2, r2, #9
 80009e0:	0a55      	lsrs	r5, r2, #9
 80009e2:	b2d8      	uxtb	r0, r3
 80009e4:	e7cf      	b.n	8000986 <__aeabi_i2f+0x32>
 80009e6:	026d      	lsls	r5, r5, #9
 80009e8:	0a6d      	lsrs	r5, r5, #9
 80009ea:	308e      	adds	r0, #142	@ 0x8e
 80009ec:	e7cb      	b.n	8000986 <__aeabi_i2f+0x32>
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	fbffffff 	.word	0xfbffffff

080009f4 <__clzsi2>:
 80009f4:	211c      	movs	r1, #28
 80009f6:	2301      	movs	r3, #1
 80009f8:	041b      	lsls	r3, r3, #16
 80009fa:	4298      	cmp	r0, r3
 80009fc:	d301      	bcc.n	8000a02 <__clzsi2+0xe>
 80009fe:	0c00      	lsrs	r0, r0, #16
 8000a00:	3910      	subs	r1, #16
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	4298      	cmp	r0, r3
 8000a06:	d301      	bcc.n	8000a0c <__clzsi2+0x18>
 8000a08:	0a00      	lsrs	r0, r0, #8
 8000a0a:	3908      	subs	r1, #8
 8000a0c:	091b      	lsrs	r3, r3, #4
 8000a0e:	4298      	cmp	r0, r3
 8000a10:	d301      	bcc.n	8000a16 <__clzsi2+0x22>
 8000a12:	0900      	lsrs	r0, r0, #4
 8000a14:	3904      	subs	r1, #4
 8000a16:	a202      	add	r2, pc, #8	@ (adr r2, 8000a20 <__clzsi2+0x2c>)
 8000a18:	5c10      	ldrb	r0, [r2, r0]
 8000a1a:	1840      	adds	r0, r0, r1
 8000a1c:	4770      	bx	lr
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	02020304 	.word	0x02020304
 8000a24:	01010101 	.word	0x01010101
	...

08000a30 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void microDelay(uint16_t delay) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	1dbb      	adds	r3, r7, #6
 8000a3a:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <microDelay+0x30>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <microDelay+0x30>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a4c:	1dbb      	adds	r3, r7, #6
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d3f8      	bcc.n	8000a46 <microDelay+0x16>
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	2000002c 	.word	0x2000002c

08000a64 <Read_HX711_Raw>:
  * @brief  Reads a single raw value from the HX711. This is a blocking function.
  * @note   This function is only used during initialization (Tare).
  * The main loop uses the non-blocking manager.
  * @retval The 24-bit raw ADC value.
  */
long Read_HX711_Raw(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
    long data = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
    uint32_t start_time = HAL_GetTick();
 8000a6e:	f000 fb99 	bl	80011a4 <HAL_GetTick>
 8000a72:	0003      	movs	r3, r0
 8000a74:	607b      	str	r3, [r7, #4]

    // 1. Wait for the HX711 to become ready (DT pin goes LOW)
    while (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET) {
 8000a76:	e008      	b.n	8000a8a <Read_HX711_Raw+0x26>
        if (HAL_GetTick() - start_time > 200) { // Timeout
 8000a78:	f000 fb94 	bl	80011a4 <HAL_GetTick>
 8000a7c:	0002      	movs	r2, r0
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2bc8      	cmp	r3, #200	@ 0xc8
 8000a84:	d901      	bls.n	8000a8a <Read_HX711_Raw+0x26>
            return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e057      	b.n	8000b3a <Read_HX711_Raw+0xd6>
    while (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET) {
 8000a8a:	2380      	movs	r3, #128	@ 0x80
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b44 <Read_HX711_Raw+0xe0>)
 8000a90:	0019      	movs	r1, r3
 8000a92:	0010      	movs	r0, r2
 8000a94:	f000 fde0 	bl	8001658 <HAL_GPIO_ReadPin>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d0ec      	beq.n	8000a78 <Read_HX711_Raw+0x14>
        }
    }

    // 2. Read the 24 bits of data
    for (uint8_t i = 0; i < 24; i++) {
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e029      	b.n	8000afc <Read_HX711_Raw+0x98>
        HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4825      	ldr	r0, [pc, #148]	@ (8000b44 <Read_HX711_Raw+0xe0>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	f000 fdee 	bl	8001692 <HAL_GPIO_WritePin>
        microDelay(1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff ffba 	bl	8000a30 <microDelay>
        data = data << 1;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000ac2:	2380      	movs	r3, #128	@ 0x80
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	481f      	ldr	r0, [pc, #124]	@ (8000b44 <Read_HX711_Raw+0xe0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	0019      	movs	r1, r3
 8000acc:	f000 fde1 	bl	8001692 <HAL_GPIO_WritePin>
        microDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff ffad 	bl	8000a30 <microDelay>
        if (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET) {
 8000ad6:	2380      	movs	r3, #128	@ 0x80
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	4a1a      	ldr	r2, [pc, #104]	@ (8000b44 <Read_HX711_Raw+0xe0>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f000 fdba 	bl	8001658 <HAL_GPIO_ReadPin>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d102      	bne.n	8000af0 <Read_HX711_Raw+0x8c>
            data++;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 24; i++) {
 8000af0:	210b      	movs	r1, #11
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	3201      	adds	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	230b      	movs	r3, #11
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b17      	cmp	r3, #23
 8000b04:	d9d0      	bls.n	8000aa8 <Read_HX711_Raw+0x44>
        }
    }

    // 3. Send 1 clock pulse to set gain to 128 for the next reading
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <Read_HX711_Raw+0xe0>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	0019      	movs	r1, r3
 8000b10:	f000 fdbf 	bl	8001692 <HAL_GPIO_WritePin>
    microDelay(1);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ff8b 	bl	8000a30 <microDelay>
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <Read_HX711_Raw+0xe0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	0019      	movs	r1, r3
 8000b24:	f000 fdb5 	bl	8001692 <HAL_GPIO_WritePin>
    microDelay(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff ff81 	bl	8000a30 <microDelay>

    // 4. Convert from 24-bit two's complement to 32-bit signed long
    data = data ^ 0x800000;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	0412      	lsls	r2, r2, #16
 8000b34:	4053      	eors	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]

    return data;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	48000400 	.word	0x48000400

08000b48 <HX711_Tare>:
/**
  * @brief  Performs a tare operation by reading the sensor multiple times
  * to get a stable zero-offset.
  * @note   Ensure NO LOAD is on the scale when this is called.
  */
void HX711_Tare(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
    long total = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
    // Let the ADC settle
    for (int i = 0; i < 5; i++) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	e007      	b.n	8000b68 <HX711_Tare+0x20>
        Read_HX711_Raw();
 8000b58:	f7ff ff84 	bl	8000a64 <Read_HX711_Raw>
        HAL_Delay(10);
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f000 fb2b 	bl	80011b8 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	ddf4      	ble.n	8000b58 <HX711_Tare+0x10>
    }
    // Average several readings for a stable tare value
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	e00b      	b.n	8000b8c <HX711_Tare+0x44>
        total += Read_HX711_Raw();
 8000b74:	f7ff ff76 	bl	8000a64 <Read_HX711_Raw>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	189b      	adds	r3, r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
        HAL_Delay(10);
 8000b80:	200a      	movs	r0, #10
 8000b82:	f000 fb19 	bl	80011b8 <HAL_Delay>
    for (int i = 0; i < NUM_SAMPLES; i++) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b1f      	cmp	r3, #31
 8000b90:	ddf0      	ble.n	8000b74 <HX711_Tare+0x2c>
    }
    tare_offset = total / NUM_SAMPLES;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	da00      	bge.n	8000b9a <HX711_Tare+0x52>
 8000b98:	331f      	adds	r3, #31
 8000b9a:	115b      	asrs	r3, r3, #5
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HX711_Tare+0x64>)
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000074 	.word	0x20000074

08000bb0 <HX711_Manager>:

/**
  * @brief  Non-blocking state machine to manage HX711 readings.
  * @note   Call this function repeatedly in your main while loop.
  */
void HX711_Manager(void) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
    switch (hx711_state) {
 8000bb6:	4b58      	ldr	r3, [pc, #352]	@ (8000d18 <HX711_Manager+0x168>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d016      	beq.n	8000bec <HX711_Manager+0x3c>
 8000bbe:	dd00      	ble.n	8000bc2 <HX711_Manager+0x12>
 8000bc0:	e075      	b.n	8000cae <HX711_Manager+0xfe>
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d16e      	bne.n	8000ca4 <HX711_Manager+0xf4>
        case HX711_IDLE:
            // If the HX711 is ready for a new reading, start the process
            if (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_RESET) {
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	4a54      	ldr	r2, [pc, #336]	@ (8000d1c <HX711_Manager+0x16c>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f000 fd42 	bl	8001658 <HAL_GPIO_ReadPin>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d167      	bne.n	8000ca8 <HX711_Manager+0xf8>
                raw_data_buffer = 0;
 8000bd8:	4b51      	ldr	r3, [pc, #324]	@ (8000d20 <HX711_Manager+0x170>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
                bit_counter = 0;
 8000bde:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <HX711_Manager+0x174>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
                hx711_state = HX711_READING_BITS;
 8000be4:	4b4c      	ldr	r3, [pc, #304]	@ (8000d18 <HX711_Manager+0x168>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000bea:	e05d      	b.n	8000ca8 <HX711_Manager+0xf8>
            // Kept for conceptual clarity, but the logic is merged into IDLE
            break;

        case HX711_READING_BITS:
            // Pulse the clock high
            HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	484a      	ldr	r0, [pc, #296]	@ (8000d1c <HX711_Manager+0x16c>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	f000 fd4c 	bl	8001692 <HAL_GPIO_WritePin>
            microDelay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f7ff ff18 	bl	8000a30 <microDelay>

            // Shift and read the bit
            raw_data_buffer = raw_data_buffer << 1;
 8000c00:	4b47      	ldr	r3, [pc, #284]	@ (8000d20 <HX711_Manager+0x170>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	005a      	lsls	r2, r3, #1
 8000c06:	4b46      	ldr	r3, [pc, #280]	@ (8000d20 <HX711_Manager+0x170>)
 8000c08:	601a      	str	r2, [r3, #0]
            if (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET) {
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	019b      	lsls	r3, r3, #6
 8000c0e:	4a43      	ldr	r2, [pc, #268]	@ (8000d1c <HX711_Manager+0x16c>)
 8000c10:	0019      	movs	r1, r3
 8000c12:	0010      	movs	r0, r2
 8000c14:	f000 fd20 	bl	8001658 <HAL_GPIO_ReadPin>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d104      	bne.n	8000c28 <HX711_Manager+0x78>
                raw_data_buffer++;
 8000c1e:	4b40      	ldr	r3, [pc, #256]	@ (8000d20 <HX711_Manager+0x170>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	4b3e      	ldr	r3, [pc, #248]	@ (8000d20 <HX711_Manager+0x170>)
 8000c26:	601a      	str	r2, [r3, #0]
            }

            // Pulse the clock low
            HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000c28:	2380      	movs	r3, #128	@ 0x80
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	483b      	ldr	r0, [pc, #236]	@ (8000d1c <HX711_Manager+0x16c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	0019      	movs	r1, r3
 8000c32:	f000 fd2e 	bl	8001692 <HAL_GPIO_WritePin>
            microDelay(1);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fefa 	bl	8000a30 <microDelay>

            bit_counter++;
 8000c3c:	4b39      	ldr	r3, [pc, #228]	@ (8000d24 <HX711_Manager+0x174>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <HX711_Manager+0x174>)
 8000c46:	701a      	strb	r2, [r3, #0]

            // Check if all 24 bits have been read
            if (bit_counter >= 24) {
 8000c48:	4b36      	ldr	r3, [pc, #216]	@ (8000d24 <HX711_Manager+0x174>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b17      	cmp	r3, #23
 8000c4e:	d92d      	bls.n	8000cac <HX711_Manager+0xfc>
                // Send the final clock pulse to set gain for the next reading
                HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4831      	ldr	r0, [pc, #196]	@ (8000d1c <HX711_Manager+0x16c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	0019      	movs	r1, r3
 8000c5a:	f000 fd1a 	bl	8001692 <HAL_GPIO_WritePin>
                microDelay(1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fee6 	bl	8000a30 <microDelay>
                HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	482c      	ldr	r0, [pc, #176]	@ (8000d1c <HX711_Manager+0x16c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	f000 fd10 	bl	8001692 <HAL_GPIO_WritePin>
                microDelay(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fedc 	bl	8000a30 <microDelay>

                // Convert to signed value and add to accumulator
                long final_data = (long)(raw_data_buffer ^ 0x800000);
 8000c78:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <HX711_Manager+0x170>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2280      	movs	r2, #128	@ 0x80
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4053      	eors	r3, r2
 8000c82:	607b      	str	r3, [r7, #4]
                sample_accumulator += final_data;
 8000c84:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <HX711_Manager+0x178>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	18d2      	adds	r2, r2, r3
 8000c8c:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <HX711_Manager+0x178>)
 8000c8e:	601a      	str	r2, [r3, #0]
                sample_counter++;
 8000c90:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <HX711_Manager+0x17c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <HX711_Manager+0x17c>)
 8000c9a:	701a      	strb	r2, [r3, #0]

                // Reset for the next reading cycle
                hx711_state = HX711_IDLE;
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <HX711_Manager+0x168>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000ca2:	e003      	b.n	8000cac <HX711_Manager+0xfc>
            break;
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	e002      	b.n	8000cae <HX711_Manager+0xfe>
            break;
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	e000      	b.n	8000cae <HX711_Manager+0xfe>
            break;
 8000cac:	46c0      	nop			@ (mov r8, r8)
    }

    // Check if we have collected enough samples to calculate a weight
    if (sample_counter >= NUM_SAMPLES) {
 8000cae:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <HX711_Manager+0x17c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b1f      	cmp	r3, #31
 8000cb4:	d92c      	bls.n	8000d10 <HX711_Manager+0x160>
        long average_raw = sample_accumulator / NUM_SAMPLES;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <HX711_Manager+0x178>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da00      	bge.n	8000cc0 <HX711_Manager+0x110>
 8000cbe:	331f      	adds	r3, #31
 8000cc0:	115b      	asrs	r3, r3, #5
 8000cc2:	603b      	str	r3, [r7, #0]

        // Calculate the final weight
        current_weight_mg = (long)(((float)average_raw - (float)tare_offset) / calibration_factor);
 8000cc4:	6838      	ldr	r0, [r7, #0]
 8000cc6:	f7ff fe45 	bl	8000954 <__aeabi_i2f>
 8000cca:	1c04      	adds	r4, r0, #0
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HX711_Manager+0x180>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff fe3f 	bl	8000954 <__aeabi_i2f>
 8000cd6:	1c03      	adds	r3, r0, #0
 8000cd8:	1c19      	adds	r1, r3, #0
 8000cda:	1c20      	adds	r0, r4, #0
 8000cdc:	f7ff fbb6 	bl	800044c <__aeabi_fsub>
 8000ce0:	1c03      	adds	r3, r0, #0
 8000ce2:	1c1a      	adds	r2, r3, #0
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <HX711_Manager+0x184>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	1c19      	adds	r1, r3, #0
 8000cea:	1c10      	adds	r0, r2, #0
 8000cec:	f7ff fa98 	bl	8000220 <__aeabi_fdiv>
 8000cf0:	1c03      	adds	r3, r0, #0
 8000cf2:	1c18      	adds	r0, r3, #0
 8000cf4:	f7ff fe0e 	bl	8000914 <__aeabi_f2iz>
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <HX711_Manager+0x188>)
 8000cfc:	601a      	str	r2, [r3, #0]
//        current_weight_mg = average_raw - tare_offset; //for calibration only
        new_weight_available = true; // Set flag for the main loop
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HX711_Manager+0x18c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]

        // Reset for the next averaging cycle
        sample_accumulator = 0;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HX711_Manager+0x178>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
        sample_counter = 0;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HX711_Manager+0x17c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
    }
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b003      	add	sp, #12
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	2000007d 	.word	0x2000007d
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	20000080 	.word	0x20000080
 8000d24:	20000084 	.word	0x20000084
 8000d28:	20000088 	.word	0x20000088
 8000d2c:	2000008c 	.word	0x2000008c
 8000d30:	20000074 	.word	0x20000074
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000078 	.word	0x20000078
 8000d3c:	2000007c 	.word	0x2000007c

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000d44:	f000 f9d4 	bl	80010f0 <HAL_Init>
  SystemClock_Config();
 8000d48:	f000 f82e 	bl	8000da8 <SystemClock_Config>
  MX_GPIO_Init();
 8000d4c:	f000 f8bc 	bl	8000ec8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d50:	f000 f866 	bl	8000e20 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <main+0x58>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f001 f9da 	bl	8002110 <HAL_TIM_Base_Start>

  // Power up sequence for HX711
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8000d5c:	2380      	movs	r3, #128	@ 0x80
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	480e      	ldr	r0, [pc, #56]	@ (8000d9c <main+0x5c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	0019      	movs	r1, r3
 8000d66:	f000 fc94 	bl	8001692 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000d6a:	200a      	movs	r0, #10
 8000d6c:	f000 fa24 	bl	80011b8 <HAL_Delay>

  // Tare the scale at startup. Make sure nothing is on the scale!
  HX711_Tare();
 8000d70:	f7ff feea 	bl	8000b48 <HX711_Tare>
  HAL_Delay(1500);
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <main+0x60>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fa1e 	bl	80011b8 <HAL_Delay>
  HX711_Tare();
 8000d7c:	f7ff fee4 	bl	8000b48 <HX711_Tare>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Continuously run the non-blocking manager
    HX711_Manager();
 8000d80:	f7ff ff16 	bl	8000bb0 <HX711_Manager>

    // Check if a new, averaged weight reading is ready
    if (new_weight_available) {
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <main+0x64>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f8      	beq.n	8000d80 <main+0x40>
      new_weight_available = false; // Clear the flag
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <main+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]

      // You can now use the `current_weight_mg` variable.
      // For example, print it via UART, display it on an LCD, etc.
      // NOTE: For debugging, you can set a breakpoint here to check the value.
      __NOP(); // No operation, a good place for a breakpoint
 8000d94:	46c0      	nop			@ (mov r8, r8)
    HX711_Manager();
 8000d96:	e7f3      	b.n	8000d80 <main+0x40>
 8000d98:	2000002c 	.word	0x2000002c
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	000005dc 	.word	0x000005dc
 8000da4:	2000007c 	.word	0x2000007c

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b093      	sub	sp, #76	@ 0x4c
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	2414      	movs	r4, #20
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	0018      	movs	r0, r3
 8000db4:	2334      	movs	r3, #52	@ 0x34
 8000db6:	001a      	movs	r2, r3
 8000db8:	2100      	movs	r1, #0
 8000dba:	f001 fc4d 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f001 fc46 	bl	8002658 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2220      	movs	r2, #32
 8000dd0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 fc73 	bl	80016cc <HAL_RCC_OscConfig>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dea:	f000 f8f3 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2203      	movs	r2, #3
 8000df8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2101      	movs	r1, #1
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 ffe4 	bl	8001dd8 <HAL_RCC_ClockConfig>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000e14:	f000 f8de 	bl	8000fd4 <Error_Handler>
  }
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b013      	add	sp, #76	@ 0x4c
 8000e1e:	bd90      	pop	{r4, r7, pc}

08000e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	2308      	movs	r3, #8
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2100      	movs	r1, #0
 8000e32:	f001 fc11 	bl	8002658 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e36:	003b      	movs	r3, r7
 8000e38:	0018      	movs	r0, r3
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	f001 fc0a 	bl	8002658 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	05d2      	lsls	r2, r2, #23
 8000e4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e4e:	222f      	movs	r2, #47	@ 0x2f
 8000e50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f8fe 	bl	8002070 <HAL_TIM_Base_Init>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f000 f8ac 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2280      	movs	r2, #128	@ 0x80
 8000e82:	0152      	lsls	r2, r2, #5
 8000e84:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e86:	187a      	adds	r2, r7, r1
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 f989 	bl	80021a4 <HAL_TIM_ConfigClockSource>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e96:	f000 f89d 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea6:	003a      	movs	r2, r7
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_TIM2_Init+0xa4>)
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f001 fb75 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000eb6:	f000 f88d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	2000002c 	.word	0x2000002c

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	240c      	movs	r4, #12
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2314      	movs	r3, #20
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f001 fbbd 	bl	8002658 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ede:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	03c9      	lsls	r1, r1, #15
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	03db      	lsls	r3, r3, #15
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b34      	ldr	r3, [pc, #208]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	02c9      	lsls	r1, r1, #11
 8000f04:	430a      	orrs	r2, r1
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	02db      	lsls	r3, r3, #11
 8000f10:	4013      	ands	r3, r2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	0289      	lsls	r1, r1, #10
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <MX_GPIO_Init+0x104>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	0219      	lsls	r1, r3, #8
 8000f36:	2390      	movs	r3, #144	@ 0x90
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fba8 	bl	8001692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <MX_GPIO_Init+0x108>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	f000 fba1 	bl	8001692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HX711_DT_Pin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	0192      	lsls	r2, r2, #6
 8000f56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd0 <MX_GPIO_Init+0x108>)
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	f000 f9fc 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000f70:	0021      	movs	r1, r4
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	0212      	lsls	r2, r2, #8
 8000f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	000c      	movs	r4, r1
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2201      	movs	r2, #1
 8000f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	193a      	adds	r2, r7, r4
 8000f90:	2390      	movs	r3, #144	@ 0x90
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 f9e6 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_SCK_Pin */
  GPIO_InitStruct.Pin = HX711_SCK_Pin;
 8000f9c:	0021      	movs	r1, r4
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2201      	movs	r2, #1
 8000faa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HX711_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <MX_GPIO_Init+0x108>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f000 f9d2 	bl	8001368 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b009      	add	sp, #36	@ 0x24
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_MspInit+0x44>)
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_MspInit+0x44>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_MspInit+0x44>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x44>)
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_MspInit+0x44>)
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	61da      	str	r2, [r3, #28]
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_MspInit+0x44>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	05db      	lsls	r3, r3, #23
 8001038:	429a      	cmp	r2, r3
 800103a:	d10b      	bne.n	8001054 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <HAL_TIM_Base_MspInit+0x34>)
 800103e:	69da      	ldr	r2, [r3, #28]
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_TIM_Base_MspInit+0x34>)
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	61da      	str	r2, [r3, #28]
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <HAL_TIM_Base_MspInit+0x34>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2201      	movs	r2, #1
 800104e:	4013      	ands	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	e7fd      	b.n	8001064 <NMI_Handler+0x4>

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	e7fd      	b.n	800106c <HardFault_Handler+0x4>

08001070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f87a 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800109c:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a0:	f7ff fff7 	bl	8001092 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ca:	f001 facd 	bl	8002668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff fe37 	bl	8000d40 <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   r0, =_estack
 80010d4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010e0:	0800277c 	.word	0x0800277c
  ldr r2, =_sbss
 80010e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010e8:	20000094 	.word	0x20000094

080010ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_COMP_IRQHandler>
	...

080010f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_Init+0x24>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_Init+0x24>)
 80010fa:	2110      	movs	r1, #16
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f809 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001106:	f7ff ff6b 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_InitTick+0x5c>)
 8001122:	681c      	ldr	r4, [r3, #0]
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <HAL_InitTick+0x60>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	0019      	movs	r1, r3
 800112a:	23fa      	movs	r3, #250	@ 0xfa
 800112c:	0098      	lsls	r0, r3, #2
 800112e:	f7fe ffeb 	bl	8000108 <__udivsi3>
 8001132:	0003      	movs	r3, r0
 8001134:	0019      	movs	r1, r3
 8001136:	0020      	movs	r0, r4
 8001138:	f7fe ffe6 	bl	8000108 <__udivsi3>
 800113c:	0003      	movs	r3, r0
 800113e:	0018      	movs	r0, r3
 8001140:	f000 f905 	bl	800134e <HAL_SYSTICK_Config>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e00f      	b.n	800116c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d80b      	bhi.n	800116a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	2301      	movs	r3, #1
 8001156:	425b      	negs	r3, r3
 8001158:	2200      	movs	r2, #0
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f8e2 	bl	8001324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_InitTick+0x64>)
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b003      	add	sp, #12
 8001172:	bd90      	pop	{r4, r7, pc}
 8001174:	20000004 	.word	0x20000004
 8001178:	2000000c 	.word	0x2000000c
 800117c:	20000008 	.word	0x20000008

08001180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_IncTick+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	001a      	movs	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <HAL_IncTick+0x20>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	18d2      	adds	r2, r2, r3
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_IncTick+0x20>)
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	20000090 	.word	0x20000090

080011a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b02      	ldr	r3, [pc, #8]	@ (80011b4 <HAL_GetTick+0x10>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	20000090 	.word	0x20000090

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff fff0 	bl	80011a4 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	001a      	movs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	f7ff ffe0 	bl	80011a4 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	2000000c 	.word	0x2000000c

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b7f      	cmp	r3, #127	@ 0x7f
 8001214:	d828      	bhi.n	8001268 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001216:	4a2f      	ldr	r2, [pc, #188]	@ (80012d4 <__NVIC_SetPriority+0xd4>)
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b25b      	sxtb	r3, r3
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	33c0      	adds	r3, #192	@ 0xc0
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	589b      	ldr	r3, [r3, r2]
 8001226:	1dfa      	adds	r2, r7, #7
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	0011      	movs	r1, r2
 800122c:	2203      	movs	r2, #3
 800122e:	400a      	ands	r2, r1
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	21ff      	movs	r1, #255	@ 0xff
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	43d2      	mvns	r2, r2
 800123a:	401a      	ands	r2, r3
 800123c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	22ff      	movs	r2, #255	@ 0xff
 8001244:	401a      	ands	r2, r3
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	2303      	movs	r3, #3
 800124e:	4003      	ands	r3, r0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001254:	481f      	ldr	r0, [pc, #124]	@ (80012d4 <__NVIC_SetPriority+0xd4>)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	430a      	orrs	r2, r1
 8001260:	33c0      	adds	r3, #192	@ 0xc0
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001266:	e031      	b.n	80012cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <__NVIC_SetPriority+0xd8>)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	0019      	movs	r1, r3
 8001270:	230f      	movs	r3, #15
 8001272:	400b      	ands	r3, r1
 8001274:	3b08      	subs	r3, #8
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3306      	adds	r3, #6
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	18d3      	adds	r3, r2, r3
 800127e:	3304      	adds	r3, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1dfa      	adds	r2, r7, #7
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	0011      	movs	r1, r2
 8001288:	2203      	movs	r2, #3
 800128a:	400a      	ands	r2, r1
 800128c:	00d2      	lsls	r2, r2, #3
 800128e:	21ff      	movs	r1, #255	@ 0xff
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	43d2      	mvns	r2, r2
 8001296:	401a      	ands	r2, r3
 8001298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	019b      	lsls	r3, r3, #6
 800129e:	22ff      	movs	r2, #255	@ 0xff
 80012a0:	401a      	ands	r2, r3
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	0018      	movs	r0, r3
 80012a8:	2303      	movs	r3, #3
 80012aa:	4003      	ands	r3, r0
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b0:	4809      	ldr	r0, [pc, #36]	@ (80012d8 <__NVIC_SetPriority+0xd8>)
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	001c      	movs	r4, r3
 80012b8:	230f      	movs	r3, #15
 80012ba:	4023      	ands	r3, r4
 80012bc:	3b08      	subs	r3, #8
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	430a      	orrs	r2, r1
 80012c2:	3306      	adds	r3, #6
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	18c3      	adds	r3, r0, r3
 80012c8:	3304      	adds	r3, #4
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b003      	add	sp, #12
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	045b      	lsls	r3, r3, #17
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d301      	bcc.n	80012f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f0:	2301      	movs	r3, #1
 80012f2:	e010      	b.n	8001316 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <SysTick_Config+0x44>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	3a01      	subs	r2, #1
 80012fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fc:	2301      	movs	r3, #1
 80012fe:	425b      	negs	r3, r3
 8001300:	2103      	movs	r1, #3
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff ff7c 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x44>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x44>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	210f      	movs	r1, #15
 8001330:	187b      	adds	r3, r7, r1
 8001332:	1c02      	adds	r2, r0, #0
 8001334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	187b      	adds	r3, r7, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	0011      	movs	r1, r2
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ffbf 	bl	80012dc <SysTick_Config>
 800135e:	0003      	movs	r3, r0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e155      	b.n	8001624 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4091      	lsls	r1, r2
 8001382:	000a      	movs	r2, r1
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d100      	bne.n	8001390 <HAL_GPIO_Init+0x28>
 800138e:	e146      	b.n	800161e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	409a      	lsls	r2, r3
 80013b6:	0013      	movs	r3, r2
 80013b8:	43da      	mvns	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	2201      	movs	r2, #1
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	4013      	ands	r3, r2
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	4013      	ands	r3, r2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	58d3      	ldr	r3, [r2, r3]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2207      	movs	r2, #7
 8001464:	4013      	ands	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2107      	movs	r1, #7
 800147e:	400b      	ands	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	401a      	ands	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	23c0      	movs	r3, #192	@ 0xc0
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d100      	bne.n	80014dc <HAL_GPIO_Init+0x174>
 80014da:	e0a0      	b.n	800161e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b57      	ldr	r3, [pc, #348]	@ (800163c <HAL_GPIO_Init+0x2d4>)
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	4b56      	ldr	r3, [pc, #344]	@ (800163c <HAL_GPIO_Init+0x2d4>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	4b54      	ldr	r3, [pc, #336]	@ (800163c <HAL_GPIO_Init+0x2d4>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a52      	ldr	r2, [pc, #328]	@ (8001640 <HAL_GPIO_Init+0x2d8>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	589b      	ldr	r3, [r3, r2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2203      	movs	r2, #3
 8001506:	4013      	ands	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	2390      	movs	r3, #144	@ 0x90
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	429a      	cmp	r2, r3
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a47      	ldr	r2, [pc, #284]	@ (8001644 <HAL_GPIO_Init+0x2dc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x1ea>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a46      	ldr	r2, [pc, #280]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x1e6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a45      	ldr	r2, [pc, #276]	@ (800164c <HAL_GPIO_Init+0x2e4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x1e2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a44      	ldr	r2, [pc, #272]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x1de>
 8001542:	2304      	movs	r3, #4
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001546:	2305      	movs	r3, #5
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001556:	2300      	movs	r3, #0
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	2103      	movs	r1, #3
 800155c:	400a      	ands	r2, r1
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	@ (8001640 <HAL_GPIO_Init+0x2d8>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001576:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	035b      	lsls	r3, r3, #13
 800158e:	4013      	ands	r3, r2
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800159a:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43da      	mvns	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	039b      	lsls	r3, r3, #14
 80015b8:	4013      	ands	r3, r2
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43da      	mvns	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	029b      	lsls	r3, r3, #10
 80015e2:	4013      	ands	r3, r2
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	4013      	ands	r3, r2
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	40da      	lsrs	r2, r3
 800162c:	1e13      	subs	r3, r2, #0
 800162e:	d000      	beq.n	8001632 <HAL_GPIO_Init+0x2ca>
 8001630:	e6a2      	b.n	8001378 <HAL_GPIO_Init+0x10>
  } 
}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	46c0      	nop			@ (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b006      	add	sp, #24
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	000a      	movs	r2, r1
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	1cba      	adds	r2, r7, #2
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	4013      	ands	r3, r2
 8001670:	d004      	beq.n	800167c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001672:	230f      	movs	r3, #15
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e003      	b.n	8001684 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800167c:	230f      	movs	r3, #15
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001684:	230f      	movs	r3, #15
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	781b      	ldrb	r3, [r3, #0]
  }
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	0008      	movs	r0, r1
 800169c:	0011      	movs	r1, r2
 800169e:	1cbb      	adds	r3, r7, #2
 80016a0:	1c02      	adds	r2, r0, #0
 80016a2:	801a      	strh	r2, [r3, #0]
 80016a4:	1c7b      	adds	r3, r7, #1
 80016a6:	1c0a      	adds	r2, r1, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016aa:	1c7b      	adds	r3, r7, #1
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b2:	1cbb      	adds	r3, r7, #2
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016bc:	1cbb      	adds	r3, r7, #2
 80016be:	881a      	ldrh	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c4:	46c0      	nop			@ (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	f000 fb76 	bl	8001dcc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_RCC_OscConfig+0x20>
 80016ea:	e08e      	b.n	800180a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ec:	4bc5      	ldr	r3, [pc, #788]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	220c      	movs	r2, #12
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d00e      	beq.n	8001716 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f8:	4bc2      	ldr	r3, [pc, #776]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	220c      	movs	r2, #12
 80016fe:	4013      	ands	r3, r2
 8001700:	2b08      	cmp	r3, #8
 8001702:	d117      	bne.n	8001734 <HAL_RCC_OscConfig+0x68>
 8001704:	4bbf      	ldr	r3, [pc, #764]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	23c0      	movs	r3, #192	@ 0xc0
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	401a      	ands	r2, r3
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	025b      	lsls	r3, r3, #9
 8001712:	429a      	cmp	r2, r3
 8001714:	d10e      	bne.n	8001734 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4bbb      	ldr	r3, [pc, #748]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	@ 0x80
 800171c:	029b      	lsls	r3, r3, #10
 800171e:	4013      	ands	r3, r2
 8001720:	d100      	bne.n	8001724 <HAL_RCC_OscConfig+0x58>
 8001722:	e071      	b.n	8001808 <HAL_RCC_OscConfig+0x13c>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d000      	beq.n	800172e <HAL_RCC_OscConfig+0x62>
 800172c:	e06c      	b.n	8001808 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	f000 fb4c 	bl	8001dcc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x80>
 800173c:	4bb1      	ldr	r3, [pc, #708]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4bb0      	ldr	r3, [pc, #704]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001742:	2180      	movs	r1, #128	@ 0x80
 8001744:	0249      	lsls	r1, r1, #9
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e02f      	b.n	80017ac <HAL_RCC_OscConfig+0xe0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0xa2>
 8001754:	4bab      	ldr	r3, [pc, #684]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4baa      	ldr	r3, [pc, #680]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800175a:	49ab      	ldr	r1, [pc, #684]	@ (8001a08 <HAL_RCC_OscConfig+0x33c>)
 800175c:	400a      	ands	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	4ba8      	ldr	r3, [pc, #672]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4ba7      	ldr	r3, [pc, #668]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001766:	49a9      	ldr	r1, [pc, #676]	@ (8001a0c <HAL_RCC_OscConfig+0x340>)
 8001768:	400a      	ands	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e01e      	b.n	80017ac <HAL_RCC_OscConfig+0xe0>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d10e      	bne.n	8001794 <HAL_RCC_OscConfig+0xc8>
 8001776:	4ba3      	ldr	r3, [pc, #652]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4ba2      	ldr	r3, [pc, #648]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800177c:	2180      	movs	r1, #128	@ 0x80
 800177e:	02c9      	lsls	r1, r1, #11
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4b9f      	ldr	r3, [pc, #636]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b9e      	ldr	r3, [pc, #632]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800178a:	2180      	movs	r1, #128	@ 0x80
 800178c:	0249      	lsls	r1, r1, #9
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xe0>
 8001794:	4b9b      	ldr	r3, [pc, #620]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b9a      	ldr	r3, [pc, #616]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800179a:	499b      	ldr	r1, [pc, #620]	@ (8001a08 <HAL_RCC_OscConfig+0x33c>)
 800179c:	400a      	ands	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	4b98      	ldr	r3, [pc, #608]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b97      	ldr	r3, [pc, #604]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80017a6:	4999      	ldr	r1, [pc, #612]	@ (8001a0c <HAL_RCC_OscConfig+0x340>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d014      	beq.n	80017de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fcf6 	bl	80011a4 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017be:	f7ff fcf1 	bl	80011a4 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b64      	cmp	r3, #100	@ 0x64
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e2fd      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	029b      	lsls	r3, r3, #10
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0xf2>
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fce1 	bl	80011a4 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fcdc 	bl	80011a4 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e2e8      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b82      	ldr	r3, [pc, #520]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	@ 0x80
 8001800:	029b      	lsls	r3, r3, #10
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x11c>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x14a>
 8001814:	e06c      	b.n	80018f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001816:	4b7b      	ldr	r3, [pc, #492]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	220c      	movs	r2, #12
 800181c:	4013      	ands	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001820:	4b78      	ldr	r3, [pc, #480]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	220c      	movs	r2, #12
 8001826:	4013      	ands	r3, r2
 8001828:	2b08      	cmp	r3, #8
 800182a:	d11f      	bne.n	800186c <HAL_RCC_OscConfig+0x1a0>
 800182c:	4b75      	ldr	r3, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	23c0      	movs	r3, #192	@ 0xc0
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	401a      	ands	r2, r3
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	429a      	cmp	r2, r3
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b71      	ldr	r3, [pc, #452]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x188>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e2bb      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b6b      	ldr	r3, [pc, #428]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	22f8      	movs	r2, #248	@ 0xf8
 800185a:	4393      	bics	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00da      	lsls	r2, r3, #3
 8001864:	4b67      	ldr	r3, [pc, #412]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e041      	b.n	80018f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d024      	beq.n	80018be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b63      	ldr	r3, [pc, #396]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b62      	ldr	r3, [pc, #392]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fc90 	bl	80011a4 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fc8b 	bl	80011a4 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e297      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b59      	ldr	r3, [pc, #356]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d0f1      	beq.n	800188a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	22f8      	movs	r2, #248	@ 0xf8
 80018ac:	4393      	bics	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00da      	lsls	r2, r3, #3
 80018b6:	4b53      	ldr	r3, [pc, #332]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e018      	b.n	80018f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b51      	ldr	r3, [pc, #324]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b50      	ldr	r3, [pc, #320]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80018c4:	2101      	movs	r1, #1
 80018c6:	438a      	bics	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fc6b 	bl	80011a4 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fc66 	bl	80011a4 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e272      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d1f1      	bne.n	80018d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2208      	movs	r2, #8
 80018f6:	4013      	ands	r3, r2
 80018f8:	d036      	beq.n	8001968 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b40      	ldr	r3, [pc, #256]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001906:	4b3f      	ldr	r3, [pc, #252]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001908:	2101      	movs	r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff fc49 	bl	80011a4 <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fc44 	bl	80011a4 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e250      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b36      	ldr	r3, [pc, #216]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d0f1      	beq.n	8001918 <HAL_RCC_OscConfig+0x24c>
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b33      	ldr	r3, [pc, #204]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800193a:	4b32      	ldr	r3, [pc, #200]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800193c:	2101      	movs	r1, #1
 800193e:	438a      	bics	r2, r1
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff fc2f 	bl	80011a4 <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fc2a 	bl	80011a4 <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e236      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	d1f1      	bne.n	800194c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2204      	movs	r2, #4
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_RCC_OscConfig+0x2a8>
 8001972:	e0b5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001974:	201f      	movs	r0, #31
 8001976:	183b      	adds	r3, r7, r0
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	055b      	lsls	r3, r3, #21
 8001984:	4013      	ands	r3, r2
 8001986:	d110      	bne.n	80019aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800198a:	69da      	ldr	r2, [r3, #28]
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	0549      	lsls	r1, r1, #21
 8001992:	430a      	orrs	r2, r1
 8001994:	61da      	str	r2, [r3, #28]
 8001996:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	055b      	lsls	r3, r3, #21
 800199e:	4013      	ands	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019a4:	183b      	adds	r3, r7, r0
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_RCC_OscConfig+0x344>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	d11a      	bne.n	80019ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_RCC_OscConfig+0x344>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_RCC_OscConfig+0x344>)
 80019bc:	2180      	movs	r1, #128	@ 0x80
 80019be:	0049      	lsls	r1, r1, #1
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fbee 	bl	80011a4 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff fbe9 	bl	80011a4 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	@ 0x64
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1f5      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_RCC_OscConfig+0x344>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10f      	bne.n	8001a14 <HAL_RCC_OscConfig+0x348>
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	4b02      	ldr	r3, [pc, #8]	@ (8001a04 <HAL_RCC_OscConfig+0x338>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	621a      	str	r2, [r3, #32]
 8001a00:	e036      	b.n	8001a70 <HAL_RCC_OscConfig+0x3a4>
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000
 8001a08:	fffeffff 	.word	0xfffeffff
 8001a0c:	fffbffff 	.word	0xfffbffff
 8001a10:	40007000 	.word	0x40007000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x36a>
 8001a1c:	4bca      	ldr	r3, [pc, #808]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	4bc9      	ldr	r3, [pc, #804]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	438a      	bics	r2, r1
 8001a26:	621a      	str	r2, [r3, #32]
 8001a28:	4bc7      	ldr	r3, [pc, #796]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	6a1a      	ldr	r2, [r3, #32]
 8001a2c:	4bc6      	ldr	r3, [pc, #792]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a2e:	2104      	movs	r1, #4
 8001a30:	438a      	bics	r2, r1
 8001a32:	621a      	str	r2, [r3, #32]
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x3a4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x38c>
 8001a3e:	4bc2      	ldr	r3, [pc, #776]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	4bc1      	ldr	r3, [pc, #772]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	2104      	movs	r1, #4
 8001a46:	430a      	orrs	r2, r1
 8001a48:	621a      	str	r2, [r3, #32]
 8001a4a:	4bbf      	ldr	r3, [pc, #764]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	4bbe      	ldr	r3, [pc, #760]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	621a      	str	r2, [r3, #32]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x3a4>
 8001a58:	4bbb      	ldr	r3, [pc, #748]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
 8001a5c:	4bba      	ldr	r3, [pc, #744]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	438a      	bics	r2, r1
 8001a62:	621a      	str	r2, [r3, #32]
 8001a64:	4bb8      	ldr	r3, [pc, #736]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	6a1a      	ldr	r2, [r3, #32]
 8001a68:	4bb7      	ldr	r3, [pc, #732]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d014      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fb94 	bl	80011a4 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fb8f 	bl	80011a4 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4aaf      	ldr	r2, [pc, #700]	@ (8001d4c <HAL_RCC_OscConfig+0x680>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e19a      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	4bac      	ldr	r3, [pc, #688]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x3b6>
 8001aa0:	e013      	b.n	8001aca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fb7f 	bl	80011a4 <HAL_GetTick>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff fb7a 	bl	80011a4 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4aa5      	ldr	r2, [pc, #660]	@ (8001d4c <HAL_RCC_OscConfig+0x680>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e185      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aca:	231f      	movs	r3, #31
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	4b9b      	ldr	r3, [pc, #620]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	499d      	ldr	r1, [pc, #628]	@ (8001d50 <HAL_RCC_OscConfig+0x684>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d12a      	bne.n	8001b48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001af2:	4b95      	ldr	r3, [pc, #596]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af6:	4b94      	ldr	r3, [pc, #592]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001af8:	2104      	movs	r1, #4
 8001afa:	430a      	orrs	r2, r1
 8001afc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001afe:	4b92      	ldr	r3, [pc, #584]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b02:	4b91      	ldr	r3, [pc, #580]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	430a      	orrs	r2, r1
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fb4b 	bl	80011a4 <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b14:	f7ff fb46 	bl	80011a4 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e152      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b26:	4b88      	ldr	r3, [pc, #544]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0f1      	beq.n	8001b14 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b30:	4b85      	ldr	r3, [pc, #532]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b34:	22f8      	movs	r2, #248	@ 0xf8
 8001b36:	4393      	bics	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	00da      	lsls	r2, r3, #3
 8001b40:	4b81      	ldr	r3, [pc, #516]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b46:	e034      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	3305      	adds	r3, #5
 8001b4e:	d111      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b50:	4b7d      	ldr	r3, [pc, #500]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b54:	4b7c      	ldr	r3, [pc, #496]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b56:	2104      	movs	r1, #4
 8001b58:	438a      	bics	r2, r1
 8001b5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b5c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	22f8      	movs	r2, #248	@ 0xf8
 8001b62:	4393      	bics	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	00da      	lsls	r2, r3, #3
 8001b6c:	4b76      	ldr	r3, [pc, #472]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b72:	e01e      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b74:	4b74      	ldr	r3, [pc, #464]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b78:	4b73      	ldr	r3, [pc, #460]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b80:	4b71      	ldr	r3, [pc, #452]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b84:	4b70      	ldr	r3, [pc, #448]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	438a      	bics	r2, r1
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fb0a 	bl	80011a4 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b96:	f7ff fb05 	bl	80011a4 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e111      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ba8:	4b67      	ldr	r3, [pc, #412]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d1f1      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d05c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bbc:	4b62      	ldr	r3, [pc, #392]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d00e      	beq.n	8001be6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bc8:	4b5f      	ldr	r3, [pc, #380]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	220c      	movs	r2, #12
 8001bce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d114      	bne.n	8001bfe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001bd4:	4b5c      	ldr	r3, [pc, #368]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	23c0      	movs	r3, #192	@ 0xc0
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	401a      	ands	r2, r3
 8001bde:	23c0      	movs	r3, #192	@ 0xc0
 8001be0:	025b      	lsls	r3, r3, #9
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001be6:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	029b      	lsls	r3, r3, #10
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d040      	beq.n	8001c74 <HAL_RCC_OscConfig+0x5a8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d03c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0e6      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c06:	4b50      	ldr	r3, [pc, #320]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c0c:	2180      	movs	r1, #128	@ 0x80
 8001c0e:	0249      	lsls	r1, r1, #9
 8001c10:	430a      	orrs	r2, r1
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fac6 	bl	80011a4 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1e:	f7ff fac1 	bl	80011a4 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0cd      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c30:	4b45      	ldr	r3, [pc, #276]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x552>
 8001c3c:	e01b      	b.n	8001c76 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c3e:	4b42      	ldr	r3, [pc, #264]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c42:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c44:	4943      	ldr	r1, [pc, #268]	@ (8001d54 <HAL_RCC_OscConfig+0x688>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff faab 	bl	80011a4 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c54:	f7ff faa6 	bl	80011a4 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0b2      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c66:	4b38      	ldr	r3, [pc, #224]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x588>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c74:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d100      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5b4>
 8001c7e:	e0a4      	b.n	8001dca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c80:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	220c      	movs	r2, #12
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d100      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5c2>
 8001c8c:	e078      	b.n	8001d80 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d14c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b2c      	ldr	r3, [pc, #176]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001c9c:	492e      	ldr	r1, [pc, #184]	@ (8001d58 <HAL_RCC_OscConfig+0x68c>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fa7f 	bl	80011a4 <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fa7a 	bl	80011a4 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e086      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	049b      	lsls	r3, r3, #18
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cce:	220f      	movs	r2, #15
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_RCC_OscConfig+0x690>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001cfe:	2180      	movs	r1, #128	@ 0x80
 8001d00:	0449      	lsls	r1, r1, #17
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa4d 	bl	80011a4 <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff fa48 	bl	80011a4 <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e054      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	049b      	lsls	r3, r3, #18
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x644>
 8001d2e:	e04c      	b.n	8001dca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <HAL_RCC_OscConfig+0x67c>)
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <HAL_RCC_OscConfig+0x68c>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fa32 	bl	80011a4 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x6a6>
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	00001388 	.word	0x00001388
 8001d50:	efffffff 	.word	0xefffffff
 8001d54:	fffeffff 	.word	0xfffeffff
 8001d58:	feffffff 	.word	0xfeffffff
 8001d5c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff fa20 	bl	80011a4 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e02c      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_RCC_OscConfig+0x708>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	@ 0x80
 8001d78:	049b      	lsls	r3, r3, #18
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x694>
 8001d7e:	e024      	b.n	8001dca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e01f      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_RCC_OscConfig+0x708>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_RCC_OscConfig+0x708>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	23c0      	movs	r3, #192	@ 0xc0
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10e      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	220f      	movs	r2, #15
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	23f0      	movs	r3, #240	@ 0xf0
 8001dba:	039b      	lsls	r3, r3, #14
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b008      	add	sp, #32
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0bf      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b61      	ldr	r3, [pc, #388]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d911      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4393      	bics	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0c:	4b59      	ldr	r3, [pc, #356]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0a6      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2202      	movs	r2, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d015      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d006      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e32:	4b51      	ldr	r3, [pc, #324]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4b50      	ldr	r3, [pc, #320]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001e38:	21e0      	movs	r1, #224	@ 0xe0
 8001e3a:	00c9      	lsls	r1, r1, #3
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b4d      	ldr	r3, [pc, #308]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	22f0      	movs	r2, #240	@ 0xf0
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d04c      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b44      	ldr	r3, [pc, #272]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d120      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e07a      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	049b      	lsls	r3, r3, #18
 8001e86:	4013      	ands	r3, r2
 8001e88:	d114      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06e      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e96:	4b38      	ldr	r3, [pc, #224]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e062      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	4b34      	ldr	r3, [pc, #208]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e05b      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f96c 	bl	80011a4 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7ff f967 	bl	80011a4 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a27      	ldr	r2, [pc, #156]	@ (8001f7c <HAL_RCC_ClockConfig+0x1a4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e042      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	220c      	movs	r2, #12
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1ec      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d211      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_RCC_ClockConfig+0x19c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4013      	ands	r3, r2
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e020      	b.n	8001f6c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_RCC_ClockConfig+0x1a8>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f48:	f000 f820 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4c:	0001      	movs	r1, r0
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_RCC_ClockConfig+0x1a0>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	220f      	movs	r2, #15
 8001f56:	4013      	ands	r3, r2
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_RCC_ClockConfig+0x1ac>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	40da      	lsrs	r2, r3
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_RCC_ClockConfig+0x1b0>)
 8001f62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f7ff f8d7 	bl	8001118 <HAL_InitTick>
  
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	00001388 	.word	0x00001388
 8001f80:	fffff8ff 	.word	0xfffff8ff
 8001f84:	08002744 	.word	0x08002744
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	220c      	movs	r2, #12
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d046      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0xb8>
 8001fb6:	d848      	bhi.n	800204a <HAL_RCC_GetSysClockFreq+0xbe>
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d002      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d003      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x3c>
 8001fc0:	e043      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc2:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fc4:	613b      	str	r3, [r7, #16]
      break;
 8001fc6:	e043      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	220f      	movs	r2, #15
 8001fce:	4013      	ands	r3, r2
 8001fd0:	4a24      	ldr	r2, [pc, #144]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	220f      	movs	r2, #15
 8001fdc:	4013      	ands	r3, r2
 8001fde:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	23c0      	movs	r3, #192	@ 0xc0
 8001fe8:	025b      	lsls	r3, r3, #9
 8001fea:	401a      	ands	r2, r3
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d109      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	481a      	ldr	r0, [pc, #104]	@ (8002060 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ff8:	f7fe f886 	bl	8000108 <__udivsi3>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	001a      	movs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4353      	muls	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e01a      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	23c0      	movs	r3, #192	@ 0xc0
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	401a      	ands	r2, r3
 8002010:	23c0      	movs	r3, #192	@ 0xc0
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	429a      	cmp	r2, r3
 8002016:	d109      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	4814      	ldr	r0, [pc, #80]	@ (800206c <HAL_RCC_GetSysClockFreq+0xe0>)
 800201c:	f7fe f874 	bl	8000108 <__udivsi3>
 8002020:	0003      	movs	r3, r0
 8002022:	001a      	movs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4353      	muls	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e008      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	480c      	ldr	r0, [pc, #48]	@ (8002060 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002030:	f7fe f86a 	bl	8000108 <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	001a      	movs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4353      	muls	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	613b      	str	r3, [r7, #16]
      break;
 8002042:	e005      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002046:	613b      	str	r3, [r7, #16]
      break;
 8002048:	e002      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_RCC_GetSysClockFreq+0xd4>)
 800204c:	613b      	str	r3, [r7, #16]
      break;
 800204e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002050:	693b      	ldr	r3, [r7, #16]
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b006      	add	sp, #24
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	007a1200 	.word	0x007a1200
 8002064:	08002754 	.word	0x08002754
 8002068:	08002764 	.word	0x08002764
 800206c:	02dc6c00 	.word	0x02dc6c00

08002070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e042      	b.n	8002108 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223d      	movs	r2, #61	@ 0x3d
 8002086:	5c9b      	ldrb	r3, [r3, r2]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d107      	bne.n	800209e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	223c      	movs	r2, #60	@ 0x3c
 8002092:	2100      	movs	r1, #0
 8002094:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f7fe ffc5 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	223d      	movs	r2, #61	@ 0x3d
 80020a2:	2102      	movs	r1, #2
 80020a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	0019      	movs	r1, r3
 80020b0:	0010      	movs	r0, r2
 80020b2:	f000 f94b 	bl	800234c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2246      	movs	r2, #70	@ 0x46
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	223e      	movs	r2, #62	@ 0x3e
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	223f      	movs	r2, #63	@ 0x3f
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2240      	movs	r2, #64	@ 0x40
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2241      	movs	r2, #65	@ 0x41
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2242      	movs	r2, #66	@ 0x42
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2243      	movs	r2, #67	@ 0x43
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2244      	movs	r2, #68	@ 0x44
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2245      	movs	r2, #69	@ 0x45
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223d      	movs	r2, #61	@ 0x3d
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	223d      	movs	r2, #61	@ 0x3d
 800211c:	5c9b      	ldrb	r3, [r3, r2]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d001      	beq.n	8002128 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e033      	b.n	8002190 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	223d      	movs	r2, #61	@ 0x3d
 800212c:	2102      	movs	r1, #2
 800212e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <HAL_TIM_Base_Start+0x88>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00f      	beq.n	800215a <HAL_TIM_Base_Start+0x4a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	429a      	cmp	r2, r3
 8002144:	d009      	beq.n	800215a <HAL_TIM_Base_Start+0x4a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a14      	ldr	r2, [pc, #80]	@ (800219c <HAL_TIM_Base_Start+0x8c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_TIM_Base_Start+0x4a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <HAL_TIM_Base_Start+0x90>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d111      	bne.n	800217e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2207      	movs	r2, #7
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b06      	cmp	r3, #6
 800216a:	d010      	beq.n	800218e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217c:	e007      	b.n	800218e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40012c00 	.word	0x40012c00
 800219c:	40000400 	.word	0x40000400
 80021a0:	40014000 	.word	0x40014000

080021a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ae:	230f      	movs	r3, #15
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223c      	movs	r2, #60	@ 0x3c
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x20>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0bc      	b.n	800233e <HAL_TIM_ConfigClockSource+0x19a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	223c      	movs	r2, #60	@ 0x3c
 80021c8:	2101      	movs	r1, #1
 80021ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	223d      	movs	r2, #61	@ 0x3d
 80021d0:	2102      	movs	r1, #2
 80021d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2277      	movs	r2, #119	@ 0x77
 80021e0:	4393      	bics	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_TIM_ConfigClockSource+0x1a4>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	0192      	lsls	r2, r2, #6
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d040      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xde>
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	0192      	lsls	r2, r2, #6
 8002204:	4293      	cmp	r3, r2
 8002206:	d900      	bls.n	800220a <HAL_TIM_ConfigClockSource+0x66>
 8002208:	e088      	b.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	0152      	lsls	r2, r2, #5
 800220e:	4293      	cmp	r3, r2
 8002210:	d100      	bne.n	8002214 <HAL_TIM_ConfigClockSource+0x70>
 8002212:	e088      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x182>
 8002214:	2280      	movs	r2, #128	@ 0x80
 8002216:	0152      	lsls	r2, r2, #5
 8002218:	4293      	cmp	r3, r2
 800221a:	d900      	bls.n	800221e <HAL_TIM_ConfigClockSource+0x7a>
 800221c:	e07e      	b.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 800221e:	2b70      	cmp	r3, #112	@ 0x70
 8002220:	d018      	beq.n	8002254 <HAL_TIM_ConfigClockSource+0xb0>
 8002222:	d900      	bls.n	8002226 <HAL_TIM_ConfigClockSource+0x82>
 8002224:	e07a      	b.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 8002226:	2b60      	cmp	r3, #96	@ 0x60
 8002228:	d04f      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x126>
 800222a:	d900      	bls.n	800222e <HAL_TIM_ConfigClockSource+0x8a>
 800222c:	e076      	b.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 800222e:	2b50      	cmp	r3, #80	@ 0x50
 8002230:	d03b      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x106>
 8002232:	d900      	bls.n	8002236 <HAL_TIM_ConfigClockSource+0x92>
 8002234:	e072      	b.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 8002236:	2b40      	cmp	r3, #64	@ 0x40
 8002238:	d057      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x146>
 800223a:	d900      	bls.n	800223e <HAL_TIM_ConfigClockSource+0x9a>
 800223c:	e06e      	b.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 800223e:	2b30      	cmp	r3, #48	@ 0x30
 8002240:	d063      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x166>
 8002242:	d86b      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 8002244:	2b20      	cmp	r3, #32
 8002246:	d060      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x166>
 8002248:	d868      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x178>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d05d      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x166>
 800224e:	2b10      	cmp	r3, #16
 8002250:	d05b      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x166>
 8002252:	e063      	b.n	800231c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002264:	f000 f97a 	bl	800255c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2277      	movs	r2, #119	@ 0x77
 8002274:	4313      	orrs	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e052      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002292:	f000 f963 	bl	800255c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2180      	movs	r1, #128	@ 0x80
 80022a2:	01c9      	lsls	r1, r1, #7
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
      break;
 80022a8:	e03e      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b6:	001a      	movs	r2, r3
 80022b8:	f000 f8d6 	bl	8002468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2150      	movs	r1, #80	@ 0x50
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f930 	bl	8002528 <TIM_ITRx_SetConfig>
      break;
 80022c8:	e02e      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022d6:	001a      	movs	r2, r3
 80022d8:	f000 f8f4 	bl	80024c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2160      	movs	r1, #96	@ 0x60
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f920 	bl	8002528 <TIM_ITRx_SetConfig>
      break;
 80022e8:	e01e      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f6:	001a      	movs	r2, r3
 80022f8:	f000 f8b6 	bl	8002468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2140      	movs	r1, #64	@ 0x40
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f910 	bl	8002528 <TIM_ITRx_SetConfig>
      break;
 8002308:	e00e      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0019      	movs	r1, r3
 8002314:	0010      	movs	r0, r2
 8002316:	f000 f907 	bl	8002528 <TIM_ITRx_SetConfig>
      break;
 800231a:	e005      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800231c:	230f      	movs	r3, #15
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
      break;
 8002324:	e000      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002326:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	223d      	movs	r2, #61	@ 0x3d
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	223c      	movs	r2, #60	@ 0x3c
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

  return status;
 8002338:	230f      	movs	r3, #15
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	781b      	ldrb	r3, [r3, #0]
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	ffff00ff 	.word	0xffff00ff

0800234c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3b      	ldr	r2, [pc, #236]	@ (800244c <TIM_Base_SetConfig+0x100>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d008      	beq.n	8002376 <TIM_Base_SetConfig+0x2a>
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	429a      	cmp	r2, r3
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0x2a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a37      	ldr	r2, [pc, #220]	@ (8002450 <TIM_Base_SetConfig+0x104>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2270      	movs	r2, #112	@ 0x70
 800237a:	4393      	bics	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a30      	ldr	r2, [pc, #192]	@ (800244c <TIM_Base_SetConfig+0x100>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d018      	beq.n	80023c2 <TIM_Base_SetConfig+0x76>
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	05db      	lsls	r3, r3, #23
 8002396:	429a      	cmp	r2, r3
 8002398:	d013      	beq.n	80023c2 <TIM_Base_SetConfig+0x76>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <TIM_Base_SetConfig+0x104>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00f      	beq.n	80023c2 <TIM_Base_SetConfig+0x76>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002454 <TIM_Base_SetConfig+0x108>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0x76>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002458 <TIM_Base_SetConfig+0x10c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0x76>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a29      	ldr	r2, [pc, #164]	@ (800245c <TIM_Base_SetConfig+0x110>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0x76>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <TIM_Base_SetConfig+0x114>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d108      	bne.n	80023d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <TIM_Base_SetConfig+0x118>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2280      	movs	r2, #128	@ 0x80
 80023d8:	4393      	bics	r3, r2
 80023da:	001a      	movs	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a13      	ldr	r2, [pc, #76]	@ (800244c <TIM_Base_SetConfig+0x100>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00b      	beq.n	800241a <TIM_Base_SetConfig+0xce>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a14      	ldr	r2, [pc, #80]	@ (8002458 <TIM_Base_SetConfig+0x10c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <TIM_Base_SetConfig+0xce>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a13      	ldr	r2, [pc, #76]	@ (800245c <TIM_Base_SetConfig+0x110>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d003      	beq.n	800241a <TIM_Base_SetConfig+0xce>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <TIM_Base_SetConfig+0x114>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d103      	bne.n	8002422 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2201      	movs	r2, #1
 800242e:	4013      	ands	r3, r2
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2201      	movs	r2, #1
 800243a:	4393      	bics	r3, r2
 800243c:	001a      	movs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]
  }
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400
 8002454:	40002000 	.word	0x40002000
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800
 8002464:	fffffcff 	.word	0xfffffcff

08002468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	2201      	movs	r2, #1
 8002480:	4393      	bics	r3, r2
 8002482:	001a      	movs	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	22f0      	movs	r2, #240	@ 0xf0
 8002492:	4393      	bics	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	220a      	movs	r2, #10
 80024a4:	4393      	bics	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	621a      	str	r2, [r3, #32]
}
 80024bc:	46c0      	nop			@ (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b006      	add	sp, #24
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	2210      	movs	r2, #16
 80024dc:	4393      	bics	r3, r2
 80024de:	001a      	movs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <TIM_TI2_ConfigInputStage+0x60>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	031b      	lsls	r3, r3, #12
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	22a0      	movs	r2, #160	@ 0xa0
 8002500:	4393      	bics	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	621a      	str	r2, [r3, #32]
}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b006      	add	sp, #24
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	ffff0fff 	.word	0xffff0fff

08002528 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2270      	movs	r2, #112	@ 0x70
 800253c:	4393      	bics	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	2207      	movs	r2, #7
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	609a      	str	r2, [r3, #8]
}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b004      	add	sp, #16
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <TIM_ETR_SetConfig+0x3c>)
 8002574:	4013      	ands	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	021a      	lsls	r2, r3, #8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	431a      	orrs	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	609a      	str	r2, [r3, #8]
}
 8002590:	46c0      	nop			@ (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b006      	add	sp, #24
 8002596:	bd80      	pop	{r7, pc}
 8002598:	ffff00ff 	.word	0xffff00ff

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	223c      	movs	r2, #60	@ 0x3c
 80025aa:	5c9b      	ldrb	r3, [r3, r2]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e047      	b.n	8002644 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	223c      	movs	r2, #60	@ 0x3c
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	223d      	movs	r2, #61	@ 0x3d
 80025c0:	2102      	movs	r1, #2
 80025c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2270      	movs	r2, #112	@ 0x70
 80025d8:	4393      	bics	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00f      	beq.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	05db      	lsls	r3, r3, #23
 8002600:	429a      	cmp	r2, r3
 8002602:	d009      	beq.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a11      	ldr	r2, [pc, #68]	@ (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a10      	ldr	r2, [pc, #64]	@ (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d10c      	bne.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	4393      	bics	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	4313      	orrs	r3, r2
 8002628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	223d      	movs	r2, #61	@ 0x3d
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223c      	movs	r2, #60	@ 0x3c
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400
 8002654:	40014000 	.word	0x40014000

08002658 <memset>:
 8002658:	0003      	movs	r3, r0
 800265a:	1882      	adds	r2, r0, r2
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	7019      	strb	r1, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <__libc_init_array>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	2600      	movs	r6, #0
 800266c:	4c0c      	ldr	r4, [pc, #48]	@ (80026a0 <__libc_init_array+0x38>)
 800266e:	4d0d      	ldr	r5, [pc, #52]	@ (80026a4 <__libc_init_array+0x3c>)
 8002670:	1b64      	subs	r4, r4, r5
 8002672:	10a4      	asrs	r4, r4, #2
 8002674:	42a6      	cmp	r6, r4
 8002676:	d109      	bne.n	800268c <__libc_init_array+0x24>
 8002678:	2600      	movs	r6, #0
 800267a:	f000 f819 	bl	80026b0 <_init>
 800267e:	4c0a      	ldr	r4, [pc, #40]	@ (80026a8 <__libc_init_array+0x40>)
 8002680:	4d0a      	ldr	r5, [pc, #40]	@ (80026ac <__libc_init_array+0x44>)
 8002682:	1b64      	subs	r4, r4, r5
 8002684:	10a4      	asrs	r4, r4, #2
 8002686:	42a6      	cmp	r6, r4
 8002688:	d105      	bne.n	8002696 <__libc_init_array+0x2e>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	00b3      	lsls	r3, r6, #2
 800268e:	58eb      	ldr	r3, [r5, r3]
 8002690:	4798      	blx	r3
 8002692:	3601      	adds	r6, #1
 8002694:	e7ee      	b.n	8002674 <__libc_init_array+0xc>
 8002696:	00b3      	lsls	r3, r6, #2
 8002698:	58eb      	ldr	r3, [r5, r3]
 800269a:	4798      	blx	r3
 800269c:	3601      	adds	r6, #1
 800269e:	e7f2      	b.n	8002686 <__libc_init_array+0x1e>
 80026a0:	08002774 	.word	0x08002774
 80026a4:	08002774 	.word	0x08002774
 80026a8:	08002778 	.word	0x08002778
 80026ac:	08002774 	.word	0x08002774

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
